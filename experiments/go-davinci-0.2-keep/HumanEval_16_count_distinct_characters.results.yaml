language: go_test.go
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] += 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi6_pa0j5_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi6_pa0j5_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi6_pa0j5_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int = 0\n    var myMap map[string]int = make(map[string]int)\n\
    \    for _, char := range myString {\n        myMap[string(char)] = 1\n    }\n\
    \    for _, _ = range myMap {\n        count++\n    }\n    return count\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpzbksgria_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpzbksgria_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpzbksgria_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctCharacters = make(map[rune]bool)\n    for _,\
    \ character := range myString {\n        distinctCharacters[character] = true\n\
    \    }\n    return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyfaenv0c_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyfaenv0c_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyfaenv0c_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var charMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        charMap[char] = 1\n    }\n    return len(charMap)\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpljs2r6bm_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpljs2r6bm_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpljs2r6bm_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpp99_0d8j_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpp99_0d8j_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpp99_0d8j_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int = 0\n    var myMap map[string]int = make(map[string]int)\n\
    \    for _, char := range myString {\n        myMap[string(char)] = 1\n    }\n\
    \    for _, _ = range myMap {\n        count++\n    }\n    return count\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpzbksgria_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpzbksgria_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpzbksgria_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 0\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp46nkaezo_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp46nkaezo_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp46nkaezo_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmp3soqo4wu_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmp3soqo4wu_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmp3soqo4wu_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmp3soqo4wu_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        myMap[char] = true\n    }\n    return len(myMap)\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpniif0_oq_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpniif0_oq_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpniif0_oq_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var charMap = make(map[rune]bool)\n  \
    \  for _, char := range myString {\n        charMap[char] = true\n    }\n    for\
    \ _, _ = range charMap {\n        count++\n    }\n    return count\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpg9mmw8iy_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpg9mmw8iy_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpg9mmw8iy_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var myMap map[rune]int\n    myMap = make(map[rune]int)\n\
    \    for _, char := range myString {\n        myMap[char]++\n    }\n    for _,\
    \ value := range myMap {\n        if value > 0 {\n            count++\n      \
    \  }\n    }\n    return count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp66x4xva7_test.go:45: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp66x4xva7_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp66x4xva7_test.go:45: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctChars = make(map[rune]int)\n    for _, char :=\
    \ range myString {\n        distinctChars[char] = 0\n    }\n    return len(distinctChars)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpmp8rw16y_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpmp8rw16y_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpmp8rw16y_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // convert string to lowercase\n    myString = strings.ToLower(myString)\n\
    \    // create a map to store the characters\n    myMap := make(map[string]int)\n\
    \    // loop through the string and add the characters to the map\n    for _,\
    \ char := range myString {\n        myMap[string(char)] = 1\n    }\n    // return\
    \ the length of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0r1n9nui_test.go:15:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075224
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var charMap = make(map[string]int)\n \
    \   for _, char := range myString {\n        charMap[string(char)] = 1\n    }\n\
    \    for _, _ = range charMap {\n        count++\n    }\n    return count\n}\n\
    \nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpvgi_kqru_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpvgi_kqru_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpvgi_kqru_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // create a map of characters\n    // iterate through the\
    \ string\n    // if the character is not in the map, add it\n    // return the\
    \ length of the map\n    charMap := make(map[string]bool)\n    for _, char :=\
    \ range myString {\n        charMap[string(char)] = true\n    }\n    return len(charMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpgcv7v_f9_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpgcv7v_f9_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpgcv7v_f9_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var myMap map[rune]int\n    myMap = make(map[rune]int)\n\
    \    for _, char := range myString {\n        myMap[char]++\n    }\n    for _,\
    \ value := range myMap {\n        if value > 0 {\n            count++\n      \
    \  }\n    }\n    return count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp66x4xva7_test.go:45: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp66x4xva7_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp66x4xva7_test.go:45: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        myMap[char] = true\n    }\n    return len(myMap)\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpniif0_oq_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpniif0_oq_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpniif0_oq_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctCharacters = make(map[rune]bool)\n    for _,\
    \ character := range myString {\n        distinctCharacters[character] = true\n\
    \    }\n    return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyfaenv0c_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyfaenv0c_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyfaenv0c_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var charMap = make(map[rune]bool)\n  \
    \  for _, char := range myString {\n        if _, ok := charMap[char]; !ok {\n\
    \            charMap[char] = true\n            count++\n        }\n    }\n   \
    \ return count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpxcc25tmr_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpxcc25tmr_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpxcc25tmr_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpp99_0d8j_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpp99_0d8j_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpp99_0d8j_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int = 0\n    var charMap map[string]int = make(map[string]int)\n\
    \    for _, char := range myString {\n        charMap[string(char)] = 1\n    }\n\
    \    for _, _ = range charMap {\n        count++\n    }\n    return count\n}\n\
    \nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyir25ld0_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyir25ld0_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyir25ld0_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmplzknscyi_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmplzknscyi_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmplzknscyi_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmplzknscyi_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmph78ub8yl_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmph78ub8yl_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmph78ub8yl_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmph78ub8yl_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctCharacters = make(map[rune]bool)\n    for _,\
    \ char := range myString {\n        distinctCharacters[char] = true\n    }\n \
    \   return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi01psg4__test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi01psg4__test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi01psg4__test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var charMap = make(map[rune]bool)\n  \
    \  for _, char := range myString {\n        if _, ok := charMap[char]; !ok {\n\
    \            charMap[char] = true\n            count++\n        }\n    }\n   \
    \ return count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpxcc25tmr_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpxcc25tmr_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpxcc25tmr_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmp3soqo4wu_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmp3soqo4wu_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmp3soqo4wu_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmp3soqo4wu_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var charMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        charMap[char] = 1\n    }\n    return len(charMap)\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpljs2r6bm_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpljs2r6bm_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpljs2r6bm_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var myMap map[string]int\n    myMap =\
    \ make(map[string]int)\n    for _, char := range myString {\n        myMap[string(char)]\
    \ = 1\n    }\n    for _, _ = range myMap {\n        count++\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmprlvuu8ja_test.go:43: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmprlvuu8ja_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmprlvuu8ja_test.go:43: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, c := range myString\
    \ {\n        myMap[c] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpa_hkaw4w_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpa_hkaw4w_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpa_hkaw4w_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctCharacters map[string]int\n    distinctCharacters\
    \ = make(map[string]int)\n    for _, character := range myString {\n        distinctCharacters[string(character)]\
    \ = 1\n    }\n    return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpo3m4emsg_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpo3m4emsg_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpo3m4emsg_test.go:39: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075226
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var charMap = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        charMap[char] = true\n    }\n    return len(charMap)\n}\n\
    \nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp8u4j1yhf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp8u4j1yhf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp8u4j1yhf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctCharacters int = 0\n    var characters map[string]int\
    \ = make(map[string]int)\n\n    for _, character := range myString {\n       \
    \ characters[string(character)] += 1\n    }\n\n    for _, count := range characters\
    \ {\n        if count == 1 {\n            distinctCharacters += 1\n        }\n\
    \    }\n\n    return distinctCharacters\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmpf3kjym81_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmpf3kjym81_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075227
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var charMap = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        charMap[char] = true\n    }\n    return len(charMap)\n}\n\
    \nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp8u4j1yhf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp8u4j1yhf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp8u4j1yhf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var charMap = make(map[rune]int)\n   \
    \ for _, char := range myString {\n        charMap[char] = 1\n    }\n    for _,\
    \ _ = range charMap {\n        count++\n    }\n    return count\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpitstq5e1_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpitstq5e1_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpitstq5e1_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int = 0\n    var myMap map[string]int = make(map[string]int)\n\
    \    for _, char := range myString {\n        if _, ok := myMap[string(char)];\
    \ !ok {\n            myMap[string(char)] = 1\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmptlkst2h8_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmptlkst2h8_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmptlkst2h8_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // TODO: implement me\n    return 0\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmpe4_ermkp_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmpe4_ermkp_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmpe4_ermkp_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmpe4_ermkp_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        myMap[char] = true\n    }\n    return len(myMap)\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpniif0_oq_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpniif0_oq_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpniif0_oq_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int = 0\n    var charMap map[rune]int = make(map[rune]int)\n\
    \    for _, char := range myString {\n        if _, ok := charMap[char]; !ok {\n\
    \            charMap[char] = 1\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpmevfqai3_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpmevfqai3_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpmevfqai3_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var counter int = 0\n    var myMap map[string]int = make(map[string]int)\n\
    \    for _, char := range myString {\n        myMap[string(char)] = 1\n    }\n\
    \    for _, _ = range myMap {\n        counter += 1\n    }\n    return counter\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpok6kb_iv_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpok6kb_iv_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpok6kb_iv_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int = 0\n    var myMap map[string]int = make(map[string]int)\n\
    \    for _, char := range myString {\n        myMap[string(char)] = 1\n    }\n\
    \    for _, _ = range myMap {\n        count += 1\n    }\n    return count\n}\n\
    \nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp2kvkkpvd_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp2kvkkpvd_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp2kvkkpvd_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctCharacters = make(map[rune]bool)\n    for _,\
    \ char := range myString {\n        distinctCharacters[char] = true\n    }\n \
    \   return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi01psg4__test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi01psg4__test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi01psg4__test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var charMap map[rune]bool\n    charMap\
    \ = make(map[rune]bool)\n    for _, char := range myString {\n        if _, ok\
    \ := charMap[char]; !ok {\n            charMap[char] = true\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp1n9opg_n_test.go:43: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp1n9opg_n_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp1n9opg_n_test.go:43: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // TODO: implement me\n    return 0\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmpe4_ermkp_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmpe4_ermkp_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmpe4_ermkp_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmpe4_ermkp_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    myMap := make(map[string]int)\n    for _, char := range myString\
    \ {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpxmt4ejbn_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpxmt4ejbn_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpxmt4ejbn_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] += 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi6_pa0j5_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi6_pa0j5_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi6_pa0j5_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int = 0\n    var charMap map[string]int = make(map[string]int)\n\
    \    for _, char := range myString {\n        charMap[string(char)] = 1\n    }\n\
    \    for _, _ = range charMap {\n        count += 1\n    }\n    return count\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpsn9ha85a_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpsn9ha85a_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpsn9ha85a_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinct_characters int = 0\n    var characters_seen\
    \ = make(map[string]bool)\n    for _, character := range myString {\n        if\
    \ _, ok := characters_seen[string(character)]; !ok {\n            characters_seen[string(character)]\
    \ = true\n            distinct_characters += 1\n        }\n    }\n    return distinct_characters\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpg4y9j2ys_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpg4y9j2ys_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpg4y9j2ys_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var myMap map[string]int\n    myMap =\
    \ make(map[string]int)\n    for _, char := range myString {\n        myMap[string(char)]\
    \ = 1\n    }\n    for _, _ = range myMap {\n        count++\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmprlvuu8ja_test.go:43: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmprlvuu8ja_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmprlvuu8ja_test.go:43: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctCharacters []string\n    for _, char := range\
    \ myString {\n        if !contains(distinctCharacters, string(char)) {\n     \
    \       distinctCharacters = append(distinctCharacters, string(char))\n      \
    \  }\n    }\n    return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmply52em9x_test.go:16:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075227
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 0\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp46nkaezo_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp46nkaezo_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp46nkaezo_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int = 0\n    var myMap map[string]int = make(map[string]int)\n\
    \    for _, char := range myString {\n        myMap[string(char)] = 1\n    }\n\
    \    for _, _ = range myMap {\n        count++\n    }\n    return count\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpzbksgria_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpzbksgria_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpzbksgria_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var charMap = make(map[rune]int)\n   \
    \ for _, char := range myString {\n        if _, ok := charMap[char]; !ok {\n\
    \            charMap[char] = 1\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpitsgk9d7_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpitsgk9d7_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpitsgk9d7_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmph78ub8yl_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmph78ub8yl_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmph78ub8yl_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmph78ub8yl_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var myMap map[string]int\n    myMap =\
    \ make(map[string]int)\n    for _, char := range myString {\n        myMap[string(char)]\
    \ = 1\n    }\n    for _, _ = range myMap {\n        count++\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmprlvuu8ja_test.go:43: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmprlvuu8ja_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmprlvuu8ja_test.go:43: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var myMap map[string]int\n    myMap =\
    \ make(map[string]int)\n    for _, char := range myString {\n        myMap[string(char)]\
    \ = 1\n    }\n    for _, _ = range myMap {\n        count++\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmprlvuu8ja_test.go:43: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmprlvuu8ja_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmprlvuu8ja_test.go:43: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctChars = make(map[rune]bool)\n    for _, char\
    \ := range myString {\n        distinctChars[char] = true\n    }\n    return len(distinctChars)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpnzrqao3i_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpnzrqao3i_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpnzrqao3i_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var myMap map[string]int\n    myMap =\
    \ make(map[string]int)\n    for _, char := range myString {\n        myMap[string(char)]\
    \ = 1\n    }\n    for _, _ = range myMap {\n        count++\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmprlvuu8ja_test.go:43: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmprlvuu8ja_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmprlvuu8ja_test.go:43: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var charMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        charMap[char] = 1\n    }\n    return len(charMap)\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpljs2r6bm_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpljs2r6bm_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpljs2r6bm_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctCharCount int\n    var charMap = make(map[rune]bool)\n\
    \    for _, char := range myString {\n        if _, ok := charMap[char]; !ok {\n\
    \            charMap[char] = true\n            distinctCharCount++\n        }\n\
    \    }\n    return distinctCharCount\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpea2t4fq__test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpea2t4fq__test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpea2t4fq__test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctCharacters = make(map[rune]int)\n    for _, char\
    \ := range myString {\n        distinctCharacters[char] += 1\n    }\n    return\
    \ len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpy2_zyw5o_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpy2_zyw5o_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpy2_zyw5o_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int = 0\n    var myMap map[string]int = make(map[string]int)\n\
    \    for _, char := range myString {\n        myMap[string(char)] = 1\n    }\n\
    \    for _, _ = range myMap {\n        count++\n    }\n    return count\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpzbksgria_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpzbksgria_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpzbksgria_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        myMap[char] = true\n    }\n    return len(myMap)\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpniif0_oq_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpniif0_oq_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpniif0_oq_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinct_characters = make(map[rune]bool)\n    for _,\
    \ character := range myString {\n        distinct_characters[character] = true\n\
    \    }\n    return len(distinct_characters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpipv6r4u1_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpipv6r4u1_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpipv6r4u1_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmplzknscyi_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmplzknscyi_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmplzknscyi_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmplzknscyi_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var charMap = make(map[string]int)\n \
    \   for _, char := range myString {\n        charMap[string(char)] = 1\n    }\n\
    \    for _, _ = range charMap {\n        count += 1\n    }\n    return count\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp90nn87au_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp90nn87au_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp90nn87au_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int = 0\n    var charMap map[string]int = make(map[string]int)\n\
    \    for _, char := range myString {\n        charMap[string(char)] = 1\n    }\n\
    \    for _, _ = range charMap {\n        count++\n    }\n    return count\n}\n\
    \nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyir25ld0_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyir25ld0_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyir25ld0_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int = 0\n    var myMap map[string]int = make(map[string]int)\n\
    \    for _, char := range myString {\n        myMap[string(char)] = 1\n    }\n\
    \    for _, _ = range myMap {\n        count++\n    }\n    return count\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpzbksgria_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpzbksgria_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpzbksgria_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmph78ub8yl_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmph78ub8yl_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmph78ub8yl_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmph78ub8yl_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmph78ub8yl_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmph78ub8yl_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmph78ub8yl_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmph78ub8yl_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var charMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        charMap[char] = 1\n    }\n    return len(charMap)\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpljs2r6bm_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpljs2r6bm_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpljs2r6bm_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var charMap = make(map[string]int)\n \
    \   for _, char := range myString {\n        charMap[string(char)] = 1\n    }\n\
    \    for _, _ = range charMap {\n        count++\n    }\n    return count\n}\n\
    \nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpvgi_kqru_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpvgi_kqru_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpvgi_kqru_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int = 0\n    var charMap map[string]int = make(map[string]int)\n\
    \    for _, char := range myString {\n        if _, ok := charMap[string(char)];\
    \ !ok {\n            charMap[string(char)] = 1\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpohbfy_oj_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpohbfy_oj_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpohbfy_oj_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int = 0\n    var charMap map[string]int = make(map[string]int)\n\
    \    for _, char := range myString {\n        charMap[string(char)] = 1\n    }\n\
    \    for _, _ = range charMap {\n        count++\n    }\n    return count\n}\n\
    \nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpyir25ld0_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpyir25ld0_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpyir25ld0_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var myMap map[string]int\n    myMap =\
    \ make(map[string]int)\n    for _, char := range myString {\n        myMap[string(char)]\
    \ = 1\n    }\n    for _, _ = range myMap {\n        count++\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmprlvuu8ja_test.go:43: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmprlvuu8ja_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmprlvuu8ja_test.go:43: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        myMap[char] = true\n    }\n    return len(myMap)\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpniif0_oq_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpniif0_oq_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpniif0_oq_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        myMap[char] = true\n    }\n    return len(myMap)\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpniif0_oq_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpniif0_oq_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpniif0_oq_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmph78ub8yl_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmph78ub8yl_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmph78ub8yl_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmph78ub8yl_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var myMap map[rune]int\n    myMap = make(map[rune]int)\n\
    \    for _, char := range myString {\n        myMap[char] = 1\n    }\n    for\
    \ _, _ = range myMap {\n        count++\n    }\n    return count\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpjb73vnxo_test.go:43: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpjb73vnxo_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpjb73vnxo_test.go:43: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // TODO: implement me\n    return 0\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmpe4_ermkp_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmpe4_ermkp_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmpe4_ermkp_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmpe4_ermkp_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var charMap = make(map[rune]int)\n   \
    \ for _, char := range myString {\n        charMap[char] = 1\n    }\n    for _,\
    \ _ = range charMap {\n        count++\n    }\n    return count\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpitstq5e1_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpitstq5e1_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpitstq5e1_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctCharacters = make(map[rune]int)\n    for _, character\
    \ := range myString {\n        distinctCharacters[character] = 1\n    }\n    return\
    \ len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T)\
    \ {\n  candidate := count_distinct_characters\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected:\
    \ 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual:\
    \ candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry\
    \ jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpd9e5q7jv_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpd9e5q7jv_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpd9e5q7jv_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctChars = make(map[rune]bool)\n    for _, char\
    \ := range myString {\n        distinctChars[char] = true\n    }\n    return len(distinctChars)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpnzrqao3i_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpnzrqao3i_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpnzrqao3i_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        myMap[char] = true\n    }\n    return len(myMap)\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpniif0_oq_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpniif0_oq_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpniif0_oq_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 2
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // convert to lowercase\n    myString = strings.ToLower(myString)\n\
    \    // convert to a set\n    mySet := make(map[string]bool)\n    for _, char\
    \ := range myString {\n        mySet[string(char)] = true\n    }\n    return len(mySet)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxjsk57il_test.go:15:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var charMap = make(map[string]int)\n \
    \   for _, char := range myString {\n        charMap[string(char)] = 1\n    }\n\
    \    for _, _ = range charMap {\n        count++\n    }\n    return count\n}\n\
    \nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpvgi_kqru_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpvgi_kqru_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpvgi_kqru_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpp99_0d8j_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpp99_0d8j_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpp99_0d8j_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] += 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi6_pa0j5_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi6_pa0j5_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi6_pa0j5_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // create a map to store the characters\n    myMap := make(map[rune]int)\n\
    \    // iterate through the string\n    for _, char := range myString {\n    \
    \    // if the character is not in the map, add it\n        if _, ok := myMap[char];\
    \ !ok {\n            myMap[char] = 1\n        }\n    }\n    // return the length\
    \ of the map\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp3c0ycgnr_test.go:44: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp3c0ycgnr_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp3c0ycgnr_test.go:44: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int = 0\n    var myMap map[string]int = make(map[string]int)\n\
    \    for _, char := range myString {\n        myMap[string(char)] = 1\n    }\n\
    \    for _, _ = range myMap {\n        count++\n    }\n    return count\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpzbksgria_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpzbksgria_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpzbksgria_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var charMap = make(map[string]int)\n \
    \   for _, char := range myString {\n        charMap[string(char)] = 1\n    }\n\
    \    for _, _ = range charMap {\n        count++\n    }\n    return count\n}\n\
    \nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpvgi_kqru_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpvgi_kqru_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpvgi_kqru_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmpnedmyuvj_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmpnedmyuvj_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmpnedmyuvj_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmpnedmyuvj_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpp99_0d8j_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpp99_0d8j_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpp99_0d8j_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctCharCount int = 0\n    var charMap map[string]int\
    \ = make(map[string]int)\n    for _, char := range myString {\n        charMap[string(char)]\
    \ = 1\n    }\n    for _, _ = range charMap {\n        distinctCharCount++\n  \
    \  }\n    return distinctCharCount\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpxniw7efd_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpxniw7efd_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpxniw7efd_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpp99_0d8j_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpp99_0d8j_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpp99_0d8j_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmplzknscyi_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmplzknscyi_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmplzknscyi_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmplzknscyi_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var charMap = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        charMap[char] = true\n    }\n    return len(charMap)\n}\n\
    \nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp8u4j1yhf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp8u4j1yhf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp8u4j1yhf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var charMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        charMap[string(char)] = 1\n    }\n    return len(charMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpkipu0kxx_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpkipu0kxx_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpkipu0kxx_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int = 0\n    var myMap map[string]int = make(map[string]int)\n\
    \    for _, char := range myString {\n        myMap[string(char)] = 1\n    }\n\
    \    for _, _ = range myMap {\n        count += 1\n    }\n    return count\n}\n\
    \nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp2kvkkpvd_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp2kvkkpvd_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp2kvkkpvd_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctCharacters = make(map[rune]bool)\n    for _,\
    \ char := range myString {\n        distinctCharacters[char] = true\n    }\n \
    \   return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi01psg4__test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi01psg4__test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi01psg4__test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        myMap[char] = true\n    }\n    return len(myMap)\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpniif0_oq_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpniif0_oq_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpniif0_oq_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpp99_0d8j_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpp99_0d8j_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpp99_0d8j_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctCharacters = make(map[string]int)\n    for _,\
    \ character := range myString {\n        distinctCharacters[string(character)]\
    \ = 1\n    }\n    return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpllv3j6_5_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpllv3j6_5_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpllv3j6_5_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinct_characters = make(map[rune]bool)\n    for _,\
    \ character := range myString {\n        distinct_characters[character] = true\n\
    \    }\n    return len(distinct_characters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpipv6r4u1_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpipv6r4u1_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpipv6r4u1_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctCharacters = make(map[rune]bool)\n    for _,\
    \ char := range myString {\n        distinctCharacters[char] = true\n    }\n \
    \   return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi01psg4__test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi01psg4__test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi01psg4__test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpp99_0d8j_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpp99_0d8j_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpp99_0d8j_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        myMap[char] = true\n    }\n    return len(myMap)\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpniif0_oq_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpniif0_oq_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpniif0_oq_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char]++\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpp99_0d8j_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpp99_0d8j_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpp99_0d8j_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var charMap = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        charMap[char] = true\n    }\n    return len(charMap)\n}\n\
    \nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp8u4j1yhf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp8u4j1yhf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp8u4j1yhf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctCharacters = make(map[rune]bool)\n    for _,\
    \ char := range myString {\n        distinctCharacters[char] = true\n    }\n \
    \   return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi01psg4__test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi01psg4__test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi01psg4__test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var charMap map[string]int\n    charMap\
    \ = make(map[string]int)\n    for _, char := range myString {\n        charMap[string(char)]\
    \ = 1\n    }\n    for _, _ = range charMap {\n        count++\n    }\n    return\
    \ count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpqzhdkyk4_test.go:43: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpqzhdkyk4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpqzhdkyk4_test.go:43: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmplzknscyi_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmplzknscyi_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmplzknscyi_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmplzknscyi_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmplzknscyi_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmplzknscyi_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmplzknscyi_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmplzknscyi_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // use a map to store the characters\n    // the key is the\
    \ character\n    // the value is the number of times the character appears\n \
    \   // the map is initialized with the characters in the string\n    // the value\
    \ is initialized to 1\n    // if the character already exists in the map, increment\
    \ the value by 1\n    // at the end, the number of keys in the map is the number\
    \ of distinct characters\n    charMap := make(map[string]int)\n    for _, char\
    \ := range myString {\n        charMap[string(char)] += 1\n    }\n    return len(charMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpp_8ff7en_test.go:45: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpp_8ff7en_test.go:45:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpp_8ff7en_test.go:45: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var charMap = make(map[string]int)\n \
    \   for _, char := range myString {\n        charMap[string(char)] = 1\n    }\n\
    \    for _, _ = range charMap {\n        count++\n    }\n    return count\n}\n\
    \nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpvgi_kqru_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpvgi_kqru_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpvgi_kqru_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var distinctCharacters = make(map[rune]bool)\n    for _,\
    \ char := range myString {\n        distinctCharacters[char] = true\n    }\n \
    \   return len(distinctCharacters)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi01psg4__test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi01psg4__test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi01psg4__test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // TODO: implement me\n    return 0\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmpe4_ermkp_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmpe4_ermkp_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmpe4_ermkp_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmpe4_ermkp_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] += 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi6_pa0j5_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi6_pa0j5_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi6_pa0j5_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var charMap = make(map[string]int)\n \
    \   for _, char := range myString {\n        charMap[string(char)] = 1\n    }\n\
    \    for _, _ = range charMap {\n        count += 1\n    }\n    return count\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp90nn87au_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp90nn87au_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp90nn87au_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var charMap = make(map[string]int)\n \
    \   for _, char := range myString {\n        charMap[string(char)] = 1\n    }\n\
    \    for _, _ = range charMap {\n        count++\n    }\n    return count\n}\n\
    \nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpvgi_kqru_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpvgi_kqru_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpvgi_kqru_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int = 0\n    var myMap map[string]int = make(map[string]int)\n\
    \    for _, char := range myString {\n        myMap[string(char)] = 1\n    }\n\
    \    for _, _ = range myMap {\n        count++\n    }\n    return count\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpzbksgria_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpzbksgria_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpzbksgria_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    myMap := make(map[rune]int)\n    for _, char := range myString\
    \ {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpj0j2xgn0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpj0j2xgn0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpj0j2xgn0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075229
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int = 0\n    var myMap map[string]int = make(map[string]int)\n\
    \    for _, char := range myString {\n        myMap[string(char)] = 1\n    }\n\
    \    for _, _ = range myMap {\n        count++\n    }\n    return count\n}\n\n\
    func TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpzbksgria_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpzbksgria_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpzbksgria_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var charMap = make(map[rune]bool)\n  \
    \  for _, char := range myString {\n        if _, ok := charMap[char]; !ok {\n\
    \            charMap[char] = true\n            count++\n        }\n    }\n   \
    \ return count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpxcc25tmr_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpxcc25tmr_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpxcc25tmr_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var count int\n    var charMap = make(map[rune]bool)\n  \
    \  for _, char := range myString {\n        if _, ok := charMap[char]; !ok {\n\
    \            charMap[char] = true\n            count++\n        }\n    }\n   \
    \ return count\n}\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate\
    \ := count_distinct_characters\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"abcde\"), expected: 5 },\n   \
    \  { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n     { actual: candidate(\"\
    aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"Jerry jERRY JeRRRY\"\
    ), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpxcc25tmr_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpxcc25tmr_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpxcc25tmr_test.go:42: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestCount_Distinct_Characters(t\
    \ *testing.T) {\n  candidate := count_distinct_characters\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abcde\"\
    ), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"), expected: 5 },\n\
    \     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n     { actual: candidate(\"\
    Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__1\
    \ (0.00s)\n        tmplzknscyi_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__2 (0.00s)\n        tmplzknscyi_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__3\
    \ (0.00s)\n        tmplzknscyi_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__4 (0.00s)\n        tmplzknscyi_test.go:35:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var charMap = make(map[rune]bool)\n    for _, char := range\
    \ myString {\n        charMap[char] = true\n    }\n    return len(charMap)\n}\n\
    \nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmp8u4j1yhf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmp8u4j1yhf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmp8u4j1yhf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[rune]int)\n    for _, char := range\
    \ myString {\n        myMap[char] = 1\n    }\n    return len(myMap)\n}\n\nfunc\
    \ TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpi5ju32x0_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpi5ju32x0_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package count_distinct_characters_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n//\
    \ 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunc count_distinct_characters(myString\
    \ string) int {\n    var myMap = make(map[string]int)\n    for _, char := range\
    \ myString {\n        myMap[string(char)] = 1\n    }\n    return len(myMap)\n\
    }\n\nfunc TestCount_Distinct_Characters(t *testing.T) {\n  candidate := count_distinct_characters\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"abcde\"), expected: 5 },\n     { actual: candidate(\"abcdecadeCADE\"\
    ), expected: 5 },\n     { actual: candidate(\"aaaaAAAAaaaa\"), expected: 1 },\n\
    \     { actual: candidate(\"Jerry jERRY JeRRRY\"), expected: 5 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCount_Distinct_Characters (0.00s)\n    --- FAIL: TestCount_Distinct_Characters/test_num__2\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCount_Distinct_Characters/test_num__3 (0.00s)\n        tmpglqfxyuf_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Distinct_Characters/test_num__4\
    \ (0.00s)\n        tmpglqfxyuf_test.go:38: expected '%!s(int=5)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
