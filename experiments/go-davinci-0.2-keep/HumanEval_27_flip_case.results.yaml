language: go_test.go
name: HumanEval_27_flip_case
results:
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpdukj3uz9_test.go:31: expected 'hELLO!', got ''\n    ---\
    \ FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpdukj3uz9_test.go:31: expected\
    \ 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 65 && char <= 90 {\n            newString += string(char + 32)\n\
    \        } else if char >= 97 && char <= 122 {\n            newString += string(char\
    \ - 32)\n        } else {\n            newString += string(char)\n        }\n\
    \    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var myStringArray []rune\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            myStringArray = append(myStringArray,\
    \ char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            myStringArray\
    \ = append(myStringArray, char + 32)\n        } else {\n            myStringArray\
    \ = append(myStringArray, char)\n        }\n    }\n    return string(myStringArray)\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var flippedString string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            flippedString += string(char\
    \ - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            flippedString\
    \ += string(char + 32)\n        } else {\n            flippedString += string(char)\n\
    \        }\n    }\n    return flippedString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    myBytes := []byte(myString)\n    for i, v := range myBytes {\n\
    \        if v >= 65 && v <= 90 {\n            myBytes[i] = v + 32\n        } else\
    \ if v >= 97 && v <= 122 {\n            myBytes[i] = v - 32\n        }\n    }\n\
    \    return string(myBytes)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    // convert string to array of runes\n    runes := []rune(myString)\n\
    \    // loop through runes\n    for i, r := range runes {\n        // if rune\
    \ is uppercase, convert to lowercase\n        if r >= 'A' && r <= 'Z' {\n    \
    \        runes[i] = r + 32\n        } else if r >= 'a' && r <= 'z' {\n       \
    \     runes[i] = r - 32\n        }\n    }\n    // convert runes back to string\n\
    \    return string(runes)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    // your code here\n    return myString\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpry31yda0_test.go:31: expected 'hELLO!', got 'Hello!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpry31yda0_test.go:31:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'These violent delights\
    \ have violent ends'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var myBytes []byte\n    for i := 0; i < len(myString); i++ {\n\
    \        if myString[i] >= 'a' && myString[i] <= 'z' {\n            myBytes =\
    \ append(myBytes, myString[i] - 32)\n        } else if myString[i] >= 'A' && myString[i]\
    \ <= 'Z' {\n            myBytes = append(myBytes, myString[i] + 32)\n        }\
    \ else {\n            myBytes = append(myBytes, myString[i])\n        }\n    }\n\
    \    return string(myBytes)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var flippedString string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            flippedString += string(char\
    \ - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            flippedString\
    \ += string(char + 32)\n        } else {\n            flippedString += string(char)\n\
    \        }\n    }\n    return flippedString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    // Convert string to a rune slice\n    myRuneSlice := []rune(myString)\n\
    \    // Loop through the rune slice\n    for i, r := range myRuneSlice {\n   \
    \     // If the rune is lowercase, convert it to uppercase\n        if r >= 'a'\
    \ && r <= 'z' {\n            myRuneSlice[i] = r - 32\n        } else if r >= 'A'\
    \ && r <= 'Z' {\n            myRuneSlice[i] = r + 32\n        }\n    }\n    //\
    \ Return the string\n    return string(myRuneSlice)\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 65 && char <= 90 {\n            newString += string(char + 32)\n\
    \        } else if char >= 97 && char <= 122 {\n            newString += string(char\
    \ - 32)\n        } else {\n            newString += string(char)\n        }\n\
    \    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    // your code here\n    return \"\"\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmphuvvdqgn_test.go:31: expected 'hELLO!', got ''\n    ---\
    \ FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmphuvvdqgn_test.go:31: expected\
    \ 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmp9yxlomw3_test.go:30: expected 'hELLO!', got ''\n    ---\
    \ FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmp9yxlomw3_test.go:30: expected\
    \ 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, c := range myString {\n        if\
    \ c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else\
    \ {\n            result += string(c)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    // your code here\n    return \"\"\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmphuvvdqgn_test.go:31: expected 'hELLO!', got ''\n    ---\
    \ FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmphuvvdqgn_test.go:31: expected\
    \ 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    // your code here\n    return \"\"\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmphuvvdqgn_test.go:31: expected 'hELLO!', got ''\n    ---\
    \ FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmphuvvdqgn_test.go:31: expected\
    \ 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var newString string\n    for _, char := range myString {\n  \
    \      if char >= 'a' && char <= 'z' {\n            newString += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString +=\
    \ string(char + 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    // convert string to array of runes\n    myRunes := []rune(myString)\n\
    \    // loop through array of runes\n    for i, r := range myRunes {\n       \
    \ // if rune is lowercase, convert to uppercase\n        if r >= 'a' && r <= 'z'\
    \ {\n            myRunes[i] = r - 32\n        } else if r >= 'A' && r <= 'Z' {\n\
    \            // if rune is uppercase, convert to lowercase\n            myRunes[i]\
    \ = r + 32\n        }\n    }\n    // convert array of runes back to string\n \
    \   return string(myRunes)\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
- exit_code: 0
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunc flip_case(myString string)\
    \ string {\n    var result string\n    for _, char := range myString {\n     \
    \   if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073178
