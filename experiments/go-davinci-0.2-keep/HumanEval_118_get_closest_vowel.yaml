name: HumanEval_118_get_closest_vowel
language: go_test.go
prompt: "package get_closest_vowel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
  yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
  quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word\
  \ string) string {\n"
tests: "func TestGet_Closest_Vowel(t *testing.T) {\n  candidate := get_closest_vowel\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"yogurt\"), expected: \"u\" },\n\
  \     { actual: candidate(\"full\"), expected: \"u\" },\n     { actual: candidate(\"\
  easy\"), expected: \"\" },\n     { actual: candidate(\"eAsy\"), expected: \"\" },\n\
  \     { actual: candidate(\"ali\"), expected: \"\" },\n     { actual: candidate(\"\
  bad\"), expected: \"a\" },\n     { actual: candidate(\"most\"), expected: \"o\"\
  \ },\n     { actual: candidate(\"ab\"), expected: \"\" },\n     { actual: candidate(\"\
  ba\"), expected: \"\" },\n     { actual: candidate(\"quick\"), expected: \"\" },\n\
  \     { actual: candidate(\"anime\"), expected: \"i\" },\n     { actual: candidate(\"\
  Asia\"), expected: \"\" },\n     { actual: candidate(\"Above\"), expected: \"o\"\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for\
    \ i := len(word) - 1; i > 0; i-- {\n        if is_vowel(word[i], vowels) {\n \
    \           if !is_vowel(word[i-1], vowels) {\n                return string(word[i])\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i > 0; i-- {\n \
    \       if !is_vowel(word[i]) && is_vowel(word[i-1]) {\n            for _, v :=\
    \ range vowels {\n                if v == string(word[i-1]) {\n              \
    \      return v\n                }\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i > 0; i-- {\n        if is_vowel(word[i]) {\n     \
    \       if !is_vowel(word[i-1]) {\n                return string(word[i])\n  \
    \          }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i > 0; i-- {\n \
    \       if !is_consonant(word[i]) {\n            continue\n        }\n       \
    \ for j := i - 1; j >= 0; j-- {\n            if is_consonant(word[j]) {\n    \
    \            continue\n            }\n            for _, v := range vowels {\n\
    \                if string(word[j]) == v {\n                    return v\n   \
    \             }\n            }\n        }\n    }\n    return \"\"\n}\n", "   \
    \ vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i > 0; i-- {\n        if is_consonant(word[i]) && is_consonant(word[i-1])\
    \ {\n            for _, v := range vowels {\n                if v == string(word[i-1])\
    \ {\n                    return v\n                }\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    for i := len(word) - 1; i > 0; i-- {\n        if is_vowel(word[i],\
    \ vowels) {\n            if !is_vowel(word[i-1], vowels) {\n                return\
    \ string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i > 0; i-- {\n        if !is_vowel(word[i]) && is_vowel(word[i-1]) {\n\
    \            for _, v := range vowels {\n                if v == string(word[i-1])\
    \ {\n                    return v\n                }\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\"a\": true, \"\
    e\": true, \"i\": true, \"o\": true, \"u\": true}\n    last_vowel := \"\"\n  \
    \  for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n\
    \            last_vowel = string(word[i])\n            break\n        }\n    }\n\
    \    if last_vowel == \"\" {\n        return \"\"\n    }\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if !vowels[string(word[i])] {\n            if i\
    \ == len(word) - 1 {\n                return \"\"\n            }\n           \
    \ if vowels[string(word[i + 1])] {\n                return string(word[i + 1])\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    //\
    \ your code here\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i > 0; i-- {\n        if !isVowel(word[i])\
    \ && isVowel(word[i-1]) {\n            for _, v := range vowels {\n          \
    \      if v == string(word[i-1]) {\n                    return v\n           \
    \     }\n            }\n        }\n    }\n    return \"\"\n}\n", "    var vowels\
    \ = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var consonants = []string{\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var result\
    \ string\n    var index int\n    var found bool\n    for i := len(word) - 1; i\
    \ > 0; i-- {\n        for _, v := range vowels {\n            if word[i] == v[0]\
    \ {\n                found = true\n                index = i\n               \
    \ break\n            }\n        }\n        if found {\n            break\n   \
    \     }\n    }\n    if !found {\n        return result\n    }\n    for i := index\
    \ - 1; i >= 0; i-- {\n        for _, c := range consonants {\n            if word[i]\
    \ == c[0] {\n                return string(word[index])\n            }\n     \
    \   }\n    }\n    return result\n}\n", "    vowels := map[string]bool{\n     \
    \   \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n\
    \        \"u\": true,\n    }\n    var last_consonant string\n    var last_vowel\
    \ string\n    for i := len(word) - 1; i >= 0; i-- {\n        if _, ok := vowels[string(word[i])];\
    \ ok {\n            last_vowel = string(word[i])\n            if last_consonant\
    \ != \"\" {\n                return last_vowel\n            }\n        } else\
    \ {\n            last_consonant = string(word[i])\n        }\n    }\n    return\
    \ \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i > 0; i-- {\n \
    \       if isVowel(word[i], vowels) && !isVowel(word[i-1], vowels) {\n       \
    \     return string(word[i])\n        }\n    }\n    return \"\"\n}\n", "    vowels\
    \ := \"aeiou\"\n    for i := len(word) - 1; i > 0; i-- {\n        if vowels[strings.Index(vowels,\
    \ string(word[i]))] != -1 {\n            if vowels[strings.Index(vowels, string(word[i-1]))]\
    \ == -1 {\n                return string(word[i])\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    // your code here\n    return \"\"\n}\n",
  "    vowels := map[string]bool{\n        \"a\": true,\n        \"e\": true,\n  \
    \      \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n  \
    \          if i == len(word) - 1 {\n                return \"\"\n            }\n\
    \            if vowels[string(word[i + 1])] {\n                continue\n    \
    \        }\n            return string(word[i])\n        }\n    }\n    return \"\
    \"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var\
    \ closest_vowel string\n    var closest_vowel_index int\n    var closest_vowel_distance\
    \ int\n    for i, c := range word {\n        if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' {\n            for j, v := range vowels {\n        \
    \        if string(c) == v {\n                    if closest_vowel_index == 0\
    \ {\n                        closest_vowel_index = j\n                       \
    \ closest_vowel_distance = i\n                        closest_vowel = string(c)\n\
    \                    } else if j < closest_vowel_index {\n                   \
    \     closest_vowel_index = j\n                        closest_vowel_distance\
    \ = i\n                        closest_vowel = string(c)\n                   \
    \ } else if j == closest_vowel_index && i < closest_vowel_distance {\n       \
    \                 closest_vowel_index = j\n                        closest_vowel_distance\
    \ = i\n                        closest_vowel = string(c)\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return closest_vowel\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
