name: HumanEval_10_make_palindrome
language: rb
prompt: "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm\
  \ idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n\
  # - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\ndef make_palindrome(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_palindrome\n\
  \    candidate = method(:make_palindrome)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"x\", candidate.call(\"x\"))\n    assert_equal(\"xyzyx\"\
  , candidate.call(\"xyz\"))\n    assert_equal(\"xyx\", candidate.call(\"xyx\"))\n\
  \    assert_equal(\"jerryrrej\", candidate.call(\"jerry\"))\n  end\nend\n"
completions: ["  # Find the longest palindromic suffix of the string.\n  suffix =\
    \ longest_palindromic_suffix(string)\n  # Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n  string + string[0..(string.length\
    \ - suffix.length - 1)].reverse\nend", "  return string if string.length == 1\n\
    \  return string + string.reverse if string.length == 2\n  palindrome_suffix =\
    \ find_palindrome_suffix(string)\n  return string + string.reverse[palindrome_suffix.length..-1]\n\
    end", "  # Find the longest palindromic suffix of the string.\n  suffix = find_longest_palindromic_suffix(string)\n\
    \  # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n  string + reverse(string[0..-suffix.length - 1])\n\
    end", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if palindrome?(string)\n  return string\
    \ + string.reverse[1..-1] if palindrome?(string[1..-1])\n  return string[0] +\
    \ make_palindrome(string[1..-1]) + string[0]\nend", '  return string if string.length
    <= 1', "  return string if string.length == 1\n  return string + string.reverse\
    \ if string.length == 2", "  palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  string_prefix = string[0..-palindrome_suffix.length - 1]\n  string_prefix.reverse\
    \ + string\nend", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[1..-1].reverse if string.length\
    \ == 3", "  # Find the longest palindromic suffix.\n  suffix_length = 0\n  (string.length\
    \ - 1).downto(0) do |i|\n    if is_palindrome?(string[i..-1])\n      suffix_length\
    \ = string.length - i\n      break\n    end\n  end", "  # Find the longest palindromic\
    \ suffix\n  suffix = longest_palindromic_suffix(string)\n  # Reverse the prefix\
    \ that comes before the palindromic suffix\n  prefix = string[0..(string.length\
    \ - suffix.length - 1)].reverse\n  # Append the reversed prefix to the end of\
    \ the string\n  string + prefix\nend", "  # Find the longest postfix that is a\
    \ palindrome.\n  # The longest postfix is the longest suffix that is also a prefix.\n\
    \  # The longest postfix is the longest suffix that is also a prefix.\n  # The\
    \ longest postfix is the longest suffix that is also a prefix.\n  # The longest\
    \ postfix is the longest suffix that is also a prefix.\n  # The longest postfix\
    \ is the longest suffix that is also a prefix.\n  # The longest postfix is the\
    \ longest suffix that is also a prefix.\n  # The longest postfix is the longest\
    \ suffix that is also a prefix.\n  # The longest postfix is the longest suffix\
    \ that is also a prefix.\n  # The longest postfix is the longest suffix that is\
    \ also a prefix.\n  # The longest postfix is the longest suffix that is also a\
    \ prefix.\n  # The longest postfix is the longest suffix that is also a prefix.\n\
    \  # The longest postfix is the longest suffix that is also a prefix.\n  # The\
    \ longest postfix is the longest suffix that is also a prefix.\n  # The longest\
    \ postfix is the longest suffix that is also a prefix.\n  # The longest postfix\
    \ is the longest suffix that is also a prefix.\n  # The longest postfix is the\
    \ longest suffix that is also a prefix.\n  # The longest postfix is the longest\
    \ suffix that is also a prefix.\n  # The longest postfix is the longest suffix\
    \ that is also a prefix.\n  # The longest postfix is the longest suffix that is\
    \ also a prefix.\n  # The longest postfix is the longest suffix that is also a\
    \ prefix.\n  # The longest postfix is the longest suffix that is also a prefix.\n\
    \  # The longest postfix is the longest suffix that is also a prefix.\n  # The\
    \ longest postfix is the longest suffix that is also a prefix.\n  # The longest\
    \ postfix is the longest suffix that is also a prefix.\n  # The longest postfix\
    \ is the longest suffix that is also a prefix.\n  # The longest postfix is the\
    \ longest suffix that is also a prefix.\n  # The longest postfix is the longest\
    \ suffix that is also a prefix.\n  # The longest postfix is the longest suffix\
    \ that is also a prefix.\n  # The longest postfix is the longest suffix that is\
    \ also a prefix.\n  # The", "  # Find the longest palindromic suffix of the string.\n\
    \  suffix = find_longest_palindromic_suffix(string)\n  # If the string is already\
    \ a palindrome, return it.\n  return string if suffix == string\n  # Find the\
    \ prefix of the string that comes before the palindromic suffix.\n  prefix = string[0..-suffix.length\
    \ - 1]\n  # Append to the end of the string reverse of the prefix.\n  string +\
    \ prefix.reverse\nend", "  return string if string.length == 1\n  return string\
    \ + string.reverse if string.length == 2", "  return string if string.length ==\
    \ 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2", "  # Find the longest palindromic suffix.\n  suffix_length = 0\n  string.length.times\
    \ do |i|\n    if string[i..-1] == string[i..-1].reverse\n      suffix_length =\
    \ string.length - i\n      break\n    end\n  end", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2", "  return string if string.length == 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[1..-1].reverse if string.length\
    \ == 3\n  return string + string[2..-1].reverse if string.length == 4", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2", "  return string if string.length == 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[1..-1].reverse if string.length\
    \ == 3\n  return string + string[2..-1].reverse if string.length == 4\n  return\
    \ string + string[3..-1].reverse if string.length == 5\n  return string + string[4..-1].reverse\
    \ if string.length == 6\n  return string + string[5..-1].reverse if string.length\
    \ == 7\n  return string + string[6..-1].reverse if string.length == 8\n  return\
    \ string + string[7..-1].reverse if string.length == 9\n  return string + string[8..-1].reverse\
    \ if string.length == 10\n  return string + string[9..-1].reverse if string.length\
    \ == 11\n  return string + string[10..-1].reverse if string.length == 12\n  return\
    \ string + string[11..-1].reverse if string.length == 13\n  return string + string[12..-1].reverse\
    \ if string.length == 14\n  return string + string[13..-1].reverse if string.length\
    \ == 15\n  return string + string[14..-1].reverse if string.length == 16\n  return\
    \ string + string[15..-1].reverse if string.length == 17\n  return string + string[16..-1].reverse\
    \ if string.length == 18\n  return string + string[17..-1].reverse if string.length\
    \ == 19\n  return string + string[18..-1].reverse if string.length == 20\n  return\
    \ string + string[19..-1].reverse if string.length == 21\n  return string + string[20..-1].reverse\
    \ if string.length == 22\n  return string + string[21..-1].reverse if string.length\
    \ == 23\n  return string + string[22..-1].reverse if string.length == 24\n  return\
    \ string + string[23..-1].reverse if string.length == 25\n  return string + string[24..-1].reverse\
    \ if string.length == 26\n  return string + string[25..-1].reverse if string.length\
    \ == 27\n  return string + string[26..-1].reverse", "  return string if string.length\
    \ == 1\n  return string + string.reverse if string.length == 2", "  # Find the\
    \ longest palindromic suffix.\n  suffix_length = 0\n  (string.length - 1).downto(0)\
    \ do |i|\n    if string[0..i] == string[i..-1].reverse\n      suffix_length =\
    \ i + 1\n      break\n    end\n  end", "  # Find the longest palindromic suffix.\n\
    \  palindrome_suffix = find_longest_palindromic_suffix(string)\n  # Find the prefix\
    \ that comes before the palindromic suffix.\n  prefix = string[0, string.length\
    \ - palindrome_suffix.length]\n  # Append to the end of the string reverse of\
    \ the prefix.\n  string + prefix.reverse\nend", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2\n  return string + string[1..-1].reverse if string[0] == string[-1]", "  return\
    \ string if palindrome?(string)\n  palindrome_suffix = find_palindrome_suffix(string)\n\
    \  string + reverse(string[0..-palindrome_suffix.length - 1])\nend", "  return\
    \ string if string.length == 1\n  return string + string.reverse if string.length\
    \ == 2", "  return string if palindrome?(string)\n  palindrome_suffix = find_palindrome_suffix(string)\n\
    \  string + reverse(string[0..-palindrome_suffix.length - 1])\nend", "  return\
    \ string if palindrome?(string)\n  string_length = string.length\n  (string_length\
    \ - 1).downto(0) do |i|\n    if palindrome?(string[i..string_length - 1])\n  \
    \    return string + string[0..i - 1].reverse\n    end\n  end\nend", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[0..-3].reverse if string.length == 3", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[1..-1].reverse if string.length == 3", "  return\
    \ string if string.length == 1\n  return string + string.reverse if string.length\
    \ == 2", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length == 1\n  return string\
    \ + string.reverse if string.length == 2", "  return string if string.length <=\
    \ 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if palindrome?(string)\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  prefix = string[0...string.length - longest_palindrome_suffix.length]\n  prefix.reverse\
    \ + string\nend", "  string = string.dup\n  # Find the longest palindromic suffix.\n\
    \  palindrome_suffix = find_palindrome_suffix(string)\n  # Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \  string << string[0...(string.length - palindrome_suffix.length)].reverse\n\
    \  string\nend", "  return string if string.length == 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2", "  # Find the longest palindromic suffix\n\
    \  suffix = longest_palindromic_suffix(string)\n  # Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n  string\
    \ + string[0..-(suffix.length + 1)].reverse\nend", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length == 1\n  return string\
    \ + string.reverse if string.length == 2", "  return string if string.length ==\
    \ 1\n  return string + string.reverse if string.length == 2\n  return string +\
    \ string[1..-1].reverse if string[0] == string[-1]\n  return string[0] + make_palindrome(string[1..-1])\
    \ + string[0]\nend", "  return string if string.length == 1\n  return string +\
    \ string.reverse if string.length == 2", "  return string if string.length ==\
    \ 1\n  return string + string.reverse if string.length == 2", "  # Find the longest\
    \ palindromic suffix of the string.\n  longest_palindromic_suffix = find_longest_palindromic_suffix(string)\n\
    \  # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n  string + string[0..-longest_palindromic_suffix.length\
    \ - 1].reverse\nend", "  return string if string.length == 1\n  return string\
    \ + string.reverse if string.length == 2\n  return string if is_palindrome?(string)",
  "  return string if string.length == 1\n  return string + string.reverse if string.length\
    \ == 2", "  # Find the longest palindromic suffix.\n  suffix_length = 0\n  (0..string.length\
    \ / 2).each do |i|\n    if string[i] == string[-i - 1]\n      suffix_length +=\
    \ 1\n    else\n      break\n    end\n  end", "  # Find the longest palindromic\
    \ suffix.\n  suffix_length = 0\n  (0..string.length - 1).each do |i|\n    if is_palindrome?(string[i..-1])\n\
    \      suffix_length = string.length - i\n      break\n    end\n  end", "  return\
    \ string if string.length == 1\n  return string + string.reverse if string.length\
    \ == 2", "  return string if string.length == 1\n  return string + string.reverse\
    \ if string.length == 2", "  # Find the longest palindromic suffix of the string.\n\
    \  suffix = longest_palindromic_suffix(string)\n  # Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n  string\
    \ + string[0..-suffix.length-1].reverse\nend", "  return string if string.length\
    \ <= 1\n  return string if string == string.reverse", "  # Find the longest palindromic\
    \ suffix of the string.\n  # This is done by finding the longest common prefix\
    \ of the string and its reverse.\n  # This is done using the KMP algorithm.\n\
    \  # The longest common prefix of the string and its reverse is the longest palindromic\
    \ suffix of the string.\n  # The longest common prefix of the string and its reverse\
    \ is the longest palindromic suffix of the string.\n  # The longest common prefix\
    \ of the string and its reverse is the longest palindromic suffix of the string.\n\
    \  # The longest common prefix of the string and its reverse is the longest palindromic\
    \ suffix of the string.\n  # The longest common prefix of the string and its reverse\
    \ is the longest palindromic suffix of the string.\n  # The longest common prefix\
    \ of the string and its reverse is the longest palindromic suffix of the string.\n\
    \  # The longest common prefix of the string and its reverse is the longest palindromic\
    \ suffix of the string.\n  # The longest common prefix of the string and its reverse\
    \ is the longest palindromic suffix of the string.\n  # The longest common prefix\
    \ of the string and its reverse is the longest palindromic suffix of the string.\n\
    \  # The longest common prefix of the string and its reverse is the longest palindromic\
    \ suffix of the string.\n  # The longest common prefix of the string and its reverse\
    \ is the longest palindromic suffix of the string.\n  # The longest common prefix\
    \ of the string and its reverse is the longest palindromic suffix of the string.\n\
    \  # The longest common prefix of the string and its reverse is the longest palindromic\
    \ suffix of the string.\n  # The longest common prefix of the string and its reverse\
    \ is the longest palindromic suffix of the string.\n  # The longest common prefix\
    \ of the string and its reverse is the longest palindromic suffix of the string.\n\
    \  # The longest common prefix of the string and its reverse is the longest palindromic\
    \ suffix of the string.\n  # The longest common prefix of the string and its reverse\
    \ is the longest palindromic suffix of the string.\n  # The longest common prefix\
    \ of the string and its reverse is the longest palindromic suffix of the string.\n\
    \  # The longest common prefix of the string and its reverse is the longest",
  "  return string if string.length == 1\n  return string + string.reverse if string.length\
    \ == 2", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  # Find the longest palindromic suffix.\n  palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n  # Reverse the prefix of the string\
    \ that comes before the palindromic suffix.\n  prefix = string[0..-palindrome_suffix.length\
    \ - 1].reverse\n  # Append the reversed prefix to the end of the string.\n  string\
    \ + prefix\nend", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2", "  # Find the longest palindromic suffix.\n\
    \  suffix_length = 0\n  (0..string.length - 1).each do |i|\n    if is_palindrome?(string[i..-1])\n\
    \      suffix_length = string.length - i\n      break\n    end\n  end", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2", "  return string if string.length ==\
    \ 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2\n  return string + string[1..-1].reverse if string[0] == string[-1]", "  #\
    \ Find the longest palindromic suffix.\n  palindrome_suffix = find_longest_palindromic_suffix(string)\n\
    \  # Reverse the prefix that comes before the palindromic suffix.\n  reversed_prefix\
    \ = string[0..-palindrome_suffix.length - 1].reverse\n  # Append the reversed\
    \ prefix to the end of the string.\n  string + reversed_prefix\nend", "  # Find\
    \ the longest palindromic suffix of the string.\n  # It is done by comparing the\
    \ string with its reverse.\n  # If the string is already a palindrome, then the\
    \ palindromic suffix is the whole string.\n  # Otherwise, the palindromic suffix\
    \ is the longest common prefix of the string and its reverse.\n  # Example:\n\
    \  #   string: abcdefg\n  #   reverse: gfedcba\n  #   common prefix: gfe\n  #\
    \   palindromic suffix: gfe\n  #   prefix before palindromic suffix: dcba\n  #\
    \   palindrome: dcbagfe\n  reverse = string.reverse\n  common_prefix_length =\
    \ 0\n  string.length.times do |i|\n    if string[i] == reverse[i]\n      common_prefix_length\
    \ += 1\n    else\n      break\n    end\n  end\n  prefix_before_palindromic_suffix\
    \ = string[0, string.length - common_prefix_length]\n  palindrome = prefix_before_palindromic_suffix.reverse\
    \ + string\n  return palindrome\nend", "  return string if string.length <= 1\n\
    \  return string if string == string.reverse", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2\n  i = string.length\
    \ - 1\n  while i > 0\n    if string[0..i] == string[0..i].reverse\n      return\
    \ string + string[0..i-1].reverse\n    end\n    i -= 1\n  end\n  return string\
    \ + string[1..-1].reverse\nend", "  return string if string.length <= 1\n  return\
    \ string + string.reverse if string.length == 2\n  return string + string[1..-1].reverse\
    \ if string.length == 3", "  # Find the longest palindromic suffix of the string.\n\
    \  palindrome_suffix = find_longest_palindrome_suffix(string)\n  # Reverse the\
    \ prefix of the string that comes before the palindromic suffix.\n  prefix = string[0..(string.length\
    \ - palindrome_suffix.length - 1)].reverse\n  # Append the reversed prefix to\
    \ the end of the string.\n  string + prefix\nend", "  return string if string.length\
    \ == 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length == 1\n  return string + string.reverse if string.length ==\
    \ 2", "  return string if string.length == 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length == 1\n  return string\
    \ + string.reverse if string.length == 2", "  return string if string.length <=\
    \ 1\n  return string + string.reverse if string.length == 2\n  return string +\
    \ string[1..-1].reverse if string.length == 3", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length == 1\n  return string + string.reverse if string.length ==\
    \ 2", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2", "  return string if string.length ==\
    \ 1\n  return string + string.reverse if string.length == 2", "  string_length\
    \ = string.length\n  palindrome_length = 0\n  palindrome_start = 0\n  (0..string_length).each\
    \ do |i|\n    # Check if string[0..i] is a palindrome\n    if is_palindrome(string[0..i])\n\
    \      palindrome_length = i + 1\n      palindrome_start = 0\n    end\n    # Check\
    \ if string[i..string_length] is a palindrome\n    if is_palindrome(string[i..string_length])\n\
    \      palindrome_length = string_length - i\n      palindrome_start = i\n   \
    \ end\n  end\n  # Append reverse of string[0..palindrome_start] to the end of\
    \ string\n  string + string[0..palindrome_start].reverse\nend", "  longest_palindrome\
    \ = find_longest_palindrome(string)\n  return string if longest_palindrome ==\
    \ string\n  string + string[0...string.size - longest_palindrome.size].reverse\n\
    end", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if palindrome?(string)\n  return string\
    \ if string.length == 1", "  # Find the longest palindromic suffix of the string.\n\
    \  # This is done by finding the longest common prefix and suffix of the string\
    \ and its reverse.\n  # The longest common prefix and suffix of the string and\
    \ its reverse are the same.\n  # The longest common prefix and suffix of the string\
    \ and its reverse are the same.\n  # The longest common prefix and suffix of the\
    \ string and its reverse are the same.\n  # The longest common prefix and suffix\
    \ of the string and its reverse are the same.\n  # The longest common prefix and\
    \ suffix of the string and its reverse are the same.\n  # The longest common prefix\
    \ and suffix of the string and its reverse are the same.\n  # The longest common\
    \ prefix and suffix of the string and its reverse are the same.\n  # The longest\
    \ common prefix and suffix of the string and its reverse are the same.\n  # The\
    \ longest common prefix and suffix of the string and its reverse are the same.\n\
    \  # The longest common prefix and suffix of the string and its reverse are the\
    \ same.\n  # The longest common prefix and suffix of the string and its reverse\
    \ are the same.\n  # The longest common prefix and suffix of the string and its\
    \ reverse are the same.\n  # The longest common prefix and suffix of the string\
    \ and its reverse are the same.\n  # The longest common prefix and suffix of the\
    \ string and its reverse are the same.\n  # The longest common prefix and suffix\
    \ of the string and its reverse are the same.\n  # The longest common prefix and\
    \ suffix of the string and its reverse are the same.\n  # The longest common prefix\
    \ and suffix of the string and its reverse are the same.\n  # The longest common\
    \ prefix and suffix of the string and its reverse are the same.\n  # The longest\
    \ common prefix and suffix of the string and its reverse are the same.\n  # The\
    \ longest common prefix and suffix of the string and its reverse are the same.\n\
    \  # The longest common prefix and suffix of the string and its reverse are the\
    \ same.\n  # The longest common prefix and suffix of the string and its reverse\
    \ are the same.\n  # The longest common prefix and suffix of the string and its\
    \ reverse are the same.\n  # The longest common prefix and suffix of the string\
    \ and its reverse are the same.\n  # The longest common prefix and suffix of the\
    \ string and its reverse are the same.\n", "  return string if string.length <=\
    \ 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2", "  return string if string.length == 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length == 1\n  return string\
    \ + string.reverse if string.length == 2", "  return string if string.length <=\
    \ 1\n  return string + string.reverse if string.length == 2\n  return string +\
    \ string[1..-1].reverse if string.length == 3", "  return string if string.length\
    \ == 1\n  return string + string.reverse if string.length == 2\n  return string\
    \ + string[1..-1].reverse if string[0] == string[-1]", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2\n  return string\
    \ + string[0..-3].reverse if string.length == 3", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2", "  # Find the\
    \ longest palindromic suffix.\n  suffix_length = 0\n  while suffix_length < string.length\
    \ &&\n        string[suffix_length] == string[-1 - suffix_length]\n    suffix_length\
    \ += 1\n  end", "  string = string.downcase\n  return string if string.length\
    \ == 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2\n  return string + string[1..-1].reverse if string[0] == string[-1]\n  return\
    \ string[0] + make_palindrome(string[1..-1]) + string[0]\nend", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2", "  return string if string.length == 1\n  return string + string.reverse\
    \ if string.length == 2", "  # Find the longest palindromic suffix of the string.\n\
    \  palindrome_suffix = find_longest_palindrome_suffix(string)\n  # Reverse the\
    \ string prefix that comes before the palindromic suffix.\n  reverse_prefix =\
    \ string[0..-palindrome_suffix.length - 1].reverse\n  # Append the reversed prefix\
    \ to the end of the string.\n  string + reverse_prefix\nend", "  # Find the longest\
    \ palindromic suffix.\n  suffix_length = 0\n  (string.length - 1).downto(0) do\
    \ |i|\n    if string[0..i] == string[0..i].reverse\n      suffix_length = i +\
    \ 1\n      break\n    end\n  end", "  return string if string.length <= 1\n  return\
    \ string + string.reverse if string.length == 2", "  return string if string.length\
    \ <= 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length == 1\n  return string + string.reverse if string.length ==\
    \ 2\n  return string + string[1..-1].reverse if string[0] == string[-1]\n  return\
    \ string + string[2..-1].reverse if string[0] == string[-2]\n  return string +\
    \ string[3..-1].reverse if string[1] == string[-1]\n  return string + string[2..-2].reverse\
    \ + string[1..-1] if string[1] == string[-2]\n  return string + string[3..-2].reverse\
    \ + string[2..-1] if string[2] == string[-2]\n  return string + string[3..-3].reverse\
    \ + string[2..-2] if string[2] == string[-3]\n  return string + string[4..-3].reverse\
    \ + string[3..-2] if string[3] == string[-3]\n  return string + string[4..-4].reverse\
    \ + string[3..-3] if string[3] == string[-4]\n  return string + string[5..-4].reverse\
    \ + string[4..-3] if string[4] == string[-4]\n  return string + string[5..-5].reverse\
    \ + string[4..-4] if string[4] == string[-5]\n  return string + string[6..-5].reverse\
    \ + string[5..-4] if string[5] == string[-5]\n  return string + string[6..-6].reverse\
    \ + string[5..-5] if string[5] == string[-6]\n  return string + string[7..-6].reverse\
    \ + string[6..-5] if string[6] == string[-6]\n  return string + string[7..-7].reverse\
    \ + string[6..-6] if string[6] == string[-7]\n  return string + string[8..-7].reverse\
    \ + string[7..-6] if string[7] == string[-7]\n  return string + string[8..-8].reverse\
    \ + string[7..-7] if string[7] == string[-8]", "  return string if string.length\
    \ == 1\n  return string + string.reverse if string.length == 2\n  return string\
    \ + string[1..-1].reverse if string.length == 3", "  string_length = string.length\n\
    \  (string_length - 1).downto(0) do |i|\n    if string[0..i] == string[i..string_length\
    \ - 1].reverse\n      return string + string[0..i - 1].reverse\n    end\n  end\n\
    end", "  # Find the longest palindromic suffix of the string.\n  # This is done\
    \ by finding the longest common prefix of the string and its reverse.\n  # This\
    \ is done in O(n) time using the KMP algorithm.\n  # The longest common prefix\
    \ of the string and its reverse is the longest palindromic suffix of the string.\n\
    \  longest_common_prefix = kmp(string + string.reverse)\n  # Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \  string + string.reverse[longest_common_prefix..-1]\nend", "  return string\
    \ if string.length <= 1\n  palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  string_prefix = string[0...string.length - palindrome_suffix.length]\n  string_prefix.reverse\
    \ + string\nend", '  return string if string.length <= 1', "  # Find the longest\
    \ postfix that is a palindrome\n  longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n  string + string[0..-longest_palindrome_suffix.length\
    \ - 1].reverse\nend", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2\n  return string + string[1..-1].reverse\
    \ if string.length == 3", "  return string if palindrome?(string)\n  palindrome_suffix\
    \ = find_palindrome_suffix(string)\n  string + reverse(string[0...-palindrome_suffix.length])\n\
    end", "  return string if string.length == 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[1..-1].reverse if string[0]\
    \ == string[-1]\n  return string + string[2..-1].reverse if string[0] == string[-2]\n\
    \  return string + string[3..-1].reverse if string[1] == string[-1]\n  return\
    \ string + string[4..-1].reverse if string[1] == string[-2]\n  return string +\
    \ string[5..-1].reverse if string[2] == string[-1]\n  return string + string[6..-1].reverse\
    \ if string[2] == string[-2]\n  return string + string[7..-1].reverse if string[3]\
    \ == string[-1]\n  return string + string[8..-1].reverse if string[3] == string[-2]\n\
    \  return string + string[9..-1].reverse if string[4] == string[-1]\n  return\
    \ string + string[10..-1].reverse if string[4] == string[-2]\n  return string\
    \ + string[11..-1].reverse if string[5] == string[-1]\n  return string + string[12..-1].reverse\
    \ if string[5] == string[-2]\n  return string + string[13..-1].reverse if string[6]\
    \ == string[-1]\n  return string + string[14..-1].reverse if string[6] == string[-2]\n\
    \  return string + string[15..-1].reverse if string[7] == string[-1]\n  return\
    \ string + string[16..-1].reverse if string[7] == string[-2]\n  return string\
    \ + string[17..-1].reverse if string[8] == string[-1]\n  return string + string[18..-1].reverse\
    \ if string[8] == string[-2]\n  return string + string[19..-1].reverse if string[9]\
    \ == string[-1]\n  return string + string[20..-1].reverse if string[9] == string[-2]\n\
    \  return string + string[21", "  return string if string.length <= 1\n  return\
    \ string + string.reverse if string.length == 2\n  return string + string[1..-1].reverse\
    \ if string.length == 3", '  return string if string.length == 1', "  # Find the\
    \ longest palindromic suffix.\n  palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  # Reverse the prefix that comes before the palindromic suffix.\n  reversed_prefix\
    \ = string[0..-palindrome_suffix.length - 1].reverse\n  # Append the reversed\
    \ prefix to the end of the string.\n  string + reversed_prefix\nend", "  return\
    \ string if string.length == 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[1..-1].reverse if string.length == 3", "  return\
    \ string if string.length == 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[0..-3].reverse if string.length == 3", "  # Find\
    \ the longest palindromic suffix.\n  longest_palindromic_suffix = find_longest_palindromic_suffix(string)\n\
    \  # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n  string + string[0..string.length - longest_palindromic_suffix.length\
    \ - 1].reverse\nend", "  string_length = string.length\n  if string_length ==\
    \ 0\n    return string\n  end\n  if string_length == 1\n    return string + string\n\
    \  end\n  if string_length == 2\n    if string[0] == string[1]\n      return string\
    \ + string\n    else\n      return string[0] + string + string[0]\n    end\n \
    \ end\n  # Find the longest palindromic suffix of the string.\n  suffix_length\
    \ = 1\n  while suffix_length <= string_length\n    if is_palindrome(string[string_length\
    \ - suffix_length, suffix_length])\n      break\n    end\n    suffix_length +=\
    \ 1\n  end\n  # Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix.\n  prefix_length = string_length - suffix_length\n\
    \  return string + string[0, prefix_length].reverse\nend", "  return string if\
    \ string.length == 1\n  return string + string.reverse if string.length == 2",
  "  return string if string.length == 1\n  return string + string.reverse if string.length\
    \ == 2", "  # Find the longest palindromic suffix of the string.\n  suffix = longest_palindromic_suffix(string)\n\
    \  # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n  string + string[0..(string.length - suffix.length\
    \ - 1)].reverse\nend", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2", "  # Find the longest palindromic suffix.\n\
    \  suffix_length = 0\n  string.length.times do |i|\n    if string[i] == string[-1]\n\
    \      if string[0..i] == string[-i..-1].reverse\n        suffix_length = i +\
    \ 1\n      end\n    end\n  end", "  return string if string.length == 1\n  return\
    \ string + string.reverse if string.length == 2\n  return string if string ==\
    \ string.reverse", "  return string if string.length == 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[1..-1].reverse if string[0]\
    \ == string[-1]", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2\n  return string + string[1..-1].reverse\
    \ if string.length == 3", "  # Find the longest postfix that is a palindrome.\n\
    \  # This is done by comparing the first character of the string with the last\
    \ character of the string,\n  # then the second character with the second last\
    \ character, and so on.\n  # If the characters are equal, then the postfix is\
    \ a palindrome.\n  # If not, then the postfix is not a palindrome.\n  # The algorithm\
    \ stops when the characters are not equal, or when the postfix is the entire string.\n\
    \  # In the latter case, the entire string is a palindrome.\n  # The algorithm\
    \ is O(n^2) in the worst case, but O(n) in the best case.\n  # The best case is\
    \ when the string is a palindrome.\n  # The worst case is when the string is not\
    \ a palindrome.\n  # In the worst case, the algorithm compares every character\
    \ with every other character.\n  # In the best case, the algorithm compares only\
    \ the first character with the last character.\n  # The algorithm is O(n) in the\
    \ average case, because the average case is the best case.\n  # The average case\
    \ is when the string is a palindrome.\n  # The algorithm is O(n) in the amortized\
    \ case, because the amortized case is the best case.\n  # The amortized case is\
    \ when the string is a palindrome.\n  # The algorithm is O(n) in the expected\
    \ case, because the expected case is the best case.\n  # The expected case is\
    \ when the string is a palindrome.\n  # The algorithm is O(n) in the probabilistic\
    \ case, because the probabilistic case is the best case.\n  # The probabilistic\
    \ case is when the string is a palindrome.\n  # The algorithm is O(n) in the randomized\
    \ case, because the randomized case is the best case.\n  # The randomized case\
    \ is when the string is a palindrome.\n  # The algorithm is O(n) in the stochastic\
    \ case, because the stochastic case is the best case.\n  # The stochastic case\
    \ is when the string is a palindrome.\n  # The algorithm is O(n) in the statistical\
    \ case, because the statistical case is the best case.\n ", "  string_length =\
    \ string.length\n  palindrome_length = 0\n  palindrome_start = 0\n  (0..string_length).each\
    \ do |i|\n    # Check if substring of length i is a palindrome.\n    if is_palindrome(string,\
    \ i)\n      palindrome_length = i\n      palindrome_start = string_length - i\n\
    \      break\n    end\n  end\n  # Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n  string + string[0..palindrome_start\
    \ - 1].reverse\nend", "  return string if string.length == 1\n  return string\
    \ + string.reverse if string.length == 2\n  return string + string[1..-1].reverse\
    \ if string.length == 3", "  # Find the longest palindromic suffix.\n  palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n  # Reverse the prefix that comes\
    \ before the palindromic suffix.\n  prefix = string[0, string.length - palindrome_suffix.length].reverse\n\
    \  # Append the prefix to the end of the string.\n  string + prefix\nend", '  return
    string if string.length == 1', "  return string if palindrome?(string)\n  string_length\
    \ = string.length\n  (string_length - 1).downto(0) do |i|\n    if palindrome?(string[i..-1])\n\
    \      return string + string[0..i-1].reverse\n    end\n  end\nend", "  return\
    \ string if string.length == 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[1..-1].reverse if string.length == 3\n  return\
    \ string + string[2..-1].reverse if string.length == 4", "  # Find the longest\
    \ palindromic suffix of the string.\n  palindrome_suffix = find_palindrome_suffix(string)\n\
    \  # Reverse the prefix of the string that comes before the palindromic suffix.\n\
    \  prefix = string[0..(string.length - palindrome_suffix.length - 1)].reverse\n\
    \  # Append the reversed prefix to the end of the string.\n  string + prefix\n\
    end", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length == 1\n  return string\
    \ + string.reverse if string.length == 2", "  return string if string.length <=\
    \ 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2\n  return string + string[1..-1].reverse if string.length == 3\n  return string\
    \ + string[2..-1].reverse if string.length == 4", "  string_length = string.length\n\
    \  return string if string_length == 1\n  return string + string.reverse if string_length\
    \ == 2", "  return string if string.length == 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2\n  return string + string[1..-1].reverse\
    \ if string.length == 3", "  string_length = string.length\n  return string if\
    \ string_length == 1\n  return string + string.reverse if string_length == 2",
  "  return string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2", "  return string if string.length == 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length == 1\n  return string\
    \ + string.reverse if string.length == 2", "  return string if string.length <=\
    \ 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length == 1\n  return string + string.reverse if string.length ==\
    \ 2", "  return string if string.length == 1\n  return string if palindrome?(string)",
  "  # Find the longest palindromic suffix of the string.\n  palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n  string + string[0..-palindrome_suffix.length - 1].reverse\n\
    end", "  return string if string.length <= 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2", "  return string if string.length <=\
    \ 1\n  return string + string.reverse if string.length == 2\n  return string +\
    \ string[1..-1].reverse if string.length == 3", "  # Find the longest postfix\
    \ that is a palindrome.\n  # This is done by comparing the first character of\
    \ the string with the last character of the string,\n  # then the second character\
    \ with the second-to-last character, and so on.\n  # If the characters match,\
    \ we increment the palindrome length.\n  # If they don't match, we reset the palindrome\
    \ length to 0.\n  palindrome_length = 0\n  string.length.times do |i|\n    if\
    \ string[i] == string[-i - 1]\n      palindrome_length += 1\n    else\n      palindrome_length\
    \ = 0\n    end\n  end", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2", "  return string if string.length ==\
    \ 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2", "  return string if palindrome?(string)\n  return string[0] + make_palindrome(string[1..-1])\
    \ if string.length == 2\n  return string[0] + make_palindrome(string[1..-2]) +\
    \ string[0] if string.length == 3\n  return string[0] + make_palindrome(string[1..-2])\
    \ + string[0] if palindrome?(string[1..-2])\n  return string[0] + make_palindrome(string[1..-1])\
    \ + string[0]\nend", "  return string if string.length <= 1\n  return string +\
    \ string.reverse if string.length == 2", "  return string if string.length ==\
    \ 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2\n  return string + string[1..-1].reverse if string.length == 3", "  # Find\
    \ the longest palindromic suffix.\n  palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  # Reverse the prefix that comes before the palindromic suffix.\n  prefix =\
    \ string[0, string.length - palindrome_suffix.length].reverse\n  # Return the\
    \ palindrome.\n  prefix + string\nend", "  # Find the longest palindromic suffix.\n\
    \  palindrome_suffix = find_longest_palindrome_suffix(string)\n  # Reverse the\
    \ prefix of the string that comes before the palindromic suffix.\n  prefix = string[0..(string.length\
    \ - palindrome_suffix.length - 1)].reverse\n  # Append the reversed prefix to\
    \ the end of the string.\n  string + prefix\nend", "  palindrome_suffix = find_palindrome_suffix(string)\n\
    \  string + string[0..-palindrome_suffix.length-1].reverse\nend", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2\n  return string + string[1..-1].reverse if string[0] == string[-1]", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2", "  return string if string.length == 1\n  return string if string ==\
    \ string.reverse", "  # Find the longest palindromic suffix of the string.\n \
    \ longest_palindromic_suffix = string.length\n  while longest_palindromic_suffix\
    \ > 0\n    if is_palindrome?(string[0..longest_palindromic_suffix - 1])\n    \
    \  break\n    end\n    longest_palindromic_suffix -= 1\n  end", "  # Find the\
    \ longest palindromic suffix of the supplied string.\n  suffix = find_longest_palindromic_suffix(string)\n\
    \  # Reverse the prefix of the string that comes before the palindromic suffix.\n\
    \  prefix = string[0, string.length - suffix.length].reverse\n  # Append the reversed\
    \ prefix to the end of the string.\n  string + prefix\nend", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2", "  return string if string.length == 1\n  return string + string.reverse\
    \ if string.length == 2\n  return string + string[1..-1].reverse if string.length\
    \ == 3\n  return string + string[1..-2].reverse if string.length == 4", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[1..-1].reverse if string[0] == string[-1]\n \
    \ return string[0] + make_palindrome(string[1..-1]) + string[0]\nend", "  # Find\
    \ the longest palindromic suffix\n  suffix = find_longest_palindromic_suffix(string)\n\
    \  # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n  string + string[0...(string.length - suffix.length)].reverse\n\
    end", "  return string if string.length == 1\n  return string + string.reverse\
    \ if string.length == 2", "  return string if string.length == 1\n  return string\
    \ + string.reverse if string.length == 2", "  return string if string.length ==\
    \ 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length <= 1\n  return string + string.reverse if string.length ==\
    \ 2\n  return string + string[1..-1].reverse if string.length == 3", "  return\
    \ string if palindrome?(string)\n  return string[0] + make_palindrome(string[1..-1])\
    \ if string.length == 2\n  return string[0] + make_palindrome(string[1..-2]) +\
    \ string[0] if string.length == 3\n  return string[0] + make_palindrome(string[1..-2])\
    \ + string[0] if string.length == 4\n  return string[0] + make_palindrome(string[1..-3])\
    \ + string[-2..-1] if string.length == 5\n  return string[0] + make_palindrome(string[1..-3])\
    \ + string[-2..-1] if string.length == 6\n  return string[0] + make_palindrome(string[1..-4])\
    \ + string[-3..-1] if string.length == 7\n  return string[0] + make_palindrome(string[1..-4])\
    \ + string[-3..-1] if string.length == 8\n  return string[0] + make_palindrome(string[1..-5])\
    \ + string[-4..-1] if string.length == 9\n  return string[0] + make_palindrome(string[1..-5])\
    \ + string[-4..-1] if string.length == 10\n  return string[0] + make_palindrome(string[1..-6])\
    \ + string[-5..-1] if string.length == 11\n  return string[0] + make_palindrome(string[1..-6])\
    \ + string[-5..-1] if string.length == 12\n  return string[0] + make_palindrome(string[1..-7])\
    \ + string[-6..-1] if string.length == 13\n  return string[0] + make_palindrome(string[1..-7])\
    \ + string[-6..-1] if string.length == 14\n  return string[0] + make_palindrome(string[1..-8])\
    \ + string[-7..-1] if string.length == 15\n  return string[0] + make_palindrome",
  "  return string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[1..-1].reverse if string.length == 3\n  return\
    \ string + string[2..-1].reverse if string.length == 4", "  # Find the longest\
    \ palindromic suffix of the string.\n  # This is done by iterating over the string\
    \ from the end to the beginning.\n  # For each character, we check if the substring\
    \ starting from the end of the string and ending at the current character is a\
    \ palindrome.\n  # If it is, we return the reverse of the substring that comes\
    \ before the palindromic suffix.\n  # If it is not, we continue.\n  (string.length\
    \ - 1).downto(0) do |i|\n    if is_palindrome?(string[i..-1])\n      return string[0..i-1].reverse\
    \ + string\n    end\n  end\nend", "  return string if string.length == 1\n  return\
    \ string + string.reverse if string.length == 2\n  return string + string[0..-3].reverse\
    \ if string.length == 3", "  return string if string.length <= 1\n  return string\
    \ + string.reverse if string.length == 2", "  # Find the longest palindromic suffix.\n\
    \  palindrome_suffix = find_longest_palindrome_suffix(string)\n  # Append the\
    \ reverse of the prefix that comes before the palindromic suffix.\n  string +\
    \ reverse_string(string[0..-palindrome_suffix.length - 1])\nend", "  # Find the\
    \ longest palindromic suffix of the string.\n  longest_palindromic_suffix = find_longest_palindromic_suffix(string)\n\
    \  # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n  string + string[0..-longest_palindromic_suffix.length\
    \ - 1].reverse\nend", "  return string if string.length == 1\n  return string\
    \ + string.reverse if string.length == 2\n  return string + string[1..-1].reverse\
    \ if string[0] == string[-1]\n  return string + string[2..-1].reverse if string[0]\
    \ == string[-2]\n  return string + string[3..-1].reverse if string[1] == string[-1]\n\
    \  return string + string[2..-2].reverse + string[1..-1] if string[1] == string[-2]\n\
    \  return string + string[3..-2].reverse + string[1..-1] if string[2] == string[-2]\n\
    \  return string + string[3..-3].reverse + string[2..-1] if string[2] == string[-3]\n\
    \  return string + string[4..-3].reverse + string[2..-1] if string[3] == string[-3]\n\
    \  return string + string[3..-4].reverse + string[2..-1] if string[2] == string[-4]\n\
    \  return string + string[4..-4].reverse + string[2..-1] if string[3] == string[-4]\n\
    \  return string + string[5..-4].reverse + string[2..-1] if string[4] == string[-4]\n\
    \  return string + string[3..-5].reverse + string[2..-1] if string[2] == string[-5]\n\
    \  return string + string[4..-5].reverse + string[2..-1] if string[3] == string[-5]\n\
    \  return string + string[5..-5].reverse + string[2..-1] if string[4] == string[-5]\n\
    \  return string + string[6..-5].reverse + string[2..-1] if string[5] == string[-5]\n\
    \  return string + string[3..-6].reverse + string[2..-1] if string[2] == string[-6]\n\
    \  return string + string[4..-6].reverse + string[2..-1] if string[3] == string[-6]",
  "  return string if string.length == 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[0..-3].reverse if string[-2..-1] == string[-2..-1].reverse",
  "  return string if string.length <= 1\n  return string if string == string.reverse",
  "  return string if string.length == 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[1..-1].reverse if string.length == 3", "  return\
    \ string if string.length <= 1\n  return string + string.reverse if string.length\
    \ == 2\n  return string + string[1..-1].reverse if string.length == 3\n  return\
    \ string + string[2..-1].reverse if string.length == 4\n  return string + string[3..-1].reverse\
    \ if string.length == 5\n  return string + string[4..-1].reverse if string.length\
    \ == 6\n  return string + string[5..-1].reverse if string.length == 7\n  return\
    \ string + string[6..-1].reverse if string.length == 8\n  return string + string[7..-1].reverse\
    \ if string.length == 9\n  return string + string[8..-1].reverse if string.length\
    \ == 10\n  return string + string[9..-1].reverse if string.length == 11\n  return\
    \ string + string[10..-1].reverse if string.length == 12\n  return string + string[11..-1].reverse\
    \ if string.length == 13\n  return string + string[12..-1].reverse if string.length\
    \ == 14\n  return string + string[13..-1].reverse if string.length == 15\n  return\
    \ string + string[14..-1].reverse if string.length == 16\n  return string + string[15..-1].reverse\
    \ if string.length == 17\n  return string + string[16..-1].reverse if string.length\
    \ == 18\n  return string + string[17..-1].reverse if string.length == 19\n  return\
    \ string + string[18..-1].reverse if string.length == 20\n  return string + string[19..-1].reverse\
    \ if string.length == 21\n  return string + string[20..-1].reverse if string.length\
    \ == 22\n  return string + string[21..-1].reverse if string.length == 23\n  return\
    \ string + string[22..-1].reverse if string.length == 24\n  return string + string[23..-1].reverse\
    \ if string.length == 25\n  return string + string[24..-1].reverse if string.length\
    \ == 26\n  return string + string[25..-1].reverse if string.length == 27\n  return\
    \ string + string[26..-1].reverse", "  return string if string.length <= 1\n \
    \ return string + string.reverse if string.length == 2", "  return string if string.length\
    \ == 1\n  return string + string.reverse if string.length == 2", "  return string\
    \ if string.length == 1\n  return string + string.reverse if string.length ==\
    \ 2", "  return string if string.length == 1\n  return string + string.reverse\
    \ if string.length == 2"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
