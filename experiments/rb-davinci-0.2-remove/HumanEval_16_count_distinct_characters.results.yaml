language: rb
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.split('').uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpojeqdkoe

    Started

    .

    Finished in 0.000409486 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2442.09 tests/s, 12210.43 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.split('').uniq.length\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp1mfh3hne

    Started

    .

    Finished in 0.000847882 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1179.41 tests/s, 5897.05 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.split('').uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpojeqdkoe

    Started

    .

    Finished in 0.000409486 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2442.09 tests/s, 12210.43 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.size\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz_x7ph28

    Started

    .

    Finished in 0.000650217 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1537.95 tests/s, 7689.74 assertions/s

    '
  stdout: ''
  timestamp: 1659805639
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.split('').uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpojeqdkoe

    Started

    .

    Finished in 0.000409486 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2442.09 tests/s, 12210.43 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.split('').uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpojeqdkoe

    Started

    .

    Finished in 0.000409486 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2442.09 tests/s, 12210.43 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.split('').uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpojeqdkoe

    Started

    .

    Finished in 0.000409486 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2442.09 tests/s, 12210.43 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.size\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz_x7ph28

    Started

    .

    Finished in 0.000650217 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1537.95 tests/s, 7689.74 assertions/s

    '
  stdout: ''
  timestamp: 1659805639
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.split('').uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpojeqdkoe

    Started

    .

    Finished in 0.000409486 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2442.09 tests/s, 12210.43 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.size\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz_x7ph28

    Started

    .

    Finished in 0.000650217 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1537.95 tests/s, 7689.74 assertions/s

    '
  stdout: ''
  timestamp: 1659805639
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  # TODO: implement\
    \ me\n  string.downcase.chars.uniq.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_distinct_characters\n    candidate\
    \ = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\"\
    ))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvb9haoaw

    Started

    .

    Finished in 0.000409661 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2441.04 tests/s, 12205.21 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.size\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz_x7ph28

    Started

    .

    Finished in 0.000650217 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1537.95 tests/s, 7689.74 assertions/s

    '
  stdout: ''
  timestamp: 1659805639
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.size\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz_x7ph28

    Started

    .

    Finished in 0.000650217 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1537.95 tests/s, 7689.74 assertions/s

    '
  stdout: ''
  timestamp: 1659805639
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.size\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz_x7ph28

    Started

    .

    Finished in 0.000650217 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1537.95 tests/s, 7689.74 assertions/s

    '
  stdout: ''
  timestamp: 1659805639
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
- exit_code: 0
  program: "# Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\ndef count_distinct_characters(string)\n  string.downcase.chars.uniq.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_distinct_characters\n\
    \    candidate = method(:count_distinct_characters)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(5, candidate.call(\"abcde\"))\n    assert_equal(5, candidate.call(\"\
    abcdecadeCADE\"))\n    assert_equal(1, candidate.call(\"aaaaAAAAaaaa\"))\n   \
    \ assert_equal(5, candidate.call(\"Jerry jERRY JeRRRY\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmproas7uvg

    Started

    .

    Finished in 0.000508855 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1965.20 tests/s, 9825.98 assertions/s

    '
  stdout: ''
  timestamp: 1659805638
