name: HumanEval_120_maximum
language: rb
prompt: "# Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Example\
  \ 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be in the range of\
  \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
  # 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
  \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
  \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
  \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
  \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
  \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
  \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2,\
  \ 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n   \
  \ assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10],\
  \ candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23,\
  \ 243, -400, 0], 0))\n  end\nend\n"
completions: ["  arr.sort.reverse.take(k)\nend", "    arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\nend", " \
    \ arr.sort.reverse.take(k)\nend", "  arr.sort[-k..-1]\nend", "  return arr if\
    \ arr.size <= k\n  arr.sort[-k..-1]\nend", "  arr.sort.last(k)\nend", "  return\
    \ arr if arr.length <= k\n  arr.sort[-k..-1]\nend", "  return arr if arr.size\
    \ <= k\n  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "    return arr if\
    \ arr.length <= k\n    res = []\n    arr.each do |num|\n        res.push(num)\n\
    \        res.sort!\n        res.pop if res.length > k\n    end\n    res\nend",
  "  return arr if arr.size <= k\n  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\nend", "    arr.sort.reverse.take(k)\n\
    end", "  arr.sort.reverse.take(k)\nend", "  return arr if arr.size <= k\n  arr.sort[-k..-1]\n\
    end", "    arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\n\
    end", "    return arr.sort.last(k)\nend", "  return arr if arr.length <= k\n \
    \ arr.sort[-k..-1]\nend", "  # return arr.sort.reverse[0..k-1]\n  return arr.sort[-k..-1]\n\
    end", "  return arr if arr.size <= k\n  arr.sort[-k..-1]\nend", "  # return arr.sort.reverse[0...k]\n\
    \  return arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\nend", "  return\
    \ arr if arr.length <= k\n  arr.sort!\n  arr[-k..-1]\nend", "  return arr if arr.length\
    \ <= k\n  arr.sort!\n  arr[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\nend", " \
    \ arr.sort.reverse.take(k)\nend", "  return arr if arr.size <= k\n  arr.sort.reverse.take(k)\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\nend", " \
    \ return arr if arr.size <= k\n  return arr.sort.last(k) if arr.size == k\n  arr.sort.last(k)\n\
    end", "  return arr.sort.last(k)\nend", "  return arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\n\
    end", "  return [] if arr.empty?\n  return arr if arr.size == k\n  return arr.sort.reverse[0...k]\
    \ if arr.size == k\n  return arr.sort.reverse[0...k] if arr.size < k\n  arr.sort.reverse[0...k]\n\
    end", "  return arr if arr.length <= k\n  return arr.sort.reverse[0...k]\nend",
  "  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\nend", "  return\
    \ [] if arr.empty? || k == 0\n  return arr if k >= arr.size\n  arr.sort[-k..-1]\n\
    end", "  return arr if arr.size <= k\n  arr.sort[-k..-1]\nend", "    return arr\
    \ if arr.length <= k\n    arr.sort.reverse[0..k-1]\nend", "    arr.sort.reverse.take(k)\n\
    end", "  arr.sort.reverse.take(k)\nend", "  #\nend", "  arr.sort.reverse.take(k)\n\
    end", "    return arr.sort.reverse[0...k]\nend", "  arr.sort.reverse.take(k)\n\
    end", "  return arr if arr.size <= k\n  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort.reverse.first(k)\nend", "  arr.sort.reverse.take(k)\nend", " \
    \ return arr if arr.length <= k\n  arr.sort.reverse[0...k]\nend", "  return arr\
    \ if arr.length <= k\n  arr.sort!\n  arr[-k..-1]\nend", "  arr.sort.reverse.take(k)\n\
    end", "  #\nend", "  return arr if arr.length <= k\n  arr.sort[-k..-1]\nend",
  "  return arr if arr.length <= k\n  return arr.sort.reverse[0...k]\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\nend", "  return\
    \ arr if arr.length <= k\n  arr.sort[-k..-1]\nend", "  return arr if arr.size\
    \ <= k\n  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  return arr if\
    \ arr.length <= k\n  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  return\
    \ arr if arr.length <= k\n  arr.sort[-k..-1]\nend", "  return arr if arr.length\
    \ <= k\n  arr.sort!\n  arr[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  return\
    \ arr if arr.length <= k\n  arr.sort!\n  arr[-k..-1]\nend", "  return arr if arr.length\
    \ <= k\n  arr.sort.reverse[0...k]\nend", "    return arr.sort.last(k)\nend", " \
    \ return arr if arr.size <= k\n  arr.sort[-k..-1]\nend", "    arr.sort.reverse.take(k)\n\
    end", "  arr.sort[-k..-1]\nend", "  return arr if arr.size <= k\n  arr.sort[-k..-1]\n\
    end", "  return arr if arr.size <= k\n  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort[-k..-1]\nend", "  return arr if arr.length <= k\n  res = []\n\
    \  arr.each do |num|\n    res.push(num) if res.length < k\n    res.sort!\n   \
    \ res.pop if res.length == k && num > res[0]\n  end\n  res\nend", "  arr.sort.reverse.take(k)\n\
    end", "  return arr if arr.length <= k\n  arr.sort.reverse[0...k]\nend", "  arr.sort[-k..-1]\n\
    end", "    arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\nend",
  "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  return arr if arr.size\
    \ <= k\n  return arr.sort.reverse[0...k]\nend", "  return arr if arr.size <= k\n\
    \  arr.sort[-k..-1]\nend", "  return arr if arr.length <= k\n  arr.sort[-k..-1]\n\
    end", "  arr.sort.reverse.take(k)\nend", "  return arr if arr.size <= k\n  arr.sort[-k..-1]\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\nend", "  return\
    \ arr if arr.length <= k\n  arr.sort!\n  arr[-k..-1]\nend", "  return arr if arr.size\
    \ <= k\n  arr.sort[-k..-1]\nend", "    return arr if arr.length <= k\n    res\
    \ = []\n    i = 0\n    while i < k\n        res << arr[i]\n        i += 1\n  \
    \  end\n    res.sort!\n    while i < arr.length\n        if arr[i] > res[0]\n\
    \            res.shift\n            res << arr[i]\n            res.sort!\n   \
    \     end\n        i += 1\n    end\n    res\nend", "  arr.sort.last(k)\nend",
  "  return arr.sort.last(k)\nend", "  arr.sort[-k..-1]\nend", "    arr.sort.reverse.take(k)\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\nend", " \
    \ arr.sort.reverse.take(k)\nend", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort.last(k)\nend", "  return\
    \ arr if arr.size <= k\n  return arr.sort.reverse[0...k]\nend", "    arr.sort[-k..-1]\n\
    end", "  return arr if arr.size <= k\n  arr.sort[-k..-1]\nend", "  arr.sort.last(k)\n\
    end", "  return arr if arr.length <= k\n  arr.sort[-k..-1]\nend", "  return arr\
    \ if arr.length <= k\n  arr.sort[-k..-1]\nend", "    return arr if arr.length\
    \ == k\n    return arr.sort.reverse[0...k]\nend", "  return arr if arr.size <=\
    \ k\n  arr.sort!\n  arr[-k..-1]\nend", "  arr.sort.last(k)\nend", "  arr.sort.reverse.take(k)\n\
    end", "  return arr if arr.size <= k\n  arr.sort[-k..-1]\nend", "  return arr\
    \ if arr.length <= k\n  arr.sort[-k..-1]\nend", "  arr.sort.reverse.first(k)\n\
    end", "  arr.sort!\n  arr[-k..-1]\nend", "  arr.sort.reverse.take(k)\nend", " \
    \ arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort.reverse.take(k)\nend", "  return arr if arr.size <= k\n  arr.sort[-k..-1]\n\
    end", "  arr.sort[-k..-1]\nend", "  return arr if arr.size <= k\n  arr.sort.reverse.take(k)\n\
    end", "  return arr if arr.length <= k\n  return arr.sort.reverse[0...k]\nend",
  "  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\nend", "  return\
    \ arr if arr.length <= k\n  arr.sort[-k..-1]\nend", "  return arr if arr.size\
    \ <= k\n  arr.sort[-k..-1]\nend", "  return arr if arr.length <= k\n  return arr.sort.reverse[0...k]\n\
    end", "  return arr.sort.last(k)\nend", "    arr.sort.reverse.take(k)\nend", " \
    \ return arr if arr.size <= k\n  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\n\
    end", "  return arr if arr.length <= k\n  arr.sort.reverse[0...k]\nend", "  return\
    \ arr if arr.length <= k\n  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\n\
    end", "  return arr if arr.length <= k\n  arr.sort.reverse[0...k]\nend", "  return\
    \ arr if arr.size <= k\n  arr.sort!\n  arr[-k..-1]\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort[-k..-1]\nend", "  return arr if arr.size <= k\n  arr.sort.reverse.take(k)\n\
    end", "  arr.sort.last(k)\nend", "  arr.sort.last(k)\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort.reverse.take(k)\nend", "  return arr if arr.size <= k\n  arr.sort[-k..-1]\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\nend", " \
    \ return arr if arr.length <= k\n  arr.sort.reverse[0...k]\nend", "  arr.sort.reverse.take(k)\n\
    end", "  return arr if arr.size <= k\n  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort[-k..-1]\nend", "    arr.sort.reverse.take(k)\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\nend", " \
    \ return arr if arr.size <= k\n  arr.sort.reverse.take(k)\nend", "  # return []\
    \ if arr.empty?\n  # return arr if k == arr.size\n  # return arr.sort.last(k)\
    \ if k == 1\n  # return arr.sort.first(k) if k == arr.size\n  # return arr.sort.first(k)\
    \ if k == arr.size\n  # return arr.sort.first(k) if k == arr.size\n  # return\
    \ arr.sort.first(k) if k == arr.size\n  # return arr.sort.first(k) if k == arr.size\n\
    \  # return arr.sort.first(k) if k == arr.size\n  # return arr.sort.first(k) if\
    \ k == arr.size\n  # return arr.sort.first(k) if k == arr.size\n  # return arr.sort.first(k)\
    \ if k == arr.size\n  # return arr.sort.first(k) if k == arr.size\n  # return\
    \ arr.sort.first(k) if k == arr.size\n  # return arr.sort.first(k) if k == arr.size\n\
    \  # return arr.sort.first(k) if k == arr.size\n  # return arr.sort.first(k) if\
    \ k == arr.size\n  # return arr.sort.first(k) if k == arr.size\n  # return arr.sort.first(k)\
    \ if k == arr.size\n  # return arr.sort.first(k) if k == arr.size\n  # return\
    \ arr.sort.first(k) if k == arr.size\n  # return arr.sort.first(k) if k == arr.size\n\
    \  # return arr.sort.first(k) if k == arr.size\n  # return arr.sort.first(k) if\
    \ k == arr.size\n  # return arr.sort.first(k) if k == arr.size\n  # return arr.sort.first(k)\
    \ if k == arr.size\n  # return arr.sort.first(k) if k == arr.size\n  # return\
    \ arr.sort.first(k) if k == arr.size\n  # return arr.sort.first(k) if k == arr.size\n\
    \  # return arr.sort", "  return arr if arr.length <= k\n  arr.sort.reverse[0...k]\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\nend", "  return\
    \ arr if arr.length <= k\n  arr.sort! { |a, b| b <=> a }\n  arr[0...k]\nend",
  "  arr.sort[-k..-1]\nend", "  return arr if arr.size <= k\n  arr.sort.reverse.take(k)\n\
    end", "  arr.sort!\n  arr[-k..-1]\nend", "  return arr if arr.length <= k\n  arr.sort[-k..-1]\n\
    end", "    return arr.sort.last(k)\nend", "  arr.sort.last(k)\nend", "  arr.sort.reverse.take(k)\n\
    end", "  return arr if arr.size <= k\n  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort.reverse.take(k)\nend", "  return arr if arr.length == k\n  return\
    \ arr.sort.reverse[0..k-1] if arr.length == k\n  arr.sort.reverse[0..k-1]\nend",
  "  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\nend", "  return\
    \ arr.sort.last(k)\nend", "  arr.sort.reverse.take(k)\nend", "  arr.sort[-k..-1]\n\
    end", "  return arr.sort.last(k)\nend", "  arr.sort[-k..-1]\nend", "    return\
    \ arr.sort.last(k)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
