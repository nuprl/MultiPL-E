language: rb
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.abs.digits.sum >\
    \ 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmzhc1zw0\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpmzhc1zw0.rb:13:in `test_count_nums'\n\
    \     10:   def test_count_nums\n     11:     candidate = method(:count_nums)\n\
    \     12:     assert_equal(0, candidate.call([]))\n  => 13:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     14:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006640623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.59 tests/s, 301.18 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum.positive?\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpda1ji5iy\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `digits'\n/tmp/tmpda1ji5iy.rb:6:in `block in count_nums'\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `count'\n/tmp/tmpda1ji5iy.rb:6:in `count_nums'\n/tmp/tmpda1ji5iy.rb:13:in `call'\n\
    /tmp/tmpda1ji5iy.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00120385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    830.67 tests/s, 830.67 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.select { |num| num.digits.sum > 0\
    \ }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4tyh9b7_\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `digits'\n/tmp/tmp4tyh9b7_.rb:6:in `block in count_nums'\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `select'\n/tmp/tmp4tyh9b7_.rb:6:in `count_nums'\n/tmp/tmp4tyh9b7_.rb:13:in `call'\n\
    /tmp/tmp4tyh9b7_.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001144041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    874.09 tests/s, 874.09 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.select { |num| num.digits.sum > 0\
    \ }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4tyh9b7_\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `digits'\n/tmp/tmp4tyh9b7_.rb:6:in `block in count_nums'\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `select'\n/tmp/tmp4tyh9b7_.rb:6:in `count_nums'\n/tmp/tmp4tyh9b7_.rb:13:in `call'\n\
    /tmp/tmp4tyh9b7_.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001144041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    874.09 tests/s, 874.09 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.select { |num| num.abs.digits.sum\
    \ > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpuvisahv_\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpuvisahv_.rb:13:in `test_count_nums'\n\
    \     10:   def test_count_nums\n     11:     candidate = method(:count_nums)\n\
    \     12:     assert_equal(0, candidate.call([]))\n  => 13:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     14:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.012954879 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.19 tests/s, 154.38 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  count = 0\n  arr.each do |num|\n    if\
    \ num < 0\n      num = num * -1\n    end\n    sum = 0\n    while num > 0\n   \
    \   sum += num % 10\n      num = num / 10\n    end\n    if sum > 0\n      count\
    \ += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpk_3q10j8\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpk_3q10j8.rb:27:in `test_count_nums'\n\
    \     24:   def test_count_nums\n     25:     candidate = method(:count_nums)\n\
    \     26:     assert_equal(0, candidate.call([]))\n  => 27:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     28:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     29:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     30:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006600032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.51 tests/s, 303.03 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |n| n.digits.sum > 0 }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn2ykzdik\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpn2ykzdik.rb:6:in\
    \ `digits'\n/tmp/tmpn2ykzdik.rb:6:in `block in count_nums'\n/tmp/tmpn2ykzdik.rb:6:in\
    \ `count'\n/tmp/tmpn2ykzdik.rb:6:in `count_nums'\n/tmp/tmpn2ykzdik.rb:13:in `call'\n\
    /tmp/tmpn2ykzdik.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001238628 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    807.34 tests/s, 807.34 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  count = 0\n  arr.each do |num|\n    sum\
    \ = 0\n    num.abs.to_s.each_char do |char|\n      sum += char.to_i\n    end\n\
    \    count += 1 if sum > 0\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpap14jsmr\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpap14jsmr.rb:21:in `test_count_nums'\n\
    \     18:   def test_count_nums\n     19:     candidate = method(:count_nums)\n\
    \     20:     assert_equal(0, candidate.call([]))\n  => 21:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     22:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     23:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     24:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006565159 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.32 tests/s, 304.64 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  count = 0\n  arr.each do |num|\n    sum\
    \ = 0\n    num.abs.to_s.each_char do |char|\n      sum += char.to_i\n    end\n\
    \    count += 1 if sum > 0\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpap14jsmr\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpap14jsmr.rb:21:in `test_count_nums'\n\
    \     18:   def test_count_nums\n     19:     candidate = method(:count_nums)\n\
    \     20:     assert_equal(0, candidate.call([]))\n  => 21:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     22:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     23:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     24:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006565159 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.32 tests/s, 304.64 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.select { |num| num.digits.sum > 0\
    \ }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4tyh9b7_\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `digits'\n/tmp/tmp4tyh9b7_.rb:6:in `block in count_nums'\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `select'\n/tmp/tmp4tyh9b7_.rb:6:in `count_nums'\n/tmp/tmp4tyh9b7_.rb:13:in `call'\n\
    /tmp/tmp4tyh9b7_.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001144041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    874.09 tests/s, 874.09 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.abs.digits.sum >\
    \ 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmzhc1zw0\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpmzhc1zw0.rb:13:in `test_count_nums'\n\
    \     10:   def test_count_nums\n     11:     candidate = method(:count_nums)\n\
    \     12:     assert_equal(0, candidate.call([]))\n  => 13:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     14:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006640623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.59 tests/s, 301.18 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.select { |num| num.digits.sum > 0\
    \ }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4tyh9b7_\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `digits'\n/tmp/tmp4tyh9b7_.rb:6:in `block in count_nums'\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `select'\n/tmp/tmp4tyh9b7_.rb:6:in `count_nums'\n/tmp/tmp4tyh9b7_.rb:13:in `call'\n\
    /tmp/tmp4tyh9b7_.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001144041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    874.09 tests/s, 874.09 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.select { |num| num.digits.sum > 0\
    \ }.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpz8wyrnlp\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpz8wyrnlp.rb:6:in\
    \ `digits'\n/tmp/tmpz8wyrnlp.rb:6:in `block in count_nums'\n/tmp/tmpz8wyrnlp.rb:6:in\
    \ `select'\n/tmp/tmpz8wyrnlp.rb:6:in `count_nums'\n/tmp/tmpz8wyrnlp.rb:13:in `call'\n\
    /tmp/tmpz8wyrnlp.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.002670616 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    374.45 tests/s, 374.45 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum.positive?\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpda1ji5iy\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `digits'\n/tmp/tmpda1ji5iy.rb:6:in `block in count_nums'\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `count'\n/tmp/tmpda1ji5iy.rb:6:in `count_nums'\n/tmp/tmpda1ji5iy.rb:13:in `call'\n\
    /tmp/tmpda1ji5iy.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00120385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    830.67 tests/s, 830.67 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.abs.digits.sum >\
    \ 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmzhc1zw0\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpmzhc1zw0.rb:13:in `test_count_nums'\n\
    \     10:   def test_count_nums\n     11:     candidate = method(:count_nums)\n\
    \     12:     assert_equal(0, candidate.call([]))\n  => 13:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     14:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006640623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.59 tests/s, 301.18 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum.positive?\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpda1ji5iy\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `digits'\n/tmp/tmpda1ji5iy.rb:6:in `block in count_nums'\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `count'\n/tmp/tmpda1ji5iy.rb:6:in `count_nums'\n/tmp/tmpda1ji5iy.rb:13:in `call'\n\
    /tmp/tmpda1ji5iy.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00120385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    830.67 tests/s, 830.67 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.select { |n| n.digits.sum > 0 }.count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmmi_evgj\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpmmi_evgj.rb:6:in\
    \ `digits'\n/tmp/tmpmmi_evgj.rb:6:in `block in count_nums'\n/tmp/tmpmmi_evgj.rb:6:in\
    \ `select'\n/tmp/tmpmmi_evgj.rb:6:in `count_nums'\n/tmp/tmpmmi_evgj.rb:13:in `call'\n\
    /tmp/tmpmmi_evgj.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.0012487 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    800.83 tests/s, 800.83 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum.positive?\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpda1ji5iy\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `digits'\n/tmp/tmpda1ji5iy.rb:6:in `block in count_nums'\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `count'\n/tmp/tmpda1ji5iy.rb:6:in `count_nums'\n/tmp/tmpda1ji5iy.rb:13:in `call'\n\
    /tmp/tmpda1ji5iy.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00120385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    830.67 tests/s, 830.67 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.select { |num| num.digits.sum > 0\
    \ }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4tyh9b7_\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `digits'\n/tmp/tmp4tyh9b7_.rb:6:in `block in count_nums'\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `select'\n/tmp/tmp4tyh9b7_.rb:6:in `count_nums'\n/tmp/tmp4tyh9b7_.rb:13:in `call'\n\
    /tmp/tmp4tyh9b7_.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001144041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    874.09 tests/s, 874.09 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpymnu96xm\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpymnu96xm.rb:12:in `test_count_nums'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n  => 12:     assert_equal(0, candidate.call([]))\n\
    \     13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006759147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.95 tests/s, 147.95 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum.positive?\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpda1ji5iy\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `digits'\n/tmp/tmpda1ji5iy.rb:6:in `block in count_nums'\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `count'\n/tmp/tmpda1ji5iy.rb:6:in `count_nums'\n/tmp/tmpda1ji5iy.rb:13:in `call'\n\
    /tmp/tmpda1ji5iy.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00120385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    830.67 tests/s, 830.67 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.abs.digits.sum >\
    \ 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmzhc1zw0\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpmzhc1zw0.rb:13:in `test_count_nums'\n\
    \     10:   def test_count_nums\n     11:     candidate = method(:count_nums)\n\
    \     12:     assert_equal(0, candidate.call([]))\n  => 13:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     14:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006640623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.59 tests/s, 301.18 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum.positive?\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpda1ji5iy\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `digits'\n/tmp/tmpda1ji5iy.rb:6:in `block in count_nums'\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `count'\n/tmp/tmpda1ji5iy.rb:6:in `count_nums'\n/tmp/tmpda1ji5iy.rb:13:in `call'\n\
    /tmp/tmpda1ji5iy.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00120385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    830.67 tests/s, 830.67 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.abs.digits.sum >\
    \ 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmzhc1zw0\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpmzhc1zw0.rb:13:in `test_count_nums'\n\
    \     10:   def test_count_nums\n     11:     candidate = method(:count_nums)\n\
    \     12:     assert_equal(0, candidate.call([]))\n  => 13:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     14:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006640623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.59 tests/s, 301.18 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.abs.digits.sum >\
    \ 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmzhc1zw0\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpmzhc1zw0.rb:13:in `test_count_nums'\n\
    \     10:   def test_count_nums\n     11:     candidate = method(:count_nums)\n\
    \     12:     assert_equal(0, candidate.call([]))\n  => 13:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     14:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006640623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.59 tests/s, 301.18 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  # TODO: write your code here\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpz4jspym5\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpz4jspym5.rb:12:in `test_count_nums'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n  => 12:     assert_equal(0, candidate.call([]))\n\
    \     13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006711299 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.00 tests/s, 149.00 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum.positive?\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpda1ji5iy\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `digits'\n/tmp/tmpda1ji5iy.rb:6:in `block in count_nums'\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `count'\n/tmp/tmpda1ji5iy.rb:6:in `count_nums'\n/tmp/tmpda1ji5iy.rb:13:in `call'\n\
    /tmp/tmpda1ji5iy.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00120385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    830.67 tests/s, 830.67 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.select { |num| num.digits.sum > 0\
    \ }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4tyh9b7_\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `digits'\n/tmp/tmp4tyh9b7_.rb:6:in `block in count_nums'\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `select'\n/tmp/tmp4tyh9b7_.rb:6:in `count_nums'\n/tmp/tmp4tyh9b7_.rb:13:in `call'\n\
    /tmp/tmp4tyh9b7_.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001144041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    874.09 tests/s, 874.09 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpymnu96xm\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpymnu96xm.rb:12:in `test_count_nums'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n  => 12:     assert_equal(0, candidate.call([]))\n\
    \     13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006759147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.95 tests/s, 147.95 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.select { |num| num.digits.sum > 0\
    \ }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4tyh9b7_\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `digits'\n/tmp/tmp4tyh9b7_.rb:6:in `block in count_nums'\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `select'\n/tmp/tmp4tyh9b7_.rb:6:in `count_nums'\n/tmp/tmp4tyh9b7_.rb:13:in `call'\n\
    /tmp/tmp4tyh9b7_.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001144041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    874.09 tests/s, 874.09 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.select { |num| num.digits.sum > 0\
    \ }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4tyh9b7_\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `digits'\n/tmp/tmp4tyh9b7_.rb:6:in `block in count_nums'\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `select'\n/tmp/tmp4tyh9b7_.rb:6:in `count_nums'\n/tmp/tmp4tyh9b7_.rb:13:in `call'\n\
    /tmp/tmp4tyh9b7_.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001144041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    874.09 tests/s, 874.09 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.select { |num| num.digits.sum > 0\
    \ }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4tyh9b7_\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `digits'\n/tmp/tmp4tyh9b7_.rb:6:in `block in count_nums'\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `select'\n/tmp/tmp4tyh9b7_.rb:6:in `count_nums'\n/tmp/tmp4tyh9b7_.rb:13:in `call'\n\
    /tmp/tmp4tyh9b7_.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001144041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    874.09 tests/s, 874.09 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.abs.digits.sum >\
    \ 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmzhc1zw0\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpmzhc1zw0.rb:13:in `test_count_nums'\n\
    \     10:   def test_count_nums\n     11:     candidate = method(:count_nums)\n\
    \     12:     assert_equal(0, candidate.call([]))\n  => 13:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     14:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006640623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.59 tests/s, 301.18 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |n| n.digits.sum > 0 }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn2ykzdik\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpn2ykzdik.rb:6:in\
    \ `digits'\n/tmp/tmpn2ykzdik.rb:6:in `block in count_nums'\n/tmp/tmpn2ykzdik.rb:6:in\
    \ `count'\n/tmp/tmpn2ykzdik.rb:6:in `count_nums'\n/tmp/tmpn2ykzdik.rb:13:in `call'\n\
    /tmp/tmpn2ykzdik.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001238628 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    807.34 tests/s, 807.34 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum.positive?\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpda1ji5iy\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `digits'\n/tmp/tmpda1ji5iy.rb:6:in `block in count_nums'\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `count'\n/tmp/tmpda1ji5iy.rb:6:in `count_nums'\n/tmp/tmpda1ji5iy.rb:13:in `call'\n\
    /tmp/tmpda1ji5iy.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00120385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    830.67 tests/s, 830.67 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |n| n.digits.sum > 0 }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn2ykzdik\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpn2ykzdik.rb:6:in\
    \ `digits'\n/tmp/tmpn2ykzdik.rb:6:in `block in count_nums'\n/tmp/tmpn2ykzdik.rb:6:in\
    \ `count'\n/tmp/tmpn2ykzdik.rb:6:in `count_nums'\n/tmp/tmpn2ykzdik.rb:13:in `call'\n\
    /tmp/tmpn2ykzdik.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001238628 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    807.34 tests/s, 807.34 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  count = 0\n  arr.each do |num|\n    if\
    \ num < 0\n      num = num * -1\n    end\n    sum = 0\n    while num > 0\n   \
    \   sum += num % 10\n      num = num / 10\n    end\n    if sum > 0\n      count\
    \ += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpk_3q10j8\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpk_3q10j8.rb:27:in `test_count_nums'\n\
    \     24:   def test_count_nums\n     25:     candidate = method(:count_nums)\n\
    \     26:     assert_equal(0, candidate.call([]))\n  => 27:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     28:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     29:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     30:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006600032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.51 tests/s, 303.03 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  count = 0\n  arr.each do |num|\n    if\
    \ num < 0\n      num = num * -1\n    end\n    sum = 0\n    while num > 0\n   \
    \   sum += num % 10\n      num = num / 10\n    end\n    if sum > 0\n      count\
    \ += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpk_3q10j8\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpk_3q10j8.rb:27:in `test_count_nums'\n\
    \     24:   def test_count_nums\n     25:     candidate = method(:count_nums)\n\
    \     26:     assert_equal(0, candidate.call([]))\n  => 27:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     28:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     29:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     30:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006600032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.51 tests/s, 303.03 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  count = 0\n  arr.each do |num|\n    sum\
    \ = 0\n    num.to_s.split('').each do |digit|\n      sum += digit.to_i\n    end\n\
    \    count += 1 if sum > 0\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp8mxlpg01\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmp8mxlpg01.rb:21:in `test_count_nums'\n\
    \     18:   def test_count_nums\n     19:     candidate = method(:count_nums)\n\
    \     20:     assert_equal(0, candidate.call([]))\n  => 21:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     22:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     23:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     24:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006463228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.72 tests/s, 309.44 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.select { |num| num.digits.sum > 0\
    \ }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4tyh9b7_\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `digits'\n/tmp/tmp4tyh9b7_.rb:6:in `block in count_nums'\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `select'\n/tmp/tmp4tyh9b7_.rb:6:in `count_nums'\n/tmp/tmp4tyh9b7_.rb:13:in `call'\n\
    /tmp/tmp4tyh9b7_.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001144041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    874.09 tests/s, 874.09 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.select { |num| num.digits.sum > 0\
    \ }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4tyh9b7_\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `digits'\n/tmp/tmp4tyh9b7_.rb:6:in `block in count_nums'\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `select'\n/tmp/tmp4tyh9b7_.rb:6:in `count_nums'\n/tmp/tmp4tyh9b7_.rb:13:in `call'\n\
    /tmp/tmp4tyh9b7_.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001144041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    874.09 tests/s, 874.09 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum.positive?\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpda1ji5iy\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `digits'\n/tmp/tmpda1ji5iy.rb:6:in `block in count_nums'\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `count'\n/tmp/tmpda1ji5iy.rb:6:in `count_nums'\n/tmp/tmpda1ji5iy.rb:13:in `call'\n\
    /tmp/tmpda1ji5iy.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00120385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    830.67 tests/s, 830.67 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.select { |num| num.digits.sum > 0\
    \ }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4tyh9b7_\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `digits'\n/tmp/tmp4tyh9b7_.rb:6:in `block in count_nums'\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `select'\n/tmp/tmp4tyh9b7_.rb:6:in `count_nums'\n/tmp/tmp4tyh9b7_.rb:13:in `call'\n\
    /tmp/tmp4tyh9b7_.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001144041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    874.09 tests/s, 874.09 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.select { |num| num.digits.sum > 0\
    \ }.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpz8wyrnlp\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpz8wyrnlp.rb:6:in\
    \ `digits'\n/tmp/tmpz8wyrnlp.rb:6:in `block in count_nums'\n/tmp/tmpz8wyrnlp.rb:6:in\
    \ `select'\n/tmp/tmpz8wyrnlp.rb:6:in `count_nums'\n/tmp/tmpz8wyrnlp.rb:13:in `call'\n\
    /tmp/tmpz8wyrnlp.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.002670616 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    374.45 tests/s, 374.45 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  count = 0\n  arr.each do |num|\n    sum\
    \ = 0\n    num = num.abs\n    while num > 0\n      sum += num % 10\n      num\
    \ /= 10\n    end\n    count += 1 if sum > 0\n  end\n  count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwf4y3a7e\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpwf4y3a7e.rb:23:in `test_count_nums'\n\
    \     20:   def test_count_nums\n     21:     candidate = method(:count_nums)\n\
    \     22:     assert_equal(0, candidate.call([]))\n  => 23:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     24:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     25:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     26:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006766317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.79 tests/s, 295.58 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpymnu96xm\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpymnu96xm.rb:12:in `test_count_nums'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n  => 12:     assert_equal(0, candidate.call([]))\n\
    \     13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006759147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.95 tests/s, 147.95 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum.positive?\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpda1ji5iy\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `digits'\n/tmp/tmpda1ji5iy.rb:6:in `block in count_nums'\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `count'\n/tmp/tmpda1ji5iy.rb:6:in `count_nums'\n/tmp/tmpda1ji5iy.rb:13:in `call'\n\
    /tmp/tmpda1ji5iy.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00120385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    830.67 tests/s, 830.67 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count do |num|\n    num.abs.digits.sum\
    \ > 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpm9pcrckm\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpm9pcrckm.rb:15:in `test_count_nums'\n\
    \     12:   def test_count_nums\n     13:     candidate = method(:count_nums)\n\
    \     14:     assert_equal(0, candidate.call([]))\n  => 15:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     16:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     17:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     18:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006816761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.70 tests/s, 293.39 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count do |num|\n    num.digits.sum\
    \ > 0\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpq_1upg1i\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpq_1upg1i.rb:7:in\
    \ `digits'\n/tmp/tmpq_1upg1i.rb:7:in `block in count_nums'\n/tmp/tmpq_1upg1i.rb:6:in\
    \ `count'\n/tmp/tmpq_1upg1i.rb:6:in `count_nums'\n/tmp/tmpq_1upg1i.rb:15:in `call'\n\
    /tmp/tmpq_1upg1i.rb:15:in `test_count_nums'\n     12:   def test_count_nums\n\
    \     13:     candidate = method(:count_nums)\n     14:     assert_equal(0, candidate.call([]))\n\
    \  => 15:     assert_equal(0, candidate.call([-1, -2, 0]))\n     16:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     17:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     18:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001168014 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    856.15 tests/s, 856.15 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.abs.digits.sum >\
    \ 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmzhc1zw0\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpmzhc1zw0.rb:13:in `test_count_nums'\n\
    \     10:   def test_count_nums\n     11:     candidate = method(:count_nums)\n\
    \     12:     assert_equal(0, candidate.call([]))\n  => 13:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     14:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006640623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.59 tests/s, 301.18 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  count = 0\n  arr.each do |num|\n    if\
    \ num < 0\n      num = num * -1\n    end\n    sum = 0\n    while num > 0\n   \
    \   sum += num % 10\n      num = num / 10\n    end\n    if sum > 0\n      count\
    \ += 1\n    end\n  end\n  return count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpk_3q10j8\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpk_3q10j8.rb:27:in `test_count_nums'\n\
    \     24:   def test_count_nums\n     25:     candidate = method(:count_nums)\n\
    \     26:     assert_equal(0, candidate.call([]))\n  => 27:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     28:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     29:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     30:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006600032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.51 tests/s, 303.03 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.select { |num| num.digits.sum > 0\
    \ }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4tyh9b7_\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `digits'\n/tmp/tmp4tyh9b7_.rb:6:in `block in count_nums'\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `select'\n/tmp/tmp4tyh9b7_.rb:6:in `count_nums'\n/tmp/tmp4tyh9b7_.rb:13:in `call'\n\
    /tmp/tmp4tyh9b7_.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001144041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    874.09 tests/s, 874.09 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum.positive?\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpda1ji5iy\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `digits'\n/tmp/tmpda1ji5iy.rb:6:in `block in count_nums'\n/tmp/tmpda1ji5iy.rb:6:in\
    \ `count'\n/tmp/tmpda1ji5iy.rb:6:in `count_nums'\n/tmp/tmpda1ji5iy.rb:13:in `call'\n\
    /tmp/tmpda1ji5iy.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00120385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    830.67 tests/s, 830.67 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.select { |num| num.digits.sum > 0\
    \ }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4tyh9b7_\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `digits'\n/tmp/tmp4tyh9b7_.rb:6:in `block in count_nums'\n/tmp/tmp4tyh9b7_.rb:6:in\
    \ `select'\n/tmp/tmp4tyh9b7_.rb:6:in `count_nums'\n/tmp/tmp4tyh9b7_.rb:13:in `call'\n\
    /tmp/tmp4tyh9b7_.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001144041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    874.09 tests/s, 874.09 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\ndef count_nums(arr)\n  arr.count { |num| num.digits.sum > 0 }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
    \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
    \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1,\
    \ 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfc25fkcf\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `digits'\n/tmp/tmpfc25fkcf.rb:6:in `block in count_nums'\n/tmp/tmpfc25fkcf.rb:6:in\
    \ `count'\n/tmp/tmpfc25fkcf.rb:6:in `count_nums'\n/tmp/tmpfc25fkcf.rb:13:in `call'\n\
    /tmp/tmpfc25fkcf.rb:13:in `test_count_nums'\n     10:   def test_count_nums\n\
    \     11:     candidate = method(:count_nums)\n     12:     assert_equal(0, candidate.call([]))\n\
    \  => 13:     assert_equal(0, candidate.call([-1, -2, 0]))\n     14:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     15:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     16:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001166496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    857.27 tests/s, 857.27 assertions/s\n"
  timestamp: 1659798544
