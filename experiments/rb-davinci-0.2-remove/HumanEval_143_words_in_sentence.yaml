name: HumanEval_143_words_in_sentence
language: rb
prompt: "# You are given a string representing a sentence,\n# the sentence contains\
  \ some words separated by a space,\n# and you have to return a string that contains\
  \ the words from the original sentence,\n# whose lengths are prime numbers,\n# the\
  \ order of the words in the new string should be the same as the original one.\n\
  # Example 1:\n# Example 2:\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence\
  \ contains only letters\ndef words_in_sentence(sentence)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_words_in_sentence\n\
  \    candidate = method(:words_in_sentence)\n    assert_equal(\"is\", candidate.call(\"\
  This is a test\"))\n    assert_equal(\"go for\", candidate.call(\"lets go for swimming\"\
  ))\n    assert_equal(\"there is no place\", candidate.call(\"there is no place available\
  \ here\"))\n    assert_equal(\"Hi am Hussein\", candidate.call(\"Hi I am Hussein\"\
  ))\n    assert_equal(\"go for it\", candidate.call(\"go for it\"))\n    assert_equal(\"\
  \", candidate.call(\"here\"))\n    assert_equal(\"is\", candidate.call(\"here is\"\
  ))\n  end\nend\n"
completions: ["  words = sentence.split(' ')\n  prime_words = []\n  words.each do\
    \ |word|\n    prime_words << word if is_prime?(word.length)\n  end\n  prime_words.join('\
    \ ')\nend", "  sentence.split.select { |word| is_prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  words = sentence.split(' ')\n  result = []\n  words.each do |word|\n\
    \    result << word if prime?(word.length)\n  end\n  result.join(' ')\nend", " \
    \ sentence.split(\" \").select { |word| word.length.prime? }.join(\" \")\nend",
  "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ prime?(word.length) }.join(' ')\nend", "  words = sentence.split(' ')\n  prime_words\
    \ = []\n  words.each do |word|\n    if is_prime?(word.length)\n      prime_words\
    \ << word\n    end\n  end\n  prime_words.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  words = sentence.split(' ')\n\
    \  words.select { |word| is_prime?(word.length) }.join(' ')\nend", "  words =\
    \ sentence.split(' ')\n  prime_words = []\n  words.each do |word|\n    prime_words\
    \ << word if is_prime?(word.length)\n  end\n  prime_words.join(' ')\nend", " \
    \ sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  words\
    \ = sentence.split(\" \")\n  result = []\n  words.each do |word|\n    if is_prime?(word.length)\n\
    \      result << word\n    end\n  end\n  result.join(\" \")\nend", "  sentence.split.select\
    \ { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split(' ').select\
    \ { |word| is_prime?(word.length) }.join(' ')\nend", "  words = sentence.split('\
    \ ')\n  new_sentence = ''\n  words.each do |word|\n    if is_prime?(word.length)\n\
    \      new_sentence += word + ' '\n    end\n  end\n  new_sentence.strip\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  words\
    \ = sentence.split(' ')\n  result = []\n  words.each do |word|\n    result <<\
    \ word if is_prime?(word.length)\n  end\n  result.join(' ')\nend", "  sentence.split.select\
    \ { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  words = sentence.split(' ')\n  prime_words\
    \ = words.select { |word| is_prime?(word.length) }\n  prime_words.join(' ')\n\
    end", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend",
  "  sentence.split.select { |word| is_prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word|\
    \ prime?(word.length) }.join(' ')\nend", "  words = sentence.split(' ')\n  result\
    \ = []\n  words.each do |word|\n    if is_prime?(word.length)\n      result <<\
    \ word\n    end\n  end\n  result.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  prime_numbers = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\
    \  sentence.split(' ').select { |word| prime_numbers.include?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select { |word| is_prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| is_prime?(word.length) }.join(' ')\nend",
  "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend", "  words\
    \ = sentence.split(' ')\n  prime_words = []\n  words.each do |word|\n    prime_words\
    \ << word if is_prime?(word.length)\n  end\n  prime_words.join(' ')\nend", " \
    \ sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  words = sentence.split(\"\
    \ \")\n  prime_words = []\n  words.each do |word|\n    if is_prime?(word.length)\n\
    \      prime_words << word\n    end\n  end\n  prime_words.join(\" \")\nend", " \
    \ sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ is_prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  # TODO: return a string containing the words from the\
    \ original sentence,\n  # whose lengths are prime numbers,\n  # the order of the\
    \ words in the new string should be the same as the original one.\n  sentence.split.select\
    \ { |word| is_prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  # your code here\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\n\
    end", "  words = sentence.split(' ')\n  primes = []\n  words.each do |word|\n\
    \    primes << word if is_prime?(word.length)\n  end\n  primes.join(' ')\nend",
  "  sentence.split(' ').select { |word| is_prime?(word.length) }.join(' ')\nend",
  "  sentence.split.select { |word| is_prime?(word.length) }.join(' ')\nend", "  words\
    \ = sentence.split(' ')\n  result = []\n  words.each do |word|\n    if is_prime?(word.length)\n\
    \      result << word\n    end\n  end\n  result.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  words = sentence.split(' ')\n  result\
    \ = []\n  words.each do |word|\n    result << word if is_prime?(word.length)\n\
    \  end\n  result.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  words = sentence.split(' ')\n  result = []\n  words.each\
    \ do |word|\n    result << word if is_prime?(word.length)\n  end\n  result.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  words = sentence.split(' ')\n  words.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split(' ').select { |word| prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\n\
    end", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| prime?(word.length) }.join(' ')\nend", "  words = sentence.split(\"\
    \ \")\n  prime_words = []\n  words.each do |word|\n    if is_prime?(word.length)\n\
    \      prime_words << word\n    end\n  end\n  prime_words.join(\" \")\nend", " \
    \ sentence.split.select { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ is_prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| is_prime?(word.length) }.join(' ')\nend",
  "  sentence.split(\" \").select { |word| word.length.prime? }.join(\" \")\nend",
  "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| is_prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| is_prime?(word.length) }.join(' ')\nend", "  words = sentence.split('\
    \ ')\n  words.select { |word| is_prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word|\
    \ prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  words = sentence.split(' ')\n  words.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\n\
    end", "  sentence.split.select { |word| is_prime?(word.length) }.join(' ')\nend",
  "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| prime?(word.length) }.join(' ')\nend", "  words = sentence.split('\
    \ ')\n  prime_words = []\n  words.each do |word|\n    prime_words << word if is_prime?(word.length)\n\
    \  end\n  prime_words.join(' ')\nend", "  sentence.split.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\n\
    end", "  sentence.split.select { |word| is_prime?(word.length) }.join(' ')\nend",
  "  sentence.split(' ').select { |word| is_prime?(word.length) }.join(' ')\nend",
  "  words = sentence.split(' ')\n  prime_words = []\n  words.each do |word|\n   \
    \ prime_words << word if is_prime?(word.length)\n  end\n  prime_words.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  words = sentence.split(' ')\n  primes = []\n  words.each do |word|\n    primes\
    \ << word if is_prime?(word.length)\n  end\n  primes.join(' ')\nend", "  words\
    \ = sentence.split(' ')\n  result = []\n  words.each do |word|\n    result <<\
    \ word if prime?(word.length)\n  end\n  result.join(' ')\nend", "  sentence.split.select\
    \ { |word| is_prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  words = sentence.split\n  prime_words = words.select {\
    \ |word| prime?(word.length) }\n  prime_words.join(' ')\nend", "  sentence.split.select\
    \ { |word| is_prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| is_prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  words = sentence.split(' ')\n\
    \  words.select { |word| is_prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  words = sentence.split(' ')\n\
    \  result = []\n  words.each do |word|\n    result << word if is_prime?(word.length)\n\
    \  end\n  result.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join('\
    \ ')\nend", "  words = sentence.split(' ')\n  result = []\n  words.each do |word|\n\
    \    result << word if is_prime?(word.length)\n  end\n  result.join(' ')\nend",
  "  words = sentence.split(' ')\n  result = []\n  words.each do |word|\n    result\
    \ << word if is_prime?(word.length)\n  end\n  result.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  words = sentence.split(' ')\n  words.select\
    \ { |word| is_prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ is_prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word|\
    \ prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  words = sentence.split(' ')\n  result = []\n  words.each\
    \ do |word|\n    if is_prime?(word.length)\n      result << word\n    end\n  end\n\
    \  result.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\n\
    end", "  words = sentence.split(' ')\n  result = []\n  words.each do |word|\n\
    \    result << word if is_prime?(word.length)\n  end\n  result.join(' ')\nend",
  "  words = sentence.split(' ')\n  primes = []\n  words.each do |word|\n    primes\
    \ << word if is_prime?(word.length)\n  end\n  primes.join(' ')\nend", "  sentence.split('\
    \ ').select { |word| is_prime?(word.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select { |word| is_prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend",
  "  words = sentence.split(' ')\n  result = []\n  words.each do |word|\n    result\
    \ << word if is_prime?(word.length)\n  end\n  result.join(' ')\nend", "  # Write\
    \ your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  words\
    \ = sentence.split(' ')\n  prime_words = []\n  words.each do |word|\n    prime_words\
    \ << word if is_prime?(word.length)\n  end\n  prime_words.join(' ')\nend", " \
    \ sentence.split.select { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split('\
    \ ').select { |word| is_prime?(word.length) }.join(' ')\nend", "  sentence.split(\"\
    \ \").select { |word| prime?(word.length) }.join(\" \")\nend", "  sentence.split.select\
    \ { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\n\
    end", "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend",
  "  sentence.split.select { |word| prime?(word.length) }.join(' ')\nend", "  words\
    \ = sentence.split(\" \")\n  result = []\n  words.each do |word|\n    if is_prime?(word.length)\n\
    \      result << word\n    end\n  end\n  result.join(\" \")\nend", "  sentence.split.select\
    \ { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| is_prime?(word.length) }.join(' ')\nend",
  "  words = sentence.split(' ')\n  prime_words = words.select { |word| prime?(word.length)\
    \ }\n  prime_words.join(' ')\nend", "  words = sentence.split(' ')\n  result =\
    \ []\n  words.each do |word|\n    if is_prime?(word.length)\n      result << word\n\
    \    end\n  end\n  result.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length) }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  words = sentence.split(\" \")\n  result = []\n  words.each do |word|\n\
    \    result << word if is_prime?(word.length)\n  end\n  result.join(\" \")\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split(\" \").select\
    \ { |word| is_prime?(word.length) }.join(\" \")\nend", "  sentence.split.select\
    \ { |word| prime?(word.length) }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
