name: HumanEval_136_largest_smallest_integers
language: rb
prompt: "# Create a function that returns a tuple (a, b), where 'a' is\n# the largest\
  \ of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n\
  # If there is no negative or positive integers, return them as None.\n# Examples:\n\
  def largest_smallest_integers(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_smallest_integers\n\
  \    candidate = method(:largest_smallest_integers)\n    assert_equal([nil, 1],\
  \ candidate.call([2, 4, 1, 3, 5, 7]))\n    assert_equal([nil, 1], candidate.call([2,\
  \ 4, 1, 3, 5, 7, 0]))\n    assert_equal([-2, 1], candidate.call([1, 3, 2, 4, 5,\
  \ 6, -2]))\n    assert_equal([-7, 2], candidate.call([4, 5, 3, 6, 2, 7, -7]))\n\
  \    assert_equal([-9, 2], candidate.call([7, 3, 8, 4, 9, 2, 5, -9]))\n    assert_equal([nil,\
  \ nil], candidate.call([]))\n    assert_equal([nil, nil], candidate.call([0]))\n\
  \    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6]))\n    assert_equal([-1,\
  \ nil], candidate.call([-1, -3, -5, -6, 0]))\n    assert_equal([-3, 1], candidate.call([-6,\
  \ -4, -4, -3, 1]))\n    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, -100,\
  \ 1]))\n  end\nend\n"
completions: ["  # your code here\nend", "  # Your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  if lst.all? { |x| x < 0 }\n    return\
    \ [lst.max, nil]\n  elsif lst.all? { |x| x > 0 }\n    return [nil, lst.min]\n\
    \  else\n    return [lst.select { |x| x < 0 }.max, lst.select { |x| x > 0 }.min]\n\
    \  end\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select { |x| x >\
    \ 0 }.min\n  return [a, b]\nend", "  # Your code here\nend", "  # your code here\n\
    end", "  # Your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # Your code here\nend", "  # your code here\n\
    end", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n\
    \  [a, b]\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select { |x| x\
    \ > 0 }.min\n  return a, b\nend", "  # your code here\nend", "  a = lst.select\
    \ { |num| num < 0 }.max\n  b = lst.select { |num| num > 0 }.min\n  return [a,\
    \ b]\nend", "  if lst.all? { |n| n < 0 }\n    return [lst.max, nil]\n  elsif lst.all?\
    \ { |n| n > 0 }\n    return [nil, lst.min]\n  else\n    return [lst.select { |n|\
    \ n < 0 }.max, lst.select { |n| n > 0 }.min]\n  end\nend", "  neg = []\n  pos\
    \ = []\n  lst.each do |x|\n    if x < 0\n      neg << x\n    elsif x > 0\n   \
    \   pos << x\n    end\n  end\n  if neg.length == 0\n    neg = nil\n  else\n  \
    \  neg = neg.max\n  end\n  if pos.length == 0\n    pos = nil\n  else\n    pos\
    \ = pos.min\n  end\n  return neg, pos\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select { |x|\
    \ x > 0 }.min\n  a.nil? || b.nil? ? [a, b] : [a, b]\nend", "  # your code here\n\
    end", "  # Your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select\
    \ { |x| x > 0 }.min\n  a = nil if a.nil?\n  b = nil if b.nil?\n  return a, b\n\
    end", "  # Your code here\nend", "  # your code here\nend", "  # Your code here\n\
    end", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n\
    \  return a, b\nend", "  # your code here\nend", "  # Your code here\nend", " \
    \ # your code here\nend", "  # Your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # Your code here\nend", "  # your code here\nend",
  "  neg_max = lst.select { |num| num < 0 }.max\n  pos_min = lst.select { |num| num\
    \ > 0 }.min\n  [neg_max, pos_min]\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # your code here\nend", "  if lst.empty?\n    return [nil, nil]\n  end\n  negatives\
    \ = lst.select { |num| num < 0 }\n  positives = lst.select { |num| num > 0 }\n\
    \  if negatives.empty?\n    return [nil, positives.min]\n  elsif positives.empty?\n\
    \    return [negatives.max, nil]\n  else\n    return [negatives.max, positives.min]\n\
    \  end\nend", "  # your code here\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select\
    \ { |x| x > 0 }.min\n  return [a, b]\nend", "  # Your code here\nend", "  # your\
    \ code here\nend", "  lst.select { |num| num < 0 }.max\n  lst.select { |num| num\
    \ > 0 }.min\nend", "  # Your code here\nend", "  # your code here\nend", "  lst.select\
    \ { |x| x < 0 }.max\n  lst.select { |x| x > 0 }.min\nend", "  neg = lst.select\
    \ { |n| n < 0 }\n  pos = lst.select { |n| n > 0 }\n  return [neg.max, pos.min]\n\
    end", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n\
    \  [a, b]\nend", "  # your code here\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  neg = []\n  pos = []\n  lst.each do |x|\n    if x < 0\n\
    \      neg << x\n    elsif x > 0\n      pos << x\n    end\n  end\n  if neg ==\
    \ []\n    neg = nil\n  else\n    neg = neg.max\n  end\n  if pos == []\n    pos\
    \ = nil\n  else\n    pos = pos.min\n  end\n  return neg, pos\nend", "  # Your\
    \ code here\nend", "  lst.select { |x| x < 0 }.max\n  lst.select { |x| x > 0 }.min\n\
    end", "  # Your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # Your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  a = lst.select\
    \ { |x| x < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n  [a, b]\nend", "  a\
    \ = lst.select { |x| x < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n  [a, b]\n\
    end", "  # your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  a = lst.select\
    \ { |i| i < 0 }.max\n  b = lst.select { |i| i > 0 }.min\n  return a, b\nend",
  "  # your code here\nend", "  # your code here\nend", "  # Your code here\nend",
  "  lst.select { |x| x < 0 }.max\n  lst.select { |x| x > 0 }.min\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  # Your code here\nend", "  # your code here\nend",
  "  # return [lst.select { |x| x < 0 }.max, lst.select { |x| x > 0 }.min]\n  # return\
    \ [lst.select { |x| x < 0 }.max, lst.select { |x| x > 0 }.min]\n  # return [lst.select\
    \ { |x| x < 0 }.max, lst.select { |x| x > 0 }.min]\n  # return [lst.select { |x|\
    \ x < 0 }.max, lst.select { |x| x > 0 }.min]\n  # return [lst.select { |x| x <\
    \ 0 }.max, lst.select { |x| x > 0 }.min]\n  # return [lst.select { |x| x < 0 }.max,\
    \ lst.select { |x| x > 0 }.min]\n  # return [lst.select { |x| x < 0 }.max, lst.select\
    \ { |x| x > 0 }.min]\n  # return [lst.select { |x| x < 0 }.max, lst.select { |x|\
    \ x > 0 }.min]\n  # return [lst.select { |x| x < 0 }.max, lst.select { |x| x >\
    \ 0 }.min]\n  # return [lst.select { |x| x < 0 }.max, lst.select { |x| x > 0 }.min]\n\
    \  # return [lst.select { |x| x < 0 }.max, lst.select { |x| x > 0 }.min]\n  #\
    \ return [lst.select { |x| x < 0 }.max, lst.select { |x| x > 0 }.min]\n  # return\
    \ [lst.select { |x| x < 0 }.max, lst.select { |x| x > 0 }.min]\n  # return [lst.select\
    \ { |x| x < 0 }.max, lst.select { |x| x > 0 }.min]\n  # return [lst.select { |x|\
    \ x < 0 }.max, lst", "  # your code here\nend", "  # your code here\nend", " \
    \ if lst.all? { |num| num < 0 }\n    return [lst.max, nil]\n  elsif lst.all? {\
    \ |num| num > 0 }\n    return [nil, lst.min]\n  elsif lst.all? { |num| num ==\
    \ 0 }\n    return [nil, nil]\n  else\n    return [lst.select { |num| num < 0 }.max,\
    \ lst.select { |num| num > 0 }.min]\n  end\nend", "  a = lst.select { |x| x <\
    \ 0 }.max\n  b = lst.select { |x| x > 0 }.min\n  return [a, b]\nend", "  neg =\
    \ []\n  pos = []\n  lst.each do |x|\n    if x < 0\n      neg << x\n    elsif x\
    \ > 0\n      pos << x\n    end\n  end\n  if neg.length == 0\n    a = nil\n  else\n\
    \    a = neg.max\n  end\n  if pos.length == 0\n    b = nil\n  else\n    b = pos.min\n\
    \  end\n  return a, b\nend", "  # your code here\nend", "  a = lst.select { |x|\
    \ x < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n  return a, b\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  if lst.empty?\n    return [nil,\
    \ nil]\n  end\n  negative_numbers = []\n  positive_numbers = []\n  lst.each do\
    \ |number|\n    if number < 0\n      negative_numbers << number\n    elsif number\
    \ > 0\n      positive_numbers << number\n    end\n  end\n  if negative_numbers.empty?\n\
    \    return [nil, positive_numbers.min]\n  elsif positive_numbers.empty?\n   \
    \ return [negative_numbers.max, nil]\n  else\n    return [negative_numbers.max,\
    \ positive_numbers.min]\n  end\nend", "  # Your code here\nend", "  # your code\
    \ here\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select { |x| x >\
    \ 0 }.min\n  return [a, b]\nend", "  # Your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # Your code here\nend", "  a = lst.select\
    \ { |x| x < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n  return [a, b]\nend",
  "  # your code here\nend", "  # your code here\nend", "  a = lst.select { |x| x\
    \ < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n  if a == nil\n    a = nil\n\
    \  end\n  if b == nil\n    b = nil\n  end\n  return a, b\nend", "  # your code\
    \ here\nend", "  lst.select { |x| x < 0 }.max\n  lst.select { |x| x > 0 }.min\n\
    end", "  # your code here\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select\
    \ { |x| x > 0 }.min\n  [a, b]\nend", "  # your code here\nend", "  if lst.select\
    \ { |i| i < 0 }.empty?\n    return [nil, lst.min]\n  elsif lst.select { |i| i\
    \ > 0 }.empty?\n    return [lst.max, nil]\n  else\n    return [lst.max, lst.min]\n\
    \  end\nend", "  # Your code here\nend", "  a = lst.select { |x| x < 0 }.max\n\
    \  b = lst.select { |x| x > 0 }.min\n  return [a, b]\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  if lst.all? { |x|\
    \ x < 0 }\n    return [lst.max, nil]\n  elsif lst.all? { |x| x > 0 }\n    return\
    \ [nil, lst.min]\n  elsif lst.all? { |x| x == 0 }\n    return [nil, nil]\n  else\n\
    \    return [lst.select { |x| x < 0 }.max, lst.select { |x| x > 0 }.min]\n  end\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # Your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  lst.select { |x| x < 0 }.max\n  lst.select\
    \ { |x| x > 0 }.min\nend", "  # Your code here\nend", "  a = lst.select { |x|\
    \ x < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n  a.nil? || b.nil? ? [a, b]\
    \ : [a, b]\nend", "  # Your code goes here\nend", "  # your code here\nend", " \
    \ # your code here\nend", "  # your code here\nend", "  a = lst.select { |x| x\
    \ < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n  return a, b\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  return [nil, nil] if lst.empty?\n\
    \  lst.select! { |x| x.is_a? Integer }\n  return [nil, nil] if lst.empty?\n  lst.sort!\n\
    \  [lst.first, lst.last]\nend", "  if lst.all? { |x| x < 0 }\n    return [lst.max,\
    \ nil]\n  elsif lst.all? { |x| x > 0 }\n    return [nil, lst.min]\n  else\n  \
    \  return [lst.select { |x| x < 0 }.max, lst.select { |x| x > 0 }.min]\n  end\n\
    end", "  # your code here\nend", "  # Your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # Your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select\
    \ { |x| x > 0 }.min\n  a.nil? || b.nil? ? [a, b] : [a, b]\nend", "  # your code\
    \ here\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select { |x| x >\
    \ 0 }.min\n  return [a, b]\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select\
    \ { |x| x > 0 }.min\n  return [a, b]\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  # Your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  a = nil\n  b = nil\n  lst.each do |x|\n    if x <\
    \ 0\n      if a == nil\n        a = x\n      else\n        a = x if x > a\n  \
    \    end\n    elsif x > 0\n      if b == nil\n        b = x\n      else\n    \
    \    b = x if x < b\n      end\n    end\n  end\n  return a, b\nend", "  # your\
    \ code here\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select { |x|\
    \ x > 0 }.min\n  return [a, b]\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  # Your code here\nend", "  # your\
    \ code here\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select { |x|\
    \ x > 0 }.min\n  [a, b]\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # TODO\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
