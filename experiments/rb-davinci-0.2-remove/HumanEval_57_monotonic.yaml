name: HumanEval_57_monotonic
language: rb
prompt: "# Return True is list elements are monotonically increasing or decreasing.\n\
  def monotonic(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
  \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2,\
  \ 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
  \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
  \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
  \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
  \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
  end\n"
completions: ["  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : false\nend", "  return true if l.size <=\
    \ 1\n  return l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : false if l[0] <= l[1]\n  return l[0] >=\
    \ l[1] ? monotonic(l[1..-1]) : false if l[0] >= l[1]\nend", "  return true if\
    \ l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : false if l[0] <= l[1]\n  return l[0] >=\
    \ l[1] ? monotonic(l[1..-1]) : false if l[0] >= l[1]\nend", "  return true if\
    \ l.length <= 1\n  return l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\n\
    end", "  return true if l.size < 3\n  return true if l.sort == l || l.sort.reverse\
    \ == l\n  false\nend", "  return true if l.size <= 1\n  return l[0] <= l[1] ?\
    \ monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : false if l[0] <= l[1]\n\
    \  return l[0] >= l[1] ? monotonic(l[1..-1]) : false if l[0] >= l[1]\nend", " \
    \ return true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n\
    \      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) :\
    \ monotonic(l[1..-1].reverse)\nend", "  return true if l.size <= 1\n  return l[0]\
    \ <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return\
    \ true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n  \
    \    return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do\
    \ |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  return\
    \ true if l.length <= 1\n  return false if l[0] < l[1]\n  return false if l[0]\
    \ > l[1]\n  return monotonic(l[1..-1])\nend", "  return true if l.length <= 1\n\
    \  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend",
  "  return true if l.length <= 1\n  return true if l.sort == l || l.sort.reverse\
    \ == l\n  false\nend", "  return false if l.length < 2\n  return true if l.length\
    \ == 2\n  return true if l[0] < l[1] && monotonic(l[1..-1])\n  return true if\
    \ l[0] > l[1] && monotonic(l[1..-1])\n  false\nend", "  return true if l.size\
    \ <= 1\n  return l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\n\
    end", "  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.size <= 1\n  return\
    \ l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\nend", "  return\
    \ true if l.length <= 1\n  return false if l[0] < l[1] && l[1] < l[2]\n  return\
    \ false if l[0] > l[1] && l[1] > l[2]\n  monotonic(l[1..-1])\nend", "  return\
    \ true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ true if l.sort == l || l.sort.reverse == l\n  false\nend", "  return true if\
    \ l.size <= 1\n  if l[0] < l[1]\n    (1...l.size).each { |i| return false if l[i-1]\
    \ > l[i] }\n  else\n    (1...l.size).each { |i| return false if l[i-1] < l[i]\
    \ }\n  end\n  true\nend", "  return true if l.length <= 1\n  return l[0] < l[1]\
    \ ? monotonic_increasing(l) : monotonic_decreasing(l)\nend", "  return true if\
    \ l.length <= 1\n  if l[0] < l[1]\n    (0..l.length-2).each do |i|\n      return\
    \ false if l[i] > l[i+1]\n    end\n  else\n    (0..l.length-2).each do |i|\n \
    \     return false if l[i] < l[i+1]\n    end\n  end\n  true\nend", "  return true\
    \ if l.size <= 1\n  if l[0] < l[1]\n    (1...l.size).each { |i| return false if\
    \ l[i-1] > l[i] }\n  else\n    (1...l.size).each { |i| return false if l[i-1]\
    \ < l[i] }\n  end\n  true\nend", "  l.each_cons(2).all? { |a, b| a <= b } || l.each_cons(2).all?\
    \ { |a, b| a >= b }\nend", "  l.sort == l || l.sort.reverse == l\nend", "  return\
    \ true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : false if\
    \ l[0] <= l[1]\n  return l[0] >= l[1] ? monotonic(l[1..-1]) : false if l[0] >=\
    \ l[1]\nend", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : false if l[0] <= l[1]\n  return l[0] >= l[1] ? monotonic(l[1..-1]) : false\
    \ if l[0] >= l[1]\nend", "  return true if l.length <= 1\n  return l[0] <= l[1]\
    \ ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return true if\
    \ l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n  \
    \    return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  return true\
    \ if l.length <= 1\n  return true if l.sort == l || l.sort.reverse == l\n  false\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  if l[0]\
    \ < l[1]\n    (1...l.length).each do |i|\n      return false if l[i] < l[i-1]\n\
    \    end\n  else\n    (1...l.length).each do |i|\n      return false if l[i] >\
    \ l[i-1]\n    end\n  end\n  true\nend", "  return true if l.length <= 1\n  return\
    \ l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\nend", "  return\
    \ true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : false if\
    \ l[0] <= l[1]\n  return l[0] >= l[1] ? monotonic(l[1..-1]) : false if l[0] >=\
    \ l[1]\nend", "  return true if l.length <= 1\n  increasing = l[0] <= l[1]\n \
    \ l.each_cons(2) do |a, b|\n    if increasing\n      return false if a > b\n \
    \   else\n      return false if a < b\n    end\n  end\n  true\nend", "  return\
    \ true if l.length <= 1\n  return l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\nend", "  return\
    \ true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n  \
    \    return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do\
    \ |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  return\
    \ true if l.size <= 1\n  return true if l.size == 2 && l[0] == l[1]\n  return\
    \ false if l.size == 2 && l[0] != l[1]\n  return false if l.size > 2 && l[0] ==\
    \ l[1] && l[1] == l[2]\n  return false if l.size > 2 && l[0] != l[1] && l[1] !=\
    \ l[2]\n  if l[0] < l[1]\n    return true if l.size == 2\n    return false if\
    \ l.size > 2 && l[1] > l[2]\n    return monotonic(l[1..-1])\n  else\n    return\
    \ true if l.size == 2\n    return false if l.size > 2 && l[1] < l[2]\n    return\
    \ monotonic(l[1..-1])\n  end\nend", "  return true if l.length <= 1\n  if l[0]\
    \ < l[1]\n    (1...l.length).each do |i|\n      return false if l[i] < l[i-1]\n\
    \    end\n  else\n    (1...l.length).each do |i|\n      return false if l[i] >\
    \ l[i-1]\n    end\n  end\n  true\nend", "  return true if l.length <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : false\nend", "  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return false if l.size <= 2\n  return\
    \ true if l.size == 3 && l[0] == l[1] && l[1] == l[2]\n  return true if l.size\
    \ == 3 && l[0] == l[1] && l[1] < l[2]\n  return true if l.size == 3 && l[0] ==\
    \ l[1] && l[1] > l[2]\n  return true if l.size == 3 && l[0] < l[1] && l[1] ==\
    \ l[2]\n  return true if l.size == 3 && l[0] > l[1] && l[1] == l[2]\n  return\
    \ true if l.size == 3 && l[0] < l[1] && l[1] < l[2]\n  return true if l.size ==\
    \ 3 && l[0] > l[1] && l[1] > l[2]\n  return true if l.size == 3 && l[0] == l[1]\
    \ && l[1] == l[2]\n  return true if l.size == 3 && l[0] == l[1] && l[1] < l[2]\n\
    \  return true if l.size == 3 && l[0] == l[1] && l[1] > l[2]\n  return true if\
    \ l.size == 3 && l[0] < l[1] && l[1] == l[2]\n  return true if l.size == 3 &&\
    \ l[0] > l[1] && l[1] == l[2]\n  return true if l.size == 3 && l[0] < l[1] &&\
    \ l[1] < l[2]\n  return true if l.size == 3 && l[0] > l[1] && l[1] > l[2]\n  return\
    \ true if l.size == 3 && l[0] == l[1] && l[1] == l[2]\n  return true if l.size\
    \ == 3 && l[0] == l[1] && l[1] < l[2]\n  return true if l.size == 3 && l[0] ==\
    \ l[1] && l", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  if l[0]\
    \ <= l[1]\n    (1...l.length).each do |i|\n      return false if l[i] < l[i-1]\n\
    \    end\n  else\n    (1...l.length).each do |i|\n      return false if l[i] >\
    \ l[i-1]\n    end\n  end\n  true\nend", "  return true if l.length <= 1\n  return\
    \ l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\nend", "  return\
    \ true if l.size <= 1\n  return l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\n\
    end", "  return true if l.length <= 1\n  return true if l.sort == l || l.sort.reverse\
    \ == l\n  false\nend", "  return true if l.length <= 1\n  if l[0] <= l[1]\n  \
    \  (1...l.length).each do |i|\n      return false if l[i] < l[i-1]\n    end\n\
    \  else\n    (1...l.length).each do |i|\n      return false if l[i] > l[i-1]\n\
    \    end\n  end\n  true\nend", "  l.each_cons(2).all? { |a, b| a <= b } || l.each_cons(2).all?\
    \ { |a, b| a >= b }\nend", "  return true if l.length <= 1\n  return true if l.length\
    \ == 2 && l[0] == l[1]\n  return true if l.length == 2 && l[0] != l[1]\n  return\
    \ false if l.length == 3 && l[0] != l[1] && l[1] != l[2]\n  return false if l.length\
    \ == 3 && l[0] == l[1] && l[1] == l[2]\n  return false if l.length == 3 && l[0]\
    \ != l[1] && l[1] == l[2]\n  return false if l.length == 3 && l[0] == l[1] &&\
    \ l[1] != l[2]\n  return false if l.length == 3 && l[0] == l[1] && l[1] == l[2]\n\
    \  return false if l.length == 3 && l[0] != l[1] && l[1] != l[2]\n  return false\
    \ if l.length == 3 && l[0] != l[1] && l[1] == l[2]\n  return false if l.length\
    \ == 3 && l[0] == l[1] && l[1] != l[2]\n  return false if l.length == 3 && l[0]\
    \ == l[1] && l[1] == l[2]\n  return false if l.length == 3 && l[0] != l[1] &&\
    \ l[1] != l[2]\n  return false if l.length == 3 && l[0] != l[1] && l[1] == l[2]\n\
    \  return false if l.length == 3 && l[0] == l[1] && l[1] != l[2]\n  return false\
    \ if l.length == 3 && l[0] == l[1] && l[1] == l[2]\n  return false if l.length\
    \ == 3 && l[0] != l[1] && l[1] != l[2]\n  return false if l.length == 3 && l[0]\
    \ != l[1] && l[1] == l[2]\n  return false if l.length == 3 && l", "  return true\
    \ if l.size <= 1\n  return l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return false if l.length <= 1\n  return\
    \ true if l.length == 2\n  return true if l.sort == l || l.sort.reverse == l\n\
    \  return false\nend", "  return true if l.length <= 1\n  return l[0] <= l[1]\
    \ ? monotonic_increasing(l) : monotonic_decreasing(l)\nend", "  return true if\
    \ l.length <= 1\n  return l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\n\
    end", "  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.size <= 1\n  return\
    \ true if l.size == 2 && l[0] == l[1]\n  return false if l.size == 2 && l[0] !=\
    \ l[1]\n  return true if l.size == 3 && l[0] == l[1] && l[1] == l[2]\n  return\
    \ true if l.size == 3 && l[0] == l[1] && l[1] < l[2]\n  return true if l.size\
    \ == 3 && l[0] == l[1] && l[1] > l[2]\n  return true if l.size == 3 && l[0] <\
    \ l[1] && l[1] == l[2]\n  return true if l.size == 3 && l[0] > l[1] && l[1] ==\
    \ l[2]\n  return true if l.size == 3 && l[0] < l[1] && l[1] < l[2]\n  return true\
    \ if l.size == 3 && l[0] > l[1] && l[1] > l[2]\n  return false if l.size == 3\
    \ && l[0] < l[1] && l[1] > l[2]\n  return false if l.size == 3 && l[0] > l[1]\
    \ && l[1] < l[2]\n  return false if l.size == 3 && l[0] == l[1] && l[1] < l[2]\n\
    \  return false if l.size == 3 && l[0] == l[1] && l[1] > l[2]\n  return false\
    \ if l.size == 3 && l[0] < l[1] && l[1] == l[2]\n  return false if l.size == 3\
    \ && l[0] > l[1] && l[1] == l[2]\n  return false if l.size == 3 && l[0] < l[1]\
    \ && l[1] > l[2]\n  return false if l.size == 3 && l[0] > l[1] && l[1] < l[2]\n\
    \  return false if l.size == 3 && l", "  return true if l.length <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return\
    \ true if l.length <= 1\n  return true if l.length == 2 && l[0] == l[1]\n  return\
    \ true if l.length == 2 && l[0] != l[1]\n  return false if l.length == 3 && l[0]\
    \ == l[1] && l[1] == l[2]\n  return false if l.length == 3 && l[0] == l[1] &&\
    \ l[1] != l[2]\n  return false if l.length == 3 && l[0] != l[1] && l[1] == l[2]\n\
    \  return false if l.length == 3 && l[0] != l[1] && l[1] != l[2]\n  return false\
    \ if l.length == 4 && l[0] == l[1] && l[1] == l[2] && l[2] == l[3]\n  return false\
    \ if l.length == 4 && l[0] == l[1] && l[1] == l[2] && l[2] != l[3]\n  return false\
    \ if l.length == 4 && l[0] == l[1] && l[1] != l[2] && l[2] == l[3]\n  return false\
    \ if l.length == 4 && l[0] == l[1] && l[1] != l[2] && l[2] != l[3]\n  return false\
    \ if l.length == 4 && l[0] != l[1] && l[1] == l[2] && l[2] == l[3]\n  return false\
    \ if l.length == 4 && l[0] != l[1] && l[1] == l[2] && l[2] != l[3]\n  return false\
    \ if l.length == 4 && l[0] != l[1] && l[1] != l[2] && l[2] == l[3]\n  return false\
    \ if l.length == 4 && l[0] != l[1] && l[1] != l[2] && l[2] != l[3]\n  return false\
    \ if l.length == 5 && l[0] == l[1] && l", "  return true if l.length <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return\
    \ true if l.length <= 1\n  return true if l.length == 2 && l[0] == l[1]\n  return\
    \ true if l.length == 2 && l[0] != l[1]\n  return true if l.length == 3 && l[0]\
    \ == l[1] && l[1] == l[2]\n  return true if l.length == 3 && l[0] != l[1] && l[1]\
    \ != l[2]\n  return true if l.length == 3 && l[0] != l[1] && l[1] == l[2]\n  return\
    \ true if l.length == 3 && l[0] == l[1] && l[1] != l[2]\n  return false if l.length\
    \ > 3 && l[0] == l[1] && l[1] == l[2]\n  return false if l.length > 3 && l[0]\
    \ != l[1] && l[1] != l[2]\n  return false if l.length > 3 && l[0] != l[1] && l[1]\
    \ == l[2]\n  return false if l.length > 3 && l[0] == l[1] && l[1] != l[2]\n  return\
    \ false if l.length > 3 && l[0] != l[1] && l[1] != l[2] && l[2] != l[3]\n  return\
    \ false if l.length > 3 && l[0] == l[1] && l[1] != l[2] && l[2] != l[3]\n  return\
    \ false if l.length > 3 && l[0] != l[1] && l[1] == l[2] && l[2] != l[3]\n  return\
    \ false if l.length > 3 && l[0] != l[1] && l[1] != l[2] && l[2] == l[3]\n  return\
    \ false if l.length > 3 && l[0] == l[1] && l[1] == l[2] && l[2] != l[3]\n  return\
    \ false if l.length > 3 && l[0] == l[1] && l", "  return true if l.length <= 1\n\
    \  return l[0] <= l[1] ? monotonic(l[1..-1]) : false if l[0] <= l[1]\n  return\
    \ l[0] >= l[1] ? monotonic(l[1..-1]) : false if l[0] >= l[1]\nend", "  return\
    \ true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.size <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return\
    \ true if l.size <= 1\n  return l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\n\
    end", "  return true if l.length <= 1\n  if l[0] < l[1]\n    (0..l.length-2).each\
    \ do |i|\n      return false if l[i] > l[i+1]\n    end\n  else\n    (0..l.length-2).each\
    \ do |i|\n      return false if l[i] < l[i+1]\n    end\n  end\n  true\nend", " \
    \ return true if l.length <= 1\n  return true if l.sort == l || l.sort.reverse\
    \ == l\n  false\nend", "  return true if l.size <= 1\n  return l[0] <= l[1] ?\
    \ monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ return true if l.size < 3\n  return false if l[0] == l[1]\n  if l[0] < l[1]\n\
    \    (1...l.size).each do |i|\n      return false if l[i] < l[i-1]\n    end\n\
    \  else\n    (1...l.size).each do |i|\n      return false if l[i] > l[i-1]\n \
    \   end\n  end\n  true\nend", "  return true if l.size <= 1\n  return l[0] <=\
    \ l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return true\
    \ if l.length <= 1\n  return true if l.sort == l || l.sort.reverse == l\n  false\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\nend", "  return\
    \ true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.size <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return\
    \ true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.length <= 1\n  return true if l.sort == l || l.sort.reverse\
    \ == l\n  false\nend", "  return true if l.length <= 1\n  return l[0] <= l[1]\
    \ ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return true if\
    \ l.length <= 1\n  if l[0] < l[1]\n    (0..l.length-2).each do |i|\n      return\
    \ false if l[i] > l[i+1]\n    end\n  else\n    (0..l.length-2).each do |i|\n \
    \     return false if l[i] < l[i+1]\n    end\n  end\n  true\nend", "  l.each_cons(2).all?\
    \ { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b }\nend", "  return\
    \ true if l.length <= 1\n  if l[0] < l[1]\n    (0..l.length-2).each do |i|\n \
    \     return false if l[i] > l[i+1]\n    end\n  else\n    (0..l.length-2).each\
    \ do |i|\n      return false if l[i] < l[i+1]\n    end\n  end\n  true\nend", " \
    \ return true if l.length <= 1\n  return true if l.sort == l || l.sort.reverse\
    \ == l\n  false\nend", "  return true if l.length <= 1\n  return l[0] <= l[1]\
    \ ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return true if\
    \ l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic_increasing(l)\
    \ : monotonic_decreasing(l)\nend", "  return true if l.length <= 1\n  return l[0]\
    \ <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return\
    \ true if l.length <= 1\n  return l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\n\
    end", "  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic_increasing(l)\
    \ : monotonic_decreasing(l)\nend", "  return true if l.length <= 1\n  return l[0]\
    \ <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\nend", "  return\
    \ true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : false if\
    \ l[0] <= l[1]\n  return l[0] >= l[1] ? monotonic(l[1..-1]) : false if l[0] >=\
    \ l[1]\nend", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return\
    \ true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return\
    \ true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n  \
    \    return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do\
    \ |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  return\
    \ true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.size <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return\
    \ true if l.size <= 1\n  return l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.size <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return\
    \ true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.size <= 1\n  return\
    \ l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\nend", "  return\
    \ true if l.length <= 1\n  return l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\n\
    end", "  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : false\nend", "  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : false if l[0] <= l[1]\n\
    \  return l[0] >= l[1] ? monotonic(l[1..-1]) : false if l[0] >= l[1]\nend", " \
    \ return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ true if l.sort == l || l.sort.reverse == l\n  false\nend", "  return l.sort\
    \ == l || l.sort.reverse == l\nend", "  return true if l.length <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return\
    \ true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n  \
    \    return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do\
    \ |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  return\
    \ true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return false if l.length < 2\n  if l[0] < l[1]\n    (0..l.length-2).each\
    \ do |i|\n      return false if l[i] > l[i+1]\n    end\n  else\n    (0..l.length-2).each\
    \ do |i|\n      return false if l[i] < l[i+1]\n    end\n  end\n  true\nend", " \
    \ return true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n\
    \      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ return true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n\
    \      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic_increasing(l)\
    \ : monotonic_decreasing(l)\nend", "  return true if l.size <= 1\n  return l[0]\
    \ <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\nend", "  return\
    \ true if l.size <= 1\n  return l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\n\
    end", "  return true if l.length <= 1\n  return true if l.sort == l || l.sort.reverse\
    \ == l\n  false\nend", "  return true if l.size <= 1\n  return l[0] <= l[1] ?\
    \ monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : false\nend", "  return true\
    \ if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return\
    \ true if l.size <= 1\n  if l[0] < l[1]\n    (1...l.size).each { |i| return false\
    \ if l[i-1] > l[i] }\n  else\n    (1...l.size).each { |i| return false if l[i-1]\
    \ < l[i] }\n  end\n  true\nend", "  return true if l.length <= 1\n  if l[0] <\
    \ l[1]\n    (1...l.length).each { |i| return false if l[i] < l[i-1] }\n  else\n\
    \    (1...l.length).each { |i| return false if l[i] > l[i-1] }\n  end\n  true\n\
    end", "  return true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.size <= 1\n  return\
    \ false if l[0] > l[1]\n  return false if l[0] < l[1]\n  monotonic(l[1..-1])\n\
    end", "  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.size <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return\
    \ true if l.length <= 1\n  return l[0] < l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\n\
    end", "  return true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i-1] > l[i]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i-1] < l[i]\n    end\n  end\n  true\nend", " \
    \ return true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n\
    \      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic_increasing(l)\
    \ : monotonic_decreasing(l)\nend", "  return true if l.length <= 1\n  return l[0]\
    \ <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\nend", "  return\
    \ true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : false if\
    \ l[0] <= l[1]\n  return l[0] >= l[1] ? monotonic(l[1..-1]) : false if l[0] >=\
    \ l[1]\nend", "  return true if l.size <= 1\n  if l[0] < l[1]\n    (0..l.size-2).each\
    \ { |i| return false if l[i] > l[i+1] }\n  else\n    (0..l.size-2).each { |i|\
    \ return false if l[i] < l[i+1] }\n  end\n  true\nend", "  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ true if l.sort == l || l.sort.reverse == l\n  false\nend", "  return true if\
    \ l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ true if l.sort == l || l.sort.reverse == l\n  false\nend", "  return true if\
    \ l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ false if l[0] < l[1] && l[1] < l[2]\n  return false if l[0] > l[1] && l[1] >\
    \ l[2]\n  return monotonic(l[1..-1])\nend", "  return true if l.length <= 1\n\
    \  return l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\nend",
  "  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.length <= 1\n  return true if l.length == 2 && l[0]\
    \ == l[1]\n  return true if l.length == 2 && l[0] != l[1]\n  return false if l.length\
    \ == 3 && l[0] == l[1] && l[1] == l[2]\n  return false if l.length == 3 && l[0]\
    \ != l[1] && l[1] != l[2]\n  return false if l.length == 3 && l[0] == l[1] &&\
    \ l[1] != l[2]\n  return false if l.length == 3 && l[0] != l[1] && l[1] == l[2]\n\
    \  return false if l.length == 3 && l[0] == l[1] && l[1] == l[2]\n  return false\
    \ if l.length == 3 && l[0] != l[1] && l[1] != l[2]\n  return false if l.length\
    \ == 3 && l[0] == l[1] && l[1] != l[2]\n  return false if l.length == 3 && l[0]\
    \ != l[1] && l[1] == l[2]\n  return false if l.length == 3 && l[0] == l[1] &&\
    \ l[1] == l[2]\n  return false if l.length == 3 && l[0] != l[1] && l[1] != l[2]\n\
    \  return false if l.length == 3 && l[0] == l[1] && l[1] != l[2]\n  return false\
    \ if l.length == 3 && l[0] != l[1] && l[1] == l[2]\n  return false if l.length\
    \ == 3 && l[0] == l[1] && l[1] == l[2]\n  return false if l.length == 3 && l[0]\
    \ != l[1] && l[1] != l[2]\n  return false if l.length == 3 && l[0] == l[1] &&\
    \ l[1] != l[2]\n  return false if l.length == 3 && l", "  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  return true if l.size\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return\
    \ true if l.length <= 1\n  return l[0] < l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\n\
    end", "  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\nend", "  return\
    \ true if l.length <= 1\n  return l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  if l[0]\
    \ < l[1]\n    (1...l.length).each do |i|\n      return false if l[i] < l[i-1]\n\
    \    end\n  else\n    (1...l.length).each do |i|\n      return false if l[i] >\
    \ l[i-1]\n    end\n  end\n  true\nend", "  return true if l.size <= 1\n  return\
    \ l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\nend", "  return\
    \ true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : false if\
    \ l[0] <= l[1]\n  return l[0] >= l[1] ? monotonic(l[1..-1]) : false if l[0] >=\
    \ l[1]\nend", "  return true if l.length <= 1\n  return true if l.sort == l ||\
    \ l.sort.reverse == l\n  false\nend", "  return true if l.size <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return\
    \ true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : false\n\
    end", "  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", '  return
    true if l.size <= 1', "  return true if l.length <= 1\n  return l[0] <= l[1] ?\
    \ monotonic(l[1..-1]) : false if l[0] <= l[1]\n  return l[0] >= l[1] ? monotonic(l[1..-1])\
    \ : false if l[0] >= l[1]\nend", "  return true if l.length <= 1\n  return l[0]\
    \ <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return\
    \ true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.size <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return\
    \ true if l.length <= 1\n  return l[0] <= l[1] ? monotonic_increasing(l) : monotonic_decreasing(l)\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.size <= 1\n  return\
    \ l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return\
    \ true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.size < 3\n  return\
    \ l[0] < l[1] ? l[1..-1].each_cons(2).all? { |a, b| a < b } : l[1..-1].each_cons(2).all?\
    \ { |a, b| a > b }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
