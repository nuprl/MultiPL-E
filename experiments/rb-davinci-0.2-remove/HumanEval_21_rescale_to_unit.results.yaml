language: rb
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  # TODO: implement me\n  min =\
    \ numbers.min\n  max = numbers.max\n  numbers.map { |number| (number - min) /\
    \ (max - min) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n    assert_equal([0.0,\
    \ 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0,\
    \ 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75, 1.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2xbdgsf0

    Started

    .

    Finished in 0.000562006 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1779.34 tests/s, 8896.70 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  # TODO: implement me\n  min =\
    \ numbers.min\n  max = numbers.max\n  numbers.map { |number| (number - min) /\
    \ (max - min) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n    assert_equal([0.0,\
    \ 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0,\
    \ 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75, 1.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2xbdgsf0

    Started

    .

    Finished in 0.000562006 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1779.34 tests/s, 8896.70 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  # TODO: implement me\n  max =\
    \ numbers.max\n  min = numbers.min\n  numbers.map { |number| (number - min) /\
    \ (max - min) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n    assert_equal([0.0,\
    \ 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0,\
    \ 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75, 1.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp32mcd4f7

    Started

    .

    Finished in 0.000437973 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2283.25 tests/s, 11416.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  max = numbers.max\n  min = numbers.min\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptos72xzj

    Started

    .

    Finished in 0.000480414 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2081.54 tests/s, 10407.69 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  max = numbers.max\n  min = numbers.min\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptos72xzj

    Started

    .

    Finished in 0.000480414 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2081.54 tests/s, 10407.69 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 1
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.minmax.map { |n| (n -\
    \ numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5kyos5an\nStarted\nF\n===============================================================================\n\
    Failure: test_rescale_to_unit(TestHumanEval)\n/tmp/tmp5kyos5an.rb:11:in `test_rescale_to_unit'\n\
    \      8:   def test_rescale_to_unit\n      9:     candidate = method(:rescale_to_unit)\n\
    \     10:     assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n  => 11:\
    \     assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n     12:     assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n     13:\
    \     assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]))\n     14:     assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n<[1.0, 0.0]> expected but was\n<[0.0, 1.0]>\n\ndiff:\n\
    ? [0.0, 1.0, 0.0]\n===============================================================================\n\
    \nFinished in 0.006925494 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.39 tests/s, 288.79 assertions/s\n"
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  # TODO: implement me\n  max =\
    \ numbers.max\n  min = numbers.min\n  numbers.map { |number| (number - min) /\
    \ (max - min) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n    assert_equal([0.0,\
    \ 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0,\
    \ 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75, 1.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp32mcd4f7

    Started

    .

    Finished in 0.000437973 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2283.25 tests/s, 11416.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |x| (x - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxtpgonqi

    Started

    .

    Finished in 0.000452336 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2210.75 tests/s, 11053.73 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 1
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.minmax.map { |n| (n -\
    \ numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5kyos5an\nStarted\nF\n===============================================================================\n\
    Failure: test_rescale_to_unit(TestHumanEval)\n/tmp/tmp5kyos5an.rb:11:in `test_rescale_to_unit'\n\
    \      8:   def test_rescale_to_unit\n      9:     candidate = method(:rescale_to_unit)\n\
    \     10:     assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n  => 11:\
    \     assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n     12:     assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n     13:\
    \     assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]))\n     14:     assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n<[1.0, 0.0]> expected but was\n<[0.0, 1.0]>\n\ndiff:\n\
    ? [0.0, 1.0, 0.0]\n===============================================================================\n\
    \nFinished in 0.006925494 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.39 tests/s, 288.79 assertions/s\n"
  timestamp: 1659799184
- exit_code: 1
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.minmax.map { |n| (n -\
    \ numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5kyos5an\nStarted\nF\n===============================================================================\n\
    Failure: test_rescale_to_unit(TestHumanEval)\n/tmp/tmp5kyos5an.rb:11:in `test_rescale_to_unit'\n\
    \      8:   def test_rescale_to_unit\n      9:     candidate = method(:rescale_to_unit)\n\
    \     10:     assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n  => 11:\
    \     assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n     12:     assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n     13:\
    \     assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]))\n     14:     assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n<[1.0, 0.0]> expected but was\n<[0.0, 1.0]>\n\ndiff:\n\
    ? [0.0, 1.0, 0.0]\n===============================================================================\n\
    \nFinished in 0.006925494 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.39 tests/s, 288.79 assertions/s\n"
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |number| (number - min) / (max - min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpe_q0r_g8

    Started

    .

    Finished in 0.000436103 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2293.04 tests/s, 11465.18 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |x| (x - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxtpgonqi

    Started

    .

    Finished in 0.000452336 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2210.75 tests/s, 11053.73 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  max = numbers.max\n  min = numbers.min\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptos72xzj

    Started

    .

    Finished in 0.000480414 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2081.54 tests/s, 10407.69 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 1
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers = numbers.sort\n  min\
    \ = numbers.first\n  max = numbers.last\n  numbers.map { |n| (n - min) / (max\
    \ - min) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n    assert_equal([0.0,\
    \ 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0,\
    \ 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75, 1.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp45r_5l1n\nStarted\nF\n===============================================================================\n\
    Failure: test_rescale_to_unit(TestHumanEval)\n/tmp/tmp45r_5l1n.rb:14:in `test_rescale_to_unit'\n\
    \     11:   def test_rescale_to_unit\n     12:     candidate = method(:rescale_to_unit)\n\
    \     13:     assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n  => 14:\
    \     assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n     15:     assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n     16:\
    \     assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]))\n     17:     assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n<[1.0, 0.0]> expected but was\n<[0.0, 1.0]>\n\ndiff:\n\
    ? [0.0, 1.0, 0.0]\n===============================================================================\n\
    \nFinished in 0.007096624 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.91 tests/s, 281.82 assertions/s\n"
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  max = numbers.max\n  min = numbers.min\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptos72xzj

    Started

    .

    Finished in 0.000480414 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2081.54 tests/s, 10407.69 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  # TODO: implement me\n  min =\
    \ numbers.min\n  max = numbers.max\n  numbers.map { |n| (n - min) / (max - min)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n    assert_equal([0.0,\
    \ 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0,\
    \ 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75, 1.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl64sluxf

    Started

    .

    Finished in 0.000581897 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1718.52 tests/s, 8592.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map do |number|\n   \
    \ (number - numbers.min) / (numbers.max - numbers.min)\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmps9hlky3_

    Started

    .

    Finished in 0.000454538 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2200.04 tests/s, 11000.18 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |number| (number - min) / (max - min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpe_q0r_g8

    Started

    .

    Finished in 0.000436103 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2293.04 tests/s, 11465.18 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 1
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers = numbers.sort\n  min\
    \ = numbers.first\n  max = numbers.last\n  numbers.map { |n| (n - min) / (max\
    \ - min) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n    assert_equal([0.0,\
    \ 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0,\
    \ 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75, 1.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp45r_5l1n\nStarted\nF\n===============================================================================\n\
    Failure: test_rescale_to_unit(TestHumanEval)\n/tmp/tmp45r_5l1n.rb:14:in `test_rescale_to_unit'\n\
    \     11:   def test_rescale_to_unit\n     12:     candidate = method(:rescale_to_unit)\n\
    \     13:     assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n  => 14:\
    \     assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n     15:     assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n     16:\
    \     assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]))\n     17:     assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n<[1.0, 0.0]> expected but was\n<[0.0, 1.0]>\n\ndiff:\n\
    ? [0.0, 1.0, 0.0]\n===============================================================================\n\
    \nFinished in 0.007096624 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.91 tests/s, 281.82 assertions/s\n"
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |x| (x - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxtpgonqi

    Started

    .

    Finished in 0.000452336 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2210.75 tests/s, 11053.73 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  max = numbers.max\n  min = numbers.min\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptos72xzj

    Started

    .

    Finished in 0.000480414 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2081.54 tests/s, 10407.69 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |number| (number\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdtqfqw5b

    Started

    .

    Finished in 0.000441282 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2266.12 tests/s, 11330.62 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 1
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.minmax.map { |n| (n -\
    \ numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5kyos5an\nStarted\nF\n===============================================================================\n\
    Failure: test_rescale_to_unit(TestHumanEval)\n/tmp/tmp5kyos5an.rb:11:in `test_rescale_to_unit'\n\
    \      8:   def test_rescale_to_unit\n      9:     candidate = method(:rescale_to_unit)\n\
    \     10:     assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n  => 11:\
    \     assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n     12:     assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n     13:\
    \     assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]))\n     14:     assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n<[1.0, 0.0]> expected but was\n<[0.0, 1.0]>\n\ndiff:\n\
    ? [0.0, 1.0, 0.0]\n===============================================================================\n\
    \nFinished in 0.006925494 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.39 tests/s, 288.79 assertions/s\n"
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  max = numbers.max\n  min = numbers.min\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptos72xzj

    Started

    .

    Finished in 0.000480414 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2081.54 tests/s, 10407.69 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min).to_f / (max - min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpr_t_1n5c

    Started

    .

    Finished in 0.000458862 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2179.30 tests/s, 10896.52 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min).to_f / (max - min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpr_t_1n5c

    Started

    .

    Finished in 0.000458862 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2179.30 tests/s, 10896.52 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |x| (x - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxtpgonqi

    Started

    .

    Finished in 0.000452336 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2210.75 tests/s, 11053.73 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |number| (number - min) / (max - min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpe_q0r_g8

    Started

    .

    Finished in 0.000436103 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2293.04 tests/s, 11465.18 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  # TODO: Implement this method\n\
    \  min = numbers.min\n  max = numbers.max\n  numbers.map { |number| (number -\
    \ min) / (max - min) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n    assert_equal([0.0,\
    \ 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0,\
    \ 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75, 1.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkxyive0_

    Started

    .

    Finished in 0.000435526 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2296.07 tests/s, 11480.37 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |number| (number\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdtqfqw5b

    Started

    .

    Finished in 0.000441282 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2266.12 tests/s, 11330.62 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |x| (x - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxtpgonqi

    Started

    .

    Finished in 0.000452336 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2210.75 tests/s, 11053.73 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  max = numbers.max\n  min = numbers.min\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptos72xzj

    Started

    .

    Finished in 0.000480414 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2081.54 tests/s, 10407.69 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  # TODO: implement me\n  min =\
    \ numbers.min\n  max = numbers.max\n  numbers.map { |n| (n - min) / (max - min)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n    assert_equal([0.0,\
    \ 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0,\
    \ 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75, 1.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpl64sluxf

    Started

    .

    Finished in 0.000581897 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1718.52 tests/s, 8592.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |number| (number - min) / (max - min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpe_q0r_g8

    Started

    .

    Finished in 0.000436103 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2293.04 tests/s, 11465.18 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  # TODO: implement this method\n\
    \  #raise NotImplementedError.new\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4b98m40c

    Started

    .

    Finished in 0.000430905 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2320.70 tests/s, 11603.49 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |number| (number\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdtqfqw5b

    Started

    .

    Finished in 0.000441282 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2266.12 tests/s, 11330.62 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min).to_f / (max - min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpr_t_1n5c

    Started

    .

    Finished in 0.000458862 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2179.30 tests/s, 10896.52 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |number| (number\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdtqfqw5b

    Started

    .

    Finished in 0.000441282 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2266.12 tests/s, 11330.62 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  # TODO: implement this\n  numbers.map\
    \ { |number| (number - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7cnx32lw

    Started

    .

    Finished in 0.000587349 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1702.57 tests/s, 8512.83 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 1
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers = numbers.sort\n  min\
    \ = numbers.first\n  max = numbers.last\n  numbers.map { |number| (number - min)\
    \ / (max - min) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n    assert_equal([0.0,\
    \ 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0,\
    \ 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75, 1.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpds26uuup\nStarted\nF\n===============================================================================\n\
    Failure: test_rescale_to_unit(TestHumanEval)\n/tmp/tmpds26uuup.rb:14:in `test_rescale_to_unit'\n\
    \     11:   def test_rescale_to_unit\n     12:     candidate = method(:rescale_to_unit)\n\
    \     13:     assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n  => 14:\
    \     assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n     15:     assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n     16:\
    \     assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]))\n     17:     assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n<[1.0, 0.0]> expected but was\n<[0.0, 1.0]>\n\ndiff:\n\
    ? [0.0, 1.0, 0.0]\n===============================================================================\n\
    \nFinished in 0.006961297 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.65 tests/s, 287.30 assertions/s\n"
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |number| (number - min) / (max - min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpe_q0r_g8

    Started

    .

    Finished in 0.000436103 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2293.04 tests/s, 11465.18 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |num| (num - min) / (max - min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5xon78lu

    Started

    .

    Finished in 0.00044477 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2248.35 tests/s, 11241.77 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  max = numbers.max\n  min = numbers.min\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptos72xzj

    Started

    .

    Finished in 0.000480414 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2081.54 tests/s, 10407.69 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  # TODO: implement this\n  min\
    \ = numbers.min\n  max = numbers.max\n  numbers.map { |number| (number - min)\
    \ / (max - min) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n    assert_equal([0.0,\
    \ 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0,\
    \ 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75, 1.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpi87fugj9

    Started

    .

    Finished in 0.000551722 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1812.51 tests/s, 9062.54 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 1
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers = numbers.sort\n  min\
    \ = numbers.first\n  max = numbers.last\n  numbers.map { |n| (n - min) / (max\
    \ - min) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n    assert_equal([0.0,\
    \ 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0,\
    \ 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75, 1.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp45r_5l1n\nStarted\nF\n===============================================================================\n\
    Failure: test_rescale_to_unit(TestHumanEval)\n/tmp/tmp45r_5l1n.rb:14:in `test_rescale_to_unit'\n\
    \     11:   def test_rescale_to_unit\n     12:     candidate = method(:rescale_to_unit)\n\
    \     13:     assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n  => 14:\
    \     assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n     15:     assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n     16:\
    \     assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]))\n     17:     assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n<[1.0, 0.0]> expected but was\n<[0.0, 1.0]>\n\ndiff:\n\
    ? [0.0, 1.0, 0.0]\n===============================================================================\n\
    \nFinished in 0.007096624 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.91 tests/s, 281.82 assertions/s\n"
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min).to_f / (max - min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpr_t_1n5c

    Started

    .

    Finished in 0.000458862 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2179.30 tests/s, 10896.52 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  # TODO: Implement me!\n  numbers.map\
    \ { |num| (num - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfb34c63e

    Started

    .

    Finished in 0.000789289 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1266.96 tests/s, 6334.82 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |number| (number\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdtqfqw5b

    Started

    .

    Finished in 0.000441282 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2266.12 tests/s, 11330.62 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |x| (x - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxtpgonqi

    Started

    .

    Finished in 0.000452336 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2210.75 tests/s, 11053.73 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n - numbers.min)\
    \ / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate = method(:rescale_to_unit)\n\
    \    assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n    assert_equal([1.0,\
    \ 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0, 0.25, 0.5, 0.75,\
    \ 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25, 0.0,\
    \ 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5j7q4asp

    Started

    .

    Finished in 0.000950509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1052.07 tests/s, 5260.34 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |x| (x - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxtpgonqi

    Started

    .

    Finished in 0.000452336 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2210.75 tests/s, 11053.73 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min).to_f / (max - min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpr_t_1n5c

    Started

    .

    Finished in 0.000458862 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2179.30 tests/s, 10896.52 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
- exit_code: 0
  program: "# Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\ndef rescale_to_unit(numbers)\n  min = numbers.min\n  max = numbers.max\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3re38ww5

    Started

    .

    Finished in 0.000570412 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1753.12 tests/s, 8765.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799184
