name: HumanEval_97_multiply
language: rb
prompt: "# Complete the function that takes two integers and returns \n# the product\
  \ of their unit digits.\n# Assume the input is always valid.\n# Examples:\ndef multiply(a,\
  \ b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_multiply\n\
  \    candidate = method(:multiply)\n    assert_equal(16, candidate.call(148, 412))\n\
  \    assert_equal(72, candidate.call(19, 28))\n    assert_equal(0, candidate.call(2020,\
  \ 1851))\n    assert_equal(20, candidate.call(14, -15))\n    assert_equal(42, candidate.call(76,\
  \ 67))\n    assert_equal(49, candidate.call(17, 27))\n    assert_equal(0, candidate.call(0,\
  \ 1))\n    assert_equal(0, candidate.call(0, 0))\n  end\nend\n"
completions: ["  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a\
    \ * b).to_s[-1].to_i\nend", "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\n\
    end", "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\nend", "  (a\
    \ * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  a * b % 10\nend",
  "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  a.to_s.chars.last.to_i\
    \ * b.to_s.chars.last.to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  a * b % 10\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\n\
    end", "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\nend", "  (a\
    \ * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\nend", "  (a\
    \ * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  a.to_s.split('').last.to_i\
    \ * b.to_s.split('').last.to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  a.abs.to_s.chars.last.to_i\
    \ * b.abs.to_s.chars.last.to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  a.to_s.chars.last.to_i\
    \ * b.to_s.chars.last.to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\n\
    end", "  a.to_s.chars.last.to_i * b.to_s.chars.last.to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  a.to_s.chars.last.to_i * b.to_s.chars.last.to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a*b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\nend", "  (a\
    \ * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\nend", "  a.to_s.split('').last.to_i\
    \ * b.to_s.split('').last.to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  a.to_s.split('').last.to_i\
    \ * b.to_s.split('').last.to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  a.to_s.split('').last.to_i\
    \ * b.to_s.split('').last.to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  a.to_s.chars.last.to_i * b.to_s.chars.last.to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  a.to_s.chars.last.to_i * b.to_s.chars.last.to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  a.to_s.chars.last.to_i\
    \ * b.to_s.chars.last.to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  a.to_s.split('').last.to_i\
    \ * b.to_s.split('').last.to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a*b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  a.to_s.chars.last.to_i * b.to_s.chars.last.to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  # your code here\n  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  a.to_s.split('').last.to_i\
    \ * b.to_s.split('').last.to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  a.to_s.chars.last.to_i * b.to_s.chars.last.to_i\n\
    end", "  a.to_s.chars.last.to_i * b.to_s.chars.last.to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  a.to_s.chars.last.to_i * b.to_s.chars.last.to_i\n\
    end", "  a.to_s.chars.last.to_i * b.to_s.chars.last.to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\nend", "  (a\
    \ * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  a.to_s.split('').last.to_i\
    \ * b.to_s.split('').last.to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  a.to_s.split('').last.to_i * b.to_s.split('').last.to_i\n\
    end", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a *\
    \ b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\nend", "  (a * b).to_s[-1].to_i\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
