name: HumanEval_87_get_row
language: rb
prompt: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
  \ to matrix, however, unlike matrices,\n# each row may contain a different number\
  \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return\
  \ list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a coordinate\
  \ - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending\
  \ order.\n# Also, sort coordinates of the row by columns in descending order.\n\
  # Examples:\ndef get_row(lst, x)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
  \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
  \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5,\
  \ 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0,\
  \ 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6,\
  \ 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3,\
  \ 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
  \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
  \ [1, 2, 3]], 3))\n  end\nend\n"
completions: ["  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result\n\
    end", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |e,\
    \ j|\n      [i, j] if e == x\n    end\n  end.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend", "  # your code here\nend", "  row = 0\n  lst.each do\
    \ |sub_lst|\n    if sub_lst.include?(x)\n      return row\n    end\n    row +=\
    \ 1\n  end\nend", "  lst.map.with_index { |row, i| row.map.with_index { |e, j|\
    \ [i, j] if e == x } }.flatten(1).compact\nend", "  result = []\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      result << [i, j] if\
    \ col == x\n    end\n  end\n  result\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.each_with_index.map { |row, i| row.map { |e| [i, row.index(e)] if\
    \ e == x } }.flatten(1).compact\nend", "  # your code here\nend", "  row = 0\n\
    \  lst.each do |sub_lst|\n    if sub_lst.include?(x)\n      return row\n    end\n\
    \    row += 1\n  end\nend", "  lst.map.with_index { |e, i| e.include?(x) ? i :\
    \ nil }.compact\nend", "  lst.each_with_index.map { |e, i| e.include?(x) ? i :\
    \ nil }.compact\nend", "  result = []\n  lst.each_with_index do |row, i|\n   \
    \ row.each_with_index do |col, j|\n      result << [i, j] if col == x\n    end\n\
    \  end\n  result\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n\
    \    row.each_with_index do |column, column_index|\n      result << [row_index,\
    \ column_index] if column == x\n    end\n  end\n  result\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.each_with_index.map { |row, i| row.include?(x) ? i : nil }.compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  # your code here\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  row = 0\n  lst.each do |sub_lst|\n   \
    \ if sub_lst.include?(x)\n      return row\n    end\n    row += 1\n  end\nend",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |e, j|\n      return\
    \ i if e == x\n    end\n  end\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  result = []\n  lst.each_with_index\
    \ do |row, row_index|\n    row.each_with_index do |col, col_index|\n      result\
    \ << [row_index, col_index] if col == x\n    end\n  end\n  result\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |e, j|\n      [i, j] if e == x\n\
    \    end\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  # your\
    \ code here\nend", "  lst.each_with_index.map { |row, i| row.map { |e| [i, row.index(e)]\
    \ if e == x } }.flatten(1).compact\nend", "  lst.each_with_index.map do |sub_lst,\
    \ i|\n    sub_lst.each_with_index.map do |e, j|\n      [i, j] if e == x\n    end\n\
    \  end.flatten(1).compact\nend", "  lst.each_with_index.map { |row, i| [i, row.index(x)]\
    \ }.select { |i, j| j }\nend", "  lst.each_with_index.map { |row, i| [i, row.index(x)]\
    \ if row.include?(x) }.compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  row = 0\n  lst.each do |sub_lst|\n   \
    \ if sub_lst.include?(x)\n      return row\n    end\n    row += 1\n  end\nend",
  "  row = 0\n  lst.each do |sub_lst|\n    if sub_lst.include?(x)\n      return row\n\
    \    end\n    row += 1\n  end\nend", "  lst.each_with_index.map do |row, i|\n\
    \    row.each_with_index.map do |e, j|\n      [i, j] if e == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |a, b| [a, -b] }\nend", "  # your code here\nend", "  lst.map.with_index {\
    \ |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  # your code here\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index.map\
    \ { |row, i| row.each_with_index.map { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.each_with_index.map { |row, i| [i, row.index(x)] }.compact\nend",
  "  lst.map.with_index do |row, i|\n    row.map.with_index do |e, j|\n      [i, j]\
    \ if e == x\n    end\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.map.with_index do |row, i|\n    row.map.with_index\
    \ do |e, j|\n      [i, j] if e == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |i, j| [i, -j] }\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  row = []\n  lst.each_with_index\
    \ do |sub_lst, i|\n    sub_lst.each_with_index do |num, j|\n      row << [i, j]\
    \ if num == x\n    end\n  end\n  row\nend", "  lst.each_with_index.map { |row,\
    \ i| row.map { |e| [i, row.index(e)] if e == x }.compact }.flatten(1)\nend", " \
    \ # your code here\nend", "  # your code here\nend", "  lst.map.with_index { |row,\
    \ i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\nend",
  "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }.flatten(1).compact\nend", "  lst.map.with_index { |e, i| e.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index.map\
    \ { |row, i| row.map { |e| [i, row.index(e)] if e == x }.compact }.flatten(1)\n\
    end", "  lst.each_with_index.map { |row, i| row.map { |e| [i, row.index(e)] if\
    \ e == x } }.flatten(1).compact\nend", "  row = []\n  lst.each_with_index do |sub_lst,\
    \ i|\n    sub_lst.each_with_index do |num, j|\n      row << [i, j] if num == x\n\
    \    end\n  end\n  row\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  row = 0\n  lst.each\
    \ do |sub_lst|\n    if sub_lst.include?(x)\n      return row\n    end\n    row\
    \ += 1\n  end\nend", "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result\n\
    end", "  lst.each_with_index.map { |row, i| row.include?(x) ? i : nil }.compact\n\
    end", "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result\n\
    end", "  # your code here\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  row = []\n  lst.each_with_index do |sub_lst, index|\n    sub_lst.each_with_index\
    \ do |num, sub_index|\n      if num == x\n        row << [index, sub_index]\n\
    \      end\n    end\n  end\n  row\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ do |row, i|\n    row.map.with_index do |el, j|\n      [i, j] if el == x\n  \
    \  end\n  end.flatten(1).compact.sort_by { |el| [el[0], -el[1]] }\nend", "  result\
    \ = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |elem, j|\n\
    \      result << [i, j] if elem == x\n    end\n  end\n  result\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  row = 0\n  lst.each do |sub_lst|\n    if sub_lst.include?(x)\n      return\
    \ row\n    end\n    row += 1\n  end\nend", "  lst.each_with_index.map do |row,\
    \ i|\n    row.each_with_index.map do |e, j|\n      [i, j] if e == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  result = []\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |elem, j|\n   \
    \   result << [i, j] if elem == x\n    end\n  end\n  result\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| [i, row.index(x)] }.select { |_, j| j }\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.each_with_index do |row, i|\n    return\
    \ i if row.include?(x)\n  end\nend", "  lst.each_with_index.map { |e, i| e.include?(x)\
    \ ? i : nil }.compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ do |row, i|\n    row.map.with_index do |e, j|\n      [i, j] if e == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  row = 0\n  lst.each do |sub_lst|\n    if sub_lst.include?(x)\n      return\
    \ row\n    end\n    row += 1\n  end\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index.map\
    \ { |row, i| row.include?(x) ? i : nil }.compact\nend", "  row = 0\n  lst.each\
    \ do |i|\n    if i.include?(x)\n      return row\n    end\n    row += 1\n  end\n\
    end", "  lst.each_with_index.map { |row, i| row.map { |e| [i, row.index(e)] if\
    \ e == x } }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  row = []\n  lst.each_with_index\
    \ do |sub_lst, i|\n    sub_lst.each_with_index do |num, j|\n      row << [i, j]\
    \ if num == x\n    end\n  end\n  row\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result\n\
    end", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |col,\
    \ j|\n      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by { |row,\
    \ col| [row, -col] }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n\
    \    row.each_with_index do |col, col_index|\n      result << [row_index, col_index]\
    \ if col == x\n    end\n  end\n  result\nend", "  lst.map.with_index { |row, i|\
    \ row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", " \
    \ # your code here\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |e, i| e.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  row = 0\n  lst.each\
    \ do |sublist|\n    if sublist.include?(x)\n      return row\n    end\n    row\
    \ += 1\n  end\nend", "  lst.each_with_index.map { |row, i| row.map { |e| [i, row.index(e)]\
    \ if e == x } }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  result = []\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      result << [i, j] if\
    \ col == x\n    end\n  end\n  result\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  result = []\n  lst.each_with_index\
    \ do |row, index|\n    row.each_with_index do |element, index2|\n      if element\
    \ == x\n        result << [index, index2]\n      end\n    end\n  end\n  result\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      return i if col == x\n    end\n  end\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  row = 0\n  lst.each do |sublist|\n   \
    \ if sublist.include?(x)\n      return row\n    end\n    row += 1\n  end\nend",
  "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |col, j|\n\
    \      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by { |row, col|\
    \ [row, -col] }\nend", "  lst.map.with_index { |row, i| row.map.with_index { |e,\
    \ j| [i, j] if e == x } }.flatten(1).compact\nend", "  # your code here\nend",
  "  # your code here\nend", "  lst.map.with_index { |row, i| row.map.with_index {\
    \ |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  result = []\n  lst.each_with_index do\
    \ |row, row_index|\n    row.each_with_index do |col, col_index|\n      result\
    \ << [row_index, col_index] if col == x\n    end\n  end\n  result\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index.map\
    \ { |row, i| [i, row.index(x)] if row.include?(x) }.compact\nend", "  lst.each_with_index.map\
    \ { |row, i| row.each_with_index.map { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i,\
    \ j] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index.map { |row,\
    \ i| row.map { |e| [i, row.index(e)] if e == x } }.flatten(1).compact\nend", " \
    \ lst.each_with_index.map { |row, i| row.map { |e| [i, row.index(e)] if e == x\
    \ } }.flatten(1).compact\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  result = []\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |elem, j|\n      result << [i, j] if\
    \ elem == x\n    end\n  end\n  result\nend", "  row = []\n  lst.each_with_index\
    \ do |sub_lst, i|\n    sub_lst.each_with_index do |num, j|\n      row << [i, j]\
    \ if num == x\n    end\n  end\n  row\nend", "  lst.each_with_index.map do |row,\
    \ i|\n    row.each_with_index.map do |col, j|\n      [i, j] if col == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |x, y| [x, -y] }\nend", "  result = []\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |elem, j|\n    \
    \  result << [i, j] if elem == x\n    end\n  end\n  result\nend", "  lst.each_with_index.map\
    \ { |row, i| row.include?(x) ? i : nil }.compact\nend", "  lst.each_with_index.map\
    \ { |row, i| [i, row.index(x)] if row.include?(x) }.compact\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |e, j|\n      [i, j] if e == x\n\
    \    end\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  result\
    \ = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |elem, j|\n\
    \      result << [i, j] if elem == x\n    end\n  end\n  result\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  row_index = 0\n  lst.each do |row|\n    if row.include?(x)\n      return\
    \ row_index\n    end\n    row_index += 1\n  end\nend", "  # your code here\nend",
  "  row = []\n  lst.each_with_index do |e, i|\n    if e.include?(x)\n      e.each_with_index\
    \ do |e, j|\n        if e == x\n          row << [i, j]\n        end\n      end\n\
    \    end\n  end\n  row\nend", "  # your code here\nend", "  lst.each_with_index.map\
    \ { |row, i| row.map { |e| [i, row.index(e)] if e == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index\
    \ do |row, i|\n    return i if row.include?(x)\n  end\nend", "  result = []\n\
    \  lst.each_with_index do |sub_lst, i|\n    sub_lst.each_with_index do |num, j|\n\
    \      result << [i, j] if num == x\n    end\n  end\n  result\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  row = 0\n  lst.each do |sub_lst|\n    if sub_lst.include?(x)\n      return\
    \ row\n    end\n    row += 1\n  end\nend", "  result = []\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      result << [i, j] if\
    \ col == x\n    end\n  end\n  result\nend", "  result = []\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |elem, j|\n      result << [i, j] if\
    \ elem == x\n    end\n  end\n  result\nend", "  lst.map.with_index { |row, i|\
    \ row.map.with_index { |el, j| [i, j] if el == x } }.flatten(1).compact\nend",
  "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }.flatten(1).compact\nend", "  lst.each_with_index.map { |row, i| row.map {\
    \ |e| [i, row.index(e)] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  result = []\n  lst.each_with_index do |e, i|\n    e.each_with_index do\
    \ |e2, i2|\n      result << [i, i2] if e2 == x\n    end\n  end\n  result\nend",
  "  lst.each_with_index.map { |row, i| row.map { |e| [i, row.index(e)] if e == x\
    \ } }.flatten(1).compact\nend", "  lst.each_with_index.map { |row, i| [i, row.index(x)]\
    \ if row.include?(x) }.compact\nend", "  lst.each_with_index.map { |row, i| [i,\
    \ row.index(x)] }.select { |i, j| j }\nend", "  lst.map.with_index { |row, i|\
    \ row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", " \
    \ row = 0\n  lst.each do |sub_lst|\n    if sub_lst.include?(x)\n      return row\n\
    \    end\n    row += 1\n  end\nend", "  lst.each_with_index.map do |row, i|\n\
    \    row.each_with_index.map do |el, j|\n      [i, j] if el == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  # your code here\nend", "  lst.each_with_index.map\
    \ { |row, i| row.each_with_index.map { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |x, y| [x, -y] }\nend", "  result = []\n  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |elem, j|\n      result << [i, j] if elem == x\n \
    \   end\n  end\n  result\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |col, j|\n      [i, j] if col ==\
    \ x\n    end\n  end.flatten(1).compact.sort_by { |row, col| [row, -col] }\nend",
  "  # your code here\nend", "  lst.map.with_index { |row, i| row.map.with_index {\
    \ |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |el, j| [i, j] if el == x } }.flatten(1).compact\n\
    end", "  # your code here\nend", "  result = []\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      result << [i, j] if col == x\n\
    \    end\n  end\n  result\nend", "  lst.each_with_index.map { |v, i| [i, v.index(x)]\
    \ if v.include?(x) }.compact\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      return i if col == x\n    end\n  end\nend", "  row = []\n\
    \  lst.each_with_index do |sublist, i|\n    sublist.each_with_index do |num, j|\n\
    \      if num == x\n        row << [i, j]\n      end\n    end\n  end\n  row\n\
    end", "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ do |row, row_index|\n    row.map.with_index do |col, col_index|\n      [row_index,\
    \ col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by { |row, col|\
    \ [row, -col] }\nend", "  lst.map.with_index { |e, i| e.map.with_index { |e, j|\
    \ [i, j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index { |row,\
    \ i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\nend",
  "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |e,\
    \ j|\n      [i, j] if e == x\n    end\n  end.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend", "  lst.map.with_index { |row, i| row.map.with_index {\
    \ |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.each_with_index.map { |row, i| row.map\
    \ { |e| [i, row.index(e)] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index\
    \ do |row, row_index|\n    row.each_with_index do |col, col_index|\n      return\
    \ row_index if col == x\n    end\n  end\nend", "  row = 0\n  lst.each do |sub_lst|\n\
    \    if sub_lst.include?(x)\n      return row\n    end\n    row += 1\n  end\n\
    end", "  # your code here\nend", "  lst.map.with_index do |row, i|\n    row.map.with_index\
    \ do |e, j|\n      [i, j] if e == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
