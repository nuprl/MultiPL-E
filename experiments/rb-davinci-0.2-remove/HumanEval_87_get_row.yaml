name: HumanEval_87_get_row
language: rb
prompt: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
  \ to matrix, however, unlike matrices,\n# each row may contain a different number\
  \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return\
  \ list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a coordinate\
  \ - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending\
  \ order.\n# Also, sort coordinates of the row by columns in descending order.\n\
  # Examples:\ndef get_row(lst, x)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
  \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
  \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5,\
  \ 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0,\
  \ 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6,\
  \ 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3,\
  \ 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
  \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
  \ [1, 2, 3]], 3))\n  end\nend\n"
completions: ["  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index.map\
    \ { |e, i| e.include?(x) ? i : nil }.compact\nend", "  lst.each_with_index.map\
    \ { |row, i| row.map { |e| [i, row.index(e)] if e == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  row = 0\n  lst.each do |sub_lst|\n   \
    \ if sub_lst.include?(x)\n      return row\n    end\n    row += 1\n  end\nend",
  "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }.flatten(1).compact\nend", "  lst.each_with_index.map { |e, i| e.include?(x)\
    \ ? i : nil }.compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result\n\
    end", "  lst.each_with_index do |row, i|\n    row.each_with_index do |e, j|\n\
    \      return [i, j] if e == x\n    end\n  end\nend", "  lst.map.with_index {\
    \ |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i,\
    \ j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index do |row, i|\n\
    \    row.map.with_index do |e, j|\n      [i, j] if e == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  # your code here\n\
    end", "  # your code here\nend", "  row = 0\n  lst.each do |sub_lst|\n    if sub_lst.include?(x)\n\
    \      return row\n    end\n    row += 1\n  end\nend", "  lst.map.with_index {\
    \ |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  row = 0\n  lst.each do |sub_lst|\n    if sub_lst.include?(x)\n      return\
    \ row\n    end\n    row += 1\n  end\nend", "  lst.each_with_index.map { |row,\
    \ i| [i, row.index(x)] if row.include?(x) }.compact\nend", "  lst.each_with_index.map\
    \ { |e, i| e.include?(x) ? i : nil }.compact\nend", "  lst.map.with_index { |row,\
    \ i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\nend",
  "  row = []\n  lst.each_with_index do |sub_lst, i|\n    sub_lst.each_with_index\
    \ do |num, j|\n      row << [i, j] if num == x\n    end\n  end\n  row\nend", " \
    \ lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index.map\
    \ { |row, i| row.include?(x) ? i : nil }.compact\nend", "  lst.each_with_index.map\
    \ { |row, i| row.each_with_index.map { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  # your code here\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |el, j| [i, j] if el == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  result = []\n  lst.each_with_index do\
    \ |row, i|\n    row.each_with_index do |col, j|\n      result << [i, j] if col\
    \ == x\n    end\n  end\n  result\nend", "  lst.each_with_index.map { |row, i|\
    \ row.each_with_index.map { |e, j| [i, j] if e == x } }.flatten(1).compact\nend",
  "  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |col, col_index|\n      result << [row_index, col_index] if col == x\n  \
    \  end\n  end\n  result\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index.map\
    \ { |e, i| e.include?(x) ? i : nil }.compact\nend", "  row = []\n  lst.each_with_index\
    \ do |e, i|\n    e.each_with_index do |e, j|\n      if e == x\n        row <<\
    \ [i, j]\n      end\n    end\n  end\n  row\nend", "  lst.each_with_index.map {\
    \ |row, i| row.include?(x) ? i : nil }.compact\nend", "  # your code here\nend",
  "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }.flatten(1).compact\nend", "  lst.each_with_index.map { |row, i| row.include?(x)\
    \ ? i : nil }.compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |e, j|\n      [i, j] if e == x\n\
    \    end\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map\
    \ { |row, i| row.each_with_index.map { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |el,\
    \ j|\n      [i, j] if el == x\n    end\n  end.flatten(1).compact.sort_by { |x,\
    \ y| [x, -y] }\nend", "  lst.map.with_index { |row, i| row.map.with_index { |e,\
    \ j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index.map\
    \ { |row, i| [i, row.index(x)] }.select { |i, j| j }\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |e, j|\n      return i if e == x\n \
    \   end\n  end\nend", "  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |col, col_index|\n      if col == x\n        puts \"(#{row_index}, #{col_index})\"\
    \n      end\n    end\n  end\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  row = []\n  lst.each_with_index\
    \ do |e, i|\n    e.each_with_index do |f, j|\n      if f == x\n        row <<\
    \ [i, j]\n      end\n    end\n  end\n  row\nend", "  result = []\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      result << [i, j] if\
    \ col == x\n    end\n  end\n  result\nend", "  result = []\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |el, j|\n      result << [i, j] if el\
    \ == x\n    end\n  end\n  result\nend", "  row = []\n  lst.each_with_index do\
    \ |sub_lst, index|\n    sub_lst.each_with_index do |item, index2|\n      if item\
    \ == x\n        row << [index, index2]\n      end\n    end\n  end\n  row\nend",
  "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }.flatten(1).compact\nend", "  row = []\n  lst.each_with_index do |sub_lst,\
    \ i|\n    sub_lst.each_with_index do |num, j|\n      row << [i, j] if num == x\n\
    \    end\n  end\n  row\nend", "  lst.each_with_index.map { |row, i| [i, row.index(x)]\
    \ }.select { |row, i| i }\nend", "  # your code here\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  result = []\n  lst.each_with_index do\
    \ |row, i|\n    row.each_with_index do |elem, j|\n      result << [i, j] if elem\
    \ == x\n    end\n  end\n  result\nend", "  row = 0\n  lst.each do |sub_lst|\n\
    \    if sub_lst.include?(x)\n      return row\n    end\n    row += 1\n  end\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  # your code here\n\
    end", "  lst.each_with_index.map { |row, i| row.include?(x) ? i : nil }.compact\n\
    end", "  lst.each_with_index.map { |row, i| row.map { |e| [i, row.index(e)] if\
    \ e == x } }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |e, j|\n      [i, j] if e == x\n\
    \    end\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  row = []\n  lst.each_with_index do |sub_lst, idx|\n    sub_lst.each_with_index\
    \ do |num, idx2|\n      if num == x\n        row << [idx, idx2]\n      end\n \
    \   end\n  end\n  row\nend", "  lst.each_with_index.map { |row, i| row.map { |e|\
    \ [i, row.index(e)] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  # your code here\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  # your code here\n\
    end", "  lst.each_with_index.map { |row, i| row.include?(x) ? i : nil }.compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.each_with_index.map { |row, i| row.map\
    \ { |e| [i, row.index(e)] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |sub_lst, i| sub_lst.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index.map\
    \ { |row, i| row.each_with_index.map { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result\nend", "  lst.each_with_index.map { |row, i|\
    \ row.include?(x) ? i : nil }.compact\nend", "  lst.each_with_index.map { |row,\
    \ i| row.include?(x) ? i : nil }.compact\nend", "  lst.map.with_index { |row,\
    \ i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\nend",
  "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }.flatten(1).compact\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |el, j|\n      [i, j] if el == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |i, j| [i, -j] }\nend", "  result = []\n  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |col, j|\n      result << [i, j] if col == x\n   \
    \ end\n  end\n  result\nend", "  lst.each_with_index.map { |e, i| e.include?(x)\
    \ ? i : nil }.compact\nend", "  # your code here\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |cell, j|\n      if cell == x\n    \
    \    puts \"(#{i}, #{j})\"\n      end\n    end\n  end\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  row = 0\n  lst.each do |i|\n    if i.include?(x)\n      return row\n\
    \    end\n    row += 1\n  end\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.each_with_index.map { |row, i| row.map\
    \ { |e| [i, row.index(e)] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index.map\
    \ { |e, i| e.include?(x) ? i : nil }.compact\nend", "  lst.map.with_index { |row,\
    \ i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\nend",
  "  lst.each_with_index.map { |e, i| e.include?(x) ? i : nil }.compact\nend", " \
    \ lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }.flatten(1).compact\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index.map\
    \ { |row, i| [i, row.index(x)] }.select { |row, col| col }\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |el, j| [i, j] if el == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  # your code here\n\
    end", "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |item, j|\n      result << [i, j] if item == x\n    end\n  end\n  result\n\
    end", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  result = []\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |elem, j|\n      result << [i, j] if\
    \ elem == x\n    end\n  end\n  result\nend", "  lst.each_with_index.map { |row,\
    \ i| row.include?(x) ? i : nil }.compact\nend", "  # your code here\nend", " \
    \ lst.each_with_index.map { |e, i| e.include?(x) ? i : nil }.compact\nend", " \
    \ lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j] if\
    \ e == x } }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  # your code here\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |e, j|\n      return i if e == x\n    end\n  end\nend", "  # your code here\n\
    end", "  # your code here\nend", "  lst.each_with_index.map { |row, i| row.include?(x)\
    \ ? i : nil }.compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |e, j|\n      [i, j] if e == x\n\
    \    end\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  row = 0\n  lst.each do |sub_lst|\n   \
    \ if sub_lst.include?(x)\n      return row\n    end\n    row += 1\n  end\nend",
  "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }.flatten(1).compact\nend", "  lst.map.with_index do |row, i|\n    row.map.with_index\
    \ do |e, j|\n      [i, j] if e == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |el, j| [i, j] if el == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  # your code here\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.each_with_index.map do |row, i|\n\
    \    row.each_with_index.map do |e, j|\n      [i, j] if e == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  # your code here\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  row = 0\n  lst.each do |i|\n    if i.include?(x)\n      return row\n\
    \    end\n    row += 1\n  end\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  row = []\n  lst.each_with_index\
    \ do |e, i|\n    e.each_with_index do |e2, i2|\n      if e2 == x\n        row\
    \ << [i, i2]\n      end\n    end\n  end\n  row\nend", "  lst.each_with_index.map\
    \ { |row, i| row.map { |e| [i, row.index(e)] if e == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  row = 0\n  lst.each\
    \ do |sub_lst|\n    if sub_lst.include?(x)\n      return row\n    end\n    row\
    \ += 1\n  end\nend", "  lst.map.with_index { |row, i| row.map.with_index { |e,\
    \ j| [i, j] if e == x } }.flatten(1).compact\nend", "  row = 0\n  lst.each do\
    \ |sub_lst|\n    if sub_lst.include?(x)\n      return row\n    end\n    row +=\
    \ 1\n  end\nend", "  lst.each_with_index.map { |row, i| [i, row.index(x)] }.select\
    \ { |_, j| j }\nend", "  lst.map.with_index { |row, row_index| row.map.with_index\
    \ { |elem, col_index| [row_index, col_index] if elem == x } }.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  lst.each_with_index.map { |row, i| [i,\
    \ row.index(x)] if row.include?(x) }.compact\nend", "  lst.each_with_index.map\
    \ { |row, i| row.each_with_index.map { |e, j| [i, j] if e == x }.compact }.flatten(1)\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |col, j| [i, j] if col == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.each_with_index.map { |row, i| row.index(x) ? [i, row.index(x)] :\
    \ nil }.compact\nend", "  lst.map.with_index { |row, i| row.map.with_index { |e,\
    \ j| [i, j] if e == x } }.flatten(1).compact\nend", "  result = []\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |el, j|\n      result << [i, j] if el\
    \ == x\n    end\n  end\n  result\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if col == x\n      \
    \  return [i, j]\n      end\n    end\n  end\nend", "  # your code here\nend",
  "  row = 0\n  lst.each do |sub_lst|\n    if sub_lst.include?(x)\n      return row\n\
    \    end\n    row += 1\n  end\nend", "  lst.map.with_index { |e, i| e.include?(x)\
    \ ? i : nil }.compact\nend", "  # your code here\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  # your code here\nend", "  result = []\n\
    \  lst.each_with_index do |row, index|\n    row.each_with_index do |element, index2|\n\
    \      if element == x\n        result << [index, index2]\n      end\n    end\n\
    \  end\n  result\nend", "  lst.map.with_index { |row, i| row.map.with_index {\
    \ |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  # your code here\n\
    end", "  row = 0\n  lst.each do |i|\n    if i.include?(x)\n      return row\n\
    \    end\n    row += 1\n  end\nend", "  row = []\n  lst.each_with_index do |e,\
    \ i|\n    e.each_with_index do |e2, i2|\n      if e2 == x\n        row << [i,\
    \ i2]\n      end\n    end\n  end\n  row\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  # your code here\nend", "  lst.each_with_index.map\
    \ { |row, i| row.each_with_index.map { |el, j| [i, j] if el == x } }.flatten(1).compact\n\
    end", "  # your code here\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |col, j|\n      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  lst.each_with_index.map { |e, i| e.map\
    \ { |e| [i, e.index(x)] } }.flatten(1).compact\nend", "  # your code here\nend",
  "  lst.each_with_index.map { |row, i| row.map { |e| [i, row.index(e)] if e == x\
    \ } }.flatten(1).compact\nend", "  lst.each_with_index.map { |row, i| [i, row.index(x)]\
    \ }.select { |row, i| i }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |el, j|\n      [i, j] if el == x\n    end\n  end.flatten(1).compact.sort\
    \ do |a, b|\n    if a[0] == b[0]\n      b[1] <=> a[1]\n    else\n      a[0] <=>\
    \ b[0]\n    end\n  end\nend", "  result = []\n  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |col, j|\n      result << [i, j] if col == x\n   \
    \ end\n  end\n  result\nend", "  result = []\n  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |elem, j|\n      result << [i, j] if elem == x\n \
    \   end\n  end\n  result\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.each_with_index.map\
    \ { |row, i| [i, row.index(x)] }.select { |row, i| i }\nend", "  # your code here\n\
    end", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact\nend", "  row = 0\n  lst.each do |sub_lst|\n   \
    \ if sub_lst.include?(x)\n      return row\n    end\n    row += 1\n  end\nend",
  "  row = 0\n  lst.each do |sub_lst|\n    if sub_lst.include?(x)\n      return row\n\
    \    end\n    row += 1\n  end\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }.flatten(1).compact\n\
    end", "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
