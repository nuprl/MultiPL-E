language: rb
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |x| [x.digits.sum,\
    \ nums.index(x)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpv58gtoay\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpv58gtoay.rb:7:in `digits'\n/tmp/tmpv58gtoay.rb:7:in `block in order_by_points'\n\
    /tmp/tmpv58gtoay.rb:7:in `each'\n/tmp/tmpv58gtoay.rb:7:in `sort_by'\n/tmp/tmpv58gtoay.rb:7:in\
    \ `order_by_points'\n/tmp/tmpv58gtoay.rb:13:in `call'\n/tmp/tmpv58gtoay.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001174848 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    851.17 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by.with_index\
    \ { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_order_by_points\n    candidate = method(:order_by_points)\n\
    \    assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n\
    \    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3,\
    \ 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n    assert_equal([-3,\
    \ -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n\
    \    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76, -21, 0, 4, 23, 6, 6], candidate.call([0,\
    \ 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp7r8gdfk\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpp7r8gdfk.rb:7:in `digits'\n/tmp/tmpp7r8gdfk.rb:7:in `block in order_by_points'\n\
    /tmp/tmpp7r8gdfk.rb:7:in `each'\n/tmp/tmpp7r8gdfk.rb:7:in `sort_by'\n/tmp/tmpp7r8gdfk.rb:7:in\
    \ `with_index'\n/tmp/tmpp7r8gdfk.rb:7:in `order_by_points'\n/tmp/tmpp7r8gdfk.rb:13:in\
    \ `call'\n/tmp/tmpp7r8gdfk.rb:13:in `test_order_by_points'\n     10: class TestHumanEval\
    \ < Test::Unit::TestCase\n     11:   def test_order_by_points\n     12:     candidate\
    \ = method(:order_by_points)\n  => 13:     assert_equal([-1, -11, 1, -12, 11],\
    \ candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001192381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    838.66 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by.with_index\
    \ { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_order_by_points\n    candidate = method(:order_by_points)\n\
    \    assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n\
    \    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3,\
    \ 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n    assert_equal([-3,\
    \ -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n\
    \    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76, -21, 0, 4, 23, 6, 6], candidate.call([0,\
    \ 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp7r8gdfk\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpp7r8gdfk.rb:7:in `digits'\n/tmp/tmpp7r8gdfk.rb:7:in `block in order_by_points'\n\
    /tmp/tmpp7r8gdfk.rb:7:in `each'\n/tmp/tmpp7r8gdfk.rb:7:in `sort_by'\n/tmp/tmpp7r8gdfk.rb:7:in\
    \ `with_index'\n/tmp/tmpp7r8gdfk.rb:7:in `order_by_points'\n/tmp/tmpp7r8gdfk.rb:13:in\
    \ `call'\n/tmp/tmpp7r8gdfk.rb:13:in `test_order_by_points'\n     10: class TestHumanEval\
    \ < Test::Unit::TestCase\n     11:   def test_order_by_points\n     12:     candidate\
    \ = method(:order_by_points)\n  => 13:     assert_equal([-1, -11, 1, -12, 11],\
    \ candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001192381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    838.66 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by.with_index\
    \ { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_order_by_points\n    candidate = method(:order_by_points)\n\
    \    assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n\
    \    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3,\
    \ 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n    assert_equal([-3,\
    \ -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n\
    \    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76, -21, 0, 4, 23, 6, 6], candidate.call([0,\
    \ 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp7r8gdfk\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpp7r8gdfk.rb:7:in `digits'\n/tmp/tmpp7r8gdfk.rb:7:in `block in order_by_points'\n\
    /tmp/tmpp7r8gdfk.rb:7:in `each'\n/tmp/tmpp7r8gdfk.rb:7:in `sort_by'\n/tmp/tmpp7r8gdfk.rb:7:in\
    \ `with_index'\n/tmp/tmpp7r8gdfk.rb:7:in `order_by_points'\n/tmp/tmpp7r8gdfk.rb:13:in\
    \ `call'\n/tmp/tmpp7r8gdfk.rb:13:in `test_order_by_points'\n     10: class TestHumanEval\
    \ < Test::Unit::TestCase\n     11:   def test_order_by_points\n     12:     candidate\
    \ = method(:order_by_points)\n  => 13:     assert_equal([-1, -11, 1, -12, 11],\
    \ candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001192381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    838.66 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by.with_index\
    \ { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_order_by_points\n    candidate = method(:order_by_points)\n\
    \    assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n\
    \    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3,\
    \ 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n    assert_equal([-3,\
    \ -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n\
    \    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76, -21, 0, 4, 23, 6, 6], candidate.call([0,\
    \ 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp7r8gdfk\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpp7r8gdfk.rb:7:in `digits'\n/tmp/tmpp7r8gdfk.rb:7:in `block in order_by_points'\n\
    /tmp/tmpp7r8gdfk.rb:7:in `each'\n/tmp/tmpp7r8gdfk.rb:7:in `sort_by'\n/tmp/tmpp7r8gdfk.rb:7:in\
    \ `with_index'\n/tmp/tmpp7r8gdfk.rb:7:in `order_by_points'\n/tmp/tmpp7r8gdfk.rb:13:in\
    \ `call'\n/tmp/tmpp7r8gdfk.rb:13:in `test_order_by_points'\n     10: class TestHumanEval\
    \ < Test::Unit::TestCase\n     11:   def test_order_by_points\n     12:     candidate\
    \ = method(:order_by_points)\n  => 13:     assert_equal([-1, -11, 1, -12, 11],\
    \ candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001192381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    838.66 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |x| [x.digits.sum,\
    \ nums.index(x)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpv58gtoay\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpv58gtoay.rb:7:in `digits'\n/tmp/tmpv58gtoay.rb:7:in `block in order_by_points'\n\
    /tmp/tmpv58gtoay.rb:7:in `each'\n/tmp/tmpv58gtoay.rb:7:in `sort_by'\n/tmp/tmpv58gtoay.rb:7:in\
    \ `order_by_points'\n/tmp/tmpv58gtoay.rb:13:in `call'\n/tmp/tmpv58gtoay.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001174848 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    851.17 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by.with_index\
    \ { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_order_by_points\n    candidate = method(:order_by_points)\n\
    \    assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n\
    \    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3,\
    \ 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n    assert_equal([-3,\
    \ -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n\
    \    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76, -21, 0, 4, 23, 6, 6], candidate.call([0,\
    \ 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp7r8gdfk\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpp7r8gdfk.rb:7:in `digits'\n/tmp/tmpp7r8gdfk.rb:7:in `block in order_by_points'\n\
    /tmp/tmpp7r8gdfk.rb:7:in `each'\n/tmp/tmpp7r8gdfk.rb:7:in `sort_by'\n/tmp/tmpp7r8gdfk.rb:7:in\
    \ `with_index'\n/tmp/tmpp7r8gdfk.rb:7:in `order_by_points'\n/tmp/tmpp7r8gdfk.rb:13:in\
    \ `call'\n/tmp/tmpp7r8gdfk.rb:13:in `test_order_by_points'\n     10: class TestHumanEval\
    \ < Test::Unit::TestCase\n     11:   def test_order_by_points\n     12:     candidate\
    \ = method(:order_by_points)\n  => 13:     assert_equal([-1, -11, 1, -12, 11],\
    \ candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001192381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    838.66 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by.with_index\
    \ { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_order_by_points\n    candidate = method(:order_by_points)\n\
    \    assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n\
    \    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3,\
    \ 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n    assert_equal([-3,\
    \ -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n\
    \    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76, -21, 0, 4, 23, 6, 6], candidate.call([0,\
    \ 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp7r8gdfk\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpp7r8gdfk.rb:7:in `digits'\n/tmp/tmpp7r8gdfk.rb:7:in `block in order_by_points'\n\
    /tmp/tmpp7r8gdfk.rb:7:in `each'\n/tmp/tmpp7r8gdfk.rb:7:in `sort_by'\n/tmp/tmpp7r8gdfk.rb:7:in\
    \ `with_index'\n/tmp/tmpp7r8gdfk.rb:7:in `order_by_points'\n/tmp/tmpp7r8gdfk.rb:13:in\
    \ `call'\n/tmp/tmpp7r8gdfk.rb:13:in `test_order_by_points'\n     10: class TestHumanEval\
    \ < Test::Unit::TestCase\n     11:   def test_order_by_points\n     12:     candidate\
    \ = method(:order_by_points)\n  => 13:     assert_equal([-1, -11, 1, -12, 11],\
    \ candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001192381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    838.66 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by.with_index\
    \ { |num, index| [num.digits.sum, index] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_order_by_points\n    candidate = method(:order_by_points)\n\
    \    assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n\
    \    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3,\
    \ 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n    assert_equal([-3,\
    \ -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n\
    \    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76, -21, 0, 4, 23, 6, 6], candidate.call([0,\
    \ 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp26plyr6w\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmp26plyr6w.rb:7:in `digits'\n/tmp/tmp26plyr6w.rb:7:in `block in order_by_points'\n\
    /tmp/tmp26plyr6w.rb:7:in `each'\n/tmp/tmp26plyr6w.rb:7:in `sort_by'\n/tmp/tmp26plyr6w.rb:7:in\
    \ `with_index'\n/tmp/tmp26plyr6w.rb:7:in `order_by_points'\n/tmp/tmp26plyr6w.rb:13:in\
    \ `call'\n/tmp/tmp26plyr6w.rb:13:in `test_order_by_points'\n     10: class TestHumanEval\
    \ < Test::Unit::TestCase\n     11:   def test_order_by_points\n     12:     candidate\
    \ = method(:order_by_points)\n  => 13:     assert_equal([-1, -11, 1, -12, 11],\
    \ candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001242432 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    804.87 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |n| [n.digits.sum,\
    \ nums.index(n)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpf4gx0gw4\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpf4gx0gw4.rb:7:in `digits'\n/tmp/tmpf4gx0gw4.rb:7:in `block in order_by_points'\n\
    /tmp/tmpf4gx0gw4.rb:7:in `each'\n/tmp/tmpf4gx0gw4.rb:7:in `sort_by'\n/tmp/tmpf4gx0gw4.rb:7:in\
    \ `order_by_points'\n/tmp/tmpf4gx0gw4.rb:13:in `call'\n/tmp/tmpf4gx0gw4.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001130205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    884.80 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by.with_index\
    \ { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_order_by_points\n    candidate = method(:order_by_points)\n\
    \    assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n\
    \    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3,\
    \ 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n    assert_equal([-3,\
    \ -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n\
    \    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76, -21, 0, 4, 23, 6, 6], candidate.call([0,\
    \ 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp7r8gdfk\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpp7r8gdfk.rb:7:in `digits'\n/tmp/tmpp7r8gdfk.rb:7:in `block in order_by_points'\n\
    /tmp/tmpp7r8gdfk.rb:7:in `each'\n/tmp/tmpp7r8gdfk.rb:7:in `sort_by'\n/tmp/tmpp7r8gdfk.rb:7:in\
    \ `with_index'\n/tmp/tmpp7r8gdfk.rb:7:in `order_by_points'\n/tmp/tmpp7r8gdfk.rb:13:in\
    \ `call'\n/tmp/tmpp7r8gdfk.rb:13:in `test_order_by_points'\n     10: class TestHumanEval\
    \ < Test::Unit::TestCase\n     11:   def test_order_by_points\n     12:     candidate\
    \ = method(:order_by_points)\n  => 13:     assert_equal([-1, -11, 1, -12, 11],\
    \ candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001192381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    838.66 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy_nc26p9\nStarted\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/tmp/tmpy_nc26p9.rb:13:in `test_order_by_points'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_order_by_points\n\
    \     12:     candidate = method(:order_by_points)\n  => 13:     assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12,\
    \ 11]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006589773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.75 tests/s, 151.75 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by.with_index\
    \ { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_order_by_points\n    candidate = method(:order_by_points)\n\
    \    assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n\
    \    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3,\
    \ 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n    assert_equal([-3,\
    \ -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n\
    \    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76, -21, 0, 4, 23, 6, 6], candidate.call([0,\
    \ 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp7r8gdfk\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpp7r8gdfk.rb:7:in `digits'\n/tmp/tmpp7r8gdfk.rb:7:in `block in order_by_points'\n\
    /tmp/tmpp7r8gdfk.rb:7:in `each'\n/tmp/tmpp7r8gdfk.rb:7:in `sort_by'\n/tmp/tmpp7r8gdfk.rb:7:in\
    \ `with_index'\n/tmp/tmpp7r8gdfk.rb:7:in `order_by_points'\n/tmp/tmpp7r8gdfk.rb:13:in\
    \ `call'\n/tmp/tmpp7r8gdfk.rb:13:in `test_order_by_points'\n     10: class TestHumanEval\
    \ < Test::Unit::TestCase\n     11:   def test_order_by_points\n     12:     candidate\
    \ = method(:order_by_points)\n  => 13:     assert_equal([-1, -11, 1, -12, 11],\
    \ candidate.call([1, 11, -1, -11, -12]))\n     14:     assert_equal([0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([],\
    \ candidate.call([]))\n     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43,\
    \ 54], candidate.call([1, -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001192381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    838.66 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
- exit_code: 1
  program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\ndef order_by_points(nums)\n  nums.sort_by { |num| [num.digits.sum,\
    \ nums.index(num)] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcwhj0wuq\nStarted\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /tmp/tmpcwhj0wuq.rb:7:in `digits'\n/tmp/tmpcwhj0wuq.rb:7:in `block in order_by_points'\n\
    /tmp/tmpcwhj0wuq.rb:7:in `each'\n/tmp/tmpcwhj0wuq.rb:7:in `sort_by'\n/tmp/tmpcwhj0wuq.rb:7:in\
    \ `order_by_points'\n/tmp/tmpcwhj0wuq.rb:13:in `call'\n/tmp/tmpcwhj0wuq.rb:13:in\
    \ `test_order_by_points'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_order_by_points\n     12:     candidate = method(:order_by_points)\n\
    \  => 13:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     14:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     15:     assert_equal([], candidate.call([]))\n\
    \     16:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001123394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    890.16 tests/s, 0.00 assertions/s\n"
  timestamp: 1659797783
