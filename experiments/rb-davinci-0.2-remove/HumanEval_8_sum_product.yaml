name: HumanEval_8_sum_product
language: rb
prompt: "# For a given list of integers, return a tuple consisting of a sum and a\
  \ product of all the integers in a list.\n# Empty sum should be equal to 0 and empty\
  \ product should be equal to 1.\ndef sum_product(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_product\n\
  \    candidate = method(:sum_product)\n    assert_equal([0, 1], candidate.call([]))\n\
  \    assert_equal([3, 1], candidate.call([1, 1, 1]))\n    assert_equal([100, 0],\
  \ candidate.call([100, 0]))\n    assert_equal([15, 105], candidate.call([3, 5, 7]))\n\
  \    assert_equal([10, 10], candidate.call([10]))\n  end\nend\n"
completions: ["  return [numbers.sum, numbers.reduce(:*)]\nend", "  return [numbers.reduce(:+),\
    \ numbers.reduce(:*)]\nend", "  return [numbers.reduce(:+), numbers.reduce(:*)]\n\
    end", "  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n\
    \    product *= number\n  end\n  return sum, product\nend", "  sum = 0\n  product\
    \ = 1\n  numbers.each do |number|\n    sum += number\n    product *= number\n\
    \  end\n  return sum, product\nend", "  [numbers.reduce(:+), numbers.reduce(:*)]\n\
    end", "  sum = 0\n  product = 1\n  numbers.each do |num|\n    sum += num\n   \
    \ product *= num\n  end\n  return sum, product\nend", "  return [numbers.sum,\
    \ numbers.inject(:*)]\nend", "  return [numbers.reduce(:+), numbers.reduce(:*)]\n\
    end", "  return [numbers.sum, numbers.inject(:*)]\nend", "  return [numbers.sum,\
    \ numbers.inject(:*)]\nend", "  sum = 0\n  product = 1\n  numbers.each do |num|\n\
    \    sum += num\n    product *= num\n  end\n  return sum, product\nend", "  [numbers.reduce(:+),\
    \ numbers.reduce(:*)]\nend", "  [numbers.reduce(:+), numbers.reduce(:*)]\nend",
  "  [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  return [numbers.reduce(:+),\
    \ numbers.reduce(:*)]\nend", "  return [numbers.sum, numbers.reduce(:*)]\nend",
  "  return [numbers.sum, numbers.inject(:*)]\nend", "  [numbers.reduce(:+), numbers.reduce(:*)]\n\
    end", "  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n\
    \    product *= number\n  end\n  return sum, product\nend", "  return [numbers.sum,\
    \ numbers.inject(:*)]\nend", "  sum = 0\n  product = 1\n  numbers.each do |number|\n\
    \    sum += number\n    product *= number\n  end\n  return sum, product\nend",
  "  [numbers.sum, numbers.reduce(:*)]\nend", "  return [numbers.sum, numbers.inject(:*)]\n\
    end", "  [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  sum = 0\n  product\
    \ = 1\n  numbers.each do |number|\n    sum += number\n    product *= number\n\
    \  end\n  return sum, product\nend", "  [numbers.sum, numbers.inject(:*)]\nend",
  "  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n    product\
    \ *= number\n  end\n  return sum, product\nend", "  sum = 0\n  product = 1\n \
    \ numbers.each do |number|\n    sum += number\n    product *= number\n  end\n\
    \  return sum, product\nend", "  sum = 0\n  product = 1\n  numbers.each do |number|\n\
    \    sum += number\n    product *= number\n  end\n  return sum, product\nend",
  "  [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  return [numbers.reduce(:+),\
    \ numbers.reduce(:*)]\nend", "  return [numbers.sum, numbers.inject(:*)]\nend",
  "  [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  return [numbers.sum, numbers.inject(:*)]\n\
    end", "  return [numbers.sum, numbers.inject(:*)]\nend", "  return [numbers.reduce(:+),\
    \ numbers.reduce(:*)]\nend", "  return [numbers.sum, numbers.inject(:*)]\nend",
  "  [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  sum = 0\n  product = 1\n \
    \ numbers.each do |number|\n    sum += number\n    product *= number\n  end\n\
    \  return sum, product\nend", "  sum = 0\n  product = 1\n  numbers.each do |number|\n\
    \    sum += number\n    product *= number\n  end\n  return sum, product\nend",
  "  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n    product\
    \ *= number\n  end\n  return sum, product\nend", "  return [numbers.sum, numbers.inject(:*)]\n\
    end", "  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n\
    \    product *= number\n  end\n  return sum, product\nend", "  [numbers.reduce(:+),\
    \ numbers.reduce(:*)]\nend", "  return [numbers.sum, numbers.inject(:*)]\nend",
  "  return [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  sum = 0\n  product\
    \ = 1\n  numbers.each do |number|\n    sum += number\n    product *= number\n\
    \  end\n  return sum, product\nend", "  sum = 0\n  product = 1\n  numbers.each\
    \ do |number|\n    sum += number\n    product *= number\n  end\n  return sum,\
    \ product\nend", "  return [numbers.inject(:+), numbers.inject(:*)]\nend", " \
    \ sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n    product\
    \ *= number\n  end\n  return sum, product\nend", "  return [numbers.sum, numbers.inject(:*)]\n\
    end", "  return [numbers.sum, numbers.inject(:*)]\nend", "  return [numbers.reduce(:+),\
    \ numbers.reduce(:*)]\nend", "  return [numbers.inject(:+), numbers.inject(:*)]\n\
    end", "  [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  return [numbers.reduce(:+),\
    \ numbers.reduce(:*)]\nend", "  return [numbers.sum, numbers.inject(:*)]\nend",
  "  [numbers.sum, numbers.inject(:*)]\nend", "  [numbers.reduce(:+), numbers.reduce(:*)]\n\
    end", "  [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  return [numbers.sum,\
    \ numbers.inject(:*)]\nend", "  [numbers.sum, numbers.inject(:*)]\nend", "  sum\
    \ = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n    product\
    \ *= number\n  end\n  return sum, product\nend", "  sum = 0\n  product = 1\n \
    \ numbers.each do |num|\n    sum += num\n    product *= num\n  end\n  return sum,\
    \ product\nend", "  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum\
    \ += number\n    product *= number\n  end\n  return sum, product\nend", "  sum\
    \ = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n    product\
    \ *= number\n  end\n  return sum, product\nend", "  [numbers.reduce(:+), numbers.reduce(:*)]\n\
    end", "  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n\
    \    product *= number\n  end\n  return sum, product\nend", "  sum = 0\n  product\
    \ = 1\n  numbers.each do |number|\n    sum += number\n    product *= number\n\
    \  end\n  return sum, product\nend", "  sum = 0\n  product = 1\n  numbers.each\
    \ do |number|\n    sum += number\n    product *= number\n  end\n  return sum,\
    \ product\nend", "  [numbers.sum, numbers.inject(:*)]\nend", "  [numbers.sum,\
    \ numbers.inject(:*)]\nend", "  return [numbers.reduce(:+), numbers.reduce(:*)]\n\
    end", "  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n\
    \    product *= number\n  end\n  return sum, product\nend", "  return [numbers.sum,\
    \ numbers.inject(:*)]\nend", "  sum = 0\n  product = 1\n  numbers.each do |number|\n\
    \    sum += number\n    product *= number\n  end\n  return sum, product\nend",
  "  return [numbers.sum, numbers.inject(:*)]\nend", "  return [numbers.reduce(:+),\
    \ numbers.reduce(:*)]\nend", "  # your code here\n  sum = 0\n  product = 1\n \
    \ numbers.each do |n|\n    sum += n\n    product *= n\n  end\n  return sum, product\n\
    end", "  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n\
    \    product *= number\n  end\n  return sum, product\nend", "  sum = 0\n  product\
    \ = 1\n  numbers.each do |num|\n    sum += num\n    product *= num\n  end\n  return\
    \ sum, product\nend", "  return [numbers.reduce(:+), numbers.reduce(:*)]\nend",
  "  return [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  return [numbers.sum,\
    \ numbers.inject(:*)]\nend", "  return [numbers.sum, numbers.inject(:*)]\nend",
  "  return [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  sum = 0\n  product\
    \ = 1\n  numbers.each do |num|\n    sum += num\n    product *= num\n  end\n  return\
    \ sum, product\nend", "  sum = 0\n  product = 1\n  numbers.each do |number|\n\
    \    sum += number\n    product *= number\n  end\n  return sum, product\nend",
  "  [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  [numbers.sum, numbers.reduce(:*)]\n\
    end", "  return [numbers.sum, numbers.inject(:*)]\nend", "  return [numbers.reduce(:+),\
    \ numbers.reduce(:*)]\nend", "  sum = 0\n  product = 1\n  numbers.each do |num|\n\
    \    sum += num\n    product *= num\n  end\n  return sum, product\nend", "  sum\
    \ = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n    product\
    \ *= number\n  end\n  return sum, product\nend", "  return [numbers.sum, numbers.inject(:*)]\n\
    end", "  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n\
    \    product *= number\n  end\n  return sum, product\nend", "  return [numbers.sum,\
    \ numbers.inject(:*)]\nend", "  return [numbers.sum, numbers.inject(:*)]\nend",
  "  sum = 0\n  product = 1\n  numbers.each do |num|\n    sum += num\n    product\
    \ *= num\n  end\n  return sum, product\nend", "  sum = 0\n  product = 1\n  numbers.each\
    \ do |number|\n    sum += number\n    product *= number\n  end\n  return sum,\
    \ product\nend", "  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum\
    \ += number\n    product *= number\n  end\n  return sum, product\nend", "  return\
    \ [numbers.sum, numbers.reduce(:*)]\nend", "  return [numbers.sum, numbers.inject(:*)]\n\
    end", "  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n\
    \    product *= number\n  end\n  return sum, product\nend", "  [numbers.sum, numbers.reduce(:*)]\n\
    end", "  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n\
    \    product *= number\n  end\n  return sum, product\nend", "  return [numbers.sum,\
    \ numbers.inject(:*)]\nend", "  return [numbers.sum, numbers.inject(:*)]\nend",
  "  return [numbers.sum, numbers.inject(:*)]\nend", "  return [numbers.sum, numbers.inject(:*)]\n\
    end", "  return [numbers.sum, numbers.inject(:*)]\nend", "  sum = 0\n  product\
    \ = 1\n  numbers.each do |number|\n    sum += number\n    product *= number\n\
    \  end\n  return sum, product\nend", "  [numbers.reduce(:+), numbers.reduce(:*)]\n\
    end", "  sum = 0\n  product = 1\n  numbers.each do |num|\n    sum += num\n   \
    \ product *= num\n  end\n  return sum, product\nend", "  [numbers.reduce(:+),\
    \ numbers.reduce(:*)]\nend", "  sum = 0\n  product = 1\n  numbers.each do |number|\n\
    \    sum += number\n    product *= number\n  end\n  return sum, product\nend",
  "  return [numbers.sum, numbers.inject(:*)]\nend", "  return [numbers.sum, numbers.inject(:*)]\n\
    end", "  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n\
    \    product *= number\n  end\n  return sum, product\nend", "  [numbers.sum, numbers.inject(:*)]\n\
    end", "  # your code here\nend", "  return [numbers.inject(:+), numbers.inject(:*)]\n\
    end", "  [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  sum = 0\n  product\
    \ = 1\n  numbers.each do |number|\n    sum += number\n    product *= number\n\
    \  end\n  return sum, product\nend", "  return [numbers.sum, numbers.inject(:*)]\n\
    end", "  [numbers.sum, numbers.inject(:*)]\nend", "  return [numbers.reduce(:+),\
    \ numbers.reduce(:*)]\nend", "  sum = 0\n  product = 1\n  numbers.each do |number|\n\
    \    sum += number\n    product *= number\n  end\n  return sum, product\nend",
  "  return [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  return [numbers.sum,\
    \ numbers.inject(:*)]\nend", "  return [numbers.reduce(:+), numbers.reduce(:*)]\n\
    end", "  return [numbers.inject(:+), numbers.inject(:*)]\nend", "  return [numbers.sum,\
    \ numbers.inject(:*)]\nend", "  return [numbers.reduce(:+), numbers.reduce(:*)]\n\
    end", "  sum = 0\n  product = 1\n  numbers.each do |n|\n    sum += n\n    product\
    \ *= n\n  end\n  return sum, product\nend", "  return [numbers.sum, numbers.inject(:*)]\n\
    end", "  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n\
    \    product *= number\n  end\n  return sum, product\nend", "  sum = 0\n  product\
    \ = 1\n  numbers.each do |number|\n    sum += number\n    product *= number\n\
    \  end\n  return sum, product\nend", "  sum = 0\n  product = 1\n  numbers.each\
    \ do |number|\n    sum += number\n    product *= number\n  end\n  return sum,\
    \ product\nend", "  return [numbers.sum, numbers.inject(:*)]\nend", "  return\
    \ [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  return [numbers.inject(:+),\
    \ numbers.inject(:*)]\nend", "  sum = 0\n  product = 1\n  numbers.each do |number|\n\
    \    sum += number\n    product *= number\n  end\n  return sum, product\nend",
  "  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n    product\
    \ *= number\n  end\n  return sum, product\nend", "  [numbers.reduce(:+), numbers.reduce(:*)]\n\
    end", "  [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  return [numbers.sum,\
    \ numbers.reduce(:*)]\nend", "  sum = 0\n  product = 1\n  numbers.each do |num|\n\
    \    sum += num\n    product *= num\n  end\n  return sum, product\nend", "  return\
    \ [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  sum = 0\n  product = 1\n\
    \  numbers.each do |number|\n    sum += number\n    product *= number\n  end\n\
    \  return sum, product\nend", "  return [numbers.reduce(:+), numbers.reduce(:*)]\n\
    end", "  [numbers.sum, numbers.inject(:*)]\nend", "  sum = 0\n  product = 1\n\
    \  numbers.each do |num|\n    sum += num\n    product *= num\n  end\n  return\
    \ sum, product\nend", "  [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  [numbers.reduce(:+),\
    \ numbers.reduce(:*)]\nend", "  return [numbers.reduce(:+), numbers.reduce(:*)]\n\
    end", "  [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  # your code here\n\
    \  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n   \
    \ product *= number\n  end\n  return sum, product\nend", "  sum = 0\n  product\
    \ = 1\n  numbers.each do |number|\n    sum += number\n    product *= number\n\
    \  end\n  return sum, product\nend", "  return [numbers.sum, numbers.inject(:*)]\n\
    end", "  numbers.empty? ? [0, 1] : [numbers.sum, numbers.inject(:*)]\nend", " \
    \ return [numbers.sum, numbers.inject(:*)]\nend", "  return [numbers.sum, numbers.inject(:*)]\n\
    end", "  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n\
    \    product *= number\n  end\n  return sum, product\nend", "  return [numbers.sum,\
    \ numbers.inject(:*)]\nend", "  return [numbers.inject(:+), numbers.inject(:*)]\n\
    end", "  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n\
    \    product *= number\n  end\n  return sum, product\nend", "  return [numbers.reduce(:+),\
    \ numbers.reduce(:*)]\nend", "  sum = 0\n  product = 1\n  numbers.each do |number|\n\
    \    sum += number\n    product *= number\n  end\n  return sum, product\nend",
  "  return [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  return [numbers.reduce(:+),\
    \ numbers.reduce(:*)]\nend", "  return [numbers.reduce(:+), numbers.reduce(:*)]\n\
    end", "  # your code here\n  return [numbers.reduce(:+), numbers.reduce(:*)]\n\
    end", "  [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  return [numbers.sum,\
    \ numbers.inject(:*)]\nend", "  return [numbers.sum, numbers.inject(:*)]\nend",
  "  numbers.empty? ? [0, 1] : [numbers.reduce(:+), numbers.reduce(:*)]\nend", " \
    \ [numbers.sum, numbers.inject(:*)]\nend", "  sum = 0\n  product = 1\n  numbers.each\
    \ do |number|\n    sum += number\n    product *= number\n  end\n  return sum,\
    \ product\nend", "  [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  sum = 0\n\
    \  product = 1\n  numbers.each do |num|\n    sum += num\n    product *= num\n\
    \  end\n  return sum, product\nend", "  sum = 0\n  product = 1\n  numbers.each\
    \ do |num|\n    sum += num\n    product *= num\n  end\n  return sum, product\n\
    end", "  return [numbers.sum, numbers.inject(:*)]\nend", "  return [numbers.sum,\
    \ numbers.inject(:*)]\nend", "  [numbers.reduce(:+), numbers.reduce(:*)]\nend",
  "  return [numbers.sum, numbers.inject(:*)]\nend", "  return [numbers.sum, numbers.inject(:*)]\n\
    end", "  return [numbers.sum, numbers.inject(:*)]\nend", "  return [numbers.sum,\
    \ numbers.inject(:*)]\nend", "  return [numbers.sum, numbers.inject(:*)]\nend",
  "  [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  # TODO: return a tuple (sum,\
    \ product)\n  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n\
    \    product *= number\n  end\n  return sum, product\nend", "  numbers.inject([0,\
    \ 1]) { |(sum, product), number| [sum + number, product * number] }\nend", " \
    \ [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  return [numbers.sum, numbers.inject(:*)]\n\
    end", "  [numbers.reduce(:+), numbers.reduce(:*)]\nend", "  return [numbers.sum,\
    \ numbers.inject(:*)]\nend", "  [numbers.sum, numbers.inject(:*)]\nend", "  sum\
    \ = 0\n  product = 1\n  numbers.each do |num|\n    sum += num\n    product *=\
    \ num\n  end\n  return sum, product\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
