name: HumanEval_4_mean_absolute_deviation
language: rb
prompt: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
  # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
  \ difference between each\n# element and a centerpoint (mean in this case):\n# MAD\
  \ = average | x - x_mean |\ndef mean_absolute_deviation(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
  \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
  \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
  \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
completions: ["  # Calculate mean of input numbers\n  mean = numbers.inject(0) { |sum,\
    \ n| sum + n } / numbers.length", "  mean = numbers.inject(0.0) { |sum, n| sum\
    \ + n } / numbers.size\n  numbers.inject(0.0) { |sum, n| sum + (n - mean).abs\
    \ } / numbers.size\nend", "  # Calculate the mean of the input numbers\n  mean\
    \ = numbers.inject(0) { |sum, number| sum + number } / numbers.length", "  mean\
    \ = mean(numbers)\n  sum = 0\n  numbers.each do |num|\n    sum += (num - mean).abs\n\
    \  end\n  sum / numbers.length\nend", "  # TODO: Calculate Mean Absolute Deviation\n\
    \  #       (Hint: use mean() and standard_deviation() functions)\n  #       (Hint:\
    \ use .abs to get absolute value)\n  #       (Hint: use .reduce to sum all numbers)\n\
    \  #       (Hint: use .map to apply a function to each element)\n  #       (Hint:\
    \ use .inject to sum all numbers)\n  #       (Hint: use .inject(:+) to sum all\
    \ numbers)\n  #       (Hint: use .inject(:+) to sum all numbers)\n  #       (Hint:\
    \ use .inject(:+) to sum all numbers)\n  #       (Hint: use .inject(:+) to sum\
    \ all numbers)\n  #       (Hint: use .inject(:+) to sum all numbers)\n  #    \
    \   (Hint: use .inject(:+) to sum all numbers)\n  #       (Hint: use .inject(:+)\
    \ to sum all numbers)\n  #       (Hint: use .inject(:+) to sum all numbers)\n\
    \  #       (Hint: use .inject(:+) to sum all numbers)\n  #       (Hint: use .inject(:+)\
    \ to sum all numbers)\n  #       (Hint: use .inject(:+) to sum all numbers)\n\
    \  #       (Hint: use .inject(:+) to sum all numbers)\n  #       (Hint: use .inject(:+)\
    \ to sum all numbers)\n  #       (Hint: use .inject(:+) to sum all numbers)\n\
    \  #       (Hint: use .inject(:+) to sum all numbers)\n  #       (Hint: use .inject(:+)\
    \ to sum all numbers)\n  #       (Hint: use .inject(:+) to sum all numbers)\n\
    \  #       (Hint: use .inject(:+) to sum all numbers)\n  #       (Hint: use .inject(:+)\
    \ to sum all numbers)\n  #       (Hint: use .inject(:+) to sum all numbers)\n\
    \  #       (Hint: use .inject", "  mean = numbers.inject(0) { |sum, n| sum + n\
    \ } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum + (n - mean).abs }\
    \ / numbers.size.to_f\nend", "  mean = numbers.inject(0.0) { |sum, el| sum + el\
    \ } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs }\
    \ / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum, el| sum + el } /\
    \ numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs } / numbers.size\n\
    end", "  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n \
    \ numbers.inject(0) { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend",
  "  # TODO: Implement this method\n  mean = numbers.reduce(:+).to_f / numbers.length\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  absolute_deviations.reduce(:+).to_f\
    \ / absolute_deviations.length\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0)\
    \ { |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum\
    \ + (n - mean).abs } / numbers.size.to_f\nend", "  mean = numbers.inject(0) {\
    \ |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum +\
    \ (n - mean).abs } / numbers.size.to_f\nend", "  mean = numbers.inject(0) { |sum,\
    \ n| sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum + (n -\
    \ mean).abs } / numbers.size.to_f\nend", "  mean = numbers.inject(0) { |sum, n|\
    \ sum + n } / numbers.size\n  numbers.inject(0) { |sum, n| sum + (n - mean).abs\
    \ } / numbers.size\nend", "  mean = numbers.reduce(:+) / numbers.length.to_f\n\
    \  absolute_deviations = numbers.map { |x| (x - mean).abs }\n  absolute_deviations.reduce(:+)\
    \ / absolute_deviations.length.to_f\nend", "  # TODO: Return the Mean Absolute\
    \ Deviation of the given numbers\n  #       (see the description above)\n  # HINT:\
    \ Use the 'mean' and 'absolute_deviation' functions you wrote\n  #       before\n\
    \  mean = mean(numbers)\n  absolute_deviations = absolute_deviation(numbers, mean)\n\
    \  mean(absolute_deviations)\nend", "  # Calculate mean\n  mean = numbers.inject(0)\
    \ { |sum, n| sum + n } / numbers.length.to_f", "  # Calculate mean of the dataset\n\
    \  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.length.to_f", "  mean\
    \ = mean(numbers)\n  absolute_deviations = numbers.map { |x| (x - mean).abs }\n\
    \  return mean(absolute_deviations)\nend", "  # Calculate the mean of the input\
    \ numbers\n  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.length",
  "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length.to_f\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  absolute_deviations.reduce(:+) / absolute_deviations.length.to_f\nend",
  "  mean = mean(numbers)\n  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |x| (x -\
    \ mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n -\
    \ mean).abs }\n  mean(absolute_deviations)\nend", "  # TODO: Your code goes here\n\
    \  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |x| (x - mean).abs\
    \ }.reduce(:+) / numbers.length\nend", "  mean = numbers.inject(0.0) { |sum, n|\
    \ sum + n } / numbers.size\n  numbers.inject(0.0) { |sum, n| sum + (n - mean).abs\
    \ } / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations = numbers.map\
    \ { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = numbers.inject(0)\
    \ { |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum\
    \ + (n - mean).abs } / numbers.size.to_f\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, number| sum + number } / numbers.size\n  numbers.inject(0.0) { |sum,\
    \ number| sum + (number - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n -\
    \ mean).abs }\n  mean(absolute_deviations)\nend", "  # Calculate mean of the dataset\n\
    \  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.length.to_f", "  mean\
    \ = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0)\
    \ { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n \
    \ numbers.inject(0) { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend",
  "  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0)\
    \ { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |x| (x - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length.to_f\n  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length.to_f\n\
    end", "  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |x| (x -\
    \ mean).abs }.reduce(:+) / numbers.length\nend", "  mean = numbers.inject(0) {\
    \ |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum +\
    \ (n - mean).abs } / numbers.size.to_f\nend", "  # Calculate the mean of the input\
    \ numbers\n  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.length.to_f",
  "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  # TODO: Implement\n\
    \  numbers.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ # Calculate mean\n  mean = numbers.reduce(:+) / numbers.length.to_f", "  mean\
    \ = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs }\n\
    \  mean(absolute_deviations)\nend", "  mean = numbers.reduce(:+) / numbers.length.to_f\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  absolute_deviations.reduce(:+)\
    \ / absolute_deviations.length.to_f\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+) / numbers.length\n\
    \  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\nend", "  mean\
    \ = numbers.reduce(:+) / numbers.size.to_f\n  numbers.map { |number| (number -\
    \ mean).abs }.reduce(:+) / numbers.size.to_f\nend", "  # Calculate mean\n  mean\
    \ = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  abs_differences\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(abs_differences)\nend", "  # Calculate\
    \ mean of the dataset\n  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.length",
  "  # Calculate mean\n  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size",
  "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  # Calculate mean\n  mean = numbers.inject(0.0)\
    \ { |sum, n| sum + n } / numbers.size\n  # Calculate absolute difference from\
    \ mean for each element\n  absolute_differences = numbers.map { |n| (n - mean).abs\
    \ }\n  # Return average of absolute differences\n  absolute_differences.inject(0.0)\
    \ { |sum, n| sum + n } / absolute_differences.size\nend", "  mean = numbers.inject(0)\
    \ { |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum\
    \ + (n - mean).abs } / numbers.size.to_f\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  # Calculate the mean of the input numbers\n  mean = numbers.reduce(:+)\
    \ / numbers.length", "  # Calculate the mean of the input numbers\n  mean = numbers.inject(0)\
    \ { |sum, n| sum + n } / numbers.length", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  # Calculate the mean of the input numbers\n\
    \  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.length.to_f", "  mean\
    \ = numbers.reduce(:+) / numbers.length\n  numbers.map { |x| (x - mean).abs }.reduce(:+)\
    \ / numbers.length\nend", "  mean = mean(numbers)\n  absolute_deviations = numbers.map\
    \ { |number| (number - mean).abs }\n  mean(absolute_deviations)\nend", "  # Calculate\
    \ mean of the dataset\n  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size",
  "  mean = mean(numbers)\n  absolute_deviations = []\n  numbers.each do |number|\n\
    \    absolute_deviations << (number - mean).abs\n  end\n  mean(absolute_deviations)\n\
    end", "  # Calculate mean of the input numbers\n  mean = numbers.inject(0) { |sum,\
    \ n| sum + n } / numbers.length.to_f", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ # Calculate mean of the input numbers\n  mean = numbers.inject(0) { |sum, n|\
    \ sum + n } / numbers.length.to_f", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ # TODO: Implement this method\n  mean = numbers.reduce(:+).to_f / numbers.length\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  absolute_deviations.reduce(:+).to_f\
    \ / absolute_deviations.length\nend", "  mean = numbers.inject(0) { |sum, n| sum\
    \ + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum + (n - mean).abs\
    \ } / numbers.size.to_f\nend", "  mean = numbers.inject(0.0) { |sum, el| sum +\
    \ el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n\
    \  numbers.inject(0) { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend",
  "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  # Calculate the\
    \ mean of the input numbers\n  mean = numbers.inject(0) { |sum, n| sum + n } /\
    \ numbers.length", "  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n\
    \  numbers.inject(0) { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend",
  "  mean = numbers.reduce(:+) / numbers.length.to_f\n  absolute_deviations = numbers.map\
    \ { |x| (x - mean).abs }\n  absolute_deviations.reduce(:+) / absolute_deviations.length.to_f\n\
    end", "  # TODO: Implement this method\n  # Hint: You can use the 'mean' method\
    \ from the previous exercise\n  mean = mean(numbers)\n  sum = 0\n  numbers.each\
    \ do |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\n\
    end", "  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n \
    \ numbers.inject(0) { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend",
  "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number\
    \ - mean).abs }\n  mean(absolute_deviations)\nend", "  # Calculate mean of numbers\n\
    \  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f", "  mean\
    \ = mean(numbers)\n  absolute_deviations = numbers.map { |x| (x - mean).abs }\n\
    \  mean(absolute_deviations)\nend", "  mean = numbers.inject(0.0) { |sum, n| sum\
    \ + n } / numbers.size\n  numbers.inject(0.0) { |sum, n| sum + (n - mean).abs\
    \ } / numbers.size\nend", "  # TODO: Your code goes here\n  mean = numbers.reduce(:+)\
    \ / numbers.length\n  numbers.map { |number| (number - mean).abs }.reduce(:+)\
    \ / numbers.length\nend", "  mean = numbers.inject(0.0) { |sum, el| sum + el }\
    \ / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs } /\
    \ numbers.size\nend", "  # TODO: implement this method\n  # Hint: use the absolute_deviation\
    \ method you wrote above\n  # Hint: use the mean method you wrote above\n  # Hint:\
    \ use the reduce method you wrote above\n  # Hint: use the sum method you wrote\
    \ above\n  # Hint: use the length method you wrote above\n  # Hint: use the map\
    \ method you wrote above\n  # Hint: use the zip method you wrote above\n  # Hint:\
    \ use the flatten method you wrote above\n  # Hint: use the transpose method you\
    \ wrote above\n  # Hint: use the product method you wrote above\n  # Hint: use\
    \ the map method you wrote above\n  # Hint: use the sum method you wrote above\n\
    \  # Hint: use the length method you wrote above\n  # Hint: use the map method\
    \ you wrote above\n  # Hint: use the reduce method you wrote above\n  # Hint:\
    \ use the sum method you wrote above\n  # Hint: use the length method you wrote\
    \ above\n  # Hint: use the map method you wrote above\n  # Hint: use the reduce\
    \ method you wrote above\n  # Hint: use the sum method you wrote above\n  # Hint:\
    \ use the length method you wrote above\n  # Hint: use the map method you wrote\
    \ above\n  # Hint: use the reduce method you wrote above\n  # Hint: use the sum\
    \ method you wrote above\n  # Hint: use the length method you wrote above\n  #\
    \ Hint: use the map method you wrote above\n  # Hint: use the reduce method you\
    \ wrote above\n  # Hint: use the sum method you wrote above\n  # Hint: use the\
    \ length method you wrote above\n  # Hint: use the map method you wrote above\n\
    \  # Hint: use the reduce method you wrote above\n  # Hint: use the sum method\
    \ you wrote above\n  # Hint: use the length method you wrote above\n  # Hint:\
    \ use the map method you wrote above\n  # Hint: use the reduce method you wrote\
    \ above\n  # Hint: use the sum method you wrote above\n  # Hint: use the length\
    \ method you wrote above\n  # Hint: use the map method you wrote above\n  # H",
  "  # Calculate mean of the dataset\n  mean = numbers.reduce(:+) / numbers.length",
  "  # Calculate mean of the dataset\n  mean = numbers.reduce(:+) / numbers.length.to_f",
  "  mean = mean(numbers)\n  numbers.map { |n| (n - mean).abs }.sum / numbers.length\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n -\
    \ mean).abs }\n  mean(absolute_deviations)\nend", "  # Calculate mean\n  mean\
    \ = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n -\
    \ mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+) / numbers.length\n\
    \  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\nend", "  #\
    \ Calculate mean of the dataset\n  mean = numbers.inject(0) { |sum, n| sum + n\
    \ } / numbers.size.to_f", "  # TODO: Your code goes here\n  # Hint: You can use\
    \ the 'mean' and 'absolute_deviation' functions\n  # defined above.\n  mean =\
    \ mean(numbers)\n  absolute_deviations = absolute_deviation(numbers, mean)\n \
    \ mean(absolute_deviations)\nend", "  # TODO: Implement this method\n  # Hint:\
    \ You can use the 'mean' method from the previous exercise\n  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend", "  # TODO: calculate mean of input numbers\n  mean\
    \ = numbers.sum / numbers.length", "  mean = numbers.inject(0.0) { |sum, el| sum\
    \ + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum, el| sum + el }\
    \ / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs } /\
    \ numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations = numbers.map\
    \ { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = numbers.inject(0)\
    \ { |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum\
    \ + (n - mean).abs } / numbers.size.to_f\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = mean(numbers)\n  absolute_deviations = numbers.map { |num| (num - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ # Calculate mean of the dataset\n  mean = numbers.reduce(:+) / numbers.length",
  "  # Calculate mean\n  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.length",
  "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number\
    \ - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length\n  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |x| (x -\
    \ mean).abs }\n  mean(absolute_deviations)\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = numbers.inject(0) { |sum, x| sum + x } / numbers.length.to_f\n  numbers.inject(0)\
    \ { |sum, x| sum + (x - mean).abs } / numbers.length.to_f\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = numbers.inject(0.0) { |sum, x| sum + x } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, x| sum + (x - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0)\
    \ { |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum\
    \ + (n - mean).abs } / numbers.size.to_f\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |n| (n - mean).abs\
    \ }.reduce(:+) / numbers.length\nend", "  # Calculate mean of the dataset\n  mean\
    \ = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f", "  mean = numbers.reduce(:+)\
    \ / numbers.length\n  absolute_deviations = numbers.map { |x| (x - mean).abs }\n\
    \  absolute_deviations.reduce(:+) / absolute_deviations.length\nend", "  # First,\
    \ calculate the mean of the input numbers\n  mean = numbers.inject(0) { |sum,\
    \ n| sum + n } / numbers.length.to_f", "  # Calculate the mean of the input numbers\n\
    \  mean = numbers.reduce(:+) / numbers.length.to_f", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |x| (x - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n -\
    \ mean).abs }\n  mean(absolute_deviations)\nend", "  mean = average(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  average(absolute_deviations)\n\
    end", "  # Calculate mean of the dataset\n  mean = numbers.reduce(:+) / numbers.length.to_f",
  "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |x| (x - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = numbers.reduce(:+) / numbers.length\n  absolute_deviations = numbers.map\
    \ { |n| (n - mean).abs }\n  absolute_deviations.reduce(:+) / absolute_deviations.length\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  # Calculate mean\
    \ of the dataset\n  mean = numbers.reduce(:+) / numbers.length.to_f", "  mean\
    \ = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0)\
    \ { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length.to_f\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length.to_f\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |x| (x -\
    \ mean).abs }\n  mean(absolute_deviations)\nend", "  # Calculate the mean of the\
    \ input numbers\n  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.length",
  "  # Calculate mean of the input numbers\n  mean = numbers.inject(0) { |sum, x|\
    \ sum + x } / numbers.length", "  mean = numbers.inject(0) { |sum, n| sum + n\
    \ } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum + (n - mean).abs }\
    \ / numbers.size.to_f\nend", "  # TODO: Your code goes here!\n  mean = numbers.reduce(:+)\
    \ / numbers.length\n  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  mean = numbers.reduce(:+) / numbers.length\n  absolute_deviations = numbers.map\
    \ { |n| (n - mean).abs }\n  absolute_deviations.reduce(:+) / absolute_deviations.length\n\
    end", "  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n \
    \ absolute_deviations = numbers.map { |n| (n - mean).abs }\n  absolute_deviations.inject(0)\
    \ { |sum, n| sum + n } / absolute_deviations.size.to_f\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = numbers.inject(0.0) { |sum, n| sum + n } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, n| sum + (n - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  # Calculate mean\n  mean = numbers.inject(0)\
    \ { |sum, n| sum + n } / numbers.length.to_f", "  # Calculate mean of the dataset\n\
    \  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size", "  mean\
    \ = numbers.reduce(:+) / numbers.size.to_f\n  numbers.map { |n| (n - mean).abs\
    \ }.reduce(:+) / numbers.size.to_f\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = []\n  numbers.each do |number|\n    absolute_deviations << (number - mean).abs\n\
    \  end\n  mean(absolute_deviations)\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ num| sum + num } / numbers.size\n  numbers.inject(0.0) { |sum, num| sum + (num\
    \ - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum, n|\
    \ sum + n } / numbers.size\n  numbers.inject(0.0) { |sum, n| sum + (n - mean).abs\
    \ } / numbers.size\nend", "  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n\
    \  numbers.inject(0) { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend",
  "  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |x| (x - mean).abs\
    \ }.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |x| (x - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0)\
    \ { |sum, n| sum + n } / numbers.size\n  numbers.inject(0) { |sum, n| sum + (n\
    \ - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0) { |sum, n| sum\
    \ + n } / numbers.size\n  mad = numbers.inject(0) { |sum, n| sum + (n - mean).abs\
    \ } / numbers.size\n  return mad\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n \
    \ numbers.inject(0) { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend",
  "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  # Calculate the mean of the input numbers\n\
    \  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.length", "  mean =\
    \ numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |x| (x - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = mean(numbers)\n  absolute_deviations = numbers.map { |x| (x - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  # Calculate mean of the dataset\n \
    \ mean = numbers.inject(0) { |sum, x| sum + x } / numbers.size.to_f", "  mean\
    \ = numbers.reduce(:+) / numbers.size\n  absolute_deviations = numbers.map { |n|\
    \ (n - mean).abs }\n  absolute_deviations.reduce(:+) / absolute_deviations.size\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |n| (n -\
    \ mean).abs }.reduce(:+) / numbers.length\nend", "  mean = numbers.inject(0) {\
    \ |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum +\
    \ (n - mean).abs } / numbers.size.to_f\nend", "  mean = numbers.inject(0.0) {\
    \ |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum +\
    \ (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |x| (x - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |x| (x - mean).abs\
    \ }.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |x| (x - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = numbers.mean\n  absolute_deviations = numbers.map { |x| (x - mean).abs\
    \ }\n  absolute_deviations.mean\nend", "  # TODO: Implement this method\n  # Hint:\
    \ You'll need to calculate the mean of the numbers first\n  #       Then, calculate\
    \ the absolute difference between each number\n  #       and the mean, and then\
    \ take the average of all those differences\n  #       (i.e. the mean absolute\
    \ difference)\n  #       Finally, return the mean absolute difference\n  mean\
    \ = mean(numbers)\n  absolute_differences = numbers.map { |number| (number - mean).abs\
    \ }\n  mean(absolute_differences)\nend", "  mean = mean(numbers)\n  sum = 0\n\
    \  numbers.each do |num|\n    sum += (num - mean).abs\n  end\n  sum / numbers.length\n\
    end", "  # Calculate mean of the input numbers\n  mean = numbers.inject(0) { |sum,\
    \ n| sum + n } / numbers.length.to_f", "  # Calculate mean of input numbers\n\
    \  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f", "  mean\
    \ = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ n| sum + n } / numbers.size\n  absolute_deviations = numbers.map { |n| (n -\
    \ mean).abs }\n  absolute_deviations.inject(0.0) { |sum, n| sum + n } / absolute_deviations.size\n\
    end", "  # Calculate mean of the list\n  mean = numbers.inject(0.0) { |sum, el|\
    \ sum + el } / numbers.size", "  mean = numbers.reduce(:+) / numbers.length\n\
    \  absolute_deviations = numbers.map { |x| (x - mean).abs }\n  absolute_deviations.reduce(:+)\
    \ / absolute_deviations.length\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ # TODO: Your code goes here!\n  # Hint: You will need to use the 'reduce' method\n\
    \  #       defined in the Enumerable module\n  #       For more info see: http://ruby-doc.org/core-2.1.4/Enumerable.html\n\
    \  #       and: http://ruby-doc.org/core-2.1.4/Enumerable.html#method-i-reduce\n\
    \  numbers.reduce(0) { |sum, number| sum + (number - numbers.mean).abs } / numbers.length\n\
    end", "  # Calculate mean of the dataset\n  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size", "  mean = numbers.inject(0.0) { |sum, n| sum\
    \ + n } / numbers.size\n  numbers.inject(0.0) { |sum, n| sum + (n - mean).abs\
    \ } / numbers.size\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
