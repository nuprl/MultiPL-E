name: HumanEval_4_mean_absolute_deviation
language: rb
prompt: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
  # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
  \ difference between each\n# element and a centerpoint (mean in this case):\n# MAD\
  \ = average | x - x_mean |\ndef mean_absolute_deviation(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
  \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
  \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
  \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
completions: ["  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n\
    \  numbers.inject(0) { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend",
  "  # Calculate mean of the dataset\n  mean = numbers.inject(0.0) { |sum, el| sum\
    \ + el } / numbers.size", "  mean = mean(numbers)\n  absolute_deviations = numbers.map\
    \ { |x| (x - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  # Calculate mean\n  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.length.to_f",
  "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  # TODO: Your code goes here\n  mean\
    \ = numbers.reduce(:+) / numbers.length\n  numbers.map { |num| (num - mean).abs\
    \ }.reduce(:+) / numbers.length\nend", "  mean = numbers.inject(0.0) { |sum, el|\
    \ sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum, el| sum + el }\
    \ / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs } /\
    \ numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations = numbers.map\
    \ { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length\n  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |number|\
    \ (number - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0)\
    \ { |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum\
    \ + (n - mean).abs } / numbers.size.to_f\nend", "  mean = numbers.inject(0) {\
    \ |sum, x| sum + x } / numbers.length\n  numbers.inject(0) { |sum, x| sum + (x\
    \ - mean).abs } / numbers.length\nend", "  mean = numbers.reduce(:+) / numbers.length.to_f\n\
    \  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length.to_f\nend",
  "  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0)\
    \ { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  # TODO: Implement\n  mean = numbers.sum / numbers.length\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  absolute_deviations.sum /\
    \ absolute_deviations.length\nend", "  mean = numbers.inject(0) { |sum, n| sum\
    \ + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum + (n - mean).abs\
    \ } / numbers.size.to_f\nend", "  # Calculate mean of the input numbers\n  mean\
    \ = numbers.reduce(:+) / numbers.length.to_f", "  mean = numbers.inject(0, :+)\
    \ / numbers.length.to_f\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  absolute_deviations.inject(0, :+) / absolute_deviations.length.to_f\nend",
  "  mean = numbers.mean\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  absolute_deviations.mean\nend", "  mean = numbers.reduce(:+) / numbers.length.to_f\n\
    \  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length.to_f\nend",
  "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ n| sum + n } / numbers.size\n  numbers.inject(0.0) { |sum, n| sum + (n - mean).abs\
    \ } / numbers.size\nend", "  mean = mean(numbers)\n  abs_differences = numbers.map\
    \ { |n| (n - mean).abs }\n  mean(abs_differences)\nend", "  mean = numbers.inject(0)\
    \ { |sum, x| sum + x } / numbers.length.to_f\n  numbers.inject(0) { |sum, x| sum\
    \ + (x - mean).abs } / numbers.length.to_f\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ n| sum + n } / numbers.size\n  numbers.inject(0.0) { |sum, n| sum + (n - mean).abs\
    \ } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum, n| sum + n } /\
    \ numbers.size\n  absolute_deviations = numbers.map { |n| (n - mean).abs }\n \
    \ absolute_deviations.inject(0.0) { |sum, n| sum + n } / absolute_deviations.size\n\
    end", "  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n \
    \ numbers.inject(0) { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend",
  "  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0)\
    \ { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, n| sum + n } / numbers.size\n  numbers.inject(0.0) { |sum, n| sum +\
    \ (n - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number\
    \ - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length.to_f\n  deviations = numbers.map { |n| (n - mean).abs }\n \
    \ deviations.reduce(:+) / deviations.length.to_f\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length.to_f\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length.to_f\n\
    end", "  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |n| (n -\
    \ mean).abs }.reduce(:+) / numbers.length\nend", "  mean = numbers.inject(0) {\
    \ |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum +\
    \ (n - mean).abs } / numbers.size.to_f\nend", "  # Calculate mean of the input\
    \ numbers\n  mean = numbers.reduce(:+) / numbers.length", "  mean = numbers.reduce(:+)\
    \ / numbers.length\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n \
    \ absolute_deviations = numbers.map { |n| (n - mean).abs }\n  absolute_deviations.inject(0)\
    \ { |sum, n| sum + n } / absolute_deviations.size.to_f\nend", "  # Calculate mean\
    \ of input numbers\n  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size",
  "  # TODO: Implement this method\n  # Hint: You'll need to calculate the mean of\
    \ the numbers first\n  # Hint: You'll need to use the 'map' method to calculate\
    \ the absolute\n  # difference between each element and the mean\n  # Hint: You'll\
    \ need to use the 'reduce' method to calculate the average\n  # of the absolute\
    \ differences\n  # Hint: You'll need to use the 'round' method to round the result\
    \ to 2\n  # decimal places\n  # Hint: You'll need to use the 'to_f' method to\
    \ convert the result to a\n  # floating point number\n  mean = numbers.reduce(:+).to_f\
    \ / numbers.length\n  absolute_differences = numbers.map { |number| (number -\
    \ mean).abs }\n  average_absolute_difference = absolute_differences.reduce(:+).to_f\
    \ / absolute_differences.length\n  average_absolute_difference.round(2)\nend",
  "  mean = numbers.reduce(:+) / numbers.length\n  absolute_deviations = numbers.map\
    \ { |n| (n - mean).abs }\n  absolute_deviations.reduce(:+) / absolute_deviations.length\n\
    end", "  # Calculate mean of the dataset\n  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size", "  mean = numbers.inject(0.0) { |sum, el| sum\
    \ + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  # TODO: Your code goes here!\n  # Hint: You will\
    \ need to calculate the mean of the numbers first.\n  #       You can use the\
    \ mean function you defined above.\n  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = numbers.mean\n  absolute_deviations = numbers.map { |number| (number\
    \ - mean).abs }\n  absolute_deviations.mean\nend", "  mean = mean(numbers)\n \
    \ absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0)\
    \ { |sum, n| sum + n } / numbers.size.to_f\n  absolute_deviations = numbers.map\
    \ { |n| (n - mean).abs }\n  absolute_deviations.inject(0) { |sum, n| sum + n }\
    \ / absolute_deviations.size.to_f\nend", "  # TODO: Your code goes here!\n  #\
    \ Hint: You will need to use the 'reduce' method\n  #       defined in the Enumerable\
    \ module\n  #       The Enumerable module is automatically included in Arrays\n\
    \  #       More info: http://ruby-doc.org/core-2.2.0/Enumerable.html\n  # Hint:\
    \ Remember that the 'abs' method returns the absolute value of a number\n  # Hint:\
    \ You will need to use the 'reduce' method\n  #       defined in the Enumerable\
    \ module\n  #       The Enumerable module is automatically included in Arrays\n\
    \  #       More info: http://ruby-doc.org/core-2.2.0/Enumerable.html\n  # Hint:\
    \ Remember that the 'abs' method returns the absolute value of a number\n  mean\
    \ = numbers.reduce(:+).to_f / numbers.length\n  absolute_deviations = numbers.map\
    \ { |number| (number - mean).abs }\n  absolute_deviations.reduce(:+).to_f / absolute_deviations.length\n\
    end", "  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n \
    \ numbers.inject(0) { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend",
  "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  # TODO: Your code goes here!\n  mean =\
    \ numbers.reduce(:+) / numbers.length\n  numbers.map { |n| (n - mean).abs }.reduce(:+)\
    \ / numbers.length\nend", "  # Calculate mean of the dataset\n  mean = numbers.inject(0)\
    \ { |sum, x| sum + x } / numbers.length.to_f", "  mean = numbers.inject(0.0) {\
    \ |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum +\
    \ (el - mean).abs } / numbers.size\nend", "  # TODO: Implement this method\n \
    \ # Calculate the mean of the input numbers\n  mean = numbers.reduce(:+) / numbers.length",
  "  # Calculate mean of the input numbers\n  mean = numbers.inject(0) { |sum, n|\
    \ sum + n } / numbers.length.to_f", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map do |number|\n    (number - mean).abs\n  end\n  mean(absolute_deviations)\n\
    end", "  # Calculate mean\n  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.length.to_f",
  "  # TODO: Implement this method\n  # Hint: Use the mean method you wrote above\n\
    \  mean = mean(numbers)\n  absolute_deviations = []\n  numbers.each do |number|\n\
    \    absolute_deviations << (number - mean).abs\n  end\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |x| (x -\
    \ mean).abs }\n  mean(absolute_deviations)\nend", "  # Calculate mean of input\
    \ numbers\n  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size",
  "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ x| sum + x } / numbers.size\n  numbers.inject(0.0) { |sum, x| sum + (x - mean).abs\
    \ } / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations = numbers.map\
    \ { |x| (x - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, n| sum + n } / numbers.size\n  numbers.inject(0.0) { |sum, n| sum +\
    \ (n - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  # Calculate mean of the list\n  mean =\
    \ numbers.reduce(:+) / numbers.length.to_f", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0)\
    \ { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, n| sum + n } / numbers.size\n  numbers.inject(0.0) { |sum, n| sum +\
    \ (n - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0) { |sum, n|\
    \ sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum + (n - mean).abs\
    \ } / numbers.size.to_f\nend", "  # Calculate the mean of the numbers\n  mean\
    \ = numbers.inject(0) { |sum, n| sum + n } / numbers.length.to_f", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0) { |sum,\
    \ n| sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum + (n -\
    \ mean).abs } / numbers.size.to_f\nend", "  # Calculate the mean of the input\
    \ numbers\n  mean = numbers.sum / numbers.length", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  # Calculate mean\n  mean = mean(numbers)",
  "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = numbers.reduce(:+) / numbers.length\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\nend", "  mean\
    \ = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  # TODO: Implement\n  numbers_mean = mean(numbers)\n\
    \  numbers_absolute_deviation = []\n  numbers.each do |number|\n    numbers_absolute_deviation\
    \ << (number - numbers_mean).abs\n  end\n  return mean(numbers_absolute_deviation)\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0)\
    \ { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend", "  # TODO: Your\
    \ code goes here\n  mean = numbers.reduce(:+) / numbers.length\n  numbers.map\
    \ { |num| (num - mean).abs }.reduce(:+) / numbers.length\nend", "  # Calculate\
    \ mean\n  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.length.to_f",
  "  mean = numbers.inject(0, :+) / numbers.size.to_f\n  numbers.map { |x| (x - mean).abs\
    \ }.inject(0, :+) / numbers.size.to_f\nend", "  mean = numbers.inject(0) { |sum,\
    \ n| sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum + (n -\
    \ mean).abs } / numbers.size.to_f\nend", "  # Calculate mean\n  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  # Calculate mean\n  mean = numbers.inject(0)\
    \ { |sum, x| sum + x } / numbers.length.to_f", "  # TODO: Your code goes here\n\
    \  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |num| (num - mean).abs\
    \ }.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |x| (x - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = mean(numbers)\n  absolute_deviations = numbers.map { |number| (number\
    \ - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |x| (x - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = numbers.inject(0.0) { |sum, n| sum + n } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, n| sum + (n - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0)\
    \ { |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum\
    \ + (n - mean).abs } / numbers.size.to_f\nend", "  # Calculate mean of the dataset\n\
    \  mean = numbers.reduce(:+) / numbers.length.to_f", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  # Calculate mean of the input numbers\n\
    \  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.length.to_f", "  #\
    \ Calculate mean of the dataset\n  mean = numbers.inject(0) { |sum, n| sum + n\
    \ } / numbers.size.to_f", "  mean = mean(numbers)\n  absolute_deviations = numbers.map\
    \ { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length\n  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  # Calculate the mean of the input numbers\n  mean = numbers.inject(0)\
    \ { |sum, n| sum + n } / numbers.length", "  mean = numbers.reduce(:+) / numbers.length.to_f\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length.to_f\nend",
  "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  # TODO: Your code\
    \ goes here\n  mean = numbers.reduce(:+) / numbers.length.to_f\n  numbers.map\
    \ { |num| (num - mean).abs }.reduce(:+) / numbers.length\nend", "  # TODO: Implement\
    \ this method\n  # Hint: You can use the 'mean' and 'absolute_deviation' methods\
    \ you defined above\n  #       in this method\n  mean = mean(numbers)\n  absolute_deviations\
    \ = absolute_deviation(numbers, mean)\n  mean(absolute_deviations)\nend", "  #\
    \ TODO: Implement this method\n  # Hint: You can use the 'abs' method to get the\
    \ absolute value of a number\n  x_mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |x| (x - x_mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = numbers.inject(0) { |sum, n|\
    \ sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum + (n - mean).abs\
    \ } / numbers.size.to_f\nend", "  # TODO: Your code goes here\n  mean = numbers.reduce(:+)\
    \ / numbers.length\n  absolute_deviations = numbers.map { |number| (number - mean).abs\
    \ }\n  absolute_deviations.reduce(:+) / absolute_deviations.length\nend", "  mean\
    \ = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs }\n\
    \  mean(absolute_deviations)\nend", "  # TODO: Your code goes here\n  mean = numbers.reduce(:+)\
    \ / numbers.length\n  numbers.map { |num| (num - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  mean = numbers.reduce(:+) / numbers.length.to_f\n  absolute_differences\
    \ = numbers.map { |number| (number - mean).abs }\n  absolute_differences.reduce(:+)\
    \ / absolute_differences.length.to_f\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  # Calculate mean of the input numbers\n\
    \  mean = numbers.reduce(:+) / numbers.length", "  mean = numbers.mean\n  numbers.map\
    \ { |n| (n - mean).abs }.mean\nend", "  mean = numbers.inject(0) { |sum, n| sum\
    \ + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum + (n - mean).abs\
    \ } / numbers.size.to_f\nend", "  # Calculate the mean of the input numbers\n\
    \  mean = numbers.reduce(:+) / numbers.length", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0) { |sum,\
    \ n| sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum + (n -\
    \ mean).abs } / numbers.size.to_f\nend", "  mean = numbers.mean\n  absolute_deviations\
    \ = numbers.map { |x| (x - mean).abs }\n  absolute_deviations.mean\nend", "  #\
    \ Calculate the mean of the given numbers\n  mean = numbers.inject(0) { |sum,\
    \ n| sum + n } / numbers.length.to_f", "  mean = numbers.inject(0.0) { |sum, el|\
    \ sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  # Calculate the mean of the input numbers\n  mean\
    \ = numbers.inject(0) { |sum, n| sum + n } / numbers.length", "  mean = numbers.inject(0)\
    \ { |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum\
    \ + (n - mean).abs } / numbers.size.to_f\nend", "  # Calculate mean\n  mean =\
    \ numbers.inject(0.0) { |sum, el| sum + el } / numbers.size", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |x| (x - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size\n  numbers.inject(0)\
    \ { |sum, n| sum + (n - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |x| (x - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = numbers.inject(0.0) { |sum, x| sum + x } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, x| sum + (x - mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length\n  absolute_deviations = numbers.map { |x| (x - mean).abs }\n\
    \  absolute_deviations.reduce(:+) / absolute_deviations.length\nend", "  mean\
    \ = numbers.inject(0) { |sum, x| sum + x } / numbers.length\n  numbers.inject(0)\
    \ { |sum, x| sum + (x - mean).abs } / numbers.length\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length.to_f\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length.to_f\n\
    end", "  # Calculate the mean of the input numbers\n  mean = numbers.reduce(:+)\
    \ / numbers.length", "  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n\
    \  numbers.inject(0) { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend",
  "  # TODO: Implement this method\n  mean = numbers.inject(0.0) { |sum, el| sum +\
    \ el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.size.to_f\n\
    \  numbers.inject(0) { |sum, n| sum + (n - mean).abs } / numbers.size.to_f\nend",
  "  # Calculate the mean of the input numbers\n  mean = numbers.inject(0) { |sum,\
    \ n| sum + n } / numbers.length.to_f", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = numbers.inject(0) { |sum, number| sum + number } / numbers.length.to_f\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  absolute_deviations.inject(0)\
    \ { |sum, number| sum + number } / absolute_deviations.length.to_f\nend", "  mean\
    \ = numbers.reduce(:+) / numbers.size.to_f\n  numbers.map { |x| (x - mean).abs\
    \ }.reduce(:+) / numbers.size.to_f\nend", "  # Calculate the mean of the input\
    \ numbers\n  mean = numbers.sum / numbers.length", "  mean = numbers.reduce(:+)\
    \ / numbers.length\n  absolute_deviations = numbers.map { |n| (n - mean).abs }\n\
    \  absolute_deviations.reduce(:+) / absolute_deviations.length\nend", "  mean\
    \ = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  # Calculate mean\
    \ of the dataset\n  mean = numbers.inject(0) { |sum, n| sum + n } / numbers.length.to_f",
  "  mean = numbers.reduce(:+) / numbers.length.to_f\n  numbers.map { |x| (x - mean).abs\
    \ }.reduce(:+) / numbers.length.to_f\nend", "  # Calculate mean of the input numbers\n\
    \  mean = numbers.reduce(:+) / numbers.length.to_f", "  mean = numbers.inject(0)\
    \ { |sum, n| sum + n } / numbers.size.to_f\n  numbers.inject(0) { |sum, n| sum\
    \ + (n - mean).abs } / numbers.size.to_f\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0)\
    \ { |sum, n| sum + n } / numbers.size.to_f\n  absolute_deviations = numbers.map\
    \ { |n| (n - mean).abs }\n  absolute_deviations.inject(0) { |sum, n| sum + n }\
    \ / absolute_deviations.size.to_f\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  # Calculate mean of the input numbers\n  mean = numbers.reduce(:+) /\
    \ numbers.size.to_f", "  mean = numbers.inject(0.0) { |sum, n| sum + n } / numbers.size\n\
    \  numbers.inject(0.0) { |sum, n| sum + (n - mean).abs } / numbers.size\nend",
  "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  # TODO: Calculate\
    \ the mean of the numbers\n  mean = numbers.reduce(:+) / numbers.length", "  #\
    \ Calculate mean of the dataset\n  mean = numbers.inject(0) { |sum, n| sum + n\
    \ } / numbers.size", "  mean = mean(numbers)\n  absolute_deviations = numbers.map\
    \ { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  sum = 0\n  numbers.each do |num|\n    sum +=\
    \ (num - mean).abs\n  end\n  sum / numbers.length\nend", "  mean = mean(numbers)\n\
    \  absolute_deviations = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n -\
    \ mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = mean(numbers)\n  absolute_deviations = numbers.map { |x| (x - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  # TODO: Implement\n  # Hint: You can use the 'mean' function you defined\
    \ above\n  # Hint: You can use the 'absolute_value' function you defined above\n\
    \  mean = mean(numbers)\n  absolute_differences = numbers.map { |x| absolute_value(x\
    \ - mean) }\n  mean(absolute_differences)\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |x| (x - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ # TODO: Your code goes here\n  mean = numbers.reduce(:+) / numbers.length\n\
    \  absolute_differences = numbers.map { |number| (number - mean).abs }\n  absolute_differences.reduce(:+)\
    \ / absolute_differences.length\nend", "  mean = average(numbers)\n  absolute_deviations\
    \ = numbers.map { |x| (x - mean).abs }\n  average(absolute_deviations)\nend",
  "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  # Calculate mean\
    \ of the input numbers\n  mean = numbers.inject(0.0) { |sum, n| sum + n } / numbers.size",
  "  # Calculate mean\n  mean = numbers.inject(0) { |sum, x| sum + x } / numbers.length.to_f",
  "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ n| sum + n } / numbers.size\n  numbers.inject(0.0) { |sum, n| sum + (n - mean).abs\
    \ } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum, n| sum + n } /\
    \ numbers.size\n  numbers.inject(0.0) { |sum, n| sum + (n - mean).abs } / numbers.size\n\
    end", "  # Calculate mean of the dataset\n  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size", "  mean = numbers.inject(0.0) { |sum, el| sum\
    \ + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  # Calculate mean of the dataset\n  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |num| (num - mean).abs }\n  mean(absolute_deviations)\nend",
  "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  mean(absolute_deviations)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
