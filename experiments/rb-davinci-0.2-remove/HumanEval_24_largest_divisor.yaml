name: HumanEval_24_largest_divisor
language: rb
prompt: "# For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\ndef largest_divisor(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_divisor\n\
  \    candidate = method(:largest_divisor)\n    assert_equal(1, candidate.call(3))\n\
  \    assert_equal(1, candidate.call(7))\n    assert_equal(5, candidate.call(10))\n\
  \    assert_equal(50, candidate.call(100))\n    assert_equal(7, candidate.call(49))\n\
  \  end\nend\n"
completions: ["  # Start at n-1 and count down\n  (n-1).downto(1) do |i|\n    # If\
    \ i divides n evenly, return i\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n %\
    \ i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend",
  "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n %\
    \ i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend",
  "  (n - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (2..n-1).reverse_each\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (2..n/2).each do |i|\n    return i if n % i\
    \ == 0\n  end\n  return 1\nend", "  i = n - 1\n  while i > 0\n    if n % i ==\
    \ 0\n      return i\n    end\n    i -= 1\n  end\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n\
    \ % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend",
  "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  divisor = n - 1\n  while n % divisor\
    \ != 0\n    divisor -= 1\n  end\n  divisor\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n\
    \ % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\n\
    end", "  i = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n\
    \    i -= 1\n  end\nend", "  divisor = n - 1\n  while n % divisor != 0\n    divisor\
    \ -= 1\n  end\n  divisor\nend", "  (2..n/2).each do |i|\n    return i if n % i\
    \ == 0\n  end\n  return 1\nend", "  (n - 1).downto(2) do |i|\n    return i if\
    \ n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n % i\
    \ == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n \
    \ end\nend", "  (2..n/2).each do |i|\n    return i if n % i == 0\n  end\n  return\
    \ 1\nend", "  (n - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend",
  "  (n - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n\
    \ % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend",
  "  divisor = n - 1\n  while divisor > 0\n    if n % divisor == 0\n      return divisor\n\
    \    end\n    divisor -= 1\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n %\
    \ i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend",
  "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n\
    \ % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n % i ==\
    \ 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\n\
    end", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (2..n/2).each\
    \ do |i|\n    return i if n % i == 0\n  end\n  return 1\nend", "  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (2..n/2).each do |i|\n \
    \   return i if n % i == 0\n  end\n  return 1\nend", "  (n - 1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n %\
    \ i == 0\n  end\nend", "  i = n - 1\n  while i > 0\n    if n % i == 0\n      return\
    \ i\n    end\n    i -= 1\n  end\nend", "  (n-1).downto(2) do |i|\n    return i\
    \ if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i\
    \ == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n \
    \ end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend",
  "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (2..n).reverse_each do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n %\
    \ i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  i = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n\
    \    end\n    i -= 1\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if\
    \ n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i ==\
    \ 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\n\
    end", "  i = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n\
    \    i -= 1\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i ==\
    \ 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\n\
    end", "  i = n - 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n\
    \    i -= 1\n  end\nend", "  i = n - 1\n  while i > 0\n    if n % i == 0\n   \
    \   return i\n    end\n    i -= 1\n  end\nend", "  (n-1).downto(2) do |i|\n  \
    \  return i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n\
    \ % i == 0\n  end\nend", "  divisor = n - 1\n  while divisor > 0\n    if n % divisor\
    \ == 0\n      return divisor\n    end\n    divisor -= 1\n  end\nend", "  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n %\
    \ i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\n\
    end", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n\
    \ % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n % i ==\
    \ 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\n\
    end", "  (n - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", " \
    \ (n - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (n - 1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (2..n/2).each do |i|\n \
    \   return i if n % i == 0\n  end\n  return 1\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n %\
    \ i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\n\
    end", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  divisor = n - 1\n  while n % divisor\
    \ != 0\n    divisor -= 1\n  end\n  divisor\nend", "  (n - 1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  i = n - 1\n  while i > 0\n    if n % i == 0\n\
    \      return i\n    end\n    i -= 1\n  end\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n %\
    \ i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\n\
    end", "  (n - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", " \
    \ (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  i = n -\
    \ 1\n  while i > 0\n    if n % i == 0\n      return i\n    end\n    i -= 1\n \
    \ end\nend", "  (n - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\n\
    end", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n %\
    \ i == 0\n  end\nend", "  divisor = n - 1\n  while divisor > 0\n    if n % divisor\
    \ == 0\n      return divisor\n    end\n    divisor -= 1\n  end\nend", "  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  i = n - 1\n  while i > 0\n    if\
    \ n % i == 0\n      return i\n    end\n    i -= 1\n  end\nend", "  (n - 1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n %\
    \ i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  (2..n-1).reverse_each do |i|\n    return i if n % i == 0\n  end\n\
    end", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (n\
    \ - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n %\
    \ i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\n\
    end", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (2..n/2).each\
    \ do |i|\n    return i if n % i == 0\n  end\n  1\nend", "  (n - 1).downto(2) do\
    \ |i|\n    return i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n %\
    \ i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend",
  "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |divisor|\n\
    \    return divisor if n % divisor == 0\n  end\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n %\
    \ i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend",
  "  (n - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (n - 1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  divisor = n - 1\n  while\
    \ n % divisor != 0\n    divisor -= 1\n  end\n  divisor\nend", "  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (2..n-1).each do |i|\n    if n % i == 0\n \
    \     return i\n    end\n  end\nend", "  (n - 1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n %\
    \ i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n % i == 0\n  end\n\
    end", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (2..n/2).each\
    \ do |i|\n    return i if n % i == 0\n  end\n  return 1\nend", "  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n\
    \ % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend",
  "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return\
    \ i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n    return i if n %\
    \ i == 0\n  end\nend", "  (n - 1).downto(2) do |i|\n    return i if n % i == 0\n\
    \  end\nend", "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend",
  "  (n-1).downto(2) do |i|\n    return i if n % i == 0\n  end\nend", "  (n - 1).downto(2)\
    \ do |i|\n    return i if n % i == 0\n  end\nend", "  (n-1).downto(2) do |i|\n\
    \    return i if n % i == 0\n  end\nend", "  (2..n-1).each do |i|\n    if n %\
    \ i == 0\n      return n / i\n    end\n  end\nend", "  i = n - 1\n  while i >\
    \ 0\n    if n % i == 0\n      return i\n    end\n    i -= 1\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
