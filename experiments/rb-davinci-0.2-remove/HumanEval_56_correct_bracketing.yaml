name: HumanEval_56_correct_bracketing
language: rb
prompt: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
  \ bracket has a corresponding closing bracket.\ndef correct_bracketing(brackets)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
  \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
  <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
  \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
  ))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false,\
  \ candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n  \
  \  assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\"\
  >\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false,\
  \ candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"\
  <><><<><>><>>><>\"))\n  end\nend\n"
completions: ["  stack = []\n  brackets.chars.each do |char|\n    if char == \"<\"\
    \n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n   \
    \     return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # YOUR CODE HERE\n  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  # your code here\nend",
  "  stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # TODO: return True if brackets is correctly bracketed, else False\n  return\
    \ false if brackets.length.odd?\n  return false if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  return false if brackets.index(\"<\") > brackets.index(\">\")\n  return\
    \ true\nend", "  stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n\
    \      stack.push(c)\n    elsif c == \">\"\n      if stack.empty?\n        return\
    \ false\n      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      return false if stack.empty?\n\
    \      stack.pop\n    end\n  end\n  stack.empty?\nend", "  # TODO: return True\
    \ if every opening bracket has a corresponding closing bracket.\n  # return False\
    \ otherwise.\n  # Hint: use a stack\n  stack = []\n  brackets.each_char do |c|\n\
    \    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.chars.each do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # YOUR CODE HERE\nend", "  # TODO: implement this method\n\
    end", "  # your code here\nend", "  # YOUR CODE HERE\nend", "  stack = []\n  brackets.chars.each\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: return True\
    \ if every opening bracket has a corresponding closing bracket.\n  # return False\
    \ otherwise.\n  # Hint: use a stack.\n  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  # YOUR CODE HERE\nend",
  "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.chars.each do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # your\
    \ code here\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n    if c ==\
    \ \"<\"\n      stack.push(c)\n    elsif c == \">\"\n      if stack.empty?\n  \
    \      return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # YOUR CODE HERE\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: implement\
    \ this method\n  return false if brackets.length.odd?\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    else\n      return\
    \ false if stack.pop != \"<\"\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.chars.each do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # TODO: implement this function\n  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: implement this\
    \ method\n  return false if brackets.length.odd?\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    else\n      return\
    \ false if stack.pop != \"<\"\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.chars.each do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # your\
    \ code here\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: return True if brackets is correctly bracketed,\
    \ False otherwise\n  # Hint: use a stack\n  stack = []\n  brackets.chars.each\
    \ do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n    elsif\
    \ bracket == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  open_brackets\
    \ = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      open_brackets\
    \ += 1\n    elsif char == \">\"\n      open_brackets -= 1\n    end\n    return\
    \ false if open_brackets < 0\n  end\n  return open_brackets == 0\nend", "  # TODO:\
    \ implement this method\n  # check if brackets is empty\n  if brackets.empty?\n\
    \    return true\n  end", "  # YOUR CODE HERE\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # your code here\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # YOUR CODE HERE\nend", "  # YOUR CODE HERE\n  # if brackets.length % 2 != 0\n\
    \  #   return false\n  # end\n  #\n  # if brackets[0] == \">\"\n  #   return false\n\
    \  # end\n  #\n  # if brackets[-1] == \"<\"\n  #   return false\n  # end\n  #\n\
    \  # if brackets.include?(\"<>\")\n  #   return false\n  # end\n  #\n  # if brackets.include?(\"\
    >>\")\n  #   return false\n  # end\n  #\n  # if brackets.include?(\"<<\")\n  #\
    \   return false\n  # end\n  #\n  # if brackets.include?(\"<><\")\n  #   return\
    \ false\n  # end\n  #\n  # if brackets.include?(\">><\")\n  #   return false\n\
    \  # end\n  #\n  # if brackets.include?(\"<<>\")\n  #   return false\n  # end\n\
    \  #\n  # if brackets.include?(\"<><>\")\n  #   return false\n  # end\n  #\n \
    \ # if brackets.include?(\">><<\")\n  #   return false\n  # end\n  #\n  # if brackets.include?(\"\
    <<><\")\n  #   return false\n  # end\n  #\n  # if brackets.include?(\"<><><\"\
    )\n  #   return false\n  # end\n  #\n  # if brackets.include?(\">><<>\")\n  #\
    \   return false\n  # end\n  #\n  # if brackets.include?(\"<<><>\")\n  #   return\
    \ false\n  # end\n  #\n  # if brackets.include?(\"<><><>\")\n  #   return false\n\
    \  # end\n  #\n  # if brackets.include?(\">><<><\")\n  #   return false\n  # end\n\
    \  #\n  # if brackets.include?(\"<<><><\")\n  #   return false\n  # end\n  #\n\
    \  # if brackets.include?(\"<><><><\")\n  #   return false\n  # end\n  #\n  #\
    \ if brackets.include?(\">><<><>\")\n  #   return false\n  # end\n", "  # TODO:\
    \ implement this method\n  return false if brackets.length.odd?\n  stack = []\n\
    \  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    else\n      return false if stack.empty?\n      stack.pop\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n    if c ==\
    \ \"<\"\n      stack.push(c)\n    elsif c == \">\"\n      if stack.empty?\n  \
    \      return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  # TODO: implement this method\n  # return false\
    \ if brackets.length.odd?\n  # return false if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  # return false if brackets.index(\"<\") > brackets.index(\">\")\n  # return\
    \ true\n  # return false if brackets.length.odd?\n  # return false if brackets.count(\"\
    <\") != brackets.count(\">\")\n  # return false if brackets.index(\"<\") > brackets.index(\"\
    >\")\n  # return true\n  return false if brackets.length.odd?\n  return false\
    \ if brackets.count(\"<\") != brackets.count(\">\")\n  return false if brackets.index(\"\
    <\") > brackets.index(\">\")\n  return true\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.length == 0\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.length == 0\nend", "  # YOUR CODE HERE\n\
    \  return false if brackets.length.odd?\n  stack = []\n  brackets.each_char do\
    \ |char|\n    if char == \"<\"\n      stack.push(char)\n    else\n      return\
    \ false if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\nend",
  "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # YOUR\
    \ CODE HERE\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\
    \n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n   \
    \     return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n   \
    \ if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.chars.each do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n    if c ==\
    \ \"<\"\n      stack.push(c)\n    elsif c == \">\"\n      if stack.empty?\n  \
    \      return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  # TODO\nend", "  stack = []\n  brackets.chars.each\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    else\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  # your code here\nend",
  "  # TODO: implement this method\n  # check if the string is empty\n  if brackets.length\
    \ == 0\n    return true\n  end\n  # check if the first character is a closing\
    \ bracket\n  if brackets[0] == \">\"\n    return false\n  end\n  # check if the\
    \ last character is an opening bracket\n  if brackets[-1] == \"<\"\n    return\
    \ false\n  end\n  # check if the number of opening brackets is equal to the number\
    \ of closing brackets\n  if brackets.count(\"<\") != brackets.count(\">\")\n \
    \   return false\n  end\n  # check if there is a closing bracket before an opening\
    \ bracket\n  if brackets.index(\">\") < brackets.index(\"<\")\n    return false\n\
    \  end\n  # check if there is a closing bracket before an opening bracket\n  if\
    \ brackets.index(\">\") < brackets.index(\"<\")\n    return false\n  end\n  #\
    \ check if there is a closing bracket before an opening bracket\n  if brackets.index(\"\
    >\") < brackets.index(\"<\")\n    return false\n  end\n  # check if there is a\
    \ closing bracket before an opening bracket\n  if brackets.index(\">\") < brackets.index(\"\
    <\")\n    return false\n  end\n  # check if there is a closing bracket before\
    \ an opening bracket\n  if brackets.index(\">\") < brackets.index(\"<\")\n   \
    \ return false\n  end\n  # check if there is a closing bracket before an opening\
    \ bracket\n  if brackets.index(\">\") < brackets.index(\"<\")\n    return false\n\
    \  end\n  # check if there is a closing bracket before an opening bracket\n  if\
    \ brackets.index(\">\") < brackets.index(\"<\")\n    return false\n  end\n  #\
    \ check if there is a closing bracket before an opening bracket\n  if brackets.index(\"\
    >\") < brackets.index(\"<\")\n    return false\n  end\n  # check if there is a\
    \ closing bracket before an opening bracket\n  if brackets.index(\">\") < brackets.index(\"\
    <\")\n    return false\n  end\n  # check if there is a closing bracket before\
    \ an opening bracket\n  if brackets.index(\">\") < brackets.index(\"<\")\n   \
    \ return false\n  end\n  # check if there is a closing", "  stack = []\n  brackets.chars.each\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this method\n\
    \  stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # YOUR CODE HERE\nend", "  stack = []\n  brackets.each_char do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  return false if brackets.length.odd?\n  stack = []\n\
    \  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    else\n      return false if stack.empty?\n      stack.pop\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |bracket|\n    if\
    \ bracket == \"<\"\n      stack.push(bracket)\n    elsif bracket == \">\"\n  \
    \    if stack.empty?\n        return false\n      else\n        stack.pop\n  \
    \    end\n    end\n  end\n  stack.empty?\nend", "  # YOUR CODE HERE\nend", " \
    \ # YOUR CODE HERE\nend", "  stack = []\n  brackets.each_char do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  # your code here\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # your code here\n\
    end", "  # YOUR CODE HERE\nend", "  return true if brackets.length == 0\n  return\
    \ false if brackets[0] == \">\"\n  return false if brackets[-1] == \"<\"\n  return\
    \ false if brackets.count(\"<\") != brackets.count(\">\")\n  return false if brackets.include?(\"\
    <>\")\n  return false if brackets.include?(\"<><\")\n  return false if brackets.include?(\"\
    <><><\")\n  return false if brackets.include?(\"<><><><\")\n  return false if\
    \ brackets.include?(\"<><><><><\")\n  return false if brackets.include?(\"<><><><><><\"\
    )\n  return false if brackets.include?(\"<><><><><><><\")\n  return false if brackets.include?(\"\
    <><><><><><><><\")\n  return false if brackets.include?(\"<><><><><><><><><\"\
    )\n  return false if brackets.include?(\"<><><><><><><><><><\")\n  return false\
    \ if brackets.include?(\"<><><><><><><><><><><\")\n  return false if brackets.include?(\"\
    <><><><><><><><><><><><\")\n  return false if brackets.include?(\"<><><><><><><><><><><><><\"\
    )\n  return false if brackets.include?(\"<><><><><><><><><><><><><><\")\n  return\
    \ false if brackets.include?(\"<><><><><><><><><><><><><><><\")\n  return false\
    \ if brackets.include?(\"<><><><><><><><><><><><><><><><\")\n  return false if\
    \ brackets.include?(\"<><><><><><><><><><><><><><><><><\")\n  return false if\
    \ brackets.include?(\"<><><><><><><><><><><><><><><><><><\")\n  return false if\
    \ brackets.include?(\"<><><><><><><><><><><><><><><><><><><\")\n  return false\
    \ if brackets.include?(\"<><><><><><><><><><><><><><><><><><><><\")\n  return\
    \ false if brackets.include?(\"<><><><><><><><><><><><><><><><><><", "  # TODO:\
    \ implement this method\n  stack = []\n  brackets.each_char do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement this function\n  # check if brackets\
    \ is empty\n  if brackets.empty?\n    return true\n  end", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: implement this\
    \ method\nend", "  stack = []\n  brackets.each_char do |char|\n    if char ==\
    \ \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # YOUR CODE HERE\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # TODO: return True if brackets\
    \ is correctly bracketed, False otherwise\n  return false if brackets.length.odd?\n\
    \  return false if brackets.count('<') != brackets.count('>')\n  stack = []\n\
    \  brackets.each_char do |char|\n    if char == '<'\n      stack.push(char)\n\
    \    else\n      stack.pop\n    end\n  end\n  return true if stack.empty?\n  false\n\
    end", "  stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.chars.each do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n\
    \    else\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # your code here\nend", " \
    \ stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # YOUR CODE HERE\n  stack = []\n  brackets.each_char do |bracket|\n    if bracket\
    \ == \"<\"\n      stack.push(bracket)\n    elsif bracket == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement this method\n  # return true if every\
    \ opening bracket has a corresponding closing bracket\n  # return false if there\
    \ is no opening bracket for a closing bracket\n  # return false if there is an\
    \ opening bracket for no closing bracket\n  # return false if there is a closing\
    \ bracket for no opening bracket\n  # return false if there is a closing bracket\
    \ before an opening bracket\n  # return false if there is an opening bracket before\
    \ a closing bracket\n  # return false if there is a closing bracket before an\
    \ opening bracket\n  # return false if there is an opening bracket before a closing\
    \ bracket\n  # return false if there is a closing bracket before an opening bracket\n\
    \  # return false if there is an opening bracket before a closing bracket\n  #\
    \ return false if there is a closing bracket before an opening bracket\n  # return\
    \ false if there is an opening bracket before a closing bracket\n  # return false\
    \ if there is a closing bracket before an opening bracket\n  # return false if\
    \ there is an opening bracket before a closing bracket\n  # return false if there\
    \ is a closing bracket before an opening bracket\n  # return false if there is\
    \ an opening bracket before a closing bracket\n  # return false if there is a\
    \ closing bracket before an opening bracket\n  # return false if there is an opening\
    \ bracket before a closing bracket\n  # return false if there is a closing bracket\
    \ before an opening bracket\n  # return false if there is an opening bracket before\
    \ a closing bracket\n  # return false if there is a closing bracket before an\
    \ opening bracket\n  # return false if there is an opening bracket before a closing\
    \ bracket\n  # return false if there is a closing bracket before an opening bracket\n\
    \  # return false if there is an opening bracket before a closing bracket\n  #\
    \ return false if there is a closing bracket before an opening bracket\n  # return\
    \ false if there is an opening bracket before a closing bracket\n  # return false\
    \ if there is a closing bracket before an opening bracket\n  # return false if\
    \ there is an opening bracket before a closing bracket\n  # return false if there\
    \ is a closing bracket before an opening bracket\n  # return false if there is\
    \ an opening bracket before a closing bracket\n  # return false if there is a\
    \ closing bracket before an opening bracket\n  # return false if there is an opening\
    \ bracket before a closing bracket\n  # return false if there is a closing bracket\
    \ before an opening bracket\n  # return false if there is an", "  # TODO: implement\
    \ this\nend", "  # TODO: implement this method\nend", "  # TODO: implement this\
    \ function\n  return false if brackets.length.odd?\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    else\n      return\
    \ false if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\nend",
  "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # TODO:\
    \ return True if brackets is correctly bracketed, False otherwise\n  return false\
    \ if brackets.length % 2 != 0\n  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    else\n      return false if\
    \ stack.pop != \"<\"\n    end\n  end\n  return true if stack.empty?\n  false\n\
    end", "  # TODO: return True if every opening bracket has a corresponding closing\
    \ bracket.\n  #       return False otherwise.\n  #       (Hint: you can use a\
    \ stack to keep track of the brackets.)\n  stack = []\n  brackets.each_char do\
    \ |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\
    \n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.chars.each\
    \ do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n    else\n\
    \      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: implement me\n\
    end", "  # TODO: return True if brackets is correctly bracketed, False otherwise\n\
    \  return false if brackets.length.odd?\n  return false if brackets.count('<')\
    \ != brackets.count('>')\n  stack = []\n  brackets.each_char do |char|\n    if\
    \ char == '<'\n      stack.push(char)\n    else\n      return false if stack.pop\
    \ != '<'\n    end\n  end\n  return true\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # TODO: return True if the\
    \ string is correctly bracketed\n  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.chars.each\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.chars.each\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: implement\
    \ this method\n  # return true if brackets is empty\n  return true if brackets.empty?\n\
    \  # return false if brackets is not even\n  return false if brackets.length.odd?\n\
    \  # return false if brackets is not start with \"<\"\n  return false if brackets[0]\
    \ != \"<\"\n  # return false if brackets is not end with \">\"\n  return false\
    \ if brackets[-1] != \">\"\n  # return false if brackets is not contain only \"\
    <\" and \">\"\n  return false if brackets.scan(/[^<>]/).any?\n  # return false\
    \ if brackets is not contain only \"<\" and \">\"\n  return false if brackets.scan(/[^<>]/).any?\n\
    \  # return false if brackets is not contain only \"<\" and \">\"\n  return false\
    \ if brackets.scan(/[^<>]/).any?\n  # return false if brackets is not contain\
    \ only \"<\" and \">\"\n  return false if brackets.scan(/[^<>]/).any?\n  # return\
    \ false if brackets is not contain only \"<\" and \">\"\n  return false if brackets.scan(/[^<>]/).any?\n\
    \  # return false if brackets is not contain only \"<\" and \">\"\n  return false\
    \ if brackets.scan(/[^<>]/).any?\n  # return false if brackets is not contain\
    \ only \"<\" and \">\"\n  return false if brackets.scan(/[^<>]/).any?\n  # return\
    \ false if brackets is not contain only \"<\" and \">\"\n  return false if brackets.scan(/[^<>]/).any?\n\
    \  # return false if brackets is not contain only \"<\" and \">\"\n  return false\
    \ if brackets.scan(/[^<>]/).any?\n  # return false if brackets is not contain\
    \ only \"<\" and \">\"\n  return false if brackets.scan(/[^<>]/).any?\n  # return\
    \ false if brackets is not contain only \"<\" and \">\"\n  return false if brackets.scan(/[^<>]/).any?\n\
    \  # return false if brackets is not contain only \"<\" and \">\"\n  return false\
    \ if brackets.scan(/[^<>]/).any?\n  # return false", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n    elsif\
    \ bracket == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # YOUR\
    \ CODE HERE\n  # return true if brackets.length.even?\n  # return false if brackets.length.odd?\n\
    \  # return false if brackets.include?(\"<>\")\n  # return false if brackets.include?(\"\
    >>\")\n  # return false if brackets.include?(\"<<\")\n  # return false if brackets.include?(\"\
    <><\")\n  # return false if brackets.include?(\"<><>\")\n  # return false if brackets.include?(\"\
    <><><\")\n  # return false if brackets.include?(\"<><><>\")\n  # return false\
    \ if brackets.include?(\"<><><><\")\n  # return false if brackets.include?(\"\
    <><><><>\")\n  # return false if brackets.include?(\"<><><><><\")\n  # return\
    \ false if brackets.include?(\"<><><><><>\")\n  # return false if brackets.include?(\"\
    <><><><><><\")\n  # return false if brackets.include?(\"<><><><><><>\")\n  # return\
    \ false if brackets.include?(\"<><><><><><><\")\n  # return false if brackets.include?(\"\
    <><><><><><><>\")\n  # return false if brackets.include?(\"<><><><><><><><\")\n\
    \  # return false if brackets.include?(\"<><><><><><><><>\")\n  # return false\
    \ if brackets.include?(\"<><><><><><><><><\")\n  # return false if brackets.include?(\"\
    <><><><><><><><><>\")\n  # return false if brackets.include?(\"<><><><><><><><><><\"\
    )\n  # return false if brackets.include?(\"<><><><><><><><><><>\")\n  # return\
    \ false if brackets.include?(\"<><><><><><><><><><><\")\n  # return false if brackets.include?(\"\
    <><><><><><><><><><><>\")\n  # return false if brackets.include?(\"<><><><><><><><><><><><\"\
    )\n  # return false if brackets.include?(\"<><><><><><><><><><><><>\")\n  # return\
    \ false if brackets.include?(\"<><", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  # your code here\nend",
  "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # YOUR\
    \ CODE HERE\nend", "  # TODO: implement this method\n  # return true if brackets\
    \ are correct\n  # return false if brackets are incorrect\n  # if brackets are\
    \ incorrect, return the first position where the error occurs\n  # if brackets\
    \ are correct, return -1\n  # if brackets are empty, return -1\n  # if brackets\
    \ are nil, return -1\n  # if brackets are not a string, return -1\n  # if brackets\
    \ are not a string of \"<\" and \">\", return -1\n  # if brackets are not a string\
    \ of \"<\" and \">\", return the first position where the error occurs\n  if brackets.nil?\n\
    \    return -1\n  elsif brackets.class != String\n    return -1\n  elsif brackets.empty?\n\
    \    return -1\n  elsif brackets.count(\"<\") != brackets.count(\">\")\n    return\
    \ -1\n  elsif brackets.count(\"<\") == brackets.count(\">\")\n    return true\n\
    \  else\n    return false\n  end\nend", "  # TODO: return True if brackets is\
    \ correctly bracketed, False otherwise\n  stack = []\n  brackets.each_char do\
    \ |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\
    \n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # YOUR CODE HERE\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # YOUR\
    \ CODE HERE\nend", "  # TODO: return True if every opening bracket has a corresponding\
    \ closing bracket\n  # return False otherwise\n  #\n  # for example, correct_bracketing(\"\
    <>\") is True\n  # correct_bracketing(\"<><<>\") is False\n  # correct_bracketing(\"\
    <><<><>>\") is True\n  #\n  # Hint: you can use a stack to solve this problem\n\
    \  #\n  # YOUR CODE HERE\n  stack = []\n  brackets.each_char do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # your code here\n  # if brackets.length % 2 != 0\n\
    \  #   return false\n  # end\n  #\n  # if brackets[0] == \">\" || brackets[-1]\
    \ == \"<\"\n  #   return false\n  # end\n  #\n  # if brackets.count(\"<\") !=\
    \ brackets.count(\">\")\n  #   return false\n  # end\n  #\n  # return true", " \
    \ # your code here\n  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "\t# YOUR CODE HERE\n\t# if\
    \ brackets.length == 0\n\t# \treturn true\n\t# end\n\t# if brackets.length % 2\
    \ != 0\n\t# \treturn false\n\t# end\n\t# if brackets[0] == '>'\n\t# \treturn false\n\
    \t# end\n\t# if brackets[-1] == '<'\n\t# \treturn false\n\t# end\n\t# if brackets.length\
    \ == 2\n\t# \tif brackets[0] == '<' && brackets[1] == '>'\n\t# \t\treturn true\n\
    \t# \telse\n\t# \t\treturn false\n\t# \tend\n\t# end\n\t# if brackets[0] == '<'\
    \ && brackets[-1] == '>'\n\t# \treturn correct_bracketing(brackets[1..-2])\n\t\
    # else\n\t# \treturn false\n\t# end\n\t# if brackets.length == 0\n\t# \treturn\
    \ true\n\t# end\n\t# if brackets.length % 2 != 0\n\t# \treturn false\n\t# end\n\
    \t# if brackets[0] == '>'\n\t# \treturn false\n\t# end\n\t# if brackets[-1] ==\
    \ '<'\n\t# \treturn false\n\t# end\n\t# if brackets.length == 2\n\t# \tif brackets[0]\
    \ == '<' && brackets[1] == '>'\n\t# \t\treturn true\n\t# \telse\n\t# \t\treturn\
    \ false\n\t# \tend\n\t# end\n\t# if brackets[0] == '<' && brackets[-1] == '>'\n\
    \t# \treturn correct_bracketing(brackets[1..-2])\n\t# else\n\t# \treturn false\n\
    \t# end\n\tif brackets.length == 0\n\t\treturn true\n\tend\n\tif brackets.length\
    \ % 2 != 0\n\t\treturn false\n\tend\n\tif brackets[0] == '>'\n\t\treturn false\n\
    \tend\n\tif brackets[-1] == '<'\n\t\treturn false\n\tend\n\tif brackets.length\
    \ == 2\n\t\tif brackets", "  stack = []\n  brackets.each_char do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  brackets.count(\"<\") == brackets.count(\">\")\nend",
  "  # TODO: return True if every opening bracket has a corresponding closing bracket.\n\
    \  # return False otherwise.\n  # You may assume that the input is always a string\
    \ of \"<\" and \">\".\n  # You may not use any other characters.\n  # You may\
    \ not use any other data structures.\n  # You may not use any other modules.\n\
    \  # You may not use any other functions.\n  # You may not use any other methods.\n\
    \  # You may not use any other loops.\n  # You may not use any other conditional\
    \ statements.\n  # You may not use any other operators.\n  # You may not use any\
    \ other built-in functions.\n  # You may not use any other built-in methods.\n\
    \  # You may not use any other built-in constants.\n  # You may not use any other\
    \ built-in data structures.\n  # You may not use any other built-in modules.\n\
    \  # You may not use any other built-in classes.\n  # You may not use any other\
    \ built-in exceptions.\n  # You may not use any other built-in types.\n  # You\
    \ may not use any other built-in variables.\n  # You may not use any other built-in\
    \ objects.\n  # You may not use any other built-in methods or functions.\n  #\
    \ You may not use any other built-in constants.\n  # You may not use any other\
    \ built-in data structures.\n  # You may not use any other built-in modules.\n\
    \  # You may not use any other built-in classes.\n  # You may not use any other\
    \ built-in exceptions.\n  # You may not use any other built-in types.\n  # You\
    \ may not use any other built-in variables.\n  # You may not use any other built-in\
    \ objects.\n  # You may not use any other built-in methods or functions.\n  #\
    \ You may not use any other built-in constants.\n  # You may not use any other\
    \ built-in data structures.\n  # You may not use any other built-in modules.\n\
    \  # You may not use any other built-in classes.\n  # You may not use any other\
    \ built-in exceptions.\n  # You may not use any other built-in types.\n  # You\
    \ may not", "  # your code here\n  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  return false if brackets.length.odd?\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    else\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # TODO: return True if every\
    \ opening bracket has a corresponding closing bracket.\n  # return False otherwise.\n\
    \  #\n  # Hint: you can use the `count` method of a string to count the number\
    \ of\n  # occurrences of a character.\n  #\n  # Hint: you can use the `each_char`\
    \ method of a string to iterate over the\n  # characters of a string.\n  #\n \
    \ # Hint: you can use the `push` and `pop` methods of an array to add and remove\n\
    \  # items from the end of an array.\n  #\n  # Hint: you can use the `empty?`\
    \ method of an array to check if an array is\n  # empty.\n  #\n  # Hint: you can\
    \ use the `any?` method of an array to check if any item in an\n  # array is true.\n\
    \  #\n  # Hint: you can use the `all?` method of an array to check if all items\
    \ in an\n  # array are true.\n  #\n  # Hint: you can use the `any?` method of\
    \ an array to check if any item in an\n  # array is true.\n  #\n  # Hint: you\
    \ can use the `all?` method of an array to check if all items in an\n  # array\
    \ are true.\n  #\n  # Hint: you can use the `any?` method of an array to check\
    \ if any item in an\n  # array is true.\n  #\n  # Hint: you can use the `all?`\
    \ method of an array to check if all items in an\n  # array are true.\n  #\n \
    \ # Hint: you can use the `any?` method of an array to check if any item in an\n\
    \  # array is true.\n  #\n  # Hint: you can use the `all?` method of an array\
    \ to check if all items in an\n  # array are true.\n  #\n  # Hint: you can use\
    \ the `any?` method of an array to check if any item in an\n  # array is true.\n\
    \  #\n  # Hint: you can use the `all?` method of an array to check if all items\
    \ in an\n  # array are", "  stack = []\n  brackets.each_char do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # YOUR CODE HERE\n\
    end", "  # YOUR CODE HERE\nend", "  return false if brackets.length.odd?\n  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    else\n      return false if stack.empty?\n      stack.pop\n    end\n  end\n\
    \  stack.empty?\nend", "  # YOUR CODE HERE\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.chars.each\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # your code here\n\
    end", "  # TODO: implement this method\nend", "  # YOUR CODE HERE\n  stack = []\n\
    \  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # TODO:\
    \ return True if every opening bracket has a corresponding closing bracket.\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # TODO: return True if brackets is correctly bracketed, otherwise False\n  #\
    \ Hint: you can use a stack to solve this problem\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: return True\
    \ if every opening bracket has a corresponding closing bracket.\n  # If there\
    \ are no brackets, return True.\n  return true if brackets.length == 0\n  # If\
    \ there are brackets, return false if the first bracket is a closing bracket.\n\
    \  return false if brackets[0] == \">\"\n  # If the first bracket is an opening\
    \ bracket, find the index of the matching closing bracket.\n  index = brackets.index(\"\
    >\")\n  # If there is no matching closing bracket, return false.\n  return false\
    \ if index == nil\n  # If there is a matching closing bracket, remove the opening\
    \ and closing brackets and recursively call the function.\n  brackets.slice!(0,\
    \ index + 1)\n  correct_bracketing(brackets)\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this method\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # TODO:\
    \ return True if brackets is correctly bracketed, else False\n  # Hint: use a\
    \ stack\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n\
    \      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n    \
    \    return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n   \
    \ if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # your code here\n\
    end", "  # your code here\n  stack = []\n  brackets.each_char do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement this method\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  # YOUR CODE HERE\n  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # YOUR\
    \ CODE HERE\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\
    \n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n   \
    \     return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  # YOUR CODE HERE\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
