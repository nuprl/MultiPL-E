name: HumanEval_56_correct_bracketing
language: rb
prompt: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
  \ bracket has a corresponding closing bracket.\ndef correct_bracketing(brackets)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
  \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
  <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
  \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
  ))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false,\
  \ candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n  \
  \  assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\"\
  >\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false,\
  \ candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"\
  <><><<><>><>>><>\"))\n  end\nend\n"
completions: ["  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n\
    \      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n    \
    \    return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  # YOUR CODE HERE\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # your code here\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # YOUR\
    \ CODE HERE\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\
    \n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n   \
    \     return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  # YOUR CODE HERE\nend",
  "  stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # TODO: implement this method\n  # return false if brackets.length.odd?\n  #\
    \ return false if brackets.count(\"<\") != brackets.count(\">\")\n  # return false\
    \ if brackets.include?(\"<>\")\n  # return false if brackets.include?(\">>\")\n\
    \  # return false if brackets.include?(\"<<\")\n  # return true\n  # return false\
    \ if brackets.length.odd?\n  # return false if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  # return false if brackets.include?(\"<>\")\n  # return false if brackets.include?(\"\
    >>\")\n  # return false if brackets.include?(\"<<\")\n  # return true\n  # return\
    \ false if brackets.length.odd?\n  # return false if brackets.count(\"<\") !=\
    \ brackets.count(\">\")\n  # return false if brackets.include?(\"<>\")\n  # return\
    \ false if brackets.include?(\">>\")\n  # return false if brackets.include?(\"\
    <<\")\n  # return true\n  # return false if brackets.length.odd?\n  # return false\
    \ if brackets.count(\"<\") != brackets.count(\">\")\n  # return false if brackets.include?(\"\
    <>\")\n  # return false if brackets.include?(\">>\")\n  # return false if brackets.include?(\"\
    <<\")\n  # return true\n  # return false if brackets.length.odd?\n  # return false\
    \ if brackets.count(\"<\") != brackets.count(\">\")\n  # return false if brackets.include?(\"\
    <>\")\n  # return false if brackets.include?(\">>\")\n  # return false if brackets.include?(\"\
    <<\")\n  # return true\n  # return false if brackets.length.odd?\n  # return false\
    \ if brackets.count(\"<\") != brackets.count(\">\")\n  # return false if brackets.include?(\"\
    <>\")\n  # return false if brackets.include?(\">>\")\n  # return false if brackets.include?(\"\
    <<\")\n  # return true\n  # return false if brackets.length.odd?\n  # return false\
    \ if brackets.count(\"<\") != brackets.count(\">\")\n  # return false if brackets.include?(\"\
    <>\")\n ", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\
    \n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n   \
    \     return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # your code here\nend", "  # YOUR CODE HERE\n  stack\
    \ = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      return false if stack.empty?\n      stack.pop\n\
    \    end\n  end\n  stack.empty?\nend", "  # TODO: return True if every opening\
    \ bracket has a corresponding closing bracket.\n  # return False otherwise.\n\
    \  # You may assume that the input string is well-formed.\n  # (In particular,\
    \ you don't need to worry about mismatched brackets.)\n  # Hint: Use a stack.\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    else\n      stack.pop\n    end\n  end\n  stack.empty?\nend", "  # TODO: return\
    \ True if every opening bracket has a corresponding closing bracket.\n  # return\
    \ False otherwise.\n  #\n  # Hint: use a stack to keep track of opening brackets.\n\
    \  #\n  # Example:\n  #   correct_bracketing(\"<><><><>\") returns True\n  # \
    \  correct_bracketing(\"<><><><<\") returns False\n  #   correct_bracketing(\"\
    <><><><><>\") returns False\n  #   correct_bracketing(\"\") returns True\n  #\
    \   correct_bracketing(\"<\") returns False\n  #   correct_bracketing(\">\") returns\
    \ False\n  #   correct_bracketing(\"<><\") returns False\n  #   correct_bracketing(\"\
    ><\") returns False\n  #   correct_bracketing(\"<><><\") returns False\n  #  \
    \ correct_bracketing
  "  # TODO: implement this method\nend", "  # your code here\nend", "  # TODO: implement\
    \ this method\n  # return true if every opening bracket has a corresponding closing\
    \ bracket.\n  # return false otherwise.\n  #\n  # for example:\n  # correct_bracketing(\"\
    <>\") -> true\n  # correct_bracketing(\"<><>\") -> true\n  # correct_bracketing(\"\
    <><><>\") -> true\n  # correct_bracketing(\"<><><><>\") -> true\n  # correct_bracketing(\"\
    <><><><><>\") -> true\n  # correct_bracketing(\"<><><><><><>\") -> true\n  # correct_bracketing(\"\
    <><><><><><><>\") -> true\n  # correct_bracketing(\"<><><><><><><><>\") -> true\n\
    \  # correct_bracketing(\"<><><><><><><><><>\") -> true\n  # correct_bracketing(\"\
    <><><><><><><><><><>\") -> true\n  # correct_bracketing(\"<><><><><><><><><><><>\"\
    ) -> true\n  # correct_bracketing(\"<><><><><><><><><><><><>\") -> true\n  # correct_bracketing(\"\
    <><><><><><><><><><><><><>\") -> true\n  # correct_bracketing(\"<><><><><><><><><><><><><><>\"\
    ) -> true\n  # correct_bracketing(\"<><><><><><><><><><><><><><><>\") -> true\n\
    \  # correct_bracketing(\"<><><><><><><><><><><><><><><><>\") -> true\n  # correct_bracketing(\"\
    <><><><><><><><><><><><><><><><><>\") -> true\n  # correct_bracketing(\"<><><><><><><><><><><><><><><><><><>\"\
    ) -> true\n  # correct_bracketing(\"<><><><><><><><><><><><><><><><><><><>\")\
    \ -> true\n  # correct_bracketing(\"<><><><><><><><><><><><><><><><><><><><>\"\
    ) -> true\n ", "  stack = []\n  brackets.each_char do |char|\n    if char == \"\
    <\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  # your code here\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.chars.each\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      stack.pop\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # YOUR CODE HERE\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # TODO:\
    \ implement this method\n  # return true if every opening bracket has a corresponding\
    \ closing bracket\n  # return false if there is an opening bracket without a corresponding\
    \ closing bracket\n  # return false if there is a closing bracket without a corresponding\
    \ opening bracket\n  # return false if there is a closing bracket before an opening\
    \ bracket\n  # return false if there is an opening bracket before a closing bracket\n\
    \  # return false if there is a closing bracket before an opening bracket\n  #\
    \ return false if there is an opening bracket before a closing bracket\n  # return\
    \ false if there is a closing bracket before an opening bracket\n  # return false\
    \ if there is an opening bracket before a closing bracket\n  # return false if\
    \ there is a closing bracket before an opening bracket\n  # return false if there\
    \ is an opening bracket before a closing bracket\n  # return false if there is\
    \ a closing bracket before an opening bracket\n  # return false if there is an\
    \ opening bracket before a closing bracket\n  # return false if there is a closing\
    \ bracket before an opening bracket\n  # return false if there is an opening bracket\
    \ before a closing bracket\n  # return false if there is a closing bracket before\
    \ an opening bracket\n  # return false if there is an opening bracket before a\
    \ closing bracket\n  # return false if there is a closing bracket before an opening\
    \ bracket\n  # return false if there is an opening bracket before a closing bracket\n\
    \  # return false if there is a closing bracket before an opening bracket\n  #\
    \ return false if there is an opening bracket before a closing bracket\n  # return\
    \ false if there is a closing bracket before an opening bracket\n  # return false\
    \ if there is an opening bracket before a closing bracket\n  # return false if\
    \ there is a closing bracket before an opening bracket\n  # return false if there\
    \ is an opening bracket before a closing bracket\n  # return false if there is\
    \ a closing bracket before an opening bracket\n  # return false if there is an\
    \ opening bracket before a closing bracket\n  # return false if there is a closing\
    \ bracket before an opening bracket\n  # return false if there is an opening bracket\
    \ before a closing bracket\n  # return false if there is a closing bracket before\
    \ an opening bracket\n  # return false if there is an opening bracket before a\
    \ closing bracket\n  # return false if there is a closing bracket before an opening\
    \ bracket\n  # return false if there is an opening bracket before a closing bracket\n\
    \  # return false if there", "  stack = []\n  brackets.each_char do |char|\n \
    \   if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if\
    \ stack.empty?\n        return false\n      else\n        stack.pop\n      end\n\
    \    end\n  end\n  stack.empty?\nend", "  # TODO: implement this function\n  #\
    \ return true if brackets is empty\n  return true if brackets.length == 0\n  #\
    \ return false if brackets is not empty and the first character is \">\"\n  return\
    \ false if brackets[0] == \">\"\n  # return false if brackets is not empty and\
    \ the last character is \"<\"\n  return false if brackets[-1] == \"<\"\n  # return\
    \ false if brackets is not empty and the number of \"<\" is not equal to the number\
    \ of \">\"\n  return false if brackets.count(\"<\") != brackets.count(\">\")\n\
    \  # return true if brackets is not empty and the number of \"<\" is equal to\
    \ the number of \">\"\n  return true if brackets.count(\"<\") == brackets.count(\"\
    >\")\nend", "  stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n  \
    \    stack.push(c)\n    elsif c == \">\"\n      if stack.empty?\n        return\
    \ false\n      else\n        stack.pop\n      end\n    end\n  end\n  return stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return\
    \ stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n    if c ==\
    \ \"<\"\n      stack.push(c)\n    elsif c == \">\"\n      if stack.empty?\n  \
    \      return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  # YOUR CODE HERE\n  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # YOUR\
    \ CODE HERE\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\
    \n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n   \
    \     return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # your code here\n  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n    elsif\
    \ bracket == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # TODO: return True if every opening bracket has a corresponding closing bracket\n\
    \  # TODO: return False otherwise\n  # HINT: You can use a stack to solve this\
    \ problem.\n  # HINT: You can use a stack to solve this problem.\n  stack = []\n\
    \  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # TODO: implement this method\nend", "  stack = []\n  brackets.each_char do\
    \ |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n      if\
    \ stack.empty?\n        return false\n      else\n        stack.pop\n      end\n\
    \    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: implement\
    \ this method\n  return false if brackets.length.odd?\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    else\n      return\
    \ false if stack.pop != \"<\"\n    end\n  end\n  return stack.empty?\nend", " \
    \ # YOUR CODE HERE\n  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n    if c ==\
    \ \"<\"\n      stack.push(c)\n    elsif c == \">\"\n      if stack.empty?\n  \
    \      return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # YOUR CODE HERE\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.chars.each\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: return True if\
    \ the brackets are correct\n  # and False otherwise\n  # Hint: use a stack\n \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # TODO:\
    \ implement this method\n  # return false if brackets.length.odd?\n  # return\
    \ false if brackets.count(\"<\") != brackets.count(\">\")\n  # return false if\
    \ brackets.count(\"<\") > brackets.count(\">\")\n  # return false if brackets.count(\"\
    <\") < brackets.count(\">\")\n  # return true if brackets.count(\"<\") == brackets.count(\"\
    >\")\n  # return true if brackets.count(\"<\") == brackets.count(\">\") && brackets.length.even?\n\
    \  # return true if brackets.count(\"<\") == brackets.count(\">\") && brackets.length.even?\
    \ && brackets.count(\"<\") < brackets.count(\">\")\n  # return true if brackets.count(\"\
    <\") == brackets.count(\">\") && brackets.length.even? && brackets.count(\"<\"\
    ) > brackets.count(\">\")\n  # return true if brackets.count(\"<\") == brackets.count(\"\
    >\") && brackets.length.even? && brackets.count(\"<\") < brackets.count(\">\"\
    ) && brackets.count(\"<\") > brackets.count(\">\")\n  # return true if brackets.count(\"\
    <\") == brackets.count(\">\") && brackets.length.even? && brackets.count(\"<\"\
    ) < brackets.count(\">\") && brackets.count(\"<\") > brackets.count(\">\") &&\
    \ brackets.count(\"<\") == brackets.count(\">\")\n  # return true if brackets.count(\"\
    <\") == brackets.count(\">\") && brackets.length.even? && brackets.count(\"<\"\
    ) < brackets.count(\">\") && brackets.count(\"<\") > brackets.count(\">\") &&\
    \ brackets.count(\"<\") == brackets.count(\">\") && brackets.length.odd?\n  #\
    \ return true if brackets.count(\"<\") == brackets.count(\">\") && brackets.length.even?\
    \ && brackets.count(\"<\") < brackets.count(\">\") && brackets.count(\"<\") >\
    \ brackets.count(\">\") && brackets.count(\"<\") == brackets.count(\">\") && brackets.length.odd?\
    \ && brackets.count(\"<\") != brackets.count(\">\")\n  # return true if brackets.count(\"\
    <\") == brackets.count(\">\") && brackets.length", "  # TODO: implement this method\n\
    \  return false if brackets.length.odd?\n  stack = []\n  brackets.each_char do\
    \ |char|\n    if char == \"<\"\n      stack.push(char)\n    else\n      return\
    \ false if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\nend",
  "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # YOUR\
    \ CODE HERE\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\
    \n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n   \
    \     return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n    if c ==\
    \ \"<\"\n      stack.push(c)\n    elsif c == \">\"\n      if stack.empty?\n  \
    \      return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # YOUR CODE HERE\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # your code here\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return\
    \ stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: return True\
    \ if every opening bracket has a corresponding closing bracket.\n  # return False\
    \ otherwise.\n  stack = []\n  brackets.each_char do |char|\n    if char == \"\
    <\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: return True if every opening bracket has a corresponding\
    \ closing bracket.\n  # return False otherwise.\n  #\n  # Hint: use a stack to\
    \ keep track of opening brackets.\n  #\n  # Example:\n  #   correct_bracketing(\"\
    <>\") == True\n  #   correct_bracketing(\"<><>\") == True\n  #   correct_bracketing(\"\
    <><><>\") == True\n  #   correct_bracketing(\"<><><><>\") == True\n  #   correct_bracketing(\"\
    <><><><><>\") == True\n  #   correct_bracketing(\"<><><><><><>\") == True\n  #\
    \   correct_bracketing(\"<><><><><><><>\") == True\n  #   correct_bracketing(\"\
    <><><><><><><><>\") == True\n  #   correct_bracketing(\"<><><><><><><><><>\")\
    \ == True\n  #   correct_bracketing(\"<><><><><><><><><><>\") == True\n  #   correct_bracketing(\"\
    <><><><><><><><><><><>\") == True\n  #   correct_bracketing(\"<><><><><><><><><><><><>\"\
    ) == True\n  #   correct_bracketing(\"<><><><><><><><><><><><><>\") == True\n\
    \  #   correct_bracketing(\"<><><><><><><><><><><><><><>\") == True\n  #   correct_bracketing(\"\
    <><><><><><><><><><><><><><><>\") == True\n  #   correct_bracketing(\"<><><><><><><><><><><><><><><><>\"\
    ) == True\n  #   correct_bracketing(\"<><><><><><><><><><><><><><><><><>\") ==\
    \ True\n  #   correct_bracketing(\"<><><><><><><><><><><><><><><><><><>\") ==\
    \ True\n  #   correct_bracketing(\"<><><><><><><><><><><><><><><><><><><>\") ==\
    \ True\n  #  ", "  # TODO: implement this method\n  # return true if every opening\
    \ bracket has a corresponding closing bracket.\n  # return false otherwise\n \
    \ #\n  # for example:\n  # correct_bracketing(\"<>\") => true\n  # correct_bracketing(\"\
    <><>\") => true\n  # correct_bracketing(\"<><><>\") => true\n  # correct_bracketing(\"\
    <><><><>\") => true\n  # correct_bracketing(\"<><><><><>\") => true\n  # correct_bracketing(\"\
    <><><><><><>\") => true\n  # correct_bracketing(\"<><><><><><><>\") => true\n\
    \  # correct_bracketing(\"<><><><><><><><>\") => true\n  # correct_bracketing(\"\
    <><><><><><><><><>\") => true\n  # correct_bracketing(\"<><><><><><><><><><>\"\
    ) => true\n  # correct_bracketing(\"<><><><><><><><><><><>\") => true\n  # correct_bracketing(\"\
    <><><><><><><><><><><><>\") => true\n  # correct_bracketing(\"<><><><><><><><><><><><><>\"\
    ) => true\n  # correct_bracketing(\"<><><><><><><><><><><><><><>\") => true\n\
    \  # correct_bracketing(\"<><><><><><><><><><><><><><><>\") => true\n  # correct_bracketing(\"\
    <><><><><><><><><><><><><><><><>\") => true\n  # correct_bracketing(\"<><><><><><><><><><><><><><><><><>\"\
    ) => true\n  # correct_bracketing(\"<><><><><><><><><><><><><><><><><><>\") =>\
    \ true\n  # correct_bracketing(\"<><><><><><><><><><><><><><><><><><><>\") =>\
    \ true\n  # correct_bracketing(\"<><><><><><><><><><><><><><><><><><><><>\") =>\
    \ true\n  #", "  stack = []\n  brackets.each_char do |char|\n    if char == \"\
    <\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  # TODO: implement this method\n  # if brackets.length\
    \ % 2 != 0\n  #   return false\n  # end\n  #\n  # if brackets.count(\"<\") !=\
    \ brackets.count(\">\")\n  #   return false\n  # end\n  #\n  # return true", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.chars.each do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # TODO: return True if every opening bracket has a corresponding closing bracket.\n\
    \  # Hint: use a stack to keep track of opening brackets.\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this method\n\
    \  # return true if brackets is empty\n  return true if brackets.empty?\n  # return\
    \ false if brackets is not empty and the first character is not \"<\"\n  return\
    \ false if brackets[0] != \"<\"\n  # return false if brackets is not empty and\
    \ the last character is not \">\"\n  return false if brackets[-1] != \">\"\n \
    \ # return false if brackets is not empty and the number of \"<\" is not equal\
    \ to the number of \">\"\n  return false if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  # return false if brackets is not empty and the number of \"<\" is not\
    \ equal to the number of \">\"\n  return false if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  # return false if brackets is not empty and the number of \"<\" is not\
    \ equal to the number of \">\"\n  return false if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  # return false if brackets is not empty and the number of \"<\" is not\
    \ equal to the number of \">\"\n  return false if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  # return false if brackets is not empty and the number of \"<\" is not\
    \ equal to the number of \">\"\n  return false if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  # return false if brackets is not empty and the number of \"<\" is not\
    \ equal to the number of \">\"\n  return false if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  # return false if brackets is not empty and the number of \"<\" is not\
    \ equal to the number of \">\"\n  return false if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  # return false if brackets is not empty and the number of \"<\" is not\
    \ equal to the number of \">\"\n  return false if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  # return false if brackets is not empty and the number of \"<\" is not\
    \ equal to the number of \">\"\n  return false if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  # return false if brackets is not empty and the number of \"<\" is not\
    \ equal to the number of \">\"\n  return false if brackets.count(\"<\") !=", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.chars.each do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # YOUR\
    \ CODE HERE\nend", "  stack = []\n  brackets.chars.each do |char|\n    if char\
    \ == \"<\"\n      stack.push char\n    elsif char == \">\"\n      return false\
    \ if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # TODO: implement this method\n  # return true if brackets is empty\n  return\
    \ true if brackets.empty?\n  # return false if brackets is not even\n  return\
    \ false if brackets.length.odd?\n  # return false if brackets starts with \">\"\
    \n  return false if brackets[0] == \">\"\n  # return false if brackets ends with\
    \ \"<\"\n  return false if brackets[-1] == \"<\"\n  # return false if brackets\
    \ contains \"><\"\n  return false if brackets.include?(\"<>\")\n  # return false\
    \ if brackets contains \"><\"\n  return false if brackets.include?(\"<>\")\n \
    \ # return false if brackets contains \"><\"\n  return false if brackets.include?(\"\
    <>\")\n  # return false if brackets contains \"><\"\n  return false if brackets.include?(\"\
    <>\")\n  # return false if brackets contains \"><\"\n  return false if brackets.include?(\"\
    <>\")\n  # return false if brackets contains \"><\"\n  return false if brackets.include?(\"\
    <>\")\n  # return false if brackets contains \"><\"\n  return false if brackets.include?(\"\
    <>\")\n  # return false if brackets contains \"><\"\n  return false if brackets.include?(\"\
    <>\")\n  # return false if brackets contains \"><\"\n  return false if brackets.include?(\"\
    <>\")\n  # return false if brackets contains \"><\"\n  return false if brackets.include?(\"\
    <>\")\n  # return false if brackets contains \"><\"\n  return false if brackets.include?(\"\
    <>\")\n  # return false if brackets contains \"><\"\n  return false if brackets.include?(\"\
    <>\")\n  # return false if brackets contains \"><\"\n  return false if brackets.include?(\"\
    <>\")\n  # return false if brackets contains \"><\"\n  return false if brackets.include?(\"\
    <>\")\n  # return false if brackets contains \"><\"\n  return false if brackets.include?(\"\
    <>\")\n  # return false if brackets contains \"><\"\n  return false if brackets.include?(\"\
    <>\")\n  # return false if brackets contains \"><\"\n  return false if brackets.include?(\"\
    <>\")\n  # return false if brackets contains \"", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this method\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # TODO: return True if every opening bracket has a corresponding closing bracket.\n\
    \  # return False otherwise.\n  # You may not use any other data structures.\n\
    \  # You may not use any loops.\n  # You may not use any recursion.\n  # You may\
    \ not use any regular expressions.\n  # You may not use any conditional statements.\n\
    \  # You may not use any of the following built-in functions:\n  #   - len()\n\
    \  #   - str()\n  #   - int()\n  #   - float()\n  #   - bool()\n  #   - any()\n\
    \  #   - all()\n  #   - enumerate()\n  #   - zip()\n  #   - reversed()\n  #  \
    \ - sorted()\n  #   - sum()\n  #   - max()\n  #   - min()\n  #   - abs()\n  #\
    \   - round()\n  #   - pow()\n  #   - bin()\n  #   - hex()\n  #   - chr()\n  #\
    \   - ord()\n  #   - oct()\n  #   - map()\n  #   - filter()\n  #   - reduce()\n\
    \  #   - any()\n  #   - all()\n  #   - any()\n  #   - all()\n  #   - any()\n \
    \ #   - all()\n  #   - any()\n  #   - all()\n  #   - any()\n  #   - all()\n  #\
    \   - any()\n  #   - all()\n  #   - any()\n  #   - all()\n  #   - any()\n  # \
    \  - all()\n  #   - any()\n  #   - all()\n  #   - any()\n  #   - all()\n  #  \
    \ - any()\n  #   - all()\n  #   - any()\n  #   - all()\n  #   - any()\n  #   -\
    \ all()\n  #   - any()\n  #   - all()\n  #   - any()\n  #   - all()\n  #   - any()\n\
    \  #   - all()\n  #   - any()\n  #   - all()\n", "  # your code here\nend", " \
    \ # TODO: implement this method\n  # return true if every opening bracket has\
    \ a corresponding closing bracket\n  # return false if there is a bracket that\
    \ does not have a corresponding closing bracket\n  # return false if there is\
    \ a closing bracket that does not have a corresponding opening bracket\n  # return\
    \ false if there is a closing bracket that does not have a corresponding opening\
    \ bracket\n  # return false if there is a closing bracket that does not have a\
    \ corresponding opening bracket\n  # return false if there is a closing bracket\
    \ that does not have a corresponding opening bracket\n  # return false if there\
    \ is a closing bracket that does not have a corresponding opening bracket\n  #\
    \ return false if there is a closing bracket that does not have a corresponding\
    \ opening bracket\n  # return false if there is a closing bracket that does not\
    \ have a corresponding opening bracket\n  # return false if there is a closing\
    \ bracket that does not have a corresponding opening bracket\n  # return false\
    \ if there is a closing bracket that does not have a corresponding opening bracket\n\
    \  # return false if there is a closing bracket that does not have a corresponding\
    \ opening bracket\n  # return false if there is a closing bracket that does not\
    \ have a corresponding opening bracket\n  # return false if there is a closing\
    \ bracket that does not have a corresponding opening bracket\n  # return false\
    \ if there is a closing bracket that does not have a corresponding opening bracket\n\
    \  # return false if there is a closing bracket that does not have a corresponding\
    \ opening bracket\n  # return false if there is a closing bracket that does not\
    \ have a corresponding opening bracket\n  # return false if there is a closing\
    \ bracket that does not have a corresponding opening bracket\n  # return false\
    \ if there is a closing bracket that does not have a corresponding opening bracket\n\
    \  # return false if there is a closing bracket that does not have a corresponding\
    \ opening bracket\n  # return false if there is a closing bracket that does not\
    \ have a corresponding opening bracket\n  # return false if there is a closing\
    \ bracket that does not have a corresponding opening bracket\n  # return false\
    \ if there is a closing bracket that does not have a corresponding opening bracket\n\
    \  # return false if there is a closing bracket that does not have a corresponding\
    \ opening bracket\n  # return false if there is a closing bracket that does not\
    \ have a corresponding opening bracket\n  # return false if there is a closing\
    \ bracket that does not have a corresponding opening bracket\n  # return false\
    \ if there is a closing bracket that does not have", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # your code here\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # your\
    \ code here\n  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\
    \n      count += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return\
    \ false if count < 0\n  end\n  count == 0\nend", "  # your code here\n  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # YOUR CODE HERE\n  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  # TODO: return True if every opening bracket\
    \ has a corresponding closing bracket.\n  # return False otherwise.\n  # Hint:\
    \ you can use the \"pop\" method to remove the last element of an array.\n  #\
    \ Hint: you can use the \"push\" method to add an element to the end of an array.\n\
    \  # Hint: you can use the \"empty?\" method to check if an array is empty.\n\
    \  # Hint: you can use the \"size\" method to check the size of an array.\n  #\
    \ Hint: you can use the \"==\" operator to compare two arrays.\n  # Hint: you\
    \ can use the \"==\" operator to compare two strings.\n  # Hint: you can use the\
    \ \"==\" operator to compare two integers.\n  # Hint: you can use the \"==\" operator\
    \ to compare two booleans.\n  # Hint: you can use the \"==\" operator to compare\
    \ two floats.\n  # Hint: you can use the \"==\" operator to compare two symbols.\n\
    \  # Hint: you can use the \"==\" operator to compare two nil values.\n  # Hint:\
    \ you can use the \"==\" operator to compare two arrays of arrays.\n  # Hint:\
    \ you can use the \"==\" operator to compare two arrays of strings.\n  # Hint:\
    \ you can use the \"==\" operator to compare two arrays of integers.\n  # Hint:\
    \ you can use the \"==\" operator to compare two arrays of booleans.\n  # Hint:\
    \ you can use the \"==\" operator to compare two arrays of floats.\n  # Hint:\
    \ you can use the \"==\" operator to compare two arrays of symbols.\n  # Hint:\
    \ you can use the \"==\" operator to compare two arrays of nil values.\n  # Hint:\
    \ you can use the \"==\" operator to compare two hashes.\n  # Hint: you can use\
    \ the \"==\" operator to compare two hashes of arrays.\n  # Hint: you can use\
    \ the \"==\" operator to compare two hashes of strings.\n  # Hint: you can use\
    \ the \"==\" operator to compare two hashes of integers.\n  # Hint: you can use\
    \ the \"==\" operator to compare two hashes of booleans.\n  # H", "  stack = []\n\
    \  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif\
    \ c == \">\"\n      if stack.empty?\n        return false\n      else\n      \
    \  stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", "  # your\
    \ code here\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.chars.each do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |c|\n    if c ==\
    \ \"<\"\n      stack.push(c)\n    elsif c == \">\"\n      if stack.empty?\n  \
    \      return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  # TODO: return True if brackets is correctly\
    \ bracketed, False otherwise\n  stack = []\n  brackets.each_char do |char|\n \
    \   if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if\
    \ stack.empty?\n        return false\n      else\n        stack.pop\n      end\n\
    \    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.chars.each\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # TODO: return True if every\
    \ opening bracket has a corresponding closing bracket\n  # TODO: return False\
    \ otherwise\n  # TODO: return False if brackets is empty\n  # TODO: return False\
    \ if brackets is not a string\n  # TODO: return False if brackets contains characters\
    \ other than \"<\" and \">\"\n  # TODO: return False if brackets contains \"<\"\
    \ and \">\" in the wrong order\n  # TODO: return False if brackets contains the\
    \ same bracket twice in a row\n  # TODO: return False if brackets contains an\
    \ opening bracket without a closing bracket\n  # TODO: return False if brackets\
    \ contains a closing bracket without an opening bracket\n  # TODO: return False\
    \ if brackets contains more closing brackets than opening brackets\n  # TODO:\
    \ return False if brackets contains more opening brackets than closing brackets\n\
    \  # TODO: return False if brackets contains more than one opening bracket without\
    \ a closing bracket\n  # TODO: return False if brackets contains more than one\
    \ closing bracket without an opening bracket\n  # TODO: return False if brackets\
    \ contains more than one opening bracket without a closing bracket\n  # TODO:\
    \ return False if brackets contains more than one closing bracket without an opening\
    \ bracket\n  # TODO: return False if brackets contains more than one opening bracket\
    \ without a closing bracket\n  # TODO: return False if brackets contains more\
    \ than one closing bracket without an opening bracket\n  # TODO: return False\
    \ if brackets contains more than one opening bracket without a closing bracket\n\
    \  # TODO: return False if brackets contains more than one closing bracket without\
    \ an opening bracket\n  # TODO: return False if brackets contains more than one\
    \ opening bracket without a closing bracket\n  # TODO: return False if brackets\
    \ contains more than one closing bracket without an opening bracket\n  # TODO:\
    \ return False if brackets contains more than one opening bracket without a closing\
    \ bracket\n  # TODO: return False if brackets contains more than one closing bracket\
    \ without an opening bracket\n  # TODO: return False if brackets contains more\
    \ than one opening bracket without a closing bracket\n  # TODO: return False if\
    \ brackets contains more than one closing bracket without an opening bracket\n\
    \  # TODO: return False if brackets contains more than one opening bracket without\
    \ a closing bracket\n  # TODO: return False if brackets contains more than one\
    \ closing bracket without an opening bracket\n  # TODO: return False if brackets\
    \ contains more than", "  # TODO: implement this method\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # YOUR CODE HERE\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # YOUR\
    \ CODE HERE\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\
    \n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n   \
    \     return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # YOUR CODE HERE\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # TODO: return True if every\
    \ opening bracket has a corresponding closing bracket.\n  # return False otherwise.\n\
    \  #\n  # For example:\n  # correct_bracketing(\"<>\") => True\n  # correct_bracketing(\"\
    <><>\") => True\n  # correct_bracketing(\"<><><>\") => True\n  # correct_bracketing(\"\
    <><><><>\") => True\n  # correct_bracketing(\"<><><><><>\") => True\n  # correct_bracketing(\"\
    <><><><><><>\") => True\n  # correct_bracketing(\"<><><><><><><>\") => True\n\
    \  # correct_bracketing(\"<><><><><><><><>\") => True\n  # correct_bracketing(\"\
    <><><><><><><><><>\") => True\n  # correct_bracketing(\"<><><><><><><><><><>\"\
    ) => True\n  # correct_bracketing(\"<><><><><><><><><><><>\") => True\n  # correct_bracketing(\"\
    <><><><><><><><><><><><>\") => True\n  # correct_bracketing(\"<><><><><><><><><><><><><>\"\
    ) => True\n  # correct_bracketing(\"<><><><><><><><><><><><><><>\") => True\n\
    \  # correct_bracketing(\"<><><><><><><><><><><><><><><>\") => True\n  # correct_bracketing(\"\
    <><><><><><><><><><><><><><><><>\") => True\n  # correct_bracketing(\"<><><><><><><><><><><><><><><><><>\"\
    ) => True\n  # correct_bracketing(\"<><><><><><><><><><><><><><><><><><>\") =>\
    \ True\n  # correct_bracketing(\"<><><><><><><><><><><><><><><><><><><>\") =>\
    \ True\n  # correct_bracketing(\"<><><><><><><><><><><><><><><><><><><><>\") =>\
    \ True\n  # correct_bracketing", "  stack = []\n  brackets.each_char do |c|\n\
    \    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  # TODO: implement this method\n  # return true\
    \ if brackets is empty\n  if brackets.length == 0\n    return true\n  end", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # YOUR\
    \ CODE HERE\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\
    \n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n   \
    \     return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  # your code here\nend", "  # TODO: implement\
    \ this method\n  stack = []\n  brackets.each_char do |char|\n    if char == \"\
    <\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this method\n\
    \  # return true if brackets is empty\n  return true if brackets.empty?\n  # return\
    \ false if brackets is not empty and does not start with \"<\"\n  return false\
    \ if brackets[0] != \"<\"\n  # return false if brackets is not empty and does\
    \ not end with \">\"\n  return false if brackets[-1] != \">\"\n  # return false\
    \ if brackets is not empty and the number of \"<\" is not equal to the number\
    \ of \">\"\n  return false if brackets.count(\"<\") != brackets.count(\">\")\n\
    \  # return false if brackets is not empty and the number of \">\" is not equal\
    \ to the number of \"<\"\n  return false if brackets.count(\">\") != brackets.count(\"\
    <\")\n  # return false if brackets is not empty and the number of \">\" is not\
    \ equal to the number of \"<\"\n  return false if brackets.count(\">\") != brackets.count(\"\
    <\")\n  # return false if brackets is not empty and the number of \">\" is not\
    \ equal to the number of \"<\"\n  return false if brackets.count(\">\") != brackets.count(\"\
    <\")\n  # return false if brackets is not empty and the number of \">\" is not\
    \ equal to the number of \"<\"\n  return false if brackets.count(\">\") != brackets.count(\"\
    <\")\n  # return false if brackets is not empty and the number of \">\" is not\
    \ equal to the number of \"<\"\n  return false if brackets.count(\">\") != brackets.count(\"\
    <\")\n  # return false if brackets is not empty and the number of \">\" is not\
    \ equal to the number of \"<\"\n  return false if brackets.count(\">\") != brackets.count(\"\
    <\")\n  # return false if brackets is not empty and the number of \">\" is not\
    \ equal to the number of \"<\"\n  return false if brackets.count(\">\") != brackets.count(\"\
    <\")\n  # return false if brackets is not empty and the number of \">\" is not\
    \ equal to the number of \"<\"\n  return false if brackets.count(\">\") != brackets.count(\"\
    <\")\n  # return false if brackets is not empty and the number of \">\" is not\
    \ equal to the number of \"<\"\n  return false if brackets.count(\">\") != brackets.",
  "  stack = []\n  brackets.chars.each do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    else\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: implement\
    \ this method\n  # return true if every opening bracket has a corresponding closing\
    \ bracket\n  # return false if there is a bracket without a corresponding closing\
    \ bracket\n  # return false if there is a closing bracket without a corresponding\
    \ opening bracket\n  # return false if there is a closing bracket before an opening\
    \ bracket\n  # return false if there is a bracket that is not \"<\" or \">\"\n\
    \  # return false if brackets is not a string\n  # return false if brackets is\
    \ an empty string\n  # return false if brackets is nil\n  # return false if brackets\
    \ is not a string\n  # return false if brackets is an empty string\n  # return\
    \ false if brackets is nil\n  # return false if brackets is not a string\n  #\
    \ return false if brackets is an empty string\n  # return false if brackets is\
    \ nil\n  # return false if brackets is not a string\n  # return false if brackets\
    \ is an empty string\n  # return false if brackets is nil\n  # return false if\
    \ brackets is not a string\n  # return false if brackets is an empty string\n\
    \  # return false if brackets is nil\n  # return false if brackets is not a string\n\
    \  # return false if brackets is an empty string\n  # return false if brackets\
    \ is nil\n  # return false if brackets is not a string\n  # return false if brackets\
    \ is an empty string\n  # return false if brackets is nil\n  # return false if\
    \ brackets is not a string\n  # return false if brackets is an empty string\n\
    \  # return false if brackets is nil\n  # return false if brackets is not a string\n\
    \  # return false if brackets is an empty string\n  # return false if brackets\
    \ is nil\n  # return false if brackets is not a string\n  # return false if brackets\
    \ is an empty string\n  # return false if brackets is nil\n  # return false if\
    \ brackets is not a string\n  # return false if brackets is an empty string\n\
    \  # return false if brackets is nil\n  # return false if brackets is not a string\n\
    \  # return false if brackets is an empty string\n  # return false if brackets\
    \ is nil\n  # return false if brackets is not a string\n  # return false if brackets\
    \ is an empty string\n  # return false if brackets is nil\n  # return false if\
    \ brackets is not a string\n  # return false if brackets is an empty string",
  "  stack = []\n  brackets.chars.each do |bracket|\n    if bracket == \"<\"\n   \
    \   stack.push(bracket)\n    else\n      return false if stack.empty?\n      stack.pop\n\
    \    end\n  end\n  stack.empty?\nend", "  # TODO: implement this method\n  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # your\
    \ code here\nend", "  # TODO: return True if brackets is correctly bracketed,\
    \ False otherwise\n  stack = []\n  brackets.each_char do |char|\n    if char ==\
    \ \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.chars.each do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  # YOUR CODE HERE\nend", "  # your\
    \ code here\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  # TODO: implement this method\n  stack = []\n\
    \  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # TODO:\
    \ implement this function\n  # stack = []\n  # brackets.each_char do |char|\n\
    \  #   if char == \"<\"\n  #     stack << char\n  #   elsif char == \">\"\n  #\
    \     if stack.empty?\n  #       return false\n  #     else\n  #       stack.pop\n\
    \  #     end\n  #   end\n  # end\n  # stack.empty?", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this function\n\
    \  # check if the string is empty\n  if brackets.empty?\n    return true\n  end",
  "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.chars.each do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # TODO: implement me\nend", "  # YOUR CODE HERE\nend", "  count = 0\n  brackets.each_char\
    \ do |char|\n    count += 1 if char == '<'\n    count -= 1 if char == '>'\n  \
    \  return false if count < 0\n  end\n  count == 0\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: implement\
    \ this method\n  # create a stack\n  stack = []\n  # iterate through the string\n\
    \  brackets.each_char do |char|\n    # if char is <, push it to the stack\n  \
    \  if char == \"<\"\n      stack.push(char)\n    # if char is >, pop the stack\n\
    \    elsif char == \">\"\n      stack.pop\n    end\n  end\n  # if stack is empty,\
    \ return true\n  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: return True if\
    \ brackets is correctly bracketed, False otherwise\n  # Hint: use a stack\n  stack\
    \ = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # TODO: implement this function\n  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: implement this\
    \ method\nend", "  # TODO: implement this method\n  # return true if brackets\
    \ is an empty string\n  if brackets.empty?\n    return true\n  end", "  # YOUR\
    \ CODE HERE\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\
    \n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n   \
    \     return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement this method\nend", "  return false\
    \ if brackets.length.odd?\n  stack = []\n  brackets.each_char do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    else\n      return false if stack.empty?\n\
    \      stack.pop\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.chars.each\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |c|\n    if c == \"<\"\n      stack.push(c)\n    elsif c == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  # your code here\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # YOUR CODE HERE\nend", "  stack = []\n  brackets.each_char do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this function\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  # your code here\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  # your code here\n  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.chars.each\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this method\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # your\
    \ code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
