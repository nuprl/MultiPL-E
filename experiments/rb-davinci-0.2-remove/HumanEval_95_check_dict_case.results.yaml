language: rb
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.downcase != key && key.upcase != key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc1klzm3s\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc1klzm3s.rb:21:in `test_check_dict_case'\n\
    \     18:   def test_check_dict_case\n     19:     candidate = method(:check_dict_case)\n\
    \     20:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     22:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     23:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     24:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007626668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.12 tests/s, 262.24 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  return false if dict.empty?\n  dict.keys.all? { |key| key.is_a?(String) &&\
    \ key.upcase == key } || dict.keys.all? { |key| key.is_a?(String) && key.downcase\
    \ == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp10agcpv7\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp10agcpv7.rb:15:in `test_check_dict_case'\n\
    \     12:     candidate = method(:check_dict_case)\n     13:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     14:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 15:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     16:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     17:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     18:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00865331 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.56 tests/s, 346.69 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower_case = true\n  upper_case\
    \ = true\n  dict.each do |key, value|\n    if key.downcase != key\n      lower_case\
    \ = false\n    end\n    if key.upcase != key\n      upper_case = false\n    end\n\
    \  end\n  return lower_case || upper_case\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxje_ume2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxje_ume2.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007984101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.25 tests/s, 375.75 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |key, value|\n    if key != key.downcase\n      lower = false\n\
    \    end\n    if key != key.upcase\n      upper = false\n    end\n  end\n  if\
    \ lower || upper\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjxecafrf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpjxecafrf.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.011258679 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.82 tests/s, 266.46 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |k, v|\n    if k.downcase != k\n      lower = false\n    end\n\
    \    if k.upcase != k\n      upper = false\n    end\n  end\n  return lower ||\
    \ upper\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6gekk9us\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp6gekk9us.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007772502 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.66 tests/s, 385.98 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key || key.upcase == key\n     \
    \   return true\n      else\n        return false\n      end\n    else\n     \
    \ return false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_nn80bsn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_nn80bsn.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.01205813 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.93 tests/s, 165.86 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower_case = true\n  upper_case\
    \ = true\n  dict.each do |key, value|\n    if key.downcase != key\n      lower_case\
    \ = false\n    end\n    if key.upcase != key\n      upper_case = false\n    end\n\
    \  end\n  if lower_case || upper_case\n    return true\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqp4y9zo5\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqp4y9zo5.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.014987895 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.72 tests/s, 200.16 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower_case = true\n  upper_case\
    \ = true\n  dict.each do |key, value|\n    if key.downcase != key\n      lower_case\
    \ = false\n    end\n    if key.upcase != key\n      upper_case = false\n    end\n\
    \  end\n  if lower_case || upper_case\n    return true\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqp4y9zo5\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqp4y9zo5.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.014987895 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.72 tests/s, 200.16 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  all_lower = true\n  all_upper =\
    \ true\n  dict.each do |key, value|\n    if key.downcase != key\n      all_lower\
    \ = false\n    end\n    if key.upcase != key\n      all_upper = false\n    end\n\
    \  end\n  return all_lower || all_upper\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg9ws5ad6\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpg9ws5ad6.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.010141274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.61 tests/s, 295.82 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.upcase == key\n        return true\n      elsif\
    \ key.downcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpok5u_9tw\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpok5u_9tw.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.010608227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.27 tests/s, 188.53 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a? String\n      if key.downcase == key\n        return true\n      elsif\
    \ key.upcase == key\n        return true\n      else\n        return false\n \
    \     end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplps7iosu\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmplps7iosu.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009917951 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.83 tests/s, 201.65 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.downcase != key && key.upcase != key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc1klzm3s\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc1klzm3s.rb:21:in `test_check_dict_case'\n\
    \     18:   def test_check_dict_case\n     19:     candidate = method(:check_dict_case)\n\
    \     20:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     22:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     23:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     24:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007626668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.12 tests/s, 262.24 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.class == String\n      if key.downcase == key\n        return true\n   \
    \   elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpw54aupvi\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpw54aupvi.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007689912 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.04 tests/s, 260.08 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a? String\n      if key.upcase == key\n        return true\n      elsif\
    \ key.downcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8bwar4c\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpn8bwar4c.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007532321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.76 tests/s, 265.52 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower_case = true\n  upper_case\
    \ = true\n  dict.each do |key, value|\n    if key.downcase != key\n      lower_case\
    \ = false\n    end\n    if key.upcase != key\n      upper_case = false\n    end\n\
    \  end\n  if lower_case || upper_case\n    return true\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqp4y9zo5\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqp4y9zo5.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.014987895 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.72 tests/s, 200.16 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  return false if dict.empty?\n  dict.keys.all? { |key| key == key.downcase }\
    \ || dict.keys.all? { |key| key == key.upcase }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7nd5ajga\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7nd5ajga.rb:15:in `test_check_dict_case'\n\
    \     12:     candidate = method(:check_dict_case)\n     13:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     14:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 15:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     16:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     17:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     18:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.018067756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.35 tests/s, 166.04 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.upcase == key\n        return true\n      elsif\
    \ key.downcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpok5u_9tw\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpok5u_9tw.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.010608227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.27 tests/s, 188.53 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key } ||\n  dict.keys.all?\
    \ { |key| key.is_a?(String) && key.upcase == key }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvia30krr\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvia30krr.rb:15:in `test_check_dict_case'\n\
    \     12:     candidate = method(:check_dict_case)\n     13:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     14:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 15:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     16:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     17:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     18:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.024593005 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    40.66 tests/s, 121.99 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key == key.upcase\n        return true\n      elsif\
    \ key == key.downcase\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwtee9d1x\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpwtee9d1x.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.010350373 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.61 tests/s, 193.23 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|k| k.is_a? String}\n\
    \    return dict.keys.all? {|k| k.downcase == k} || dict.keys.all? {|k| k.upcase\
    \ == k}\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp8_9xxhil\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp8_9xxhil.rb:21:in `test_check_dict_case'\n\
    \     18:     candidate = method(:check_dict_case)\n     19:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     24:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.012377317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.79 tests/s, 242.38 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  dict.each do |key, value|\n    if key.downcase == key\n      return false if\
    \ value.upcase == value\n    elsif key.upcase == key\n      return false if value.downcase\
    \ == value\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy2eba371\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpy2eba371.rb:21:in `test_check_dict_case'\n\
    \     18:     candidate = method(:check_dict_case)\n     19:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     24:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.010946528 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.35 tests/s, 274.06 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  dict.each do |key, value|\n    if key.is_a?(String)\n      if key == key.downcase\
    \ || key == key.upcase\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn_c6_h0n\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpn_c6_h0n.rb:23:in `test_check_dict_case'\n\
    \     20:   def test_check_dict_case\n     21:     candidate = method(:check_dict_case)\n\
    \     22:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     24:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     25:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007492424 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.47 tests/s, 266.94 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower_case = true\n  upper_case\
    \ = true\n  dict.each do |key, value|\n    if key.downcase != key\n      lower_case\
    \ = false\n    end\n    if key.upcase != key\n      upper_case = false\n    end\n\
    \  end\n  return lower_case || upper_case\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxje_ume2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxje_ume2.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007984101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.25 tests/s, 375.75 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.downcase == key\n      return false if dict.keys.any? { |key| key.upcase\
    \ == key }\n    else\n      return false if dict.keys.any? { |key| key.downcase\
    \ == key }\n    end\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpifsit583\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpifsit583.rb:25:in `test_check_dict_case'\n\
    \     22:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     23:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     24:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 25:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     27:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     28:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007938929 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.96 tests/s, 503.85 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  return false if dict.empty?\n  dict.keys.all? { |key| key == key.downcase }\
    \ || dict.keys.all? { |key| key == key.upcase }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7nd5ajga\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7nd5ajga.rb:15:in `test_check_dict_case'\n\
    \     12:     candidate = method(:check_dict_case)\n     13:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     14:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 15:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     16:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     17:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     18:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.018067756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.35 tests/s, 166.04 assertions/s\n"
  timestamp: 1659977664
- exit_code: 0
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.downcase == key\n      return false if dict.each_key.any? { |k| k.upcase\
    \ == k }\n    elsif key.upcase == key\n      return false if dict.each_key.any?\
    \ { |k| k.downcase == k }\n    else\n      return false\n    end\n  end\n  return\
    \ true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5mvz2wjw

    Started

    .

    Finished in 0.000450662 seconds.

    -------------------------------------------------------------------------------

    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2218.96 tests/s, 15532.71 assertions/s

    '
  stdout: ''
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  return false if dict.empty?\n  dict.keys.all? { |key| key.is_a?(String) &&\
    \ key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase\
    \ == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpws5gyes9\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpws5gyes9.rb:16:in `test_check_dict_case'\n\
    \     13:     candidate = method(:check_dict_case)\n     14:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     15:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 16:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     17:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     18:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     19:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008145605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.77 tests/s, 368.30 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return false\n    \
    \  end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmppnhro68u\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppnhro68u.rb:22:in `test_check_dict_case'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_check_dict_case\n\
    \     21:     candidate = method(:check_dict_case)\n  => 22:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     23:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     24:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.008534228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.18 tests/s, 117.18 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key.is_a?\
    \ String}\n    if dict.keys.all? {|key| key.downcase == key}\n      return true\n\
    \    elsif dict.keys.all? {|key| key.upcase == key}\n      return true\n    else\n\
    \      return false\n    end\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpihjwgbyc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpihjwgbyc.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006729361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.60 tests/s, 445.81 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |key, value|\n    if key.downcase != key\n      lower = false\n\
    \    end\n    if key.upcase != key\n      upper = false\n    end\n  end\n  return\
    \ lower || upper\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_1tq_3g1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_1tq_3g1.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006537918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.95 tests/s, 458.86 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  dict.each do |key, value|\n    if key.is_a?(String)\n      if key.downcase\
    \ == key\n        return true\n      elsif key.upcase == key\n        return true\n\
    \      else\n        return false\n      end\n    else\n      return false\n \
    \   end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqxji9qsf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqxji9qsf.rb:25:in `test_check_dict_case'\n\
    \     22:   def test_check_dict_case\n     23:     candidate = method(:check_dict_case)\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006733106 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.52 tests/s, 297.04 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key.is_a?\
    \ String}\n    if dict.keys.all? {|key| key.upcase == key}\n      return true\n\
    \    elsif dict.keys.all? {|key| key.downcase == key}\n      return true\n   \
    \ else\n      return false\n    end\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpiw394fr8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpiw394fr8.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006771097 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.69 tests/s, 443.06 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  keys = dict.keys\n  if keys.all?\
    \ { |key| key.is_a? String }\n    if keys.all? { |key| key == key.downcase }\n\
    \      return true\n    elsif keys.all? { |key| key == key.upcase }\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpubu_qdrx\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpubu_qdrx.rb:28:in `test_check_dict_case'\n\
    \     25:     candidate = method(:check_dict_case)\n     26:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     31:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006479204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.34 tests/s, 463.02 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |k, v|\n    if !k.is_a?(String)\n\
    \      return false\n    end\n  end\n  if dict.keys.all? { |k| k == k.downcase\
    \ }\n    return true\n  elsif dict.keys.all? { |k| k == k.upcase }\n    return\
    \ true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpuq8uqxta\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpuq8uqxta.rb:28:in `test_check_dict_case'\n\
    \     25:     candidate = method(:check_dict_case)\n     26:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     31:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006681593 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.66 tests/s, 448.99 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key.is_a?\
    \ String}\n    return dict.keys.all? {|key| key.upcase == key} || dict.keys.all?\
    \ {|key| key.downcase == key}\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp612lj3rk\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp612lj3rk.rb:21:in `test_check_dict_case'\n\
    \     18:     candidate = method(:check_dict_case)\n     19:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     24:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006517272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.44 tests/s, 460.32 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |k, v|\n    lower = false if k != k.downcase\n    upper = false\
    \ if k != k.upcase\n  end\n  return lower || upper\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzzt36_l_\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpzzt36_l_.rb:23:in `test_check_dict_case'\n\
    \     20:     candidate = method(:check_dict_case)\n     21:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     25:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     26:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009438145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.95 tests/s, 317.86 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key.is_a?\
    \ String}\n    return dict.keys.all? {|key| key.upcase == key} || dict.keys.all?\
    \ {|key| key.downcase == key}\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp612lj3rk\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp612lj3rk.rb:21:in `test_check_dict_case'\n\
    \     18:     candidate = method(:check_dict_case)\n     19:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     24:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006517272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.44 tests/s, 460.32 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |key, value|\n    if key.downcase != key\n      lower = false\n\
    \    end\n    if key.upcase != key\n      upper = false\n    end\n  end\n  return\
    \ lower || upper\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_1tq_3g1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_1tq_3g1.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006537918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.95 tests/s, 458.86 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |key, value|\n    if key.downcase != key\n      lower = false\n\
    \    end\n    if key.upcase != key\n      upper = false\n    end\n  end\n  if\
    \ lower || upper\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp72d45f6p\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp72d45f6p.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006766888 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.78 tests/s, 443.34 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a? String\n      if key.downcase == key\n        return true\n      elsif\
    \ key.upcase == key\n        return true\n      else\n        return false\n \
    \     end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplps7iosu\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmplps7iosu.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009917951 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.83 tests/s, 201.65 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a? String\n      if key.downcase == key\n        return true\n      elsif\
    \ key.upcase == key\n        return true\n      else\n        return false\n \
    \     end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplps7iosu\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmplps7iosu.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009917951 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.83 tests/s, 201.65 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower_case = true\n  upper_case\
    \ = true\n  dict.each do |key, value|\n    if key.downcase != key\n      lower_case\
    \ = false\n    end\n    if key.upcase != key\n      upper_case = false\n    end\n\
    \  end\n  return lower_case || upper_case\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxje_ume2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxje_ume2.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007984101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.25 tests/s, 375.75 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each_key do |key|\n    if key.is_a?(String)\n\
    \      if key.downcase == key || key.upcase == key\n        return true\n    \
    \  else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpel172qni\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpel172qni.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006903699 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.85 tests/s, 289.70 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a? String\n      if key.downcase == key\n        return true\n      elsif\
    \ key.upcase == key\n        return true\n      else\n        return false\n \
    \     end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplps7iosu\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmplps7iosu.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009917951 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.83 tests/s, 201.65 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key.is_a?\
    \ String and key.upcase == key}\n    return true\n  elsif dict.keys.all? {|key|\
    \ key.is_a? String and key.downcase == key}\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpft4fw0pe\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpft4fw0pe.rb:23:in `test_check_dict_case'\n\
    \     20:     candidate = method(:check_dict_case)\n     21:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     25:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     26:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008586224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.47 tests/s, 349.40 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |k, v|\n    if k.class\
    \ != String\n      return false\n    end\n  end\n  dict.each do |k, v|\n    if\
    \ k.downcase != k\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpar4_lk1t\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpar4_lk1t.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006747924 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.19 tests/s, 444.58 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  dict.each do |key, value|\n    if key.is_a?(String)\n      if key == key.downcase\n\
    \        return true\n      elsif key == key.upcase\n        return true\n   \
    \   else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphgz9h0rr\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphgz9h0rr.rb:25:in `test_check_dict_case'\n\
    \     22:   def test_check_dict_case\n     23:     candidate = method(:check_dict_case)\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006555826 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.54 tests/s, 305.07 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |k, v|\n    if k.downcase\
    \ == k\n      return false if k.upcase == k\n    else\n      return false if k.downcase\
    \ == k\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl_hyar74\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpl_hyar74.rb:23:in `test_check_dict_case'\n\
    \     20:   def test_check_dict_case\n     21:     candidate = method(:check_dict_case)\n\
    \     22:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     24:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     25:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006310944 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.45 tests/s, 316.91 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key.is_a?\
    \ String}\n    if dict.keys.all? {|key| key.downcase == key}\n      return true\n\
    \    elsif dict.keys.all? {|key| key.upcase == key}\n      return true\n    else\n\
    \      return false\n    end\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpihjwgbyc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpihjwgbyc.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006729361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.60 tests/s, 445.81 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key ==\
    \ key.downcase}\n    return true\n  elsif dict.keys.all? {|key| key == key.upcase}\n\
    \    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl7411c15\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpl7411c15.rb:23:in `test_check_dict_case'\n\
    \     20:     candidate = method(:check_dict_case)\n     21:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     25:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     26:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006458969 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.82 tests/s, 464.47 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key.is_a?\
    \ String}\n    return dict.keys.all? {|key| key.downcase == key} || dict.keys.all?\
    \ {|key| key.upcase == key}\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzfcunouc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpzfcunouc.rb:21:in `test_check_dict_case'\n\
    \     18:     candidate = method(:check_dict_case)\n     19:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     24:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006800344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.05 tests/s, 441.15 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key == key.downcase\n        return true\n     \
    \ elsif key == key.upcase\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsx9gapck\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpsx9gapck.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006502316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.79 tests/s, 307.58 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  dict.keys.all? { |key| key == key.downcase } || dict.keys.all? { |key| key\
    \ == key.upcase }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmppda04zbm\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppda04zbm.rb:14:in `test_check_dict_case'\n\
    \     11:     candidate = method(:check_dict_case)\n     12:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     13:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 14:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     15:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     16:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     17:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006438441 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.32 tests/s, 465.95 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpr2t_8dwy\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpr2t_8dwy.rb:12:in `test_check_dict_case'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_check_dict_case\n\
    \     11:     candidate = method(:check_dict_case)\n  => 12:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     13:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     14:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     15:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00619779 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.35 tests/s, 161.35 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  dict.keys.all? { |key| key == key.downcase } || dict.keys.all? { |key| key\
    \ == key.upcase }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmppda04zbm\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppda04zbm.rb:14:in `test_check_dict_case'\n\
    \     11:     candidate = method(:check_dict_case)\n     12:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     13:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 14:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     15:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     16:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     17:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006438441 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.32 tests/s, 465.95 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key || key.upcase == key\n     \
    \   return true\n      else\n        return false\n      end\n    else\n     \
    \ return false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_nn80bsn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_nn80bsn.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.01205813 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.93 tests/s, 165.86 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key.is_a?\
    \ String and key.downcase == key}\n    return true\n  elsif dict.keys.all? {|key|\
    \ key.is_a? String and key.upcase == key}\n    return true\n  else\n    return\
    \ false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpdtblmtnw\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpdtblmtnw.rb:23:in `test_check_dict_case'\n\
    \     20:     candidate = method(:check_dict_case)\n     21:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     25:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     26:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006613951 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.20 tests/s, 453.59 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key.is_a?\
    \ String}\n    if dict.keys.all? {|key| key.downcase == key}\n      return true\n\
    \    elsif dict.keys.all? {|key| key.upcase == key}\n      return true\n    else\n\
    \      return false\n    end\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpihjwgbyc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpihjwgbyc.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006729361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.60 tests/s, 445.81 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower_case = true\n  upper_case\
    \ = true\n  dict.each do |key, value|\n    lower_case = false if key.upcase ==\
    \ key\n    upper_case = false if key.downcase == key\n  end\n  return lower_case\
    \ || upper_case\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4tvriqh8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp4tvriqh8.rb:24:in `test_check_dict_case'\n\
    \     21:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     22:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     23:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 24:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     25:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     26:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     27:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006472198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.51 tests/s, 618.03 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower_case = true\n  upper_case\
    \ = true\n  dict.each do |key, value|\n    if key.downcase != key\n      lower_case\
    \ = false\n    end\n    if key.upcase != key\n      upper_case = false\n    end\n\
    \  end\n  return lower_case || upper_case\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxje_ume2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxje_ume2.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007984101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.25 tests/s, 375.75 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.class == String\n      if key.upcase == key\n        return true\n     \
    \ elsif key.downcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvk5tce_4\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvk5tce_4.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006390447 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.48 tests/s, 312.97 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  dict.all? { |k,v| k.to_s.downcase == k.to_s } || dict.all? { |k,v| k.to_s.upcase\
    \ == k.to_s }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpeaamtua7\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpeaamtua7.rb:14:in `test_check_dict_case'\n\
    \     11:     candidate = method(:check_dict_case)\n     12:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     13:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 14:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     15:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     16:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     17:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006287623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.04 tests/s, 477.13 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  # return false if dict is empty\n  return false if dict.empty?\n  # get the\
    \ first key\n  first_key = dict.keys[0]\n  # check if the first key is a string\n\
    \  if first_key.class == String\n    # check if the first key is lowercase\n \
    \   if first_key == first_key.downcase\n      # check if all keys are lowercase\n\
    \      dict.keys.all? { |key| key == key.downcase }\n    else\n      # check if\
    \ all keys are uppercase\n      dict.keys.all? { |key| key == key.upcase }\n \
    \   end\n  else\n    # return false if the first key is not a string\n    false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp046g3uq3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp046g3uq3.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007221962 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.47 tests/s, 415.40 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  dict.keys.all? { |key| key == key.downcase } || dict.keys.all? { |key| key\
    \ == key.upcase }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmppda04zbm\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppda04zbm.rb:14:in `test_check_dict_case'\n\
    \     11:     candidate = method(:check_dict_case)\n     12:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     13:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 14:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     15:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     16:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     17:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006438441 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.32 tests/s, 465.95 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  else\n    dict.each do |key, value|\n \
    \     if key.is_a?(String)\n        if key.downcase == key\n          return true\n\
    \        elsif key.upcase == key\n          return true\n        else\n      \
    \    return false\n        end\n      else\n        return false\n      end\n\
    \    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0pulg8b8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp0pulg8b8.rb:29:in `test_check_dict_case'\n\
    \     26:   def test_check_dict_case\n     27:     candidate = method(:check_dict_case)\n\
    \     28:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 29:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     30:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     31:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     32:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006604444 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.41 tests/s, 302.83 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  return false if dict.empty?\n  dict.keys.all? { |key| key.is_a?(String) &&\
    \ key.upcase == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase\
    \ == key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpws5gyes9\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpws5gyes9.rb:16:in `test_check_dict_case'\n\
    \     13:     candidate = method(:check_dict_case)\n     14:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     15:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 16:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     17:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     18:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     19:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008145605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.77 tests/s, 368.30 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.downcase != key && key.upcase != key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc1klzm3s\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc1klzm3s.rb:21:in `test_check_dict_case'\n\
    \     18:   def test_check_dict_case\n     19:     candidate = method(:check_dict_case)\n\
    \     20:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     22:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     23:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     24:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007626668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.12 tests/s, 262.24 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a? String\n      if key.downcase == key\n        return false\n     \
    \ end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy42j9maq\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpy42j9maq.rb:22:in `test_check_dict_case'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_check_dict_case\n\
    \     21:     candidate = method(:check_dict_case)\n  => 22:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     23:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     24:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.006649082 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.40 tests/s, 150.40 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.upcase == key\n        return true\n      else\n\
    \        return false\n      end\n    else\n      return false\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfi96ibel\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpfi96ibel.rb:25:in `test_check_dict_case'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_check_dict_case\n\
    \     24:     candidate = method(:check_dict_case)\n  => 25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.006351298 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.45 tests/s, 157.45 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.downcase != key && key.upcase != key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc1klzm3s\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc1klzm3s.rb:21:in `test_check_dict_case'\n\
    \     18:   def test_check_dict_case\n     19:     candidate = method(:check_dict_case)\n\
    \     20:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     22:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     23:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     24:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007626668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.12 tests/s, 262.24 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key ==\
    \ key.downcase}\n    return true\n  elsif dict.keys.all? {|key| key == key.upcase}\n\
    \    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl7411c15\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpl7411c15.rb:23:in `test_check_dict_case'\n\
    \     20:     candidate = method(:check_dict_case)\n     21:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     25:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     26:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006458969 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.82 tests/s, 464.47 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.downcase != key && key.upcase != key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc1klzm3s\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc1klzm3s.rb:21:in `test_check_dict_case'\n\
    \     18:   def test_check_dict_case\n     19:     candidate = method(:check_dict_case)\n\
    \     20:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     22:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     23:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     24:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007626668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.12 tests/s, 262.24 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  return false if dict.empty?\n  dict.each do |k, v|\n    return false if k.class\
    \ != String\n  end\n  return true if dict.keys.all? { |k| k == k.downcase }\n\
    \  return true if dict.keys.all? { |k| k == k.upcase }\n  false\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7bv_5sgo\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7bv_5sgo.rb:20:in `test_check_dict_case'\n\
    \     17:     candidate = method(:check_dict_case)\n     18:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     19:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     22:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     23:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009207578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.61 tests/s, 325.82 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |key, value|\n    if key.downcase != key\n      lower = false\n\
    \    end\n    if key.upcase != key\n      upper = false\n    end\n  end\n  if\
    \ lower || upper\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp72d45f6p\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp72d45f6p.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006766888 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.78 tests/s, 443.34 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |k, v|\n    if k.is_a?(String)\n      lower = false if k != k.downcase\n\
    \      upper = false if k != k.upcase\n    else\n      return false\n    end\n\
    \  end\n  return true if lower || upper\n  return false\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnfjfftrc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpnfjfftrc.rb:28:in `test_check_dict_case'\n\
    \     25:     candidate = method(:check_dict_case)\n     26:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     29:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     31:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006928575 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.33 tests/s, 432.99 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  dict.each do |key, value|\n    if key.is_a?(String)\n      if key == key.downcase\n\
    \        return true\n      elsif key == key.upcase\n        return true\n   \
    \   else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphgz9h0rr\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmphgz9h0rr.rb:25:in `test_check_dict_case'\n\
    \     22:   def test_check_dict_case\n     23:     candidate = method(:check_dict_case)\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006555826 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.54 tests/s, 305.07 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.class == String\n      if key.upcase == key\n        return true\n     \
    \ elsif key.downcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvk5tce_4\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvk5tce_4.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006390447 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.48 tests/s, 312.97 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key ==\
    \ key.downcase}\n    return true\n  elsif dict.keys.all? {|key| key == key.upcase}\n\
    \    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl7411c15\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpl7411c15.rb:23:in `test_check_dict_case'\n\
    \     20:     candidate = method(:check_dict_case)\n     21:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     25:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     26:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006458969 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.82 tests/s, 464.47 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = dict.keys.all? { |key| key\
    \ == key.downcase }\n  upper = dict.keys.all? { |key| key == key.upcase }\n  return\
    \ lower || upper\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpksckgdxz\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpksckgdxz.rb:19:in `test_check_dict_case'\n\
    \     16:     candidate = method(:check_dict_case)\n     17:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     18:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 19:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     21:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     22:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006458829 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.83 tests/s, 464.48 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key } ||\n  dict.keys.all?\
    \ { |key| key.is_a?(String) && key.upcase == key }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvia30krr\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvia30krr.rb:15:in `test_check_dict_case'\n\
    \     12:     candidate = method(:check_dict_case)\n     13:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     14:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 15:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     16:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     17:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     18:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.024593005 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    40.66 tests/s, 121.99 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key.is_a?\
    \ String}\n    if dict.keys.all? {|key| key.upcase == key}\n      return true\n\
    \    elsif dict.keys.all? {|key| key.downcase == key}\n      return true\n   \
    \ else\n      return false\n    end\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpiw394fr8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpiw394fr8.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006771097 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.69 tests/s, 443.06 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a? String\n      if key.downcase == key || key.upcase == key\n      \
    \  return true\n      else\n        return false\n      end\n    else\n      return\
    \ false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqtqsommk\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqtqsommk.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00663651 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.68 tests/s, 301.36 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  dict.each do |key, value|\n    if key.downcase == key\n      return false if\
    \ key.upcase == key\n    else\n      return false if key.downcase == key\n   \
    \ end\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxwnadd0h\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxwnadd0h.rb:20:in `test_check_dict_case'\n\
    \     17:   def test_check_dict_case\n     18:     candidate = method(:check_dict_case)\n\
    \     19:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     21:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     22:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006943258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.02 tests/s, 288.05 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.downcase == key\n      return false if value.upcase == value\n    elsif\
    \ key.upcase == key\n      return false if value.downcase == value\n    else\n\
    \      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwphexw9k\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpwphexw9k.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006831212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.39 tests/s, 439.16 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |key, value|\n    if key.downcase != key\n      lower = false\n\
    \    end\n    if key.upcase != key\n      upper = false\n    end\n  end\n  return\
    \ lower || upper\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_1tq_3g1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_1tq_3g1.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006537918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.95 tests/s, 458.86 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower_keys = dict.keys.select {\
    \ |key| key == key.downcase }\n  upper_keys = dict.keys.select { |key| key ==\
    \ key.upcase }\n  if lower_keys.length == dict.length || upper_keys.length ==\
    \ dict.length\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplu153622\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmplu153622.rb:23:in `test_check_dict_case'\n\
    \     20:     candidate = method(:check_dict_case)\n     21:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     25:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     26:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006662779 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.09 tests/s, 450.26 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.downcase == key\n      return false if dict.keys.any? { |k| k.upcase ==\
    \ k }\n    else\n      return false if dict.keys.any? { |k| k.downcase == k }\n\
    \    end\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpslht6n0m\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpslht6n0m.rb:25:in `test_check_dict_case'\n\
    \     22:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     23:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     24:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 25:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     27:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     28:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006840229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.19 tests/s, 584.78 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|k| k.is_a? String}\n\
    \    return dict.keys.all? {|k| k.upcase == k} || dict.keys.all? {|k| k.downcase\
    \ == k}\n  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvcfyyhne\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpvcfyyhne.rb:21:in `test_check_dict_case'\n\
    \     18:     candidate = method(:check_dict_case)\n     19:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     24:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006680642 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.69 tests/s, 449.06 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower_case = true\n  upper_case\
    \ = true\n  dict.each do |key, value|\n    if key.downcase != key\n      lower_case\
    \ = false\n    end\n    if key.upcase != key\n      upper_case = false\n    end\n\
    \  end\n  if lower_case || upper_case\n    return true\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqp4y9zo5\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqp4y9zo5.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.014987895 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.72 tests/s, 200.16 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.keys.all? { |key| key.is_a?\
    \ String }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpi3duq6on\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpi3duq6on.rb:16:in `test_check_dict_case'\n\
    \     13:   def test_check_dict_case\n     14:     candidate = method(:check_dict_case)\n\
    \     15:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 16:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     17:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     18:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     19:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00639255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.43 tests/s, 312.86 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a? String\n      if key.downcase == key\n        return true\n      elsif\
    \ key.upcase == key\n        return true\n      else\n        return false\n \
    \     end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplps7iosu\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmplps7iosu.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009917951 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.83 tests/s, 201.65 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.upcase == key\n        return true\n      elsif\
    \ key.downcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpok5u_9tw\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpok5u_9tw.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.010608227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.27 tests/s, 188.53 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key.is_a?\
    \ String}\n    if dict.keys.all? {|key| key.downcase == key}\n      return true\n\
    \    elsif dict.keys.all? {|key| key.upcase == key}\n      return true\n    else\n\
    \      return false\n    end\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpihjwgbyc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpihjwgbyc.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006729361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.60 tests/s, 445.81 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |k, v|\n    if k.downcase != k\n      lower = false\n    end\n\
    \    if k.upcase != k\n      upper = false\n    end\n  end\n  return lower ||\
    \ upper\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6gekk9us\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp6gekk9us.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007772502 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.66 tests/s, 385.98 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a? String\n      if key.downcase == key || key.upcase == key\n      \
    \  return true\n      else\n        return false\n      end\n    else\n      return\
    \ false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqtqsommk\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqtqsommk.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00663651 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.68 tests/s, 301.36 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key.is_a?\
    \ String}\n    return dict.keys.all? {|key| key.upcase == key} || dict.keys.all?\
    \ {|key| key.downcase == key}\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp612lj3rk\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp612lj3rk.rb:21:in `test_check_dict_case'\n\
    \     18:     candidate = method(:check_dict_case)\n     19:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     24:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006517272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.44 tests/s, 460.32 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |k, v|\n    if k.downcase != k\n      lower = false\n    end\n\
    \    if k.upcase != k\n      upper = false\n    end\n  end\n  return lower ||\
    \ upper\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6gekk9us\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp6gekk9us.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007772502 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.66 tests/s, 385.98 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key.is_a?\
    \ String}\n    if dict.keys.all? {|key| key.downcase == key}\n      return true\n\
    \    elsif dict.keys.all? {|key| key.upcase == key}\n      return true\n    else\n\
    \      return false\n    end\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpihjwgbyc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpihjwgbyc.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006729361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.60 tests/s, 445.81 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  return false if dict.empty?\n  dict.each do |key, value|\n    return false\
    \ if key.is_a?(String) && key.upcase != key && key.downcase != key\n  end\n  true\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmppbd8_k3t\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppbd8_k3t.rb:17:in `test_check_dict_case'\n\
    \     14:   def test_check_dict_case\n     15:     candidate = method(:check_dict_case)\n\
    \     16:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 17:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     18:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     19:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     20:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006380496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.73 tests/s, 313.46 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a? String\n      if key.downcase == key\n        return true\n      elsif\
    \ key.upcase == key\n        return true\n      else\n        return false\n \
    \     end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplps7iosu\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmplps7iosu.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009917951 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.83 tests/s, 201.65 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  return false if dict.empty?\n  dict.keys.all? { |key| key == key.downcase }\
    \ || dict.keys.all? { |key| key == key.upcase }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7nd5ajga\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7nd5ajga.rb:15:in `test_check_dict_case'\n\
    \     12:     candidate = method(:check_dict_case)\n     13:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     14:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 15:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     16:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     17:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     18:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.018067756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.35 tests/s, 166.04 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.downcase != key && key.upcase != key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc1klzm3s\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc1klzm3s.rb:21:in `test_check_dict_case'\n\
    \     18:   def test_check_dict_case\n     19:     candidate = method(:check_dict_case)\n\
    \     20:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     22:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     23:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     24:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007626668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.12 tests/s, 262.24 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  return false if dict.empty?\n  dict.all? { |key, value| key.downcase == key\
    \ } || dict.all? { |key, value| key.upcase == key }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgaxi6lem\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpgaxi6lem.rb:15:in `test_check_dict_case'\n\
    \     12:     candidate = method(:check_dict_case)\n     13:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     14:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 15:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     16:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     17:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     18:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008810217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.50 tests/s, 340.51 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.to_s.downcase == key.to_s\n      return false if dict.key?(key.to_s.upcase)\n\
    \    elsif key.to_s.upcase == key.to_s\n      return false if dict.key?(key.to_s.downcase)\n\
    \    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpifc722wn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpifc722wn.rb:23:in `test_check_dict_case'\n\
    \     20:   def test_check_dict_case\n     21:     candidate = method(:check_dict_case)\n\
    \     22:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     24:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     25:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006218006 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.82 tests/s, 321.65 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return false if dict.any?\
    \ { |key, value| key.upcase == key }\n      elsif key.upcase == key\n        return\
    \ false if dict.any? { |key, value| key.downcase == key }\n      end\n    end\n\
    \  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjw_dvr2_\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpjw_dvr2_.rb:27:in `test_check_dict_case'\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     30:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006572429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.15 tests/s, 608.60 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key == key.downcase\n        return true\n     \
    \ elsif key == key.upcase\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsx9gapck\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpsx9gapck.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006502316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.79 tests/s, 307.58 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  dict.each_key do |key|\n    if key.is_a?(String)\n      if key.downcase ==\
    \ key || key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc0bbvwsi\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc0bbvwsi.rb:23:in `test_check_dict_case'\n\
    \     20:   def test_check_dict_case\n     21:     candidate = method(:check_dict_case)\n\
    \     22:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     24:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     25:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006317539 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.29 tests/s, 316.58 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase != key && key.upcase != key\n     \
    \   return false\n      end\n    else\n      return false\n    end\n  end\n  return\
    \ true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwygw14zn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpwygw14zn.rb:25:in `test_check_dict_case'\n\
    \     22:   def test_check_dict_case\n     23:     candidate = method(:check_dict_case)\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00634957 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.49 tests/s, 314.98 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.downcase == key\n      return false if key.upcase == key\n    elsif key.upcase\
    \ == key\n      return false if key.downcase == key\n    end\n  end\n  return\
    \ true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpkhx0wj2j\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpkhx0wj2j.rb:23:in `test_check_dict_case'\n\
    \     20:   def test_check_dict_case\n     21:     candidate = method(:check_dict_case)\n\
    \     22:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     24:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     25:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006435817 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.38 tests/s, 310.76 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  return false if dict.empty?\n  dict.keys.all? { |key| key == key.downcase }\
    \ || dict.keys.all? { |key| key == key.upcase }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7nd5ajga\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7nd5ajga.rb:15:in `test_check_dict_case'\n\
    \     12:     candidate = method(:check_dict_case)\n     13:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     14:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 15:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     16:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     17:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     18:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.018067756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.35 tests/s, 166.04 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower_case = true\n  upper_case\
    \ = true\n  dict.each do |key, value|\n    if key.downcase != key\n      lower_case\
    \ = false\n    end\n    if key.upcase != key\n      upper_case = false\n    end\n\
    \  end\n  return lower_case || upper_case\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxje_ume2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxje_ume2.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007984101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.25 tests/s, 375.75 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = 0\n  upper = 0\n  dict.each\
    \ do |key, value|\n    if key.is_a? String\n      if key.downcase == key\n   \
    \     lower += 1\n      else\n        upper += 1\n      end\n    end\n  end\n\
    \  if lower == dict.length || upper == dict.length\n    return true\n  else\n\
    \    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpuvumq9nc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpuvumq9nc.rb:32:in `test_check_dict_case'\n\
    \     29:     candidate = method(:check_dict_case)\n     30:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     31:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 32:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     33:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     34:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     35:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006773277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.64 tests/s, 442.92 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower_case = true\n  upper_case\
    \ = true\n  dict.each do |key, value|\n    if key.downcase != key\n      lower_case\
    \ = false\n    end\n    if key.upcase != key\n      upper_case = false\n    end\n\
    \  end\n  if lower_case || upper_case\n    return true\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqp4y9zo5\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqp4y9zo5.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.014987895 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.72 tests/s, 200.16 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.downcase != key && key.upcase != key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc1klzm3s\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc1klzm3s.rb:21:in `test_check_dict_case'\n\
    \     18:   def test_check_dict_case\n     19:     candidate = method(:check_dict_case)\n\
    \     20:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     22:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     23:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     24:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007626668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.12 tests/s, 262.24 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.class == String\n      if key.downcase == key\n        return true\n   \
    \   elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpw54aupvi\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpw54aupvi.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007689912 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.04 tests/s, 260.08 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  return false if dict.empty?\n  dict.each do |key, value|\n    return false\
    \ if key.class != String\n  end\n  dict.each do |key, value|\n    return false\
    \ if key.upcase != key && key.downcase != key\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpa9ko4okm\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpa9ko4okm.rb:20:in `test_check_dict_case'\n\
    \     17:   def test_check_dict_case\n     18:     candidate = method(:check_dict_case)\n\
    \     19:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     21:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     22:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006313173 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.40 tests/s, 316.80 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.downcase != key && key.upcase != key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc1klzm3s\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc1klzm3s.rb:21:in `test_check_dict_case'\n\
    \     18:   def test_check_dict_case\n     19:     candidate = method(:check_dict_case)\n\
    \     20:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     22:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     23:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     24:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007626668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.12 tests/s, 262.24 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  return false if dict.empty?\n  dict.each_key do |key|\n    return false if\
    \ key.class != String\n  end\n  dict.each_key do |key|\n    return false if key.downcase\
    \ != key && key.upcase != key\n  end\n  true\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9eoe7n6x\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp9eoe7n6x.rb:20:in `test_check_dict_case'\n\
    \     17:   def test_check_dict_case\n     18:     candidate = method(:check_dict_case)\n\
    \     19:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     21:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     22:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007723 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.48 tests/s, 258.97 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  return false if dict.empty?\n  dict.each do |key, value|\n    return false\
    \ if key.class != String\n  end\n  dict.each do |key, value|\n    return false\
    \ if key != key.downcase && key != key.upcase\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_92scpac\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_92scpac.rb:20:in `test_check_dict_case'\n\
    \     17:   def test_check_dict_case\n     18:     candidate = method(:check_dict_case)\n\
    \     19:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     21:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     22:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006994632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.97 tests/s, 285.93 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.class == String\n      if key.downcase == key\n        return true\n   \
    \   elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpw54aupvi\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpw54aupvi.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007689912 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.04 tests/s, 260.08 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |key, value|\n    if key.downcase != key\n      lower = false\n\
    \    end\n    if key.upcase != key\n      upper = false\n    end\n  end\n  if\
    \ lower || upper\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp72d45f6p\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp72d45f6p.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006766888 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.78 tests/s, 443.34 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|k| k.is_a? String}\n\
    \    if dict.keys.all? {|k| k == k.downcase}\n      return true\n    elsif dict.keys.all?\
    \ {|k| k == k.upcase}\n      return true\n    else\n      return false\n    end\n\
    \  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp679nvki6\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp679nvki6.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007096554 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.91 tests/s, 422.74 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a? String\n      if key.downcase == key || key.upcase == key\n      \
    \  return true\n      else\n        return false\n      end\n    else\n      return\
    \ false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqtqsommk\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqtqsommk.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00663651 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.68 tests/s, 301.36 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  is_lower = true\n  is_upper = true\n\
    \  dict.each do |key, value|\n    if key.downcase != key\n      is_lower = false\n\
    \    end\n    if key.upcase != key\n      is_upper = false\n    end\n  end\n \
    \ if is_lower || is_upper\n    return true\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp14f8wwg3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp14f8wwg3.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007093631 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.97 tests/s, 422.91 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |key, value|\n    lower = false if key.upcase == key\n    upper\
    \ = false if key.downcase == key\n  end\n  return lower || upper\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgy_wnapi\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpgy_wnapi.rb:24:in `test_check_dict_case'\n\
    \     21:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     22:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     23:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 24:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     25:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     26:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     27:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006796592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.13 tests/s, 588.53 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a? String\n      if key.downcase == key\n        return true\n      elsif\
    \ key.upcase == key\n        return true\n      else\n        return false\n \
    \     end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplps7iosu\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmplps7iosu.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009917951 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.83 tests/s, 201.65 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.downcase != key || key.upcase != key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp8bkga9dy\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp8bkga9dy.rb:20:in `test_check_dict_case'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_check_dict_case\n\
    \     19:     candidate = method(:check_dict_case)\n  => 20:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     21:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     22:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     23:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.008086383 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.66 tests/s, 123.66 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key == key.upcase\n        return true\n      elsif\
    \ key == key.downcase\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwtee9d1x\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpwtee9d1x.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.010350373 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.61 tests/s, 193.23 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower_case = true\n  upper_case\
    \ = true\n  dict.each do |key, value|\n    if key.downcase != key\n      lower_case\
    \ = false\n    end\n    if key.upcase != key\n      upper_case = false\n    end\n\
    \  end\n  if lower_case || upper_case\n    return true\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqp4y9zo5\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqp4y9zo5.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.014987895 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.72 tests/s, 200.16 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a? String\n      if key.upcase == key\n        return true\n      elsif\
    \ key.downcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8bwar4c\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpn8bwar4c.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007532321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.76 tests/s, 265.52 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  dict.keys.all? { |key| key == key.downcase } || dict.keys.all? { |key| key\
    \ == key.upcase }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmppda04zbm\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppda04zbm.rb:14:in `test_check_dict_case'\n\
    \     11:     candidate = method(:check_dict_case)\n     12:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     13:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 14:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     15:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     16:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     17:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006438441 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.32 tests/s, 465.95 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |key, value|\n    if key.is_a? String\n      if key.downcase !=\
    \ key\n        lower = false\n      end\n      if key.upcase != key\n        upper\
    \ = false\n      end\n    else\n      return false\n    end\n  end\n  return lower\
    \ || upper\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyb5w4l5q\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpyb5w4l5q.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006852962 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.92 tests/s, 437.77 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |k, v|\n    if k.is_a?(String)\n\
    \      if k.downcase != k && k.upcase != k\n        return false\n      end\n\
    \    else\n      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5iqz_vz6\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp5iqz_vz6.rb:25:in `test_check_dict_case'\n\
    \     22:   def test_check_dict_case\n     23:     candidate = method(:check_dict_case)\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006455281 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.91 tests/s, 309.82 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key.is_a?\
    \ String}\n    if dict.keys.all? {|key| key.downcase == key}\n      return true\n\
    \    elsif dict.keys.all? {|key| key.upcase == key}\n      return true\n    else\n\
    \      return false\n    end\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpihjwgbyc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpihjwgbyc.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006729361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.60 tests/s, 445.81 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  dict.each do |key, value|\n    if key.is_a?(String)\n      if key.downcase\
    \ == key\n        return true\n      elsif key.upcase == key\n        return true\n\
    \      else\n        return false\n      end\n    else\n      return false\n \
    \   end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqxji9qsf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqxji9qsf.rb:25:in `test_check_dict_case'\n\
    \     22:   def test_check_dict_case\n     23:     candidate = method(:check_dict_case)\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006733106 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.52 tests/s, 297.04 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.downcase == key\n      return false if value.upcase == value\n    elsif\
    \ key.upcase == key\n      return false if value.downcase == value\n    else\n\
    \      return false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwphexw9k\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpwphexw9k.rb:26:in `test_check_dict_case'\n\
    \     23:     candidate = method(:check_dict_case)\n     24:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     27:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     29:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006831212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.39 tests/s, 439.16 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|k| k.is_a? String}\n\
    \    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpslmr8j82\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpslmr8j82.rb:20:in `test_check_dict_case'\n\
    \     17:   def test_check_dict_case\n     18:     candidate = method(:check_dict_case)\n\
    \     19:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     21:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     22:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006598244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.56 tests/s, 303.11 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |k, v|\n    if k.is_a?\
    \ String\n      if k.downcase == k\n        return true\n      elsif k.upcase\
    \ == k\n        return true\n      else\n        return false\n      end\n   \
    \ else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnmh6fjoe\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpnmh6fjoe.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006639735 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.61 tests/s, 301.22 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpr2t_8dwy\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpr2t_8dwy.rb:12:in `test_check_dict_case'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_check_dict_case\n\
    \     11:     candidate = method(:check_dict_case)\n  => 12:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     13:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     14:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     15:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00619779 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.35 tests/s, 161.35 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a? String\n      if key.upcase == key\n        return true\n      elsif\
    \ key.downcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8bwar4c\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpn8bwar4c.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007532321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.76 tests/s, 265.52 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.class == String\n      if key.downcase != key && key.upcase != key\n   \
    \     return false\n      end\n    else\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpagn0ify5\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpagn0ify5.rb:25:in `test_check_dict_case'\n\
    \     22:   def test_check_dict_case\n     23:     candidate = method(:check_dict_case)\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00671192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.99 tests/s, 297.98 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key == key.downcase\n        return true\n     \
    \ elsif key == key.upcase\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsx9gapck\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpsx9gapck.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006502316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.79 tests/s, 307.58 assertions/s\n"
  timestamp: 1659977664
- exit_code: 0
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.downcase == key\n      return false if dict.each_key.any? { |key| key.upcase\
    \ == key }\n    elsif key.upcase == key\n      return false if dict.each_key.any?\
    \ { |key| key.downcase == key }\n    else\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk_wv9rvb

    Started

    .

    Finished in 0.000480637 seconds.

    -------------------------------------------------------------------------------

    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2080.57 tests/s, 14564.01 assertions/s

    '
  stdout: ''
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  return false if dict.empty?\n  dict.keys.all? { |key| key == key.downcase }\
    \ || dict.keys.all? { |key| key == key.upcase }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7nd5ajga\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp7nd5ajga.rb:15:in `test_check_dict_case'\n\
    \     12:     candidate = method(:check_dict_case)\n     13:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     14:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 15:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     16:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     17:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     18:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.018067756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.35 tests/s, 166.04 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key == key.downcase || key == key.upcase\n     \
    \   return true\n      else\n        return false\n      end\n    else\n     \
    \ return false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5fzf3t99\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp5fzf3t99.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006936956 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.16 tests/s, 288.31 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower_case = true\n  upper_case\
    \ = true\n  dict.each do |key, value|\n    lower_case = false if key != key.downcase\n\
    \    upper_case = false if key != key.upcase\n  end\n  lower_case || upper_case\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy284du1n\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpy284du1n.rb:23:in `test_check_dict_case'\n\
    \     20:     candidate = method(:check_dict_case)\n     21:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     25:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     26:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006588597 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.78 tests/s, 455.33 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a? String\n      if key == key.downcase\n        return true\n      elsif\
    \ key == key.upcase\n        return true\n      else\n        return false\n \
    \     end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpm2ho6igf\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpm2ho6igf.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006878086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.39 tests/s, 290.78 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key.is_a?(String)\
    \ && key.upcase == key}\n    return true\n  elsif dict.keys.all? {|key| key.is_a?(String)\
    \ && key.downcase == key}\n    return true\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplpsoj1e8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmplpsoj1e8.rb:23:in `test_check_dict_case'\n\
    \     20:     candidate = method(:check_dict_case)\n     21:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 23:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     24:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     25:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     26:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006863399 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.70 tests/s, 437.10 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.downcase != key && key.upcase != key\n      return false\n    end\n  end\n\
    \  return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc1klzm3s\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc1klzm3s.rb:21:in `test_check_dict_case'\n\
    \     18:   def test_check_dict_case\n     19:     candidate = method(:check_dict_case)\n\
    \     20:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     22:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     23:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     24:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007626668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.12 tests/s, 262.24 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |k, v|\n    if k.downcase\
    \ != k && k.upcase != k\n      return false\n    end\n  end\n  return true\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp8z2zebw_\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp8z2zebw_.rb:21:in `test_check_dict_case'\n\
    \     18:   def test_check_dict_case\n     19:     candidate = method(:check_dict_case)\n\
    \     20:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 21:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     22:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     23:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     24:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00627157 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.45 tests/s, 318.90 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  return false if dict.empty?\n  dict.each do |key, value|\n    return false\
    \ if key.class != String\n  end\n  dict.each do |key, value|\n    return false\
    \ if key.upcase != key && key.downcase != key\n  end\n  true\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpa9ko4okm\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpa9ko4okm.rb:20:in `test_check_dict_case'\n\
    \     17:   def test_check_dict_case\n     18:     candidate = method(:check_dict_case)\n\
    \     19:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     21:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     22:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006313173 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.40 tests/s, 316.80 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key.is_a?\
    \ String}\n    return true\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpu751ugmt\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpu751ugmt.rb:20:in `test_check_dict_case'\n\
    \     17:   def test_check_dict_case\n     18:     candidate = method(:check_dict_case)\n\
    \     19:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 20:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     21:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     22:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006182659 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.74 tests/s, 323.49 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |key, value|\n    if key.downcase != key\n      lower = false\n\
    \    end\n    if key.upcase != key\n      upper = false\n    end\n  end\n  return\
    \ lower || upper\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_1tq_3g1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_1tq_3g1.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006537918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.95 tests/s, 458.86 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  dict.each do |key, value|\n    if key.is_a?(String)\n      if key == key.upcase\n\
    \        return false\n      end\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc7t_nulv\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc7t_nulv.rb:22:in `test_check_dict_case'\n\
    \     19:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     20:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     21:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 22:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     23:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     24:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     25:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006486581 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.16 tests/s, 616.66 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  keys = dict.keys\n  keys.each do\
    \ |key|\n    if key.is_a? String\n      if key.upcase == key\n        return true\n\
    \      elsif key.downcase == key\n        return true\n      else\n        return\
    \ false\n      end\n    else\n      return false\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgep2792j\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpgep2792j.rb:29:in `test_check_dict_case'\n\
    \     26:   def test_check_dict_case\n     27:     candidate = method(:check_dict_case)\n\
    \     28:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 29:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     30:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     31:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     32:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008056309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.13 tests/s, 248.25 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a? String\n      if key.downcase == key || key.upcase == key\n      \
    \  return true\n      else\n        return false\n      end\n    else\n      return\
    \ false\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqtqsommk\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqtqsommk.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00663651 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.68 tests/s, 301.36 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key == key.downcase\n        return true\n     \
    \ elsif key == key.upcase\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsx9gapck\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpsx9gapck.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006502316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.79 tests/s, 307.58 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key || key.upcase == key\n     \
    \   next\n      else\n        return false\n      end\n    else\n      return\
    \ false\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcronq17u\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpcronq17u.rb:27:in `test_check_dict_case'\n\
    \     24:   def test_check_dict_case\n     25:     candidate = method(:check_dict_case)\n\
    \     26:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     28:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     29:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     30:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00622561 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.63 tests/s, 321.25 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.upcase == key\n        return true\n      elsif\
    \ key.downcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpok5u_9tw\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpok5u_9tw.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.010608227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.27 tests/s, 188.53 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |key, value|\n    if key.downcase != key\n      lower = false\n\
    \    end\n    if key.upcase != key\n      upper = false\n    end\n  end\n  return\
    \ lower || upper\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_1tq_3g1\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_1tq_3g1.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006537918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.95 tests/s, 458.86 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |key, value|\n    if key.downcase != key\n      lower = false\n\
    \    end\n    if key.upcase != key\n      upper = false\n    end\n  end\n  if\
    \ lower || upper\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp72d45f6p\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp72d45f6p.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006766888 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.78 tests/s, 443.34 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_yrdrkzi\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp_yrdrkzi.rb:26:in `test_check_dict_case'\n\
    \     23:   def test_check_dict_case\n     24:     candidate = method(:check_dict_case)\n\
    \     25:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 26:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     27:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     28:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006283608 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.14 tests/s, 318.29 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |key, value|\n    if key.downcase != key\n      lower = false\n\
    \    end\n    if key.upcase != key\n      upper = false\n    end\n  end\n  if\
    \ lower || upper\n    return true\n  else\n    return false\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp72d45f6p\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp72d45f6p.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006766888 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.78 tests/s, 443.34 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  dict.each do |key, value|\n    if key.is_a? String\n      if key.downcase ==\
    \ key\n        return false\n      end\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp230rut4b\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp230rut4b.rb:19:in `test_check_dict_case'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_check_dict_case\n\
    \     18:     candidate = method(:check_dict_case)\n  => 19:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     20:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     21:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     22:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.006217536 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.84 tests/s, 160.84 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower = true\n  upper = true\n \
    \ dict.each do |key, value|\n    if key.is_a? String\n      if key.upcase == key\n\
    \        lower = false\n      else\n        upper = false\n      end\n    else\n\
    \      return false\n    end\n  end\n  if lower || upper\n    return true\n  else\n\
    \    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplbxlzzvm\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmplbxlzzvm.rb:35:in `test_check_dict_case'\n\
    \     32:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     33:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     34:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 35:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     36:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     37:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     38:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006104961 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.80 tests/s, 655.20 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower_case = true\n  upper_case\
    \ = true\n  dict.each do |key, value|\n    if key.downcase != key\n      lower_case\
    \ = false\n    end\n    if key.upcase != key\n      upper_case = false\n    end\n\
    \  end\n  if lower_case || upper_case\n    return true\n  else\n    return false\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqp4y9zo5\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpqp4y9zo5.rb:31:in `test_check_dict_case'\n\
    \     28:     candidate = method(:check_dict_case)\n     29:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     30:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 31:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     32:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     33:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     34:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.014987895 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.72 tests/s, 200.16 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  return false if dict.empty?\n  dict.keys.all? { |k| k.upcase == k } || dict.keys.all?\
    \ { |k| k.downcase == k }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpypgw33me\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpypgw33me.rb:15:in `test_check_dict_case'\n\
    \     12:     candidate = method(:check_dict_case)\n     13:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     14:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 15:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     16:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     17:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     18:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006148098 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.65 tests/s, 487.96 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String) && key.downcase == key\n      return true\n    elsif key.is_a?(String)\
    \ && key.upcase == key\n      return true\n    else\n      return false\n    end\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgzna28a3\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpgzna28a3.rb:24:in `test_check_dict_case'\n\
    \     21:   def test_check_dict_case\n     22:     candidate = method(:check_dict_case)\n\
    \     23:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 24:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     25:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     26:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     27:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006365024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.11 tests/s, 314.22 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  lower_case = true\n  upper_case\
    \ = true\n  dict.each do |key, value|\n    if key.downcase != key\n      lower_case\
    \ = false\n    end\n    if key.upcase != key\n      upper_case = false\n    end\n\
    \  end\n  return lower_case || upper_case\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxje_ume2\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpxje_ume2.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007984101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.25 tests/s, 375.75 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a? String\n      if key.upcase != key && key.downcase != key\n      \
    \  return false\n      end\n    else\n      return false\n    end\n  end\n  return\
    \ true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_check_dict_case\n    candidate = method(:check_dict_case)\n    assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false, candidate.call({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true,\
    \ candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true,\
    \ candidate.call({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false,\
    \ candidate.call({}))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpj2edv31g\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpj2edv31g.rb:25:in `test_check_dict_case'\n\
    \     22:   def test_check_dict_case\n     23:     candidate = method(:check_dict_case)\n\
    \     24:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 25:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     26:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     27:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     28:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006149718 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.61 tests/s, 325.22 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return true\n     \
    \ elsif key.upcase == key\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc976gfnn\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpc976gfnn.rb:28:in `test_check_dict_case'\n\
    \     25:   def test_check_dict_case\n     26:     candidate = method(:check_dict_case)\n\
    \     27:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n  => 28:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     29:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n     30:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     31:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007713584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key.downcase == key\n        return false\n    \
    \  end\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmppnhro68u\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmppnhro68u.rb:22:in `test_check_dict_case'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_check_dict_case\n\
    \     21:     candidate = method(:check_dict_case)\n  => 22:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     23:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n     24:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n<true> expected but was\n<false>\n\ndiff:\n? tru\
    \ e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.008534228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.18 tests/s, 117.18 assertions/s\n"
  timestamp: 1659977664
- exit_code: 0
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.downcase == key\n      return false if dict.any? { |k, v| k.upcase == k\
    \ }\n    elsif key.upcase == key\n      return false if dict.any? { |k, v| k.downcase\
    \ == k }\n    else\n      return false\n    end\n  end\n  return true\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
    \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbcf65zmn

    Started

    .

    Finished in 0.000400915 seconds.

    -------------------------------------------------------------------------------

    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2494.29 tests/s, 17460.06 assertions/s

    '
  stdout: ''
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  keys = dict.keys\n  if keys.all?\
    \ { |key| key.is_a?(String) && key.downcase == key }\n    return true\n  elsif\
    \ keys.all? { |key| key.is_a?(String) && key.upcase == key }\n    return true\n\
    \  else\n    return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp68c_lyse\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmp68c_lyse.rb:24:in `test_check_dict_case'\n\
    \     21:     candidate = method(:check_dict_case)\n     22:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     23:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 24:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     25:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     27:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00568605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.87 tests/s, 527.61 assertions/s\n"
  timestamp: 1659977665
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  if dict.keys.all? {|key| key.is_a?\
    \ String}\n    if dict.keys.all? {|key| key.downcase == key}\n      return true\n\
    \    elsif dict.keys.all? {|key| key.upcase == key}\n      return true\n    else\n\
    \      return false\n    end\n  else\n    return false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate\
    \ = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpihjwgbyc\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpihjwgbyc.rb:27:in `test_check_dict_case'\n\
    \     24:     candidate = method(:check_dict_case)\n     25:     assert_equal(true,\
    \ candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"}))\n     26:   \
    \  assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"}))\n  => 27:     assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n     28:   \
    \  assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\"}))\n     29:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     30:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n<false> expected but was\n<true>\n\
    \ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006729361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.60 tests/s, 445.81 assertions/s\n"
  timestamp: 1659977664
- exit_code: 1
  program: "# Given a dictionary, return True if all keys are strings in lower \n\
    # case or all keys are strings in upper case, else return False.\n# The function\
    \ should return False is the given dictionary is empty.\n# Examples:\ndef check_dict_case(dict)\n\
    \  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.upcase == key\n      return false if dict.any? { |key, value| key.downcase\
    \ == key }\n    else\n      return false if dict.any? { |key, value| key.upcase\
    \ == key }\n    end\n  end\n  return true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_check_dict_case\n    candidate = method(:check_dict_case)\n\
    \    assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }))\n    assert_equal(false, candidate.call({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}))\n    assert_equal(false,\
    \ candidate.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    }))\n    assert_equal(true, candidate.call({\"STATE\" => \"NC\", \"ZIP\" => \"\
    12345\"}))\n    assert_equal(true, candidate.call({\"fruit\" => \"Orange\", \"\
    taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpkr2r66h8\nStarted\nF\n===============================================================================\n\
    Failure: test_check_dict_case(TestHumanEval)\n/tmp/tmpkr2r66h8.rb:25:in `test_check_dict_case'\n\
    \     22:     assert_equal(true, candidate.call({\"p\" => \"pineapple\", \"b\"\
    \ => \"banana\"}))\n     23:     assert_equal(false, candidate.call({\"p\" =>\
    \ \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n     24:     assert_equal(false,\
    \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
    }))\n  => 25:     assert_equal(false, candidate.call({\"Name\" => \"John\", \"\
    Age\" => \"36\", \"City\" => \"Houston\"}))\n     26:     assert_equal(true, candidate.call({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}))\n     27:     assert_equal(true, candidate.call({\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n     28:     assert_equal(false,\
    \ candidate.call({}))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru\
    \  \n? ????  \n===============================================================================\n\
    \nFinished in 0.005598058 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.63 tests/s, 714.53 assertions/s\n"
  timestamp: 1659977665
