name: HumanEval_71_triangle_area
language: rb
prompt: "# Given the lengths of the three sides of a triangle. Return the area of\n\
  # the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any\
  \ two sides is greater \n# than the third side.\n# Example:\ndef triangle_area(a,\
  \ b, c)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n\
  \    candidate = method(:triangle_area)\n    assert_equal(6.0, candidate.call(3,\
  \ 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n    assert_equal(8.18,\
  \ candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2, 2, 2))\n  \
  \  assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25, candidate.call(10,\
  \ 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n    assert_equal(0.43,\
  \ candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2, 2, 10))\n  end\n\
  end\n"
completions: ["  # your code here\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  return -1 if a + b <= c\
    \ || a + c <= b || b + c <= a\n  s = (a + b + c) / 2.0\n  area = Math.sqrt(s *\
    \ (s - a) * (s - b) * (s - c))\n  area.round(2)\nend", "  # your code here\nend",
  "  # write your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  return -1 if (a + b <= c) || (a + c <= b)\
    \ || (b + c <= a)\n  area = (a + b + c) / 2.0\n  Math.sqrt(area * (area - a) *\
    \ (area - b) * (area - c)).round(2)\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # write your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  return -1 if a + b <= c || a + c <= b || b + c <= a\n  s = (a + b + c)\
    \ / 2.0\n  Math.sqrt(s * (s - a) * (s - b) * (s - c)).round(2)\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # write your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  return -1 if a\
    \ + b <= c || a + c <= b || b + c <= a\n  s = (a + b + c) / 2.0\n  area = Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n  area.round(2)\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  return -1 if a\
    \ + b <= c || a + c <= b || b + c <= a\n  s = (a + b + c) / 2.0\n  Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c)).round(2)\nend", "  # your code here\nend", " \
    \ # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  sides = [a, b, c].sort\n  return -1 if sides[0] + sides[1] <= sides[2]\n  p =\
    \ (a + b + c) / 2.0\n  Math.sqrt(p * (p - a) * (p - b) * (p - c)).round(2)\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  return -1 if a + b <= c || a + c <= b || b + c <= a\n  s = (a + b + c) / 2.0\n\
    \  Math.sqrt(s * (s - a) * (s - b) * (s - c)).round(2)\nend", "  # your code goes\
    \ here\nend", "  # your code here\nend", "  # your code here\nend", "  # write\
    \ your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  sides = [a, b, c].sort\n\
    \  return -1 if sides[0] + sides[1] <= sides[2]\n  area = (sides[0] + sides[1]\
    \ + sides[2]) / 2.0\n  Math.sqrt(area * (area - sides[0]) * (area - sides[1])\
    \ * (area - sides[2]))\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  return -1 if a + b <= c || a + c <= b || b\
    \ + c <= a\n  s = (a + b + c) / 2.0\n  Math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c)).round(2)\nend", "  # your code here\nend", "  return -1 if a + b <= c ||\
    \ a + c <= b || b + c <= a\n  s = (a + b + c) / 2.0\n  area = Math.sqrt(s * (s\
    \ - a) * (s - b) * (s - c))\n  area.round(2)\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  return -1 if a + b <= c || a + c <= b || b + c <= a\n  s = (a + b + c) / 2.0\n\
    \  area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  area.round(2)\nend", " \
    \ # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # Write your code here\n  if a + b > c && a + c > b && b + c > a\n    p (a *\
    \ b * c) ** 0.5\n  else\n    p -1\n  end\nend", "  # your code here\nend", " \
    \ # write your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
