{
  "language": "rb",
  "name": "HumanEval_98_count_upper",
  "results": [
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc00osipw\nStarted\n.\nFinished in 0.000971157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1029.70 tests/s, 7207.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even?\n      count += 1 if char =~ /[AEIOU]/\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp923lw7ja\nStarted\n.\nFinished in 0.000887638 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1126.59 tests/s, 7886.10 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpchf59ke_\nStarted\n.\nFinished in 0.000941565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1062.06 tests/s, 7434.43 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpecuczh8t\nStarted\n.\nFinished in 0.000709143 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1410.15 tests/s, 9871.07 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9ec4kjg7\nStarted\n.\nFinished in 0.000863909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1157.53 tests/s, 8102.71 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc00osipw\nStarted\n.\nFinished in 0.000971157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1029.70 tests/s, 7207.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.chars.each_with_index.count { |char, i| char =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpcfamwqq6\nStarted\n.\nFinished in 0.000731359 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1367.32 tests/s, 9571.22 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.split(\"\").each_with_index do |letter, index|\n    if letter =~ /[AEIOU]/ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpceqy1lqv\nStarted\n.\nFinished in 0.000929509 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1075.84 tests/s, 7530.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc00osipw\nStarted\n.\nFinished in 0.000971157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1029.70 tests/s, 7207.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.split(\"\").each_with_index do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7qmfjwlx\nStarted\n.\nFinished in 0.000959902 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.77 tests/s, 7292.41 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if char =~ /[AEIOU]/ && i.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzbjpp3f7\nStarted\n.\nFinished in 0.000902634 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1107.87 tests/s, 7755.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.split(\"\").each_with_index do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7qmfjwlx\nStarted\n.\nFinished in 0.000959902 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.77 tests/s, 7292.41 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.split(\"\").each_with_index.count { |char, i| char =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzzlqp6vg\nStarted\n.\nFinished in 0.00067222 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1487.61 tests/s, 10413.26 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpsbvrfe7l\nStarted\n.\nFinished in 0.000921148 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1085.60 tests/s, 7599.21 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc00osipw\nStarted\n.\nFinished in 0.000971157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1029.70 tests/s, 7207.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpsbvrfe7l\nStarted\n.\nFinished in 0.000921148 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1085.60 tests/s, 7599.21 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.split(\"\").each_with_index do |letter, index|\n    if letter =~ /[AEIOU]/ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpceqy1lqv\nStarted\n.\nFinished in 0.000929509 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1075.84 tests/s, 7530.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 1,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    count += 1 if char.upcase == char && index.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpskr4xzjr\nStarted\nF\n===============================================================================\nFailure: test_count_upper(TestHumanEval)\n/tmp/tmpskr4xzjr.rb:14:in `test_count_upper'\n     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_count_upper\n     13:     candidate = method(:count_upper)\n  => 14:     assert_equal(1, candidate.call(\"aBCdEf\"))\n     15:     assert_equal(0, candidate.call(\"abcdefg\"))\n     16:     assert_equal(0, candidate.call(\"dBBE\"))\n     17:     assert_equal(0, candidate.call(\"B\"))\n<1> expected but was\n<2>\n===============================================================================\n\nFinished in 0.010036184 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n99.64 tests/s, 99.64 assertions/s\n",
      "timestamp": 1659793362
    },
    {
      "exit_code": 1,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.split(\"\").each_with_index.count { |char, i| char.upcase == char && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmprpmjlb_h\nStarted\nF\n===============================================================================\nFailure: test_count_upper(TestHumanEval)\n/tmp/tmprpmjlb_h.rb:10:in `test_count_upper'\n      7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_count_upper\n      9:     candidate = method(:count_upper)\n  => 10:     assert_equal(1, candidate.call(\"aBCdEf\"))\n     11:     assert_equal(0, candidate.call(\"abcdefg\"))\n     12:     assert_equal(0, candidate.call(\"dBBE\"))\n     13:     assert_equal(0, candidate.call(\"B\"))\n<1> expected but was\n<2>\n===============================================================================\n\nFinished in 0.007849554 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n127.40 tests/s, 127.40 assertions/s\n",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.split(\"\").each_with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpz8g5_l4a\nStarted\n.\nFinished in 0.000847243 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1180.30 tests/s, 8262.09 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.split(\"\").each_with_index do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpu73aqusx\nStarted\n.\nFinished in 0.000896859 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1115.00 tests/s, 7805.02 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc00osipw\nStarted\n.\nFinished in 0.000971157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1029.70 tests/s, 7207.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.chars.each_with_index.count { |char, i| char =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpcfamwqq6\nStarted\n.\nFinished in 0.000731359 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1367.32 tests/s, 9571.22 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpmibmefj2\nStarted\n.\nFinished in 0.000978629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1021.84 tests/s, 7152.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.chars.map.with_index { |char, i| char if i.even? && char =~ /[AEIOU]/ }.compact.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpxhcp39ty\nStarted\n.\nFinished in 0.000914745 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1093.20 tests/s, 7652.41 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpmibmefj2\nStarted\n.\nFinished in 0.000978629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1021.84 tests/s, 7152.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.split(\"\").map.with_index { |x, i| x if i.even? && x =~ /[AEIOU]/ }.compact.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5seitce6\nStarted\n.\nFinished in 0.000779928 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1282.17 tests/s, 8975.19 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpsbvrfe7l\nStarted\n.\nFinished in 0.000921148 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1085.60 tests/s, 7599.21 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.split(\"\").each_with_index.count { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9hzyvp4o\nStarted\n.\nFinished in 0.000587625 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1701.77 tests/s, 11912.36 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.chars.each_with_index.count { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp8qq2200c\nStarted\n.\nFinished in 0.000521505 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1917.53 tests/s, 13422.69 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if char.match(/[AEIOU]/) && i.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpx8ljc5xo\nStarted\n.\nFinished in 0.000543333 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1840.49 tests/s, 12883.44 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.chars.each_with_index.count { |char, idx| char =~ /[AEIOU]/ && idx.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpyugdvjyn\nStarted\n.\nFinished in 0.000562433 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1777.99 tests/s, 12445.93 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.chars.each_with_index.count { |char, i| char =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpcfamwqq6\nStarted\n.\nFinished in 0.000731359 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1367.32 tests/s, 9571.22 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc00osipw\nStarted\n.\nFinished in 0.000971157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1029.70 tests/s, 7207.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9ec4kjg7\nStarted\n.\nFinished in 0.000863909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1157.53 tests/s, 8102.71 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc00osipw\nStarted\n.\nFinished in 0.000971157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1029.70 tests/s, 7207.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.split(\"\").each_with_index do |letter, index|\n    if letter =~ /[AEIOU]/ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpceqy1lqv\nStarted\n.\nFinished in 0.000929509 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1075.84 tests/s, 7530.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc00osipw\nStarted\n.\nFinished in 0.000971157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1029.70 tests/s, 7207.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpmibmefj2\nStarted\n.\nFinished in 0.000978629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1021.84 tests/s, 7152.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc00osipw\nStarted\n.\nFinished in 0.000971157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1029.70 tests/s, 7207.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpchf59ke_\nStarted\n.\nFinished in 0.000941565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1062.06 tests/s, 7434.43 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.chars.each_with_index.count { |char, i| char =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpcfamwqq6\nStarted\n.\nFinished in 0.000731359 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1367.32 tests/s, 9571.22 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpchf59ke_\nStarted\n.\nFinished in 0.000941565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1062.06 tests/s, 7434.43 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.split(\"\").each_with_index.count { |char, i| char =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzzlqp6vg\nStarted\n.\nFinished in 0.00067222 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1487.61 tests/s, 10413.26 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.split(\"\").each_with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmphq02pcrt\nStarted\n.\nFinished in 0.000431664 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2316.62 tests/s, 16216.32 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char.match(/[AEIOU]/)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmprarwgki4\nStarted\n.\nFinished in 0.000958074 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1043.76 tests/s, 7306.32 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.split(\"\").each_with_index do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7qmfjwlx\nStarted\n.\nFinished in 0.000959902 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.77 tests/s, 7292.41 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, idx|\n    if idx.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpmcn1uhon\nStarted\n.\nFinished in 0.000522053 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1915.51 tests/s, 13408.60 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.split(\"\").each_with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmphq02pcrt\nStarted\n.\nFinished in 0.000431664 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2316.62 tests/s, 16216.32 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.chars.map.with_index { |c, i| c if i.even? && c =~ /[AEIOU]/ }.compact.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpbjxttquc\nStarted\n.\nFinished in 0.000655505 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1525.54 tests/s, 10678.79 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char.match(/[AEIOU]/)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwsdgh8hf\nStarted\n.\nFinished in 0.000562208 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1778.70 tests/s, 12450.91 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpecuczh8t\nStarted\n.\nFinished in 0.000709143 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1410.15 tests/s, 9871.07 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpmibmefj2\nStarted\n.\nFinished in 0.000978629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1021.84 tests/s, 7152.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpmibmefj2\nStarted\n.\nFinished in 0.000978629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1021.84 tests/s, 7152.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpecuczh8t\nStarted\n.\nFinished in 0.000709143 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1410.15 tests/s, 9871.07 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.split(\"\").each_with_index.count { |char, i| char =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzzlqp6vg\nStarted\n.\nFinished in 0.00067222 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1487.61 tests/s, 10413.26 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9ec4kjg7\nStarted\n.\nFinished in 0.000863909 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1157.53 tests/s, 8102.71 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if char =~ /[AEIOU]/ && i.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzbjpp3f7\nStarted\n.\nFinished in 0.000902634 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1107.87 tests/s, 7755.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 1,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index { |char, i| count += 1 if char.upcase == char && i.even? }\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpw7aevl18\nStarted\nF\n===============================================================================\nFailure: test_count_upper(TestHumanEval)\n/tmp/tmpw7aevl18.rb:12:in `test_count_upper'\n      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_count_upper\n     11:     candidate = method(:count_upper)\n  => 12:     assert_equal(1, candidate.call(\"aBCdEf\"))\n     13:     assert_equal(0, candidate.call(\"abcdefg\"))\n     14:     assert_equal(0, candidate.call(\"dBBE\"))\n     15:     assert_equal(0, candidate.call(\"B\"))\n<1> expected but was\n<2>\n===============================================================================\n\nFinished in 0.010744677 seconds.\n-------------------------------------------------------------------------------\n1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n93.07 tests/s, 93.07 assertions/s\n",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |c, i|\n    count += 1 if c =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp02hkjlde\nStarted\n.\nFinished in 0.000527907 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1894.27 tests/s, 13259.91 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpchf59ke_\nStarted\n.\nFinished in 0.000941565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1062.06 tests/s, 7434.43 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpmibmefj2\nStarted\n.\nFinished in 0.000978629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1021.84 tests/s, 7152.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc00osipw\nStarted\n.\nFinished in 0.000971157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1029.70 tests/s, 7207.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, idx|\n    count += 1 if char =~ /[AEIOU]/ && idx.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7qb25vb0\nStarted\n.\nFinished in 0.000496487 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2014.15 tests/s, 14099.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpmibmefj2\nStarted\n.\nFinished in 0.000978629 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1021.84 tests/s, 7152.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.split(\"\").each_with_index.count { |char, i| char =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzzlqp6vg\nStarted\n.\nFinished in 0.00067222 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1487.61 tests/s, 10413.26 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.split(\"\").each_with_index do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpu73aqusx\nStarted\n.\nFinished in 0.000896859 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1115.00 tests/s, 7805.02 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |c, i|\n    count += 1 if c =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp02hkjlde\nStarted\n.\nFinished in 0.000527907 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1894.27 tests/s, 13259.91 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, idx|\n    count += 1 if char =~ /[AEIOU]/ && idx.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7qb25vb0\nStarted\n.\nFinished in 0.000496487 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2014.15 tests/s, 14099.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.chars.each_with_index.count { |c, i| c =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpfhncu1p3\nStarted\n.\nFinished in 0.000725525 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1378.31 tests/s, 9648.19 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.split(\"\").each_with_index.count { |char, i| char =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzzlqp6vg\nStarted\n.\nFinished in 0.00067222 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1487.61 tests/s, 10413.26 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.chars.each_with_index.count { |char, i| char =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpcfamwqq6\nStarted\n.\nFinished in 0.000731359 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1367.32 tests/s, 9571.22 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.chars.each_with_index.count { |char, i| char =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpcfamwqq6\nStarted\n.\nFinished in 0.000731359 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1367.32 tests/s, 9571.22 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc00osipw\nStarted\n.\nFinished in 0.000971157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1029.70 tests/s, 7207.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpchf59ke_\nStarted\n.\nFinished in 0.000941565 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1062.06 tests/s, 7434.43 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpsbvrfe7l\nStarted\n.\nFinished in 0.000921148 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1085.60 tests/s, 7599.21 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpsbvrfe7l\nStarted\n.\nFinished in 0.000921148 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1085.60 tests/s, 7599.21 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char.match(/[AEIOU]/)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwsdgh8hf\nStarted\n.\nFinished in 0.000562208 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1778.70 tests/s, 12450.91 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc00osipw\nStarted\n.\nFinished in 0.000971157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1029.70 tests/s, 7207.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.chars.each_with_index.count { |c, i| c =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpfhncu1p3\nStarted\n.\nFinished in 0.000725525 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1378.31 tests/s, 9648.19 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |c, i|\n    count += 1 if c =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp02hkjlde\nStarted\n.\nFinished in 0.000527907 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1894.27 tests/s, 13259.91 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc00osipw\nStarted\n.\nFinished in 0.000971157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1029.70 tests/s, 7207.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc00osipw\nStarted\n.\nFinished in 0.000971157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1029.70 tests/s, 7207.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.chars.map.with_index { |char, i| char if i.even? && char =~ /[AEIOU]/ }.compact.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpxhcp39ty\nStarted\n.\nFinished in 0.000914745 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1093.20 tests/s, 7652.41 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char.match(/[AEIOU]/)\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwsdgh8hf\nStarted\n.\nFinished in 0.000562208 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1778.70 tests/s, 12450.91 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if char =~ /[AEIOU]/ && i.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzbjpp3f7\nStarted\n.\nFinished in 0.000902634 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1107.87 tests/s, 7755.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.split(\"\").each_with_index do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7qmfjwlx\nStarted\n.\nFinished in 0.000959902 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.77 tests/s, 7292.41 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.split(\"\").each_with_index.count { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9hzyvp4o\nStarted\n.\nFinished in 0.000587625 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1701.77 tests/s, 11912.36 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.split(\"\").each_with_index do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7qmfjwlx\nStarted\n.\nFinished in 0.000959902 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.77 tests/s, 7292.41 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.chars.each_with_index.count { |c, i| c =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpfhncu1p3\nStarted\n.\nFinished in 0.000725525 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1378.31 tests/s, 9648.19 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc00osipw\nStarted\n.\nFinished in 0.000971157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1029.70 tests/s, 7207.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpecuczh8t\nStarted\n.\nFinished in 0.000709143 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1410.15 tests/s, 9871.07 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.chars.each_with_index.count { |c, i| c =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpfhncu1p3\nStarted\n.\nFinished in 0.000725525 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1378.31 tests/s, 9648.19 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, i|\n    if char =~ /[AEIOU]/ && i.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpmx8jbsqe\nStarted\n.\nFinished in 0.000480159 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.64 tests/s, 14578.50 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.split(\"\").each_with_index do |letter, index|\n    if letter.match(/[AEIOU]/) && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpve41711e\nStarted\n.\nFinished in 0.00047611 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2100.35 tests/s, 14702.48 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, i|\n    if char =~ /[AEIOU]/ && i.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpmx8jbsqe\nStarted\n.\nFinished in 0.000480159 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2082.64 tests/s, 14578.50 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpc00osipw\nStarted\n.\nFinished in 0.000971157 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1029.70 tests/s, 7207.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpecuczh8t\nStarted\n.\nFinished in 0.000709143 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1410.15 tests/s, 9871.07 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpsbvrfe7l\nStarted\n.\nFinished in 0.000921148 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1085.60 tests/s, 7599.21 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5ja7au_4\nStarted\n.\nFinished in 0.000964734 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1036.56 tests/s, 7255.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.chars.each_with_index.count { |c, i| c =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpfhncu1p3\nStarted\n.\nFinished in 0.000725525 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1378.31 tests/s, 9648.19 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpf39sg0u2\nStarted\n.\nFinished in 0.00102198 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n978.49 tests/s, 6849.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  s.split(\"\").each_with_index.count { |char, i| char =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzzlqp6vg\nStarted\n.\nFinished in 0.00067222 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1487.61 tests/s, 10413.26 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    },
    {
      "exit_code": 0,
      "program": "# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpew2xw7g4\nStarted\n.\nFinished in 0.000960472 seconds.\n-------------------------------------------------------------------------------\n1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1041.15 tests/s, 7288.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659793362
    }
  ]
}