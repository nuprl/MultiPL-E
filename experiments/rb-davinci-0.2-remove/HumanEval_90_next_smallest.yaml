name: HumanEval_90_next_smallest
language: rb
prompt: "# You are given a list of integers.\n# Write a function next_smallest() that\
  \ returns the 2nd smallest element of the list.\n# Return None if there is no such\
  \ element.\ndef next_smallest(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_next_smallest\n\
  \    candidate = method(:next_smallest)\n    assert_equal(2, candidate.call([1,\
  \ 2, 3, 4, 5]))\n    assert_equal(2, candidate.call([5, 1, 4, 3, 2]))\n    assert_equal(nil,\
  \ candidate.call([]))\n    assert_equal(nil, candidate.call([1, 1]))\n    assert_equal(1,\
  \ candidate.call([1, 1, 1, 1, 0]))\n    assert_equal(nil, candidate.call([1, 1]))\n\
  \    assert_equal(-35, candidate.call([-35, 34, 12, -45]))\n  end\nend\n"
completions: ["  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.length < 2\n\
    \  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\n\
    end", "  # TODO: implement\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  return nil if lst.length < 2\n  lst.sort[1]\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  return nil if lst.length < 2\n  lst.sort!\n  lst[1]\nend",
  "  return nil if lst.empty?\n  lst.sort[1]\nend", "  return nil if lst.length <\
    \ 2\n  lst.sort[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\n\
    end", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", " \
    \ lst.sort!\n  lst[1]\nend", "  return nil if lst.length < 2\n  lst.sort[1]\n\
    end", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.length < 2\n  smallest\
    \ = lst[0]\n  second_smallest = nil\n  lst.each do |num|\n    if num < smallest\n\
    \      second_smallest = smallest\n      smallest = num\n    elsif num < second_smallest\
    \ || second_smallest.nil?\n      second_smallest = num\n    end\n  end\n  second_smallest\n\
    end", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.length < 2\n  lst.sort!\n\
    \  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.length < 2\n\
    \  lst.sort[1]\nend", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.length\
    \ < 2\n  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  return nil if lst.empty?\n  min = lst.min\n  lst.delete(min)\n\
    \  lst.min\nend", "  return nil if lst.length < 2\n  lst.sort!\n  lst[1]\nend",
  "  # TODO: implement me\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\n\
    end", "  return nil if lst.length < 2\n  lst.sort!\n  lst[1]\nend", "  return\
    \ nil if lst.length < 2\n  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  return lst[1]\n\
    end", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.length < 2\n  lst.sort!\n\
    \  lst[1]\nend", "  return nil if lst.length < 2\n  lst.sort!\n  lst[1]\nend",
  "  return nil if lst.length < 2\n  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\n\
    end", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", " \
    \ lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.length == 1\n  lst.sort!\n  lst[1]\nend", "  return nil if\
    \ lst.empty?\n  lst.sort[1]\nend", "  if lst.length < 2\n    return nil\n  end\n\
    \  min = lst[0]\n  min2 = lst[1]\n  for i in 1..lst.length-1\n    if lst[i] <\
    \ min\n      min2 = min\n      min = lst[i]\n    elsif lst[i] < min2\n      min2\
    \ = lst[i]\n    end\n  end\n  return min2\nend", "  return nil if lst.length <\
    \ 2\n  lst.sort[1]\nend", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.length\
    \ < 2\n  lst.sort!\n  lst[1]\nend", "  return nil if lst.empty?\n  lst.sort!\n\
    \  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", " \
    \ # your code here\nend", "  return nil if lst.length < 2\n  lst.sort[1]\nend",
  "  lst.sort!\n  lst[1]\nend", "  # TODO: implement me\nend", "  lst.sort!\n  if\
    \ lst.length > 1\n    lst[1]\n  else\n    nil\n  end\nend", "  return nil if lst.length\
    \ < 2\n  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", " \
    \ lst.sort!\n  lst[1]\nend", "  lst.sort!\n  if lst.length > 1\n    return lst[1]\n\
    \  else\n    return nil\n  end\nend", "  lst.sort!\n  lst[1]\nend", "  # TODO:\
    \ implement me\nend", "  if lst.length < 2\n    return nil\n  end\n  lst.sort!\n\
    \  return lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\n\
    end", "  lst.sort!\n  lst[1]\nend", "  # your code here\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.length < 2\n\
    \  lst.sort!\n  lst[1]\nend", "  return nil if lst.length < 2\n  lst.sort[1]\n\
    end", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.length < 2\n  lst.sort!\n\
    \  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.length < 2\n\
    \  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.length\
    \ < 2\n  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  if lst.length > 1\n    return\
    \ lst[1]\n  else\n    return nil\n  end\nend", "  lst.sort!\n  lst[1]\nend", " \
    \ return nil if lst.length < 2\n  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\n\
    end", "  return nil if lst.length < 2\n  lst.sort!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", " \
    \ return nil if lst.length < 2\n  lst.sort.uniq[1]\nend", "  lst.sort!\n  lst[1]\n\
    end", "  return nil if lst.length < 2\n  lst.sort!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.empty?\n \
    \ lst.sort[1]\nend", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.length\
    \ < 2\n  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  return nil if lst.length < 2\n  lst.sort!\n  lst[1]\nend",
  "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\n\
    end", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  if lst.length\
    \ < 2\n    return nil\n  end\n  smallest = lst[0]\n  second_smallest = lst[1]\n\
    \  lst.each do |num|\n    if num < smallest\n      second_smallest = smallest\n\
    \      smallest = num\n    elsif num < second_smallest\n      second_smallest\
    \ = num\n    end\n  end\n  return second_smallest\nend", "  lst.sort!\n  lst[1]\n\
    end", "  lst.sort!\n  lst[1]\nend", "  # Write your code here\nend", "  return\
    \ nil if lst.length < 2\n  lst.sort[1]\nend", "  lst.sort!\n  lst[1]\nend", " \
    \ lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.length\
    \ < 2\n  lst.sort[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\n\
    end", "  return nil if lst.length < 2\n  lst.sort!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  return nil if lst.empty?\n  lst.sort!\n  lst[1]\nend", " \
    \ lst.sort!\n  lst[1]\nend", "  lst.sort!\n  if lst.length > 1\n    return lst[1]\n\
    \  else\n    return nil\n  end\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", " \
    \ lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\n\
    end", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  # your code here\nend", "  return nil if lst.length < 2\n\
    \  lst.sort!\n  lst[1]\nend", "  return nil if lst.length < 2\n  lst.sort!\n \
    \ lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", " \
    \ lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.length\
    \ < 2\n  lst.sort[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\n\
    end", "  return nil if lst.length < 2\n  lst.sort!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  # your code here\nend", "  if lst.length < 2\n    return nil\n\
    \  end\n  lst.sort!\n  return lst[1]\nend", "  return nil if lst.length < 2\n\
    \  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\n\
    end", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n\
    \  if lst.length == 1\n    return nil\n  else\n    return lst[1]\n  end\nend",
  "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  # Write your code\
    \ here\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.length < 2\n\
    \  lst.sort!\n  lst[1]\nend", "  return nil if lst.length < 2\n  lst.sort!\n \
    \ lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  # Your code here\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", " \
    \ lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.length\
    \ < 2\n  lst.sort!\n  lst[1]\nend", "  return nil if lst.length < 2\n  lst.sort!\n\
    \  lst[1]\nend", "  # your code here\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  # TODO: implement\nend", "  lst.sort!\n  lst[1]\nend", " \
    \ lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.length\
    \ < 2\n  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", " \
    \ lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\nend", "  lst.sort!\n  lst[1]\n\
    end", "  lst.sort!\n  lst[1]\nend", "  return nil if lst.length < 2\n  lst.sort!\n\
    \  lst[1]\nend", "  return nil if lst.length < 2\n  lst.sort[1]\nend", "  lst.sort!\n\
    \  lst[1]\nend", "  lst.sort!\n  lst[1]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
