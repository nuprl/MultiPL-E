name: HumanEval_99_closest_integer
language: rb
prompt: "# Create a function that takes a value (string) representing a number\n#\
  \ and returns the closest integer to it. If the number is equidistant\n# from two\
  \ integers, round it away from zero.\n# Examples\n# Note:\n# Rounding away from\
  \ zero means that if the given number is equidistant\n# from two integers, the one\
  \ you should return is the one that is the\n# farthest from zero. For example closest_integer(\"\
  14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n\
  def closest_integer(value)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_closest_integer\n\
  \    candidate = method(:closest_integer)\n    assert_equal(10, candidate.call(\"\
  10\"))\n    assert_equal(15, candidate.call(\"14.5\"))\n    assert_equal(-16, candidate.call(\"\
  -15.5\"))\n    assert_equal(15, candidate.call(\"15.3\"))\n    assert_equal(0, candidate.call(\"\
  0\"))\n  end\nend\n"
completions: ["  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_f.round\n\
    end", "  value.to_f.round\nend", "  value.to_i\nend", "  value.to_i\nend", " \
    \ value.to_i\nend", "  value.to_i + (value.to_f - value.to_i > 0.5 ? 1 : 0)\n\
    end", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\n\
    end", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\n\
    end", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_f.round\n\
    end", "  value.to_f.round\nend", "  value.to_f.round\nend", "  value.to_i\nend",
  "  value.to_f.round\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\n\
    end", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\n\
    end", "  value = value.to_f\n  if value.to_s.include?(\".\")\n    value = value.round\n\
    \  else\n    value\n  end\nend", "  value.to_i\nend", "  value.to_i\nend", " \
    \ value.to_i\nend", "  value.to_i\nend", "  value = value.to_f\n  if value % 1\
    \ == 0\n    return value.to_i\n  elsif value % 1 < 0.5\n    return value.to_i\n\
    \  else\n    return value.to_i + 1\n  end\nend", "  value.to_i\nend", "  value.to_i\n\
    end", "  # Your code here\nend", "  value = value.to_f\n  if value % 1 == 0\n\
    \    value.to_i\n  elsif value % 1 > 0.5\n    value.ceil\n  else\n    value.floor\n\
    \  end\nend", "  value.to_i\nend", "  value.to_i + (value.to_f - value.to_i >=\
    \ 0.5 ? 1 : 0)\nend", "  value.to_f.round\nend", "  value.to_i\nend", "  value.to_i\n\
    end", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\n\
    end", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_f.round\n\
    end", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\n\
    end", "  value.to_f.round\nend", "  value.to_i\nend", "  value.to_i\nend", " \
    \ value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\n\
    end", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_f.round\n\
    end", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\n\
    end", "  value.to_f.round\nend", "  value.to_i\nend", "  value.to_f.round\nend",
  "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend",
  "  value.to_i\nend", "  value.to_f.round\nend", "  value.to_i\nend", "  value.to_f.round\n\
    end", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\n\
    end", "  value.to_f.round\nend", "  value.to_f.round\nend", "  value.to_f.round\n\
    end", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\n\
    end", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value\
    \ = value.to_f\n  if value > 0\n    value.ceil\n  else\n    value.floor\n  end\n\
    end", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\n\
    end", "  value.to_f.round\nend", "  value.to_i\nend", "  value.to_f.round\nend",
  "  value.to_f.round\nend", "  value.to_i\nend", "  value.to_f.round\nend", "  value\
    \ = value.to_f\n  if value - value.to_i >= 0.5\n    value.to_i + 1\n  else\n \
    \   value.to_i\n  end\nend", "  value.to_i\nend", "  value.to_f.round\nend", " \
    \ value.to_f.round\nend", "  value = value.to_f\n  if value < 0\n    value = value.ceil\n\
    \  else\n    value = value.floor\n  end\n  value\nend", "  value.to_f.round\n\
    end", "  value.to_i\nend", "  value.to_f.round\nend", "  value.to_i\nend", " \
    \ value.to_i\nend", "  value.to_i\nend", "  value = value.to_f\n  if value < 0\n\
    \    value = value.ceil\n  else\n    value = value.floor\n  end\n  value\nend",
  "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_f.round\n\
    end", "  value.to_f.round\nend", "  value.to_i\nend", "  value.to_f.round\nend",
  "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend",
  "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend",
  "  value.to_i + (value.to_f - value.to_i > 0.5 ? 1 : 0)\nend", "  value.to_i\nend",
  "  value.to_f.round\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\n\
    end", "  value.to_f.round\nend", "  value.to_i\nend", "  value.to_i + (value.to_f\
    \ - value.to_i >= 0.5 ? 1 : 0)\nend", "  value.to_f.round\nend", "  value.to_i\n\
    end", "  value.to_f.round\nend", "  value.to_i\nend", "  value.to_f.round\nend",
  "  value.to_i\nend", "  value.to_i\nend", "  value = value.to_f\n  if value < 0\n\
    \    value = value.ceil\n  else\n    value = value.floor\n  end\n  value\nend",
  "  value.to_f.round\nend", "  value = value.to_f\n  if value % 1 == 0\n    value.to_i\n\
    \  elsif value % 1 > 0.5\n    (value.to_i + 1)\n  else\n    value.to_i\n  end\n\
    end", "  value = value.to_f\n  if value % 1 == 0\n    value.to_i\n  elsif value\
    \ % 1 > 0.5\n    value.ceil\n  else\n    value.floor\n  end\nend", "  value.to_i\n\
    end", "  value.to_f.round\nend", "  value.to_i\nend", "  value.to_i\nend", " \
    \ value.to_f.round\nend", "  # Your code here\nend", "  value.to_i\nend", "  value.to_i\n\
    end", "  value.to_i\nend", "  value.to_i\nend", "  value.to_f.round\nend", " \
    \ value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\n\
    end", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value\
    \ = value.to_f\n  if value % 1 == 0\n    value.to_i\n  elsif value % 1 < 0.5\n\
    \    value.floor\n  else\n    value.ceil\n  end\nend", "  value.to_i\nend", " \
    \ value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\n\
    end", "  value.to_i\nend", "  value.to_f.round\nend", "  value.to_i\nend", " \
    \ value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_f.round\n\
    end", "  value.to_i\nend", "  value = value.to_f\n  if value % 1 == 0\n    value.to_i\n\
    \  elsif value % 1 < 0.5\n    value.to_i\n  else\n    value.to_i + 1\n  end\n\
    end", "  value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend", "  value.to_f.round\n\
    end", "  value.to_i\nend", "  value.to_i\nend", "  value.to_f.round\nend", " \
    \ value.to_i\nend", "  value.to_i\nend", "  value.to_i\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
