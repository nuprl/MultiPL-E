language: rb
name: HumanEval_116_sort_array
results:
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8599cuwl

    Started

    .

    Finished in 0.000458125 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2182.81 tests/s, 17462.48 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8599cuwl

    Started

    .

    Finished in 0.000458125 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2182.81 tests/s, 17462.48 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8599cuwl

    Started

    .

    Finished in 0.000458125 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2182.81 tests/s, 17462.48 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8599cuwl

    Started

    .

    Finished in 0.000458125 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2182.81 tests/s, 17462.48 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  # your code here\n  arr.sort_by{|x| [x.to_s(2).count('1'),\
    \ x]}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkuk7qwzj

    Started

    .

    Finished in 0.000473593 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2111.52 tests/s, 16892.14 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8599cuwl

    Started

    .

    Finished in 0.000458125 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2182.81 tests/s, 17462.48 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8599cuwl

    Started

    .

    Finished in 0.000458125 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2182.81 tests/s, 17462.48 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |i| [i.to_s(2).count('1'),\
    \ i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcg4qzqtk

    Started

    .

    Finished in 0.000453548 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2204.84 tests/s, 17638.71 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by{|x| [x.to_s(2).count('1'), x]}\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpq1j59pf4

    Started

    .

    Finished in 0.000475937 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2101.12 tests/s, 16808.95 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprljxncq9

    Started

    .

    Finished in 0.000463126 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2159.24 tests/s, 17273.92 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8599cuwl

    Started

    .

    Finished in 0.000458125 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2182.81 tests/s, 17462.48 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprljxncq9

    Started

    .

    Finished in 0.000463126 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2159.24 tests/s, 17273.92 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprljxncq9

    Started

    .

    Finished in 0.000463126 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2159.24 tests/s, 17273.92 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprljxncq9

    Started

    .

    Finished in 0.000463126 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2159.24 tests/s, 17273.92 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprljxncq9

    Started

    .

    Finished in 0.000463126 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2159.24 tests/s, 17273.92 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8599cuwl

    Started

    .

    Finished in 0.000458125 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2182.81 tests/s, 17462.48 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprljxncq9

    Started

    .

    Finished in 0.000463126 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2159.24 tests/s, 17273.92 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8599cuwl

    Started

    .

    Finished in 0.000458125 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2182.81 tests/s, 17462.48 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8599cuwl

    Started

    .

    Finished in 0.000458125 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2182.81 tests/s, 17462.48 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8599cuwl

    Started

    .

    Finished in 0.000458125 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2182.81 tests/s, 17462.48 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8599cuwl

    Started

    .

    Finished in 0.000458125 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2182.81 tests/s, 17462.48 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8599cuwl

    Started

    .

    Finished in 0.000458125 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2182.81 tests/s, 17462.48 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprljxncq9

    Started

    .

    Finished in 0.000463126 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2159.24 tests/s, 17273.92 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8599cuwl

    Started

    .

    Finished in 0.000458125 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2182.81 tests/s, 17462.48 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprljxncq9

    Started

    .

    Finished in 0.000463126 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2159.24 tests/s, 17273.92 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8599cuwl

    Started

    .

    Finished in 0.000458125 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2182.81 tests/s, 17462.48 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprljxncq9

    Started

    .

    Finished in 0.000463126 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2159.24 tests/s, 17273.92 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |i| [i.to_s(2).count('1'),\
    \ i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcg4qzqtk

    Started

    .

    Finished in 0.000453548 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2204.84 tests/s, 17638.71 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8599cuwl

    Started

    .

    Finished in 0.000458125 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2182.81 tests/s, 17462.48 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprljxncq9

    Started

    .

    Finished in 0.000463126 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2159.24 tests/s, 17273.92 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |n| [n.to_s(2).count('1'),\
    \ n] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprljxncq9

    Started

    .

    Finished in 0.000463126 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2159.24 tests/s, 17273.92 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8599cuwl

    Started

    .

    Finished in 0.000458125 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2182.81 tests/s, 17462.48 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |i| [i.to_s(2).count('1'),\
    \ i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcg4qzqtk

    Started

    .

    Finished in 0.000453548 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2204.84 tests/s, 17638.71 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |num| [num.to_s(2).count('1'),\
    \ num] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8599cuwl

    Started

    .

    Finished in 0.000458125 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2182.81 tests/s, 17462.48 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
- exit_code: 0
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\ndef sort_array(arr)\n  arr.sort_by { |x| [x.to_s(2).count('1'),\
    \ x] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcjueshik

    Started

    .

    Finished in 0.000470279 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2126.40 tests/s, 17011.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794771
