name: HumanEval_152_compare
language: rb
prompt: "# I think we all remember that feeling when the result of some long-awaited\n\
  # event is finally known. The feelings and thoughts you have at that moment are\n\
  # definitely worth noting down and comparing.\n# Your task is to determine if a\
  \ person correctly guessed the results of a number of matches.\n# You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n# Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n# the value is 0, and if not, the value is the absolute\
  \ difference between the guess and the score.\n# example:\ndef compare(game, guess)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
  \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0,\
  \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
  \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2, 3,\
  \ 5], [-1, 2, 3, 4]))\n  end\nend\n"
completions: ["  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  result = []\n\
    \  game.each_with_index do |score, index|\n    result << (score - guess[index]).abs\n\
    \  end\n  result\nend", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", " \
    \ game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |x,\
    \ y| (x-y).abs }\nend", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", " \
    \ game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a,\
    \ b| (a - b).abs }\nend", "  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend", "  game.zip(guess).map\
    \ { |x, y| (x - y).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |x, y| (x - y).abs }\nend", "  result = []\n  game.each_with_index do |score,\
    \ index|\n    if score == guess[index]\n      result << 0\n    else\n      result\
    \ << (score - guess[index]).abs\n    end\n  end\n  result\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |x, y| (x - y).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  result = []\n  game.each_with_index do |score, index|\n    if score ==\
    \ guess[index]\n      result << 0\n    else\n      result << (score - guess[index]).abs\n\
    \    end\n  end\n  result\nend", "  game.zip(guess).map { |x, y| (x - y).abs }\n\
    end", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map\
    \ { |x, y| (x - y).abs }\nend", "  game.zip(guess).map { |x, y| (x - y).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  result = []\n  game.each_with_index\
    \ do |score, index|\n    if score == guess[index]\n      result << 0\n    else\n\
    \      result << (score - guess[index]).abs\n    end\n  end\n  result\nend", " \
    \ result = []\n  game.each_with_index do |num, index|\n    result << (num - guess[index]).abs\n\
    \  end\n  result\nend", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", " \
    \ game.zip(guess).map { |a, b| (a - b).abs }\nend", "  # your code here\n  result\
    \ = []\n  game.each_with_index do |g, i|\n    if g == guess[i]\n      result <<\
    \ 0\n    else\n      result << (g - guess[i]).abs\n    end\n  end\n  result\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |x, y| (x - y).abs }\nend", "  game.zip(guess).map { |g, gs| (g - gs).abs\
    \ }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  result = []\n  game.each_with_index do |score,\
    \ index|\n    result << (score - guess[index]).abs\n  end\n  result\nend", " \
    \ game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a,\
    \ b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\nend",
  "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a,\
    \ b| (a - b).abs }\nend", "  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  result = []\n  game.each_with_index do |g,\
    \ i|\n    result << (g - guess[i]).abs\n  end\n  result\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  result = []\n  game.each_with_index do |g,\
    \ i|\n    result << (g - guess[i]).abs\n  end\n  result\nend", "  game.zip(guess).map\
    \ { |g, gs| (g - gs).abs }\nend", "  game.zip(guess).map { |game, guess| (game\
    \ - guess).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", " \
    \ game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |x,\
    \ y| (x - y).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\nend",
  "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.map.with_index { |x,\
    \ i| (x - guess[i]).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |x, y| (x - y).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  result = []\n  game.each_with_index do |score,\
    \ index|\n    result << (score - guess[index]).abs\n  end\n  result\nend", " \
    \ game.zip(guess).map { |a, b| (a - b).abs }\nend", "  result = []\n  game.each_with_index\
    \ do |score, index|\n    result << (score - guess[index]).abs\n  end\n  result\n\
    end", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map\
    \ { |game, guess| (game - guess).abs }\nend", "  game.zip(guess).map { |a, b|\
    \ (a - b).abs }\nend", "  result = []\n  game.each_with_index do |item, index|\n\
    \    result << (item - guess[index]).abs\n  end\n  result\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |x, y| (x - y).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map\
    \ { |g, gs| (g - gs).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs\
    \ }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  result = []\n  game.each_with_index\
    \ do |value, index|\n    result << (value - guess[index]).abs\n  end\n  result\n\
    end", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |x, y| (x - y).abs }\nend", "  result = []\n  game.each_with_index do |score,\
    \ index|\n    result << (score - guess[index]).abs\n  end\n  result\nend", " \
    \ game.zip(guess).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map { |a,\
    \ b| (a - b).abs }\nend", "  result = []\n  game.each_with_index do |score, index|\n\
    \    result << (score - guess[index]).abs\n  end\n  result\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  result = []\n  game.each_with_index\
    \ do |score, index|\n    if score == guess[index]\n      result << 0\n    else\n\
    \      result << (score - guess[index]).abs\n    end\n  end\n  result\nend", " \
    \ result = []\n  game.each_with_index do |score, index|\n    result << (score\
    \ - guess[index]).abs\n  end\n  result\nend", "  game.zip(guess).map { |a, b|\
    \ (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", " \
    \ game.zip(guess).map { |g, gs| (g - gs).abs }\nend", "  game.zip(guess).map {\
    \ |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |x, y| (x - y).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.map.with_index { |score, i| (score - guess[i]).abs\
    \ }\nend", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |x, y| (x - y).abs }\n\
    end", "  game.zip(guess).map { |g, gs| (g - gs).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |x, y| (x - y).abs }\n\
    end", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", "  result = []\n  game.each_with_index\
    \ do |score, index|\n    if score == guess[index]\n      result << 0\n    else\n\
    \      result << (score - guess[index]).abs\n    end\n  end\n  result\nend", " \
    \ game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |x,\
    \ y| (x - y).abs }\nend", "  result = []\n  game.each_with_index do |num, index|\n\
    \    if num == guess[index]\n      result << 0\n    else\n      result << (num\
    \ - guess[index]).abs\n    end\n  end\n  result\nend", "  game.zip(guess).map\
    \ { |x, y| (x - y).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  result = []\n  game.each_with_index do |score,\
    \ index|\n    result << (score - guess[index]).abs\n  end\n  result\nend", " \
    \ game.zip(guess).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map { |x,\
    \ y| (x - y).abs }\nend", "  result = []\n  game.each_with_index do |num, index|\n\
    \    if num == guess[index]\n      result << 0\n    else\n      result << (num\
    \ - guess[index]).abs\n    end\n  end\n  result\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |x, y| (x - y).abs }\n\
    end", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |x, y| (x - y).abs }\n\
    end", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map\
    \ { |x, y| (x - y).abs }\nend", "  result = []\n  game.each_with_index do |score,\
    \ index|\n    result << (score - guess[index]).abs\n  end\n  result\nend", " \
    \ game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a,\
    \ b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\nend",
  "  result = []\n  game.each_with_index do |score, index|\n    if score == guess[index]\n\
    \      result << 0\n    else\n      result << (score - guess[index]).abs\n   \
    \ end\n  end\n  result\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  result = []\n  game.each_with_index do |value, index|\n    if value ==\
    \ guess[index]\n      result << 0\n    else\n      result << (value - guess[index]).abs\n\
    \    end\n  end\n  result\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |x, y| (x - y).abs }\n\
    end", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", "  result = []\n  game.each_with_index\
    \ do |num, index|\n    if num == guess[index]\n      result << 0\n    else\n \
    \     result << (num - guess[index]).abs\n    end\n  end\n  result\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |x, y| (x - y).abs }\n\
    end", "  game.zip(guess).map { |x, y| (x - y).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  result = []\n  game.each_with_index do |num,\
    \ index|\n    result << (num - guess[index]).abs\n  end\n  result\nend", "  game.zip(guess).map\
    \ { |x, y| (x - y).abs }\nend", "  game.zip(guess).map { |x, y| (x - y).abs }\n\
    end", "  game.map.with_index { |score, i| (score - guess[i]).abs }\nend", "  result\
    \ = []\n  game.each_with_index do |score, index|\n    result << (score - guess[index]).abs\n\
    \  end\n  result\nend", "  game.zip(guess).map { |g, gs| (g - gs).abs }\nend",
  "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a,\
    \ b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\nend",
  "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  result = []\n  game.each_with_index\
    \ do |score, index|\n    result << (score - guess[index]).abs\n  end\n  result\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", "  game.zip(guess).map\
    \ { |a, b| (a - b).abs }\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\n\
    end", "  game.zip(guess).map { |g, gs| (g - gs).abs }\nend", "  result = []\n\
    \  game.each_with_index do |value, index|\n    if value == guess[index]\n    \
    \  result << 0\n    else\n      result << (value - guess[index]).abs\n    end\n\
    \  end\n  result\nend", "  game.zip(guess).map { |a, b| (a - b).abs }\nend", " \
    \ game.zip(guess).map { |x, y| (x - y).abs }\nend", "  result = []\n  game.each_with_index\
    \ do |score, index|\n    result << (score - guess[index]).abs\n  end\n  result\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
