name: HumanEval_44_change_base
language: rb
prompt: "# Change numerical base of input number x to base.\n# return string representation\
  \ after the conversion.\n# base numbers are less than 10.\ndef change_base(x, base)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_change_base\n\
  \    candidate = method(:change_base)\n    assert_equal(\"22\", candidate.call(8,\
  \ 3))\n    assert_equal(\"100\", candidate.call(9, 3))\n    assert_equal(\"11101010\"\
  , candidate.call(234, 2))\n    assert_equal(\"10000\", candidate.call(16, 2))\n\
  \    assert_equal(\"1000\", candidate.call(8, 2))\n    assert_equal(\"111\", candidate.call(7,\
  \ 2))\n    assert_equal(\"2\", candidate.call(2, 3))\n    assert_equal(\"3\", candidate.call(3,\
  \ 4))\n    assert_equal(\"4\", candidate.call(4, 5))\n    assert_equal(\"5\", candidate.call(5,\
  \ 6))\n    assert_equal(\"6\", candidate.call(6, 7))\n    assert_equal(\"7\", candidate.call(7,\
  \ 8))\n  end\nend\n"
completions: ["  return x.to_s if base == 10\n  return change_base(x / base, base)\
    \ + (x % base).to_s\nend", "  return x.to_s if x < base\n  change_base(x / base,\
    \ base) + (x % base).to_s\nend", "  if x == 0\n    return \"0\"\n  end\n  result\
    \ = \"\"\n  while x > 0\n    result = (x % base).to_s + result\n    x /= base\n\
    \  end\n  return result\nend", "  return x.to_s if base < 10\n  return (x + 10).chr\
    \ if base == 10\n  return (x + 55).chr if base > 10\nend", "  return x.to_s if\
    \ base == 10\n  return x.to_s(base) if base < 10\n  return nil if base > 10\n\
    end", "  return x.to_s if base < 10\n  x_str = ''\n  while x > 0\n    x_str =\
    \ (x % base).to_s + x_str\n    x /= base\n  end\n  x_str\nend", "  return x.to_s\
    \ if base == 10\n  return x.to_s(base) if base < 10\n  return '0' if x == 0\n\
    \  result = ''\n  while x > 0\n    result = (x % base).to_s + result\n    x /=\
    \ base\n  end\n  result\nend", "  return x.to_s if base < 2\n  return '0' if x\
    \ == 0\n  return '1' if x == 1", "  x.to_s(base)\nend", "  return x.to_s if base\
    \ == 10\n  return \"\" if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base < 2\n  return nil if x < 0\n  return \"0\" if x\
    \ == 0\n  return \"1\" if x == 1", "  return x.to_s if base < 2\n  return '' if\
    \ x == 0\n  return change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base).upcase\
    \ if base < 36\n  return x.to_s(base).downcase if base < 62\n  return x.to_s(base).upcase\
    \ if base < 64\n  return x.to_s(base).downcase if base < 91\n  return x.to_s(base).upcase\
    \ if base < 95\n  return x.to_s(base).downcase if base < 123\n  return x.to_s(base).upcase\
    \ if base < 127\n  return x.to_s(base).downcase if base < 160\n  return x.to_s(base).upcase\
    \ if base < 255\n  return x.to_s(base).downcase if base < 256\n  return x.to_s(base).upcase\
    \ if base < 512\n  return x.to_s(base).downcase if base < 1024\n  return x.to_s(base).upcase\
    \ if base < 2048\n  return x.to_s(base).downcase if base < 4096\n  return x.to_s(base).upcase\
    \ if base < 8192\n  return x.to_s(base).downcase if base < 16384\n  return x.to_s(base).upcase\
    \ if base < 32768\n  return x.to_s(base).downcase if base < 65536\n  return x.to_s(base).upcase\
    \ if base < 131072\n  return x.to_s(base).downcase if base < 262144\n  return\
    \ x.to_s(base).upcase if base < 524288\n  return x.to_s(base).downcase if base\
    \ < 1048576\n  return x.to_s(base).upcase if base < 2097152\n  return x.to_s(base).downcase\
    \ if base < 4194304\n  return x.to_s(base).upcase if base < 8388608\n  return\
    \ x.to_s(base).downcase if base < 16777216\n  return x.to_s(base).upcase if base\
    \ < 33554432\n  return", "  return nil if x < 0 || base < 2 || base > 10\n  return\
    \ x.to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", " \
    \ return x.to_s if base < 2\n  return (x % base).to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base < 2\n  return\
    \ change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s if base\
    \ < 2\n  return nil if x < 0\n  return \"0\" if x == 0\n  return \"1\" if x ==\
    \ 1\n  return change_base(x/base, base) + (x%base).to_s\nend", "  return x.to_s\
    \ if base < 2\n  return '0' if x == 0\n  x = x.to_i\n  digits = []\n  while x\
    \ > 0\n    digits.push(x % base)\n    x /= base\n  end\n  digits.reverse.join('')\n\
    end", "  res = ''\n  while x > 0\n    res = (x % base).to_s + res\n    x /= base\n\
    \  end\n  res\nend", "  return x.to_s if base < 2\n  return \"0\" if x == 0\n\
    \  return \"1\" if x == 1", "  return x.to_s if base < 2\n  return (x % base).to_s\
    \ if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", "  x.to_s(base)\n\
    end", "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return '' if x == 0\n  change_base(x / base, base) + x % base.to_s\n\
    end", "  return x.to_s if base < 2\n  return \"0\" if x == 0\n  return \"1\" if\
    \ x == 1\n  return \"2\" if x == 2\n  return \"3\" if x == 3\n  return \"4\" if\
    \ x == 4\n  return \"5\" if x == 5\n  return \"6\" if x == 6\n  return \"7\" if\
    \ x == 7\n  return \"8\" if x == 8\n  return \"9\" if x == 9\n  return \"10\"\
    \ if x == 10\n  return \"11\" if x == 11\n  return \"12\" if x == 12\n  return\
    \ \"13\" if x == 13\n  return \"14\" if x == 14\n  return \"15\" if x == 15\n\
    \  return \"16\" if x == 16\n  return \"17\" if x == 17\n  return \"18\" if x\
    \ == 18\n  return \"19\" if x == 19\n  return \"20\" if x == 20\n  return \"21\"\
    \ if x == 21\n  return \"22\" if x == 22\n  return \"23\" if x == 23\n  return\
    \ \"24\" if x == 24\n  return \"25\" if x == 25\n  return \"26\" if x == 26\n\
    \  return \"27\" if x == 27\n  return \"28\" if x == 28\n  return \"29\" if x\
    \ == 29\n  return \"30\" if x == 30\n  return \"31\" if x == 31\n  return \"32\"\
    \ if x == 32\n  return \"33\" if x == 33\n  return \"34\" if x == 34\n  return\
    \ \"35\" if x == 35\n  return \"36\" if x == 36\n  return \"37\" if x == 37\n\
    \  return \"38\" if x == 38\n  return \"39\" if x == 39\n  return \"40\" if x\
    \ == 40\n  return \"41\" if x == 41\n  return \"42\" if x == 42\n  return \"43\"\
    \ if x == 43\n  return \"44\" if x == 44\n  return \"45\" if x == 45\n  return\
    \ \"46\" if x == 46\n  return \"47\" if x == 47\n  return \"48\" if x == 48\n\
    \  return \"49\" if x == 49", "  return x.to_s if base < 2\n  return (x % base).to_s\
    \ if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return \"-\" + change_base(-x,\
    \ base) if x < 0\n  return change_base(x / base, base) + (x % base).to_s\nend",
  "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10", "  return x.to_s\
    \ if base == 10\n  return \"\" if x == 0\n  change_base(x / base, base) + (x %\
    \ base).to_s\nend", "  return x.to_s if x < base\n  change_base(x / base, base)\
    \ + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return x.to_s(base)\
    \ if base < 10\n  return nil if base > 10", "  return x.to_s if base == 10\n \
    \ return \"0\" if x == 0\n  result = \"\"\n  while x > 0\n    result = (x % base).to_s\
    \ + result\n    x /= base\n  end\n  result\nend", "  return x.to_s if x < base\n\
    \  change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s if base\
    \ == 10\n  return x.to_s(base) if base < 10\n  x = x.to_s(base)\n  x.gsub!(/[0-9]/)\
    \ { |i| i.to_i.to_s(base) }\n  x\nend", "  return x.to_s if base == 10\n  return\
    \ x.to_s(base) if x < base\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return\
    \ x.to_s(base).upcase if base < 36\n  return x.to_s(base).downcase if base < 62\n\
    \  return x.to_s(base).upcase if base < 94\n  return x.to_s(base).downcase if\
    \ base < 122\n  return x.to_s(base).upcase if base < 128\n  return x.to_s(base).downcase\
    \ if base < 154\n  return x.to_s(base).upcase if base < 180\n  return x.to_s(base).downcase\
    \ if base < 206\n  return x.to_s(base).upcase if base < 232\n  return x.to_s(base).downcase\
    \ if base < 258\n  return x.to_s(base).upcase if base < 284\n  return x.to_s(base).downcase\
    \ if base < 310\n  return x.to_s(base).upcase if base < 336\n  return x.to_s(base).downcase\
    \ if base < 362\n  return x.to_s(base).upcase if base < 388\n  return x.to_s(base).downcase\
    \ if base < 414\n  return x.to_s(base).upcase if base < 440\n  return x.to_s(base).downcase\
    \ if base < 466\n  return x.to_s(base).upcase if base < 492\n  return x.to_s(base).downcase\
    \ if base < 518\n  return x.to_s(base).upcase if base < 544\n  return x.to_s(base).downcase\
    \ if base < 570\n  return x.to_s(base).upcase if base < 596\n  return x.to_s(base).downcase\
    \ if base < 622\n  return x.to_s(base).upcase if base < 648\n  return x.to_s(base).downcase\
    \ if base < 674\n  return x.to_s(base).upcase if base < 700\n  return x.to_s(base).downcase\
    \ if base < 7", "  return x.to_s if base == 10\n  return x.to_s(base) if base\
    \ < 10\n  x = x.to_s(base)\n  x.gsub!(/[0-9]/) { |m| (m.to_i + 10).chr }\n  x\n\
    end", "  return x.to_s if base == 10\n  return nil if x < 0\n  s = ''\n  while\
    \ x > 0\n    s << (x % base).to_s\n    x /= base\n  end\n  s.reverse\nend", " \
    \ return x.to_s if base < 10\n  return x.to_s(base) if base == 10\n  return x.to_s(base)\
    \ if x < base\n  return change_base(x / base, base) + (x % base).to_s\nend", " \
    \ return x.to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  x.to_s(base)\nend", "  return x.to_s if base == 10\n  return '' if x\
    \ == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s\
    \ if base < 10\n  return (x + 10).chr if base == 10\n  return (x + 55).chr if\
    \ base > 10\nend", "  return x.to_s if base == 10\n  return '0' if x == 0\n  result\
    \ = ''\n  while x > 0\n    result = (x % base).to_s + result\n    x /= base\n\
    \  end\n  result\nend", "  return x.to_s if base == 10\n  return \"0\" if x ==\
    \ 0\n  digits = []\n  while x > 0\n    digits << x % base\n    x /= base\n  end\n\
    \  digits.reverse.join\nend", "  return x.to_s if base == 10\n  return change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return\
    \ \"0\" if x == 0\n  result = \"\"\n  while x > 0\n    result << (x % base).to_s\n\
    \    x /= base\n  end\n  result.reverse\nend", "  return x.to_s if base == 10\n\
    \  return \"0\" if x == 0\n  result = \"\"\n  while x > 0\n    result = (x % base).to_s\
    \ + result\n    x /= base\n  end\n  result\nend", "  x.to_s(base)\nend", "  return\
    \ '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ x.to_s if base == 10\n  return nil if x < 0\n  return nil if base < 2", "  #\
    \ convert x to string\n  x = x.to_s\n  # convert string to array of characters\n\
    \  x = x.split('')\n  # convert array of characters to array of integers\n  x\
    \ = x.map { |i| i.to_i }\n  # reverse array\n  x = x.reverse\n  # initialize result\n\
    \  result = 0\n  # loop through array\n  x.each_with_index do |i, index|\n   \
    \ # add to result\n    result += i * base ** index\n  end\n  # return result\n\
    \  result\nend", "  return \"0\" if x == 0\n  return \"1\" if x == 1\n  return\
    \ \"2\" if x == 2\n  return \"3\" if x == 3\n  return \"4\" if x == 4\n  return\
    \ \"5\" if x == 5\n  return \"6\" if x == 6\n  return \"7\" if x == 7\n  return\
    \ \"8\" if x == 8\n  return \"9\" if x == 9\n  return \"A\" if x == 10\n  return\
    \ \"B\" if x == 11\n  return \"C\" if x == 12\n  return \"D\" if x == 13\n  return\
    \ \"E\" if x == 14\n  return \"F\" if x == 15\n  return \"G\" if x == 16\n  return\
    \ \"H\" if x == 17\n  return \"I\" if x == 18\n  return \"J\" if x == 19\n  return\
    \ \"K\" if x == 20\n  return \"L\" if x == 21\n  return \"M\" if x == 22\n  return\
    \ \"N\" if x == 23\n  return \"O\" if x == 24\n  return \"P\" if x == 25\n  return\
    \ \"Q\" if x == 26\n  return \"R\" if x == 27\n  return \"S\" if x == 28\n  return\
    \ \"T\" if x == 29\n  return \"U\" if x == 30\n  return \"V\" if x == 31\n  return\
    \ \"W\" if x == 32\n  return \"X\" if x == 33\n  return \"Y\" if x == 34\n  return\
    \ \"Z\" if x == 35\n  return \"a\" if x == 36\n  return \"b\" if x == 37\n  return\
    \ \"c\" if x == 38\n  return \"d\" if x == 39\n  return \"e\" if x == 40\n  return\
    \ \"f\" if x == 41\n  return \"g\" if x == 42\n  return \"h\" if x == 43\n  return\
    \ \"i\" if x == 44\n  return \"j\" if x == 45\n  return \"k\" if x == 46\n  return\
    \ \"l\" if x == 47\n  return \"m\" if x == 48\n  return \"n\" if x == 49\n  return\
    \ \"o\" if x == 50\n ", "  return x.to_s if base == 10\n  return x.to_s(base)\
    \ if base < 10\n  return nil if x < 0\n  return nil if base < 2\n  return nil\
    \ if base > 10", "  return x.to_s if base < 2\n  return (x % base).to_s if x <\
    \ base\n  change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s\
    \ if base < 2\n  return nil if x < 0\n  return '0' if x == 0\n  return '1' if\
    \ x == 1", "  return x.to_s if base == 10\n  return '0' if x == 0\n  result =\
    \ ''\n  while x > 0\n    result = (x % base).to_s + result\n    x /= base\n  end\n\
    \  result\nend", "  return \"0\" if x == 0\n  sign = x < 0 ? \"-\" : \"\"\n  x\
    \ = -x if x < 0\n  digits = []\n  while x > 0\n    digits << x % base\n    x /=\
    \ base\n  end\n  sign + digits.reverse.join\nend", "  return x.to_s if base ==\
    \ 10\n  return change_base(x/base, base) + (x%base).to_s\nend", "  return x.to_s\
    \ if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ x.to_s if base == 10\n  return change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base < 2\n  return (x % base).to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return\
    \ '0' if x == 0\n  result = ''\n  while x > 0\n    result = (x % base).to_s +\
    \ result\n    x /= base\n  end\n  result\nend", "  return x.to_s if base == 10\n\
    \  return x.to_s(base) if base < 10\n  return nil if base > 10\nend", "  x.to_s(base)\n\
    end", "  return x.to_s if base == 10\n  return change_base(x / base, base) + (x\
    \ % base).to_s\nend", "  return x.to_s if base == 10\n  return x.to_s(base) if\
    \ base < 10\n  return '0' if x == 0\n  result = ''\n  while x > 0\n    result\
    \ = (x % base).to_s + result\n    x /= base\n  end\n  result\nend", "  return\
    \ x.to_s if base == 10\n  return nil if x < 0\n  return \"0\" if x == 0\n  result\
    \ = \"\"\n  while x > 0\n    result = (x % base).to_s + result\n    x /= base\n\
    \  end\n  result\nend", "  return \"\" if x == 0\n  change_base(x / base, base)\
    \ + (x % base).to_s\nend", "  return x.to_s if base < 2\n  return (x % base).to_s\
    \ if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ x.to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", " \
    \ return x.to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return\
    \ change_base(x, base - 10) + (x % 10).to_s\nend", "  return x.to_s if base ==\
    \ 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base == 16\n\
    \  return x.to_s(base) if base == 8\n  return x.to_s(base) if base == 2\n  return\
    \ x.to_s(base) if base == 36\n  return x.to_s(base) if base == 62\n  return x.to_s(base)\
    \ if base == 64\n  return x.to_s(base) if base == 85\n  return x.to_s(base) if\
    \ base == 95\n  return x.to_s(base) if base == 100\n  return x.to_s(base) if base\
    \ == 128\n  return x.to_s(base) if base == 256\n  return x.to_s(base) if base\
    \ == 512\n  return x.to_s(base) if base == 1024\n  return x.to_s(base) if base\
    \ == 2048\n  return x.to_s(base) if base == 4096\n  return x.to_s(base) if base\
    \ == 8192\n  return x.to_s(base) if base == 16384\n  return x.to_s(base) if base\
    \ == 32768\n  return x.to_s(base) if base == 65536\n  return x.to_s(base) if base\
    \ == 131072\n  return x.to_s(base) if base == 262144\n  return x.to_s(base) if\
    \ base == 524288\n  return x.to_s(base) if base == 1048576\n  return x.to_s(base)\
    \ if base == 2097152\n  return x.to_s(base) if base == 4194304\n  return x.to_s(base)\
    \ if base == 8388608\n  return x.to_s(base) if base == 16777216\n  return x.to_s(base)\
    \ if base == 33554432\n  return x.to_s(base) if base == 67108864\n  return x.to_s(base)\
    \ if base == 134217728\n  return x.to", "  return x.to_s if base < 10\n  return\
    \ (x + 10).chr if base == 10\n  return (x + 55).chr if base > 10\nend", "  return\
    \ x.to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", " \
    \ return \"\" if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend",
  "  return x.to_s if base == 10\n  return x.to_s(base) if base <= 10\n  x_str = x.to_s\n\
    \  x_str.reverse!\n  x_str.gsub!(/(\\d{3})/, '\\1,')\n  x_str.reverse!\n  x_str.chop!\
    \ if x_str[-1] == ','\n  x_str\nend", "  return x.to_s if base == 10\n  return\
    \ \"\" if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return nil if base\
    \ > 10", "  return x.to_s if base == 10\n  result = []\n  while x > 0\n    result\
    \ << (x % base).to_s\n    x /= base\n  end\n  result.reverse.join\nend", "  return\
    \ x.to_s if base < 2\n  return nil if x < 0", "  return x.to_s if x < base\n \
    \ change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s if base\
    \ == 10\n  return x.to_s(base) if base < 10\n  return change_base(x, base - 10)\
    \ + (x % 10).to_s\nend", "  return x.to_s if base == 10\n  return x.to_s(base)\
    \ if base < 10\n  raise \"base must be less than 10\"\nend", "  return x.to_s\
    \ if base == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if\
    \ base == 16\n  return x.to_s(base) if base == 8\n  return x.to_s(base) if base\
    \ == 2\n  return x.to_s(base) if base == 4\n  return x.to_s(base) if base == 3\n\
    \  return x.to_s(base) if base == 5\n  return x.to_s(base) if base == 6\n  return\
    \ x.to_s(base) if base == 7\n  return x.to_s(base) if base == 9\n  return x.to_s(base)\
    \ if base == 11\n  return x.to_s(base) if base == 12\n  return x.to_s(base) if\
    \ base == 13\n  return x.to_s(base) if base == 14\n  return x.to_s(base) if base\
    \ == 15\n  return x.to_s(base) if base == 17\n  return x.to_s(base) if base ==\
    \ 18\n  return x.to_s(base) if base == 19\n  return x.to_s(base) if base == 20\n\
    \  return x.to_s(base) if base == 21\n  return x.to_s(base) if base == 22\n  return\
    \ x.to_s(base) if base == 23\n  return x.to_s(base) if base == 24\n  return x.to_s(base)\
    \ if base == 25\n  return x.to_s(base) if base == 26\n  return x.to_s(base) if\
    \ base == 27\n  return x.to_s(base) if base == 28\n  return x.to_s(base) if base\
    \ == 29\n  return x.to_s(base) if base == 30\n  return x.to_s(base) if base ==\
    \ 31\n  return x.to_s(base) if base == 32\n  return x.to_s(base) if base == 33\n\
    \  return x.to_s(base) if base == 34\n  return x.", "  return x.to_s if base ==\
    \ 10\n  return x.to_s(base) if base < 10\n  return change_base(x, base - 10) +\
    \ (x % 10).to_s\nend", "  return x.to_s if base < 2\n  return (x % base).to_s\
    \ if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", "  x.to_s(base)\n\
    end", "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return \"\" if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return\
    \ \"0\" if x == 0\n  return \"1\" if x == 1\n  return \"10\" if x == 2\n  return\
    \ \"11\" if x == 3\n  return \"100\" if x == 4\n  return \"101\" if x == 5\n \
    \ return \"110\" if x == 6\n  return \"111\" if x == 7\n  return \"1000\" if x\
    \ == 8\n  return \"1001\" if x == 9\n  return \"1010\" if x == 10\n  return \"\
    1011\" if x == 11\n  return \"1100\" if x == 12\n  return \"1101\" if x == 13\n\
    \  return \"1110\" if x == 14\n  return \"1111\" if x == 15\n  return \"10000\"\
    \ if x == 16\n  return \"10001\" if x == 17\n  return \"10010\" if x == 18\n \
    \ return \"10011\" if x == 19\n  return \"10100\" if x == 20\n  return \"10101\"\
    \ if x == 21\n  return \"10110\" if x == 22\n  return \"10111\" if x == 23\n \
    \ return \"11000\" if x == 24\n  return \"11001\" if x == 25\n  return \"11010\"\
    \ if x == 26\n  return \"11011\" if x == 27\n  return \"11100\" if x == 28\n \
    \ return \"11101\" if x == 29\n  return \"11110\" if x == 30\n  return \"11111\"\
    \ if x == 31\n  return \"100000\" if x == 32\n  return \"100001\" if x == 33\n\
    \  return \"100010\" if x == 34\n  return \"100011\" if x == 35\n  return \"100100\"\
    \ if x == 36\n  return \"100101\" if x == 37\n  return \"100110\" if x == 38\n\
    \  return \"100111\" if x == 39\n  return \"101000\" if x == 40\n  return \"101001\"\
    \ if x == 41\n  return \"101010\" if x == 42\n  return \"101011\" if x == 43\n\
    \  return \"101100\" if x == 44\n  return", "  return x.to_s if base < 2\n  return\
    \ (x % base).to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10", " \
    \ return x.to_s if base < 2\n  return \"0\" if x == 0\n  return \"1\" if x ==\
    \ 1", "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  x\
    \ = x.to_s(base)\n  x.gsub!(/[0-9]/, '0' => 'a', '1' => 'b', '2' => 'c', '3' =>\
    \ 'd', '4' => 'e', '5' => 'f', '6' => 'g', '7' => 'h', '8' => 'i', '9' => 'j')\n\
    end", "  return x.to_s if base < 2\n  return nil if x < 0\n  return nil if x >=\
    \ base**(Math.log10(x).to_i + 1)\n  return nil if base > 10", "  return x.to_s\
    \ if base == 10\n  return \"0\" if x == 0\n  result = \"\"\n  while x > 0\n  \
    \  result = (x % base).to_s + result\n    x /= base\n  end\n  result\nend", " \
    \ return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return nil\n\
    end", "  x.to_s(base)\nend", "  return x.to_s if base < 2\n  return x.to_s(base)\
    \ if base < 10\n  return x.to_s(base) if base == 10\n  return x.to_s(base) if\
    \ base > 10", "  return x.to_s if base == 10\n  return \"\" if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base < 2\n  return\
    \ (x % base).to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return nil if x.nil?\n  return x.to_s if base == 10\n  return x.to_s(base)\
    \ if base < 10\n  return nil if base > 10\nend", "  return x.to_s if base == 10\n\
    \  return x.to_s(base) if base < 10\n  raise \"base must be less than 10\"\nend",
  "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base)\
    \ if x < base\n  return change_base(x / base, base) + (x % base).to_s\nend", " \
    \ return x.to_s if base < 2\n  return \"0\" if x == 0\n  return \"1\" if x ==\
    \ 1\n  return change_base(x/base, base) + (x%base).to_s\nend", "  return x.to_s\
    \ if base == 10\n  return x.to_s(base) if base < 10\n  return nil\nend", "  return\
    \ x.to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", " \
    \ return x.to_s if base == 10\n  return nil if base > 10\n  return nil if x <\
    \ 0\n  return nil if x > 9", "  return x.to_s if base < 10\n  return (x + 10).chr\
    \ if base == 10\n  return (x + 55).chr if base > 10\nend", '  return x.to_s if
    base == 10', "  return x.to_s if x < base\n  change_base(x / base, base) + (x\
    \ % base).to_s\nend", "  return x.to_s if base < 2\n  return nil if x < 0\n  return\
    \ '0' if x == 0\n  return change_base(x / base, base) + (x % base).to_s\nend",
  "  return x.to_s if base < 2\n  return (x % base).to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  # TODO: implement this method\n  return\
    \ x.to_s(base)\nend", "  return x.to_s if base == 10\n  return \"\" if x == 0\n\
    \  change_base(x / base, base) + (x % base).to_s\nend", "  return \"\" if x ==\
    \ 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s if\
    \ base < 2\n  return (x % base).to_s if x < base\n  change_base(x / base, base)\
    \ + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return x.to_s(base)\
    \ if base < 10", "  return x.to_s if base == 10\n  return x.to_s(base) if base\
    \ < 10\n  raise \"base must be less than 10\"\nend", "  if x < base\n    return\
    \ x.to_s\n  else\n    return change_base(x / base, base) + (x % base).to_s\n \
    \ end\nend", "  return x.to_s if base < 2\n  return (x % base).to_s if x < base\n\
    \  change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s if base\
    \ < 2\n  return (x % base).to_s if x < base\n  change_base(x / base, base) + (x\
    \ % base).to_s\nend", "  return x.to_s if base == 10\n  return x.to_s(base) if\
    \ base < 10\n  return nil if base > 10", "  return x.to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return\
    \ \"0\" if x == 0\n  result = \"\"\n  while x > 0\n    result = (x % base).to_s\
    \ + result\n    x /= base\n  end\n  result\nend", "  return x.to_s if base < 2\n\
    \  x, r = x.divmod(base)\n  change_base(x, base) + r.to_s\nend", "  return x.to_s\
    \ if base == 10\n  return x.to_s(base) if base < 10", "  result = \"\"\n  while\
    \ x > 0\n    result = (x % base).to_s + result\n    x /= base\n  end\n  result\n\
    end", "  return x.to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base == 10\n  return \"\" if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base < 2\n  return\
    \ nil if x < 0\n  return nil if base > 10\n  return '0' if x == 0", "  return\
    \ x.to_s if base == 10\n  return '' if x == 0\n  change_base(x / base, base) +\
    \ (x % base).to_s\nend", "  x.to_s(base)\nend", "  return x.to_s if x < base\n\
    \  change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s if base\
    \ < 2\n  return (x % base).to_s if x < base\n  change_base(x / base, base) + (x\
    \ % base).to_s\nend", "  return x.to_s if base < 2\n  return '' if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return\
    \ x.to_s(base) if base < 10\n  return x.to_s(base) if x < 10\n  return change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return\
    \ '0' if x == 0\n  result = ''\n  while x > 0\n    result = (x % base).to_s +\
    \ result\n    x /= base\n  end\n  result\nend", "  return x.to_s if base == 10\n\
    \  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend",
  "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  x_str = x.to_s\n\
    \  x_str.gsub!(/[0-9]/) { |n| n.to_i.to_s(base) }\n  x_str\nend", "  return x.to_s\
    \ if base == 10\n  return x.to_s(base) if base < 10\n  return nil if base > 10\n\
    end", "  x.to_s(base)\nend", "  return x.to_s if base < 2\n  return (x % base).to_s\
    \ if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ x.to_s if base < 10\n  return (x + 10).chr if base == 10\n  return (x + 55).chr\
    \ if base > 10\nend", "  return x.to_s if base == 10\n  return x.to_s(base) if\
    \ base < 10", "  return x.to_s if base == 10\n  return x.to_s(base) if base <\
    \ 10\n  return nil\nend", "  return '' if x == 0\n  change_base(x / base, base)\
    \ + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return '0' if x ==\
    \ 0\n  result = ''\n  while x > 0\n    result = (x % base).to_s + result\n   \
    \ x /= base\n  end\n  result\nend", "  return x.to_s if base == 10\n  return x.to_s(base)\
    \ if base < 10\n  return nil\nend", "  return x.to_s if base < 10\n  return (x\
    \ + 10).chr if base == 10\n  return (x + 55).chr if base > 10\nend", "  return\
    \ x.to_s if base < 2\n  return (x % base).to_s if x < base\n  change_base(x /\
    \ base, base) + (x % base).to_s\nend", "  return x.to_s if base < 2\n  return\
    \ (x % base).to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10", " \
    \ return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return nil\
    \ if base > 10\nend", "  return x.to_s if base < 2\n  return nil if x < 0\n  return\
    \ nil if x >= base**(Math.log(x, base).floor + 1)\n  return nil if x.to_s.match(/[^0-9]/)\n\
    \  return nil if base.to_s.match(/[^0-9]/)\n  return nil if base > 10\n  return\
    \ nil if base < 2", "  return x.to_s if base == 10\n  return \"\" if x == 0\n\
    \  change_base(x / base, base) + (x % base).to_s\nend", "  return nil if x < 0\
    \ || base < 2 || base > 10\n  return x.to_s if x < base\n  change_base(x / base,\
    \ base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return x.to_s(base)\
    \ if base < 10\n  return nil\nend", "  return x.to_s if base == 10\n  return x.to_s(base)\
    \ if base < 10\n  return nil if base > 10\nend", "  x.to_s(base)\nend", "  return\
    \ x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return \"0\" if\
    \ x == 0\n  return change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return nil if base\
    \ > 10\nend", "  return x.to_s if base < 2\n  return (x % base).to_s if x < base\n\
    \  change_base(x / base, base) + (x % base).to_s\nend", "  return '' if x == 0\n\
    \  change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s if x\
    \ < base\n  change_base(x / base, base) + (x % base).to_s\nend", "  x.to_s(base)\n\
    end", "  return x.to_s if base == 10\n  return x.to_s(base) if base <= 10\n  return\
    \ change_base_to_base_10(x, base) if base > 10\nend", "  return x.to_s if base\
    \ < 10\n  return x.to_s(base) if base == 10\n  return x.to_s(base).upcase if base\
    \ > 10\nend", "  return x.to_s if base < 10\n  return x.to_s(base) if base ==\
    \ 10\n  return (x + 10).to_s if base == 11\n  return (x + 55).chr if base == 16\n\
    \  return (x + 87).chr if base == 32\n  return (x + 35).chr if base == 36\n  return\
    \ (x + 63).chr if base == 64\n  return (x + 95).chr if base == 96\n  return (x\
    \ + 127).chr if base == 128\n  return (x + 223).chr if base == 256\n  return (x\
    \ + 383).chr if base == 512\n  return (x + 639).chr if base == 1024\n  return\
    \ (x + 1023).chr if base == 2048\n  return (x + 2047).chr if base == 4096\n  return\
    \ (x + 4095).chr if base == 8192\n  return (x + 8191).chr if base == 16384\n \
    \ return (x + 16383).chr if base == 32768\n  return (x + 32767).chr if base ==\
    \ 65536\n  return (x + 65535).chr if base == 131072\n  return (x + 131071).chr\
    \ if base == 262144\n  return (x + 262143).chr if base == 524288\n  return (x\
    \ + 524287).chr if base == 1048576\n  return (x + 1048575).chr if base == 2097152\n\
    \  return (x + 2097151).chr if base == 4194304\n  return (x + 4194303).chr if\
    \ base == 8388608\n  return (x + 8388607).chr if base == 16777216\n  return (x\
    \ + 16777215).chr if base == 33554432\n  return (x + 33554431).chr if base ==\
    \ 67108864\n  return (x + 67108863).chr if base == 134217728\n  return (x + 134217727).chr\
    \ if base == 268435456\n  return (x + 268435455).chr if base == 536870912\n  return\
    \ (x + 5", "  return x.to_s if base < 2\n  return (x % base).to_s if x < base\n\
    \  change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s if base\
    \ < 2\n  return (x % base).to_s if x < base\n  change_base(x / base, base) + (x\
    \ % base).to_s\nend", "  return \"\" if x == 0\n  change_base(x / base, base)\
    \ + (x % base).to_s\nend", "  return x.to_s if base < 2\n  return (x % base).to_s\
    \ if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", '  return
    x.to_s if base == 10', "  return x.to_s if base < 2\n  return (x % base).to_s\
    \ if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ x.to_s if base < 2\n  return (x % base).to_s if x < base\n  change_base(x /\
    \ base, base) + (x % base).to_s\nend", "  return x.to_s if base < 2\n  return\
    \ \"\" if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ x.to_s if base < 10\n  return (x + 10).chr if base == 10\n  return (x + 55).chr\
    \ if base > 10\nend", "  return x.to_s if base < 2\n  return (x % base).to_s if\
    \ x < base\n  change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s\
    \ if base == 10\n  return nil if x < 0\n  return nil if base < 2\n  return nil\
    \ if base > 10", "  return \"\" if x == 0\n  change_base(x / base, base) + (x\
    \ % base).to_s\nend", "  return x.to_s if base == 10\n  return \"\" if x == 0\n\
    \  change_base(x / base, base) + (x % base).to_s\nend", "  x.to_s(base)\nend",
  "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return nil\
    \ if base > 10\nend", "  return x.to_s if base == 10\n  return x.to_s(base) if\
    \ base < 10\n  x = x.to_s(base)\n  x.gsub!(/\\d/) { |d| (d.to_i + 55).chr }\n\
    \  x\nend", "  return x.to_s if base == 10\n  return \"\" if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  x.to_s(base)\nend", "  return x.to_s\
    \ if base == 10\n  return \"\" if x == 0\n  change_base(x / base, base) + (x %\
    \ base).to_s\nend", "  return x.to_s if x < base\n  change_base(x / base, base)\
    \ + (x % base).to_s\nend", "  x.to_s(base)\nend", "  x = x.to_s(base)\n  x = x.reverse\n\
    \  x = x.to_i\n  x = x.to_s(10)\n  x = x.reverse\n  return x\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
