name: HumanEval_44_change_base
language: rb
prompt: "# Change numerical base of input number x to base.\n# return string representation\
  \ after the conversion.\n# base numbers are less than 10.\ndef change_base(x, base)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_change_base\n\
  \    candidate = method(:change_base)\n    assert_equal(\"22\", candidate.call(8,\
  \ 3))\n    assert_equal(\"100\", candidate.call(9, 3))\n    assert_equal(\"11101010\"\
  , candidate.call(234, 2))\n    assert_equal(\"10000\", candidate.call(16, 2))\n\
  \    assert_equal(\"1000\", candidate.call(8, 2))\n    assert_equal(\"111\", candidate.call(7,\
  \ 2))\n    assert_equal(\"2\", candidate.call(2, 3))\n    assert_equal(\"3\", candidate.call(3,\
  \ 4))\n    assert_equal(\"4\", candidate.call(4, 5))\n    assert_equal(\"5\", candidate.call(5,\
  \ 6))\n    assert_equal(\"6\", candidate.call(6, 7))\n    assert_equal(\"7\", candidate.call(7,\
  \ 8))\n  end\nend\n"
completions: ["  return x.to_s if base < 10\n  return (x + 10).chr if base == 10\n\
    \  return (x + 55).chr if base > 10\nend", "  return x.to_s if base == 10\n  return\
    \ x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base)\
    \ if base < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base\
    \ < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n\
    \  return x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n  return\
    \ x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base)\
    \ if base < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base\
    \ < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n\
    \  return x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n  return\
    \ x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base)\
    \ if base < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base\
    \ < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n\
    \  return x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n  return\
    \ x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base)\
    \ if base < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base\
    \ < 10\n  return x.to_s(base) if base < 10\n  return x.", "  return \"\" if x\
    \ == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s\
    \ if base < 2\n  return x.to_s(base) if base < 10\n  return x.to_s(base).upcase\
    \ if base < 36\n  return x.to_s(base).downcase if base < 62\n  return x.to_s(base).upcase\
    \ if base < 64\n  return x.to_s(base).downcase if base < 66\n  return x.to_s(base).upcase\
    \ if base < 68\n  return x.to_s(base).downcase if base < 70\n  return x.to_s(base).upcase\
    \ if base < 72\n  return x.to_s(base).downcase if base < 74\n  return x.to_s(base).upcase\
    \ if base < 76\n  return x.to_s(base).downcase if base < 78\n  return x.to_s(base).upcase\
    \ if base < 80\n  return x.to_s(base).downcase if base < 82\n  return x.to_s(base).upcase\
    \ if base < 84\n  return x.to_s(base).downcase if base < 86\n  return x.to_s(base).upcase\
    \ if base < 88\n  return x.to_s(base).downcase if base < 90\n  return x.to_s(base).upcase\
    \ if base < 92\n  return x.to_s(base).downcase if base < 94\n  return x.to_s(base).upcase\
    \ if base < 96\n  return x.to_s(base).downcase if base < 98\n  return x.to_s(base).upcase\
    \ if base < 100\n  return x.to_s(base).downcase if base < 102\n  return x.to_s(base).upcase\
    \ if base < 104\n  return x.to_s(base).downcase if base < 106\n  return x.to_s(base).upcase\
    \ if base < 108\n  return x.to_s(base).downcase if base < 110\n  return x.to_s(base).upcase\
    \ if base < 112\n  return x.to_s(base).downcase if base < 114\n  return x.to_s(",
  "  return x.to_s if base == 10\n  x_str = \"\"\n  while x > 0\n    x_str = (x %\
    \ base).to_s + x_str\n    x /= base\n  end\n  x_str\nend", "  return x.to_s if\
    \ base == 10\n  return \"\" if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base < 2\n  return \"0\" if x == 0\n  return \"1\" if\
    \ x == 1", "  return x.to_s if base < 2\n  return (x % base).to_s if x < base\n\
    \  change_base(x / base, base) + (x % base).to_s\nend", "  if x == 0\n    return\
    \ \"0\"\n  end\n  result = \"\"\n  while x > 0\n    result = (x % base).to_s +\
    \ result\n    x /= base\n  end\n  return result\nend", "  return x.to_s if x <\
    \ base\n  change_base(x / base, base) + (x % base).to_s\nend", "  return nil if\
    \ x < 0 || base < 2 || base > 10\n  return x.to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return\
    \ x.to_s(base) if base < 10\n  return nil if x < 0", "  return x.to_s if base\
    \ < 2\n  return (x % base).to_s if x < base\n  change_base(x / base, base) + (x\
    \ % base).to_s\nend", "  return \"\" if x == 0\n  change_base(x / base, base)\
    \ + (x % base).to_s\nend", "  # TODO: implement me\n  return x.to_s(base)\nend",
  "  return x.to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return\
    \ nil if base > 10\nend", "  return x.to_s if base == 10\n  return x.to_s(base)\
    \ if base < 10\n  return x.to_s(base) if base == 16\n  return x.to_s(base) if\
    \ base == 8\n  return x.to_s(base) if base == 2\n  return x.to_s(base) if base\
    \ == 36\n  return x.to_s(base) if base == 62\n  return x.to_s(base) if base ==\
    \ 64\n  return x.to_s(base) if base == 256\n  return x.to_s(base) if base == 512\n\
    \  return x.to_s(base) if base == 1024\n  return x.to_s(base) if base == 2048\n\
    \  return x.to_s(base) if base == 4096\n  return x.to_s(base) if base == 8192\n\
    \  return x.to_s(base) if base == 16384\n  return x.to_s(base) if base == 32768\n\
    \  return x.to_s(base) if base == 65536\n  return x.to_s(base) if base == 131072\n\
    \  return x.to_s(base) if base == 262144\n  return x.to_s(base) if base == 524288\n\
    \  return x.to_s(base) if base == 1048576\n  return x.to_s(base) if base == 2097152\n\
    \  return x.to_s(base) if base == 4194304\n  return x.to_s(base) if base == 8388608\n\
    \  return x.to_s(base) if base == 16777216\n  return x.to_s(base) if base == 33554432\n\
    \  return x.to_s(base) if base == 67108864\n  return x.to_s(base) if base == 134217728\n\
    \  return x.to_s(base) if base == 268435456\n  return x.to_s(base) if base ==\
    \ 536870912\n  return x.to_s(base) if base == 1073741824\n  return x.to_s(base)\
    \ if", "  x.to_s(base)\nend", "  return x.to_s if x < base\n  change_base(x /\
    \ base, base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return\
    \ nil if x < 0\n  return nil if base < 2\n  return nil if base > 10", "  return\
    \ x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base)\
    \ if base == 16\n  return x.to_s(base) if base == 8\n  return x.to_s(base) if\
    \ base == 2\n  return x.to_s(base) if base == 3\n  return x.to_s(base) if base\
    \ == 4\n  return x.to_s(base) if base == 5\n  return x.to_s(base) if base == 6\n\
    \  return x.to_s(base) if base == 7\n  return x.to_s(base) if base == 9\n  return\
    \ x.to_s(base) if base == 11\n  return x.to_s(base) if base == 12\n  return x.to_s(base)\
    \ if base == 13\n  return x.to_s(base) if base == 14\n  return x.to_s(base) if\
    \ base == 15\n  return x.to_s(base) if base == 17\n  return x.to_s(base) if base\
    \ == 18\n  return x.to_s(base) if base == 19\n  return x.to_s(base) if base ==\
    \ 20\n  return x.to_s(base) if base == 21\n  return x.to_s(base) if base == 22\n\
    \  return x.to_s(base) if base == 23\n  return x.to_s(base) if base == 24\n  return\
    \ x.to_s(base) if base == 25\n  return x.to_s(base) if base == 26\n  return x.to_s(base)\
    \ if base == 27\n  return x.to_s(base) if base == 28\n  return x.to_s(base) if\
    \ base == 29\n  return x.to_s(base) if base == 30\n  return x.to_s(base) if base\
    \ == 31\n  return x.to_s(base) if base == 32\n  return x.to_s(base) if base ==\
    \ 33\n  return x.to_s(base) if base == 34\n  return x.", "  return x.to_s if base\
    \ < 2\n  return (x % base).to_s if x < base\n  change_base(x / base, base) + (x\
    \ % base).to_s\nend", "  return x.to_s if base < 2\n  return nil if base > 10\n\
    \  return nil if x < 0\n  return nil if x > base**10\n  return nil if x == 0\n\
    \  return nil if x.class != Fixnum\n  return nil if base.class != Fixnum", " \
    \ return \"\" if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend",
  "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  # base > 10\n\
    \  # convert to base 10\n  x_base10 = x.to_s(base).to_i(10)\n  # convert to base\n\
    \  x_base = x_base10.to_s(base)\n  return x_base\nend", "  return x.to_s if base\
    \ < 2\n  return (x % base).to_s if x < base\n  change_base(x / base, base) + (x\
    \ % base).to_s\nend", "  return nil if x < 0 or base < 2 or base > 10\n  return\
    \ x.to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", " \
    \ return x.to_s if base < 10\n  return (x + 10).chr if base == 10\n  return (x\
    \ + 55).chr if base > 10\nend", "  x.to_s(base)\nend", "  return x.to_s if base\
    \ < 2\n  return nil if x < 0\n  return nil if base > 10\n  return nil if x >=\
    \ base**10", "  return x.to_s if x < base\n  change_base(x / base, base) + (x\
    \ % base).to_s\nend", "  x.to_s(base)\nend", "  return x.to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return\
    \ x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base)\
    \ if base < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base\
    \ < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n\
    \  return x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n  return\
    \ x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base)\
    \ if base < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base\
    \ < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n\
    \  return x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n  return\
    \ x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base)\
    \ if base < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base\
    \ < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n\
    \  return x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n  return\
    \ x.to_s(base) if base < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base)\
    \ if base < 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base\
    \ < 10\n  return x.to_s(base) if base < 10\n  return x.", "  return x.to_s if\
    \ base == 10\n  return \"0\" if x == 0\n  result = \"\"\n  while x > 0\n    result\
    \ = (x % base).to_s + result\n    x /= base\n  end\n  result\nend", "  return\
    \ '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  raise\
    \ ArgumentError unless base < 10\n  return x.to_s if base == 10\n  return '0'\
    \ if x == 0\n  result = ''\n  while x > 0\n    result = (x % base).to_s + result\n\
    \    x /= base\n  end\n  result\nend", "  return x.to_s if base == 10\n  return\
    \ \"\" if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ x.to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", " \
    \ return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return change_base(x,\
    \ base / 10) + (x % base).to_s if base > 10\nend", "  return x.to_s if base ==\
    \ 10\n  return \"\" if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base < 2\n  return (x % base).to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base < 2\n  return\
    \ '0' if x == 0\n  return '1' if x == 1", "  return x.to_s if base == 10\n  return\
    \ x.to_s(base) if x < base\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  # convert x to string representation in base 10\n  x = x.to_s\n  # convert\
    \ x to string representation in base\n  x = x.to_i(base)\n  # convert x to string\
    \ representation in base 10\n  x = x.to_s\n  # convert x to string representation\
    \ in base\n  x = x.to_i(base)\n  # return string representation of x\n  return\
    \ x.to_s\nend", "  return x.to_s if x < base\n  change_base(x / base, base) +\
    \ (x % base).to_s\nend", "  return x.to_s if base == 10\n  return x.to_s(base)\
    \ if base < 10\n  s = ''\n  while x > 0\n    s += (x % base).to_s\n    x /= base\n\
    \  end\n  s.reverse\nend", "  return x.to_s if base < 2\n  return nil if x < 0",
  "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base)\
    \ if x < 10\n  return x.to_s(base) if x < base\n  return change_base(x / base,\
    \ base) + (x % base).to_s\nend", "  return \"\" if x == 0\n  change_base(x / base,\
    \ base) + (x % base).to_s\nend", "  return nil if x < 0\n  return '0' if x ==\
    \ 0\n  s = ''\n  while x > 0\n    s = (x % base).to_s + s\n    x /= base\n  end\n\
    \  s\nend", "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n\
    \  return nil\nend", "  x.to_s(base)\nend", "  return \"\" if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return\
    \ x.to_s(base) if base < 10\n  return change_base(x, base - 10) + (x % 10).to_s\n\
    end", "  return x.to_s if base < 2\n  x, r = x.divmod(base)\n  change_base(x,\
    \ base) + r.to_s\nend", "  return x.to_s if base < 10\n  x_str = ''\n  while x\
    \ > 0\n    x_str = (x % base).to_s + x_str\n    x /= base\n  end\n  x_str\nend",
  "  return \"\" if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend",
  "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return \"\
    ERROR\"\nend", "  return x.to_s if base < 10\n  x.to_s(base)\nend", "  return\
    \ x.to_s if base < 2\n  return \"\" if x == 0\n  change_base(x / base, base) +\
    \ (x % base).to_s\nend", "  return x.to_s if x < base\n  change_base(x / base,\
    \ base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return x.to_s(base)\
    \ if base < 10\n  return nil\nend", "  x.to_s(base)\nend", "  return x.to_s if\
    \ base == 10\n  return nil if x < 0\n  return nil if base < 2\n  return nil if\
    \ base > 10", "  return x.to_s if base == 10\n  return x.to_s(base) if base <\
    \ 10\n  return change_base_to_base_10(x, base) if base > 10\nend", "  return x.to_s\
    \ if base < 2\n  return nil if x < 0", "  return x.to_s if base == 10\n  return\
    \ \"\" if x == 0\n  return change_base(x / base, base) + (x % base).to_s\nend",
  "  return \"\" if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend",
  "  return \"\" if x == 0\n  return change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return\
    \ change_base(x, base - 10) + (x % 10).to_s\nend", "  return x.to_s if base ==\
    \ 10\n  return x.to_s(base) if base < 10\n  return \"-\" + change_base(-x, base)\
    \ if x < 0\n  return change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ x.to_s if base == 10\n  return \"0\" if x == 0\n  result = \"\"\n  while x >\
    \ 0\n    result = (x % base).to_s + result\n    x /= base\n  end\n  result\nend",
  "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend", " \
    \ if x < base\n    return x.to_s\n  else\n    return change_base(x / base, base)\
    \ + (x % base).to_s\n  end\nend", "  return x.to_s if base < 10\n  return (x +\
    \ 10).chr if base == 10\n  return (x + 55).chr if base > 10\nend", "  # convert\
    \ x to string in base 10\n  x_str = x.to_s\n  # convert x_str to integer in base\
    \ 10\n  x_int = x_str.to_i\n  # convert x_int to string in base\n  x_base = x_int.to_s(base)\n\
    \  # return x_base\n  return x_base\nend", "  return x.to_s if base < 10\n  return\
    \ (x + 10).chr if base == 10\n  return (x + 55).chr if base == 16\n  return (x\
    \ + 87).chr if base == 32\nend", "  return x.to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return\
    \ x.to_s(base) if base < 10\n  return nil\nend", "  return x.to_s if base == 10\n\
    \  return x.to_s(base) if base < 10\n  return nil\nend", "  return x.to_s if base\
    \ < 10\n  return \"-\" + change_base(-x, base) if x < 0\n  return \"0\" if x ==\
    \ 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  res = \"\"\n  while\
    \ x > 0\n    res = (x % base).to_s + res\n    x /= base\n  end\n  res\nend", " \
    \ return x.to_s if base == 10\n  x_str = \"\"\n  while x > 0\n    x_str = (x %\
    \ base).to_s + x_str\n    x /= base\n  end\n  x_str\nend", "  return x.to_s if\
    \ base == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if x <\
    \ base\n  return change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base)\
    \ if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ x.to_s if base == 10\n  return \"\" if x == 0\n  change_base(x / base, base)\
    \ + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return x.to_s(base)\
    \ if base < 10\n  return \"-\" + change_base(-x, base) if x < 0\n  return change_base(x\
    \ - base, base) + \"A\" if x >= base\n  return change_base(x - base, base) + \"\
    B\" if x >= base + 1\n  return change_base(x - base, base) + \"C\" if x >= base\
    \ + 2\n  return change_base(x - base, base) + \"D\" if x >= base + 3\n  return\
    \ change_base(x - base, base) + \"E\" if x >= base + 4\n  return change_base(x\
    \ - base, base) + \"F\" if x >= base + 5\n  return change_base(x - base, base)\
    \ + \"G\" if x >= base + 6\n  return change_base(x - base, base) + \"H\" if x\
    \ >= base + 7\n  return change_base(x - base, base) + \"I\" if x >= base + 8\n\
    \  return change_base(x - base, base) + \"J\" if x >= base + 9\n  return change_base(x\
    \ - base, base) + \"K\" if x >= base + 10\n  return change_base(x - base, base)\
    \ + \"L\" if x >= base + 11\n  return change_base(x - base, base) + \"M\" if x\
    \ >= base + 12\n  return change_base(x - base, base) + \"N\" if x >= base + 13\n\
    \  return change_base(x - base, base) + \"O\" if x >= base + 14\n  return change_base(x\
    \ - base, base) + \"P\" if x >= base + 15\n  return change_base(x - base, base)\
    \ + \"Q\" if x >= base + 16\n  return change_base(x - base, base) + \"R\" if x\
    \ >= base + 17\n  return change_base(x - base, base) + \"S\" if x >= base + 18\n\
    \  return change_base(x - base, base) + \"T\" if x >= base + 19\n  return change_base(x\
    \ -", "  return x.to_s if base < 2\n  return (x % base).to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return\
    \ x.to_s(base) if base < 10\n  return nil if base > 10\nend", "  return x.to_s\
    \ if base < 2\n  return x.to_s(base) if base < 10\n  # base >= 10\n  # convert\
    \ to base 10\n  x_base10 = x.to_s(10).to_i\n  # convert to base\n  x_base = \"\
    \"\n  while x_base10 > 0\n    x_base = (x_base10 % base).to_s + x_base\n    x_base10\
    \ /= base\n  end\n  x_base\nend", "  return x.to_s if base == 10\n  return \"\
    0\" if x == 0\n  result = \"\"\n  while x > 0\n    result = (x % base).to_s +\
    \ result\n    x /= base\n  end\n  result\nend", "  return x.to_s if x < base\n\
    \  change_base(x / base, base) + (x % base).to_s\nend", "  # convert to string\n\
    \  x = x.to_s\n  # convert to array\n  x = x.split('')\n  # convert to integer\n\
    \  x = x.map { |e| e.to_i }\n  # convert to base\n  x = x.map { |e| e.to_s(base)\
    \ }\n  # convert to string\n  x = x.join('')\n  # return\n  return x\nend", " \
    \ x.to_s(base)\nend", "  return x.to_s if base == 10\n  return x.to_s(base) if\
    \ base < 10\n  return nil\nend", "  return x.to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base < 2\n  return\
    \ (x % base).to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return\
    \ change_base(x, base - 10) + (x % 10).to_s if x < 10\n  change_base(x / 10, base)\
    \ + (x % 10).to_s\nend", "  return x.to_s if base < 2\n  return (x % base).to_s\
    \ if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", "  x.to_s(base)\n\
    end", "  return x.to_s if base == 10\n  res = \"\"\n  while x > 0\n    res = (x\
    \ % base).to_s + res\n    x /= base\n  end\n  res\nend", "  return x.to_s if base\
    \ == 10\n  return x.to_s(base) if base < 10\n  raise \"base must be less than\
    \ 10\"\nend", "  if x == 0\n    return \"0\"\n  end\n  result = \"\"\n  while\
    \ x > 0\n    result = (x % base).to_s + result\n    x /= base\n  end\n  return\
    \ result\nend", "  x.to_s(base)\nend", "  return x.to_s if base == 10\n  return\
    \ x.to_s(base) if base < 10\n  return change_base(x, base - 10) + (x % 10).to_s\n\
    end", "  return x.to_s if base == 10\n  return \"\" if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return \"\" if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return\
    \ \"\" if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  if\
    \ x < base\n    return x.to_s\n  else\n    return change_base(x / base, base)\
    \ + (x % base).to_s\n  end\nend", "  return x.to_s if base == 10\n  return change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base < 2 || base\
    \ > 10\n  x_base10 = x.to_i(base)\n  x_base10.to_s(base)\nend", "  # convert to\
    \ string\n  x = x.to_s\n  # convert to array of digits\n  x = x.split('')\n  #\
    \ convert to array of integers\n  x = x.map { |i| i.to_i }\n  # reverse array\n\
    \  x = x.reverse\n  # convert to base\n  x = x.map.with_index { |i, j| i * base**j\
    \ }\n  # sum array\n  x = x.inject(:+)\n  # convert to string\n  x = x.to_s\n\
    \  # return string\n  return x\nend", "  return x.to_s if base < 2\n  return '0'\
    \ if x == 0\n  return '1' if x == 1\n  return '-1' if x == -1\n  return '-0' if\
    \ x == -0\n  return '-1' if x == -1\n  return '-2' if x == -2\n  return '-3' if\
    \ x == -3\n  return '-4' if x == -4\n  return '-5' if x == -5\n  return '-6' if\
    \ x == -6\n  return '-7' if x == -7\n  return '-8' if x == -8\n  return '-9' if\
    \ x == -9\n  return '-10' if x == -10\n  return '-11' if x == -11\n  return '-12'\
    \ if x == -12\n  return '-13' if x == -13\n  return '-14' if x == -14\n  return\
    \ '-15' if x == -15\n  return '-16' if x == -16\n  return '-17' if x == -17\n\
    \  return '-18' if x == -18\n  return '-19' if x == -19\n  return '-20' if x ==\
    \ -20\n  return '-21' if x == -21\n  return '-22' if x == -22\n  return '-23'\
    \ if x == -23\n  return '-24' if x == -24\n  return '-25' if x == -25\n  return\
    \ '-26' if x == -26\n  return '-27' if x == -27\n  return '-28' if x == -28\n\
    \  return '-29' if x == -29\n  return '-30' if x == -30\n  return '-31' if x ==\
    \ -31\n  return '-32' if x == -32\n  return '-33' if x == -33\n  return '-34'\
    \ if x == -34\n  return '-35' if x == -35\n  return '-36' if x == -36\n  return\
    \ '-37' if x == -37\n  return '-38' if x == -38", "  return \"\" if x == 0\n \
    \ change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s if base\
    \ == 10\n  return nil if x < 0\n  return nil if base < 2 || base > 9", "  return\
    \ x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return \"-\" + change_base(-x,\
    \ base) if x < 0\n  return change_base(x / base, base) + (x % base).to_s\nend",
  "  return x.to_s if base < 10\n  return x.to_s(base) if base == 10\n  return x.to_s(base).upcase\
    \ if base > 10\nend", "  return x.to_s if base == 10\n  return change_base(x/base,\
    \ base) + (x%base).to_s\nend", "  return \"\" if x == 0\n  change_base(x / base,\
    \ base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return \"\"\
    \ if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ nil if x < 0\n  return nil if base < 2\n  return nil if base > 10", "  return\
    \ x.to_s if base < 10\n  return x.to_s(base) if base == 10\n  return x.to_s(base)\
    \ if base > 10\nend", "  return x.to_s if base < 10\n  return (x + 10).chr if\
    \ base == 10\n  return (x + 55).chr if base > 10\nend", "  return x.to_s if base\
    \ < 2\n  x, r = x.divmod(base)\n  change_base(x, base) + r.to_s\nend", "  return\
    \ \"0\" if x == 0\n  return \"1\" if x == 1\n  return \"2\" if x == 2\n  return\
    \ \"3\" if x == 3\n  return \"4\" if x == 4\n  return \"5\" if x == 5\n  return\
    \ \"6\" if x == 6\n  return \"7\" if x == 7\n  return \"8\" if x == 8\n  return\
    \ \"9\" if x == 9\n  return \"A\" if x == 10\n  return \"B\" if x == 11\n  return\
    \ \"C\" if x == 12\n  return \"D\" if x == 13\n  return \"E\" if x == 14\n  return\
    \ \"F\" if x == 15\n  return \"G\" if x == 16\n  return \"H\" if x == 17\n  return\
    \ \"I\" if x == 18\n  return \"J\" if x == 19\n  return \"K\" if x == 20\n  return\
    \ \"L\" if x == 21\n  return \"M\" if x == 22\n  return \"N\" if x == 23\n  return\
    \ \"O\" if x == 24\n  return \"P\" if x == 25\n  return \"Q\" if x == 26\n  return\
    \ \"R\" if x == 27\n  return \"S\" if x == 28\n  return \"T\" if x == 29\n  return\
    \ \"U\" if x == 30\n  return \"V\" if x == 31\n  return \"W\" if x == 32\n  return\
    \ \"X\" if x == 33\n  return \"Y\" if x == 34\n  return \"Z\" if x == 35\nend",
  "  return x.to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base < 2\n  return \"\" if x < 0\n  return \"0\" if\
    \ x == 0\n  return change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ x.to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", " \
    \ return x.to_s if base < 2\n  return (x % base).to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return \"0\" if x == 0\n  digits =\
    \ []\n  while x > 0\n    digits << x % base\n    x /= base\n  end\n  digits.reverse.join\n\
    end", "  return x.to_s if base == 10\n  return \"0\" if x == 0\n  result = \"\"\
    \n  while x > 0\n    result = (x % base).to_s + result\n    x /= base\n  end\n\
    \  result\nend", "  return x.to_s if base == 10\n  return x.to_s(base) if base\
    \ < 10\n  return nil if base > 10\nend", "  return x.to_s if base < 2\n  return\
    \ (x % base).to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  x.to_s(base)\nend", "  return x.to_s if base == 10\n  return '' if x\
    \ == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  if x == 0\n\
    \    return \"0\"\n  end\n  result = \"\"\n  while x > 0\n    result = (x % base).to_s\
    \ + result\n    x /= base\n  end\n  return result\nend", "  return x.to_s if base\
    \ == 10\n  return x.to_s(base) if base < 10\n  return nil if x < 0", "  return\
    \ x.to_s if base == 10\n  return nil if x < 0\n  return nil if base < 2 || base\
    \ > 9", "  return x.to_s if base == 10\n  return '0' if x == 0\n  result = ''\n\
    \  while x > 0\n    result = (x % base).to_s + result\n    x /= base\n  end\n\
    \  result\nend", "  return x.to_s if base < 10\n  return (x + 10).chr if base\
    \ == 10\n  return (x + 55).chr if base > 10\nend", "  return x.to_s if base <\
    \ 10\n  x = x.to_s(base)\n  x.upcase!\n  x.gsub!(/10/, 'A')\n  x.gsub!(/11/, 'B')\n\
    \  x.gsub!(/12/, 'C')\n  x.gsub!(/13/, 'D')\n  x.gsub!(/14/, 'E')\n  x.gsub!(/15/,\
    \ 'F')\n  x\nend", "  return '0' if x == 0\n  result = ''\n  while x > 0\n   \
    \ result = (x % base).to_s + result\n    x /= base\n  end\n  result\nend", " \
    \ return x.to_s if base == 10\n  return '0' if x == 0\n  result = ''\n  while\
    \ x > 0\n    result = (x % base).to_s + result\n    x /= base\n  end\n  result\n\
    end", "  return x.to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  x_str\
    \ = x.to_s\n  x_str.gsub!(/[0-9]/) { |c| (c.to_i + 10).to_s(base) }\n  x_str\n\
    end", "  return x.to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  # convert to string\n  x = x.to_s\n  # convert string to array of chars\n\
    \  x = x.split('')\n  # convert array of chars to array of ints\n  x = x.map {\
    \ |e| e.to_i }\n  # convert to base\n  x = x.map { |e| e.to_s(base) }\n  # convert\
    \ array of strings to string\n  x = x.join\n  # return string\n  return x\nend",
  "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return nil\
    \ if base > 10\nend", "  return x.to_s if base == 10\n  return x.to_s(base) if\
    \ base < 10\n  return nil if base > 10\nend", "  x.to_s(base)\nend", "  return\
    \ x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return change_base(x,\
    \ base - 10) + (x % 10).to_s if x < 10\n  change_base(x / 10, base) + (x % 10).to_s\n\
    end", "  return x.to_s if base == 10\n  return \"0\" if x == 0\n  x = x.to_i\n\
    \  result = \"\"\n  while x > 0\n    result = (x % base).to_s + result\n    x\
    \ /= base\n  end\n  result\nend", "  return x.to_s if base < 2\n  return change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base < 10\n  return\
    \ (x + 10).chr if base == 10\n  return (x + 55).chr if base == 36\n  return (x\
    \ + 87).chr if base == 62\nend", "  x.to_s(base)\nend", "  return x.to_s if x\
    \ < base\n  change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s\
    \ if base < 2\n  return (x % base).to_s if x < base\n  change_base(x / base, base)\
    \ + (x % base).to_s\nend", "  return '' if x == 0\n  change_base(x / base, base)\
    \ + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return x.to_s(base)\
    \ if base < 10\n  return nil if base > 10\nend", "  return x.to_s if x < base\n\
    \  change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s if base\
    \ < 2\n  return \"0\" if x == 0\n  return \"1\" if x == 1", "  return x.to_s if\
    \ base < 2\n  return (x % base).to_s if x < base\n  change_base(x / base, base)\
    \ + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return '' if x ==\
    \ 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s if\
    \ base == 10\n  return x.to_s(base) if base < 10\n  return nil if base > 10\n\
    end", "  return x.to_s if base == 10\n  return \"0\" if x == 0\n  result = \"\"\
    \n  while x > 0\n    result = (x % base).to_s + result\n    x /= base\n  end\n\
    \  result\nend", "  x.to_s(base)\nend", "  return x.to_s if base == 10\n  return\
    \ nil if x < 0\n  return \"0\" if x == 0\n  result = \"\"\n  while x > 0\n   \
    \ result = (x % base).to_s + result\n    x /= base\n  end\n  result\nend", " \
    \ return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base)\
    \ if x < base\n  return change_base(x / base, base) + (x % base).to_s\nend", " \
    \ return x.to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return\
    \ \"-\" + change_base(-x, base) if x < 0\n  return change_base(x / base, base)\
    \ + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return x.to_s(base)\
    \ if base < 10\n  return x.to_s(base) if base == 10\n  return x.to_s(base) if\
    \ base < 10\n  return x.to_s(base) if base == 10\n  return x.to_s(base) if base\
    \ < 10\n  return x.to_s(base) if base == 10\n  return x.to_s(base) if base < 10\n\
    \  return x.to_s(base) if base == 10\n  return x.to_s(base) if base < 10\n  return\
    \ x.to_s(base) if base == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base)\
    \ if base == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if\
    \ base == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base\
    \ == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base ==\
    \ 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base == 10\n\
    \  return x.to_s(base) if base < 10\n  return x.to_s(base) if base == 10\n  return\
    \ x.to_s(base) if base < 10\n  return x.to_s(base) if base == 10\n  return x.to_s(base)\
    \ if base < 10\n  return x.to_s(base) if base == 10\n  return x.to_s(base) if\
    \ base < 10\n  return x.to_s(base) if base == 10\n  return x.to_s(base) if base\
    \ < 10\n  return x.to_s(base) if base == 10\n  return x.to_s(base) if base < 10\n\
    \  return x.to_s(base) if base == 10\n  return x.to_s(base) if base < 10\n  return\
    \ x.", "  return x.to_s if x < base\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return\
    \ nil\nend", "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n\
    \  return nil if base > 10", "  return x.to_s if base < 10\n  return (x + 10).chr\
    \ if base == 10\n  return (x + 55).chr if base > 10\nend", "  return x.to_s if\
    \ base < 10\n  return x.to_s(base) if base == 10\n  return x.to_s(base).upcase\
    \ if base > 10\nend", "  # convert x to string in base 10\n  x_str = x.to_s(10)\n\
    \  # convert x_str to string in base\n  x_str_base = x_str.to_i(base)\n  # return\
    \ string representation of x_str_base\n  return x_str_base.to_s\nend", "  return\
    \ x.to_s if base == 10\n  return (x % base).to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base < 2\n  return\
    \ change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s if base\
    \ == 10\n  return \"\" if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return\
    \ x.to_s(base) if base == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base)\
    \ if base == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if\
    \ base == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base\
    \ == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base ==\
    \ 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base == 10\n\
    \  return x.to_s(base) if base < 10\n  return x.to_s(base) if base == 10\n  return\
    \ x.to_s(base) if base < 10\n  return x.to_s(base) if base == 10\n  return x.to_s(base)\
    \ if base < 10\n  return x.to_s(base) if base == 10\n  return x.to_s(base) if\
    \ base < 10\n  return x.to_s(base) if base == 10\n  return x.to_s(base) if base\
    \ < 10\n  return x.to_s(base) if base == 10\n  return x.to_s(base) if base < 10\n\
    \  return x.to_s(base) if base == 10\n  return x.to_s(base) if base < 10\n  return\
    \ x.to_s(base) if base == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base)\
    \ if base == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if\
    \ base == 10\n  return x.to_s(base) if base < 10\n  return x.to_s(base) if base\
    \ == 10\n  return x.to_s(base) if base < 10\n  return x.", "  return x.to_s if\
    \ x < base\n  change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s\
    \ if base == 10\n  return \"\" if x == 0\n  change_base(x / base, base) + (x %\
    \ base).to_s\nend", "  return x.to_s if base == 10\n  return x.to_s(base) if base\
    \ < 10\n  return x.to_s(base) if x < base\n  change_base(x / base, base) + (x\
    \ % base).to_s\nend", "  return x.to_s if base == 10\n  return change_base(x /\
    \ base, base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return\
    \ x.to_s(base) if base < 10\n  return nil if x < 0", "  return x.to_s if base\
    \ == 10\n  return \"\" if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10", " \
    \ return x.to_s if base == 10\n  return \"\" if x == 0\n  change_base(x / base,\
    \ base) + (x % base).to_s\nend", "  return x.to_s if base < 2\n  return (x % base).to_s\
    \ if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ x.to_s if base < 2\n  return \"\" if x < 0\n  return \"0\" if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return\
    \ x.to_s(base) if base < 10\n  return change_base(x, base - 10) + (x % 10).to_s\n\
    end", "  return x.to_s if base == 10\n  return x.to_s(base) if base < 10\n  return\
    \ nil\nend", "  return \"0\" if x == 0\n  return \"1\" if x == 1\n  return \"\
    2\" if x == 2\n  return \"3\" if x == 3\n  return \"4\" if x == 4\n  return \"\
    5\" if x == 5\n  return \"6\" if x == 6\n  return \"7\" if x == 7\n  return \"\
    8\" if x == 8\n  return \"9\" if x == 9\n  return \"A\" if x == 10\n  return \"\
    B\" if x == 11\n  return \"C\" if x == 12\n  return \"D\" if x == 13\n  return\
    \ \"E\" if x == 14\n  return \"F\" if x == 15\n  return \"G\" if x == 16\n  return\
    \ \"H\" if x == 17\n  return \"I\" if x == 18\n  return \"J\" if x == 19\n  return\
    \ \"K\" if x == 20\n  return \"L\" if x == 21\n  return \"M\" if x == 22\n  return\
    \ \"N\" if x == 23\n  return \"O\" if x == 24\n  return \"P\" if x == 25\n  return\
    \ \"Q\" if x == 26\n  return \"R\" if x == 27\n  return \"S\" if x == 28\n  return\
    \ \"T\" if x == 29\n  return \"U\" if x == 30\n  return \"V\" if x == 31\n  return\
    \ \"W\" if x == 32\n  return \"X\" if x == 33\n  return \"Y\" if x == 34\n  return\
    \ \"Z\" if x == 35\n  return \"a\" if x == 36\n  return \"b\" if x == 37\n  return\
    \ \"c\" if x == 38\n  return \"d\" if x == 39\n  return \"e\" if x == 40\n  return\
    \ \"f\" if x == 41\n  return \"g\" if x == 42\n  return \"h\" if x == 43\n  return\
    \ \"i\" if x == 44\n  return \"j\" if x == 45\n  return \"k\" if x == 46\n  return\
    \ \"l\" if x == 47\n  return \"m\" if x == 48\n  return \"n\" if x == 49\n  return\
    \ \"o\" if x == 50\n ", "  return x.to_s if base < 2\n  return (x % base).to_s\
    \ if x < base\n  change_base(x / base, base) + (x % base).to_s\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
