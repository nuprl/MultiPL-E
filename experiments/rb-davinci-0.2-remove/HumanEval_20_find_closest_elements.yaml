name: HumanEval_20_find_closest_elements
language: rb
prompt: "# From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n# other and return them in order (smaller number,\
  \ larger number).\ndef find_closest_elements(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
  \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0,\
  \ 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2,\
  \ 3.1, 4.1, 5.1]))\n  end\nend\n"
completions: ["  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n  \
    \  next if index == 0\n    difference = numbers[index] - numbers[index - 1]\n\
    \    if difference < closest_difference\n      closest_pair = [numbers[index -\
    \ 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num,\
    \ i|\n    next if i == numbers.length - 1\n    if numbers[i + 1] - num < closest_diff\n\
    \      closest_diff = numbers[i + 1] - num\n      closest_pair = [num, numbers[i\
    \ + 1]]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n \
    \ numbers.each_with_index do |number, index|\n    next if index == 0\n    diff\
    \ = number - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff\
    \ = diff\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n\
    \  closest_elements\nend", "  # TODO: Return the two numbers that are closest\
    \ to each other\n  numbers.sort!\n  closest_numbers = []\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n  \
    \  if index < numbers.length - 1\n      difference = numbers[index + 1] - number\n\
    \      if difference < closest_difference\n        closest_difference = difference\n\
    \        closest_numbers = [number, numbers[index + 1]]\n      end\n    end\n\
    \  end\n  closest_numbers\nend", "  numbers.sort!\n  closest_diff = numbers[1]\
    \ - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, i|\n    next if i == 0\n    if (num - numbers[i - 1]) < closest_diff\n\
    \      closest_diff = num - numbers[i - 1]\n      closest_pair = [numbers[i -\
    \ 1], num]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  smallest_difference\
    \ = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n \
    \ numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = numbers[index] - numbers[index - 1]\n    if difference < smallest_difference\n\
    \      smallest_difference = difference\n      closest_elements = [numbers[index\
    \ - 1], numbers[index]]\n    end\n  end\n  closest_elements\nend", "  numbers.sort!\n\
    \  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    diff\
    \ = number - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff\
    \ = diff\n      closest_pair = [numbers[index - 1], number]\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    difference = (num - numbers[index\
    \ - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index\
    \ - 1], num]\n      closest_difference = difference\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  for i in 0..numbers.length - 2\n    for j in i\
    \ + 1..numbers.length - 1\n      if numbers[j] - numbers[i] < closest_difference\n\
    \        closest_difference = numbers[j] - numbers[i]\n        closest_elements\
    \ = [numbers[i], numbers[j]]\n      end\n    end\n  end\n  return closest_elements\n\
    end", "  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  for i in 0..numbers.length-2\n    diff = numbers[i+1]\
    \ - numbers[i]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair\
    \ = [numbers[i], numbers[i+1]]\n    end\n  end\n  return closest_pair\nend", " \
    \ numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n\
    \    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n\
    \    if difference < closest_difference\n      closest_pair = [numbers[index -\
    \ 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    if (number - numbers[index -\
    \ 1]).abs < closest_distance\n      closest_distance = (number - numbers[index\
    \ - 1]).abs\n      closest_pair = [numbers[index - 1], number]\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num,\
    \ i|\n    next if i == numbers.length - 1\n    if numbers[i + 1] - num < closest_diff\n\
    \      closest_diff = numbers[i + 1] - num\n      closest_pair = [num, numbers[i\
    \ + 1]]\n    end\n  end\n  closest_pair\nend", "  # TODO: Return the two numbers\
    \ that are closest to each other\n  numbers.sort!\n  closest_elements = []\n \
    \ closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number,\
    \ index|\n    if index < numbers.length - 1\n      difference = numbers[index\
    \ + 1] - number\n      if difference < closest_difference\n        closest_difference\
    \ = difference\n        closest_elements = [number, numbers[index + 1]]\n    \
    \  end\n    end\n  end\n  closest_elements\nend", "  numbers.sort!\n  min_diff\
    \ = numbers[1] - numbers[0]\n  min_pair = [numbers[0], numbers[1]]\n  for i in\
    \ 1..numbers.length-2\n    diff = numbers[i+1] - numbers[i]\n    if diff < min_diff\n\
    \      min_diff = diff\n      min_pair = [numbers[i], numbers[i+1]]\n    end\n\
    \  end\n  return min_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]).abs\
    \ < closest_difference\n      closest_pair = [numbers[index - 1], num]\n     \
    \ closest_difference = (num - numbers[index - 1]).abs\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n\
    \    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n\
    \    if difference < closest_difference\n      closest_pair = [numbers[index -\
    \ 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n\
    \  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do\
    \ |number, index|\n    next if index == 0\n    difference = number - numbers[index\
    \ - 1]\n    if difference < closest_difference\n      closest_difference = difference\n\
    \      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  for i in 0..numbers.length - 2\n    for j in i\
    \ + 1..numbers.length - 1\n      if numbers[j] - numbers[i] < closest_difference\n\
    \        closest_pair = [numbers[i], numbers[j]]\n        closest_difference =\
    \ numbers[j] - numbers[i]\n      end\n    end\n  end\n  closest_pair\nend", " \
    \ # TODO: Implement this method\n  numbers.sort!\n  closest_elements = []\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n  \
    \  if index < numbers.length - 1\n      difference = numbers[index + 1] - number\n\
    \      if difference < closest_difference\n        closest_difference = difference\n\
    \        closest_elements = [number, numbers[index + 1]]\n      end\n    end\n\
    \  end\n  closest_elements\nend", "  numbers.sort!\n  closest_diff = numbers[1]\
    \ - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, i|\n    if i < numbers.length - 1\n      if numbers[i + 1] - num <\
    \ closest_diff\n        closest_diff = numbers[i + 1] - num\n        closest_pair\
    \ = [num, numbers[i + 1]]\n      end\n    end\n  end\n  closest_pair\nend", " \
    \ numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  numbers.each_with_index do |num, i|\n    next if i == numbers.length\
    \ - 1\n    diff = numbers[i + 1] - num\n    if diff < closest_diff\n      closest_diff\
    \ = diff\n      closest_pair = [num, numbers[i + 1]]\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference\
    \ = (numbers[1] - numbers[0]).abs\n  (0..numbers.length - 2).each do |i|\n   \
    \ difference = (numbers[i + 1] - numbers[i]).abs\n    if difference < closest_difference\n\
    \      closest_pair = [numbers[i], numbers[i + 1]]\n      closest_difference =\
    \ difference\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n \
    \ numbers.each_with_index do |number, index|\n    next if index == 0\n    if number\
    \ - numbers[index - 1] < closest_distance\n      closest_distance = number - numbers[index\
    \ - 1]\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n\
    \  closest_elements\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |number,\
    \ index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_distance\n\
    \      closest_pair = [numbers[index - 1], number]\n      closest_distance = number\
    \ - numbers[index - 1]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_diff = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]) < closest_diff\n      closest_diff = num - numbers[index\
    \ - 1]\n      closest_elements = [numbers[index - 1], num]\n    end\n  end\n \
    \ closest_elements\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]).abs\
    \ < closest_difference\n      closest_pair = [numbers[index - 1], num]\n     \
    \ closest_difference = (num - numbers[index - 1]).abs\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  smallest_difference = numbers[1] - numbers[0]\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n \
    \   next if index == 0\n    difference = numbers[index] - numbers[index - 1]\n\
    \    if difference < smallest_difference\n      smallest_difference = difference\n\
    \      closest_elements = [numbers[index - 1], numbers[index]]\n    end\n  end\n\
    \  closest_elements\nend", "  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num,\
    \ index|\n    next if index == 0\n    if (num - numbers[index - 1]) < closest_diff\n\
    \      closest_diff = num - numbers[index - 1]\n      closest_pair = [numbers[index\
    \ - 1], num]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n \
    \ numbers.each_with_index do |number, index|\n    next if index == 0\n    if number\
    \ - numbers[index - 1] < closest_distance\n      closest_distance = number - numbers[index\
    \ - 1]\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n\
    \  closest_elements\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    if (number - numbers[index -\
    \ 1]).abs < closest_distance\n      closest_distance = (number - numbers[index\
    \ - 1]).abs\n      closest_pair = [numbers[index - 1], number]\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do\
    \ |number, index|\n    next if index == 0\n    difference = number - numbers[index\
    \ - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index\
    \ - 1], number]\n      closest_difference = difference\n    end\n  end\n  closest_pair\n\
    end", "  # TODO: Implement this method\n  numbers.sort!\n  closest_elements =\
    \ []\n  closest_elements << numbers[0] << numbers[1]\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      if (number - numbers[index\
    \ + 1]).abs < (closest_elements[0] - closest_elements[1]).abs\n        closest_elements[0]\
    \ = number\n        closest_elements[1] = numbers[index + 1]\n      end\n    end\n\
    \  end\n  closest_elements\nend", "  numbers.sort!\n  closest_diff = numbers[1]\
    \ - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, i|\n    next if i == numbers.length - 1\n    diff = numbers[i + 1]\
    \ - num\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair\
    \ = [num, numbers[i + 1]]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1]\
    \ - numbers[0]\n  numbers.each_with_index do |n, i|\n    next if i == 0\n    if\
    \ (n - numbers[i - 1]) < closest_difference\n      closest_pair = [numbers[i -\
    \ 1], n]\n      closest_difference = n - numbers[i - 1]\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n\
    \    next if index == 0\n    if (num - numbers[index - 1]).abs < closest_distance\n\
    \      closest_pair = [numbers[index - 1], num]\n      closest_distance = (num\
    \ - numbers[index - 1]).abs\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1]\
    \ - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index\
    \ == 0\n    if numbers[index] - numbers[index - 1] < closest_difference\n    \
    \  closest_difference = numbers[index] - numbers[index - 1]\n      closest_elements\
    \ = [numbers[index - 1], numbers[index]]\n    end\n  end\n  closest_elements\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n  \
    \  next if index == 0\n    if (numbers[index] - numbers[index - 1]) < closest_difference\n\
    \      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference\
    \ = numbers[index] - numbers[index - 1]\n    end\n  end\n  closest_pair\nend",
  "  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_elements =\
    \ [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n   \
    \ next if index == 0\n    diff = number - numbers[index - 1]\n    if diff < closest_diff\n\
    \      closest_diff = diff\n      closest_elements = [numbers[index - 1], number]\n\
    \    end\n  end\n  closest_elements\nend", "  numbers.combination(2).min_by {\
    \ |a, b| (a - b).abs }\nend", "  numbers.sort!\n  closest_diff = numbers[1] -\
    \ numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    diff = num - numbers[index - 1]\n\
    \    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]).abs < closest_distance\n      closest_pair = [numbers[index\
    \ - 1], num]\n      closest_distance = (num - numbers[index - 1]).abs\n    end\n\
    \  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |n, i|\n    next if i == 0\n    if (numbers[i] - numbers[i - 1]).abs < closest_distance\n\
    \      closest_pair = [numbers[i - 1], numbers[i]]\n      closest_distance = (numbers[i]\
    \ - numbers[i - 1]).abs\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  min_diff = numbers[1] - numbers[0]\n  min_pair = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ num - numbers[index - 1]\n    if diff < min_diff\n      min_diff = diff\n  \
    \    min_pair = [numbers[index - 1], num]\n    end\n  end\n  min_pair\nend", " \
    \ numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n  \
    \  next if index == 0\n    difference = number - numbers[index - 1]\n    if difference\
    \ < closest_difference\n      closest_pair = [numbers[index - 1], number]\n  \
    \    closest_difference = difference\n    end\n  end\n  closest_pair\nend", " \
    \ numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index ==\
    \ 0\n    if (num - numbers[index - 1]) < closest_diff\n      closest_diff = num\
    \ - numbers[index - 1]\n      closest_pair = [numbers[index - 1], num]\n    end\n\
    \  end\n  closest_pair\nend", "  numbers.sort!\n  min_diff = numbers[1] - numbers[0]\n\
    \  min_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n\
    \    next if i == numbers.length - 1\n    diff = numbers[i + 1] - num\n    if\
    \ diff < min_diff\n      min_diff = diff\n      min_pair = [num, numbers[i + 1]]\n\
    \    end\n  end\n  min_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    difference = (numbers[index]\
    \ - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair\
    \ = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n\
    \    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_elements =\
    \ [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n \
    \ numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = number - numbers[index - 1]\n    if difference < closest_difference\n    \
    \  closest_difference = difference\n      closest_elements = [numbers[index -\
    \ 1], number]\n    end\n  end\n  closest_elements\nend", "  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    diff = numbers[index] - numbers[index\
    \ - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair\
    \ = [numbers[index - 1], numbers[index]]\n    end\n  end\n  closest_pair\nend",
  "  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_numbers =\
    \ [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next\
    \ if index == 0\n    if (num - numbers[index - 1]) < closest_diff\n      closest_diff\
    \ = num - numbers[index - 1]\n      closest_numbers = [numbers[index - 1], num]\n\
    \    end\n  end\n  closest_numbers\nend", "  numbers.sort!\n  closest_diff = numbers[1]\
    \ - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, i|\n    next if i == 0\n    if num - numbers[i - 1] < closest_diff\n\
    \      closest_diff = num - numbers[i - 1]\n      closest_pair = [numbers[i -\
    \ 1], num]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = numbers[index] - numbers[index - 1]\n    if difference < closest_difference\n\
    \      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference\
    \ = difference\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    diff = num - numbers[index - 1]\n\
    \    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, i|\n    next if i == 0\n    if (num - numbers[i\
    \ - 1]).abs < closest_distance\n      closest_pair = [numbers[i - 1], num]\n \
    \     closest_distance = (num - numbers[i - 1]).abs\n    end\n  end\n  closest_pair\n\
    end", "  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1]\
    \ - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index\
    \ == 0\n    if (number - numbers[index - 1]) < closest_difference\n      closest_pair\
    \ = [numbers[index - 1], number]\n      closest_difference = number - numbers[index\
    \ - 1]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n\
    \      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference\
    \ = difference\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_numbers\
    \ = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = number - numbers[index - 1]\n    if difference < closest_difference\n    \
    \  closest_difference = difference\n      closest_numbers = [numbers[index - 1],\
    \ number]\n    end\n  end\n  closest_numbers\nend", "  # TODO: implement this\
    \ method\n  numbers.sort!\n  closest_elements = []\n  closest_difference = numbers[1]\
    \ - numbers[0]\n  numbers.each_with_index do |number, index|\n    if index < numbers.length\
    \ - 1\n      if numbers[index + 1] - number < closest_difference\n        closest_difference\
    \ = numbers[index + 1] - number\n        closest_elements = [number, numbers[index\
    \ + 1]]\n      end\n    end\n  end\n  closest_elements\nend", "  numbers.sort!\n\
    \  min_diff = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n\
    \  (1..numbers.length - 2).each do |i|\n    diff = numbers[i + 1] - numbers[i]\n\
    \    if diff < min_diff\n      min_diff = diff\n      closest_elements = [numbers[i],\
    \ numbers[i + 1]]\n    end\n  end\n  closest_elements\nend", "  numbers.sort!\n\
    \  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ num - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n\
    \      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n\
    \    next if index == 0\n    if (number - numbers[index - 1]).abs < closest_difference\n\
    \      closest_pair = [numbers[index - 1], number]\n      closest_difference =\
    \ (number - numbers[index - 1]).abs\n    end\n  end\n  closest_pair\nend", " \
    \ # TODO: implement this method\n  numbers.sort!\n  min_diff = numbers[1] - numbers[0]\n\
    \  min_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number,\
    \ index|\n    next if index == 0\n    if numbers[index] - numbers[index - 1] <\
    \ min_diff\n      min_diff = numbers[index] - numbers[index - 1]\n      min_pair\
    \ = [numbers[index - 1], numbers[index]]\n    end\n  end\n  min_pair\nend", " \
    \ numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n  \
    \  next if index == 0\n    if (number - numbers[index - 1]) < closest_distance\n\
    \      closest_pair = [numbers[index - 1], number]\n      closest_distance = number\
    \ - numbers[index - 1]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1]\
    \ - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if\
    \ index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n   \
    \ if difference < closest_difference\n      closest_pair = [numbers[index - 1],\
    \ numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n  \
    \  next if index == 0\n    difference = number - numbers[index - 1]\n    if difference\
    \ < closest_difference\n      closest_difference = difference\n      closest_elements\
    \ = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend", " \
    \ numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index ==\
    \ 0\n    if (num - numbers[index - 1]) < closest_diff\n      closest_diff = num\
    \ - numbers[index - 1]\n      closest_pair = [numbers[index - 1], num]\n    end\n\
    \  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff = numbers[1] -\
    \ numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    if (number - numbers[index -\
    \ 1]) < closest_diff\n      closest_diff = number - numbers[index - 1]\n     \
    \ closest_pair = [numbers[index - 1], number]\n    end\n  end\n  closest_pair\n\
    end", "  # TODO: return the two numbers that are closest to each other\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.sort!\n  closest_diff = numbers[1]\
    \ - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, i|\n    next if i == 0\n    diff = num - numbers[i - 1]\n    if diff\
    \ < closest_diff\n      closest_diff = diff\n      closest_elements = [numbers[i\
    \ - 1], num]\n    end\n  end\n  closest_elements\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n\
    \      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference\
    \ = difference\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  for\
    \ i in 0..numbers.length-2\n    if numbers[i+1] - numbers[i] < closest_diff\n\
    \      closest_diff = numbers[i+1] - numbers[i]\n      closest_pair = [numbers[i],\
    \ numbers[i+1]]\n    end\n  end\n  return closest_pair\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] -\
    \ numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index\
    \ == 0\n    if (number - numbers[index - 1]).abs < closest_distance\n      closest_distance\
    \ = (number - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1],\
    \ number]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) <\
    \ closest_diff\n      closest_diff = num - numbers[index - 1]\n      closest_pair\
    \ = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] -\
    \ numbers[0]\n  numbers.each_with_index do |num, index|\n    if index < numbers.length\
    \ - 1\n      if numbers[index + 1] - num < closest_distance\n        closest_pair\
    \ = [num, numbers[index + 1]]\n        closest_distance = numbers[index + 1] -\
    \ num\n      end\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n \
    \ numbers.each_with_index do |number, index|\n    next if index == 0\n    diff\
    \ = number - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff\
    \ = diff\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n\
    \  closest_elements\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do\
    \ |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) < closest_difference\n\
    \      closest_pair = [numbers[index - 1], num]\n      closest_difference = num\
    \ - numbers[index - 1]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] -\
    \ numbers[0]).abs\n  numbers.each_with_index do |num, i|\n    next if i == numbers.length\
    \ - 1\n    if (numbers[i + 1] - num).abs < closest_distance\n      closest_pair\
    \ = [num, numbers[i + 1]]\n      closest_distance = (numbers[i + 1] - num).abs\n\
    \    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_elements =\
    \ [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n \
    \ numbers.each_with_index do |number, index|\n    if index == numbers.length -\
    \ 1\n      break\n    end\n    if numbers[index + 1] - number < closest_difference\n\
    \      closest_difference = numbers[index + 1] - number\n      closest_elements\
    \ = [number, numbers[index + 1]]\n    end\n  end\n  closest_elements\nend", " \
    \ # TODO: Return the two numbers that are closest to each other\n  numbers.sort!\n\
    \  closest_elements = []\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      if numbers[index\
    \ + 1] - number < closest_difference\n        closest_difference = numbers[index\
    \ + 1] - number\n        closest_elements = [number, numbers[index + 1]]\n   \
    \   end\n    end\n  end\n  closest_elements\nend", "  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, i|\n    next if i == 0\n    diff = num - numbers[i - 1]\n    if diff\
    \ < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[i -\
    \ 1], num]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n\
    \      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference\
    \ = difference\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    diff = num - numbers[index - 1]\n\
    \    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    if\
    \ (number - numbers[index - 1]) < closest_difference\n      closest_pair = [numbers[index\
    \ - 1], number]\n      closest_difference = number - numbers[index - 1]\n    end\n\
    \  end\n  closest_pair\nend", "  numbers.sort!\n  closest_elements = [numbers[0],\
    \ numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    difference = number - numbers[index\
    \ - 1]\n    if difference < closest_difference\n      closest_difference = difference\n\
    \      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |num, index|\n    next\
    \ if index == 0\n    difference = num - numbers[index - 1]\n    if difference\
    \ < closest_difference\n      closest_pair = [numbers[index - 1], num]\n     \
    \ closest_difference = difference\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1]\
    \ - numbers[0]\n  (numbers.length - 1).times do |i|\n    if numbers[i + 1] - numbers[i]\
    \ < closest_difference\n      closest_difference = numbers[i + 1] - numbers[i]\n\
    \      closest_elements = [numbers[i], numbers[i + 1]]\n    end\n  end\n  closest_elements\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  (0..numbers.length - 2).each do |i|\n    if numbers[i\
    \ + 1] - numbers[i] < closest_difference\n      closest_pair = [numbers[i], numbers[i\
    \ + 1]]\n      closest_difference = numbers[i + 1] - numbers[i]\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do\
    \ |number, index|\n    next if index == 0\n    difference = numbers[index] - numbers[index\
    \ - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index\
    \ - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n\
    \  closest_pair\nend", "  # TODO: implement this method\n  numbers.sort!\n  closest_elements\
    \ = []\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      difference = numbers[index\
    \ + 1] - number\n      if difference < closest_difference\n        closest_difference\
    \ = difference\n        closest_elements = [number, numbers[index + 1]]\n    \
    \  end\n    end\n  end\n  closest_elements\nend", "  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, i|\n    if i < numbers.length - 1\n      diff = numbers[i + 1] - num\n\
    \      if diff < closest_diff\n        closest_diff = diff\n        closest_pair\
    \ = [num, numbers[i + 1]]\n      end\n    end\n  end\n  closest_pair\nend", " \
    \ numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index ==\
    \ 0\n    if (num - numbers[index - 1]) < closest_diff\n      closest_diff = num\
    \ - numbers[index - 1]\n      closest_pair = [numbers[index - 1], num]\n    end\n\
    \  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff = numbers[1] -\
    \ numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  for i in 0..numbers.length-2\n\
    \    if numbers[i+1] - numbers[i] < closest_diff\n      closest_diff = numbers[i+1]\
    \ - numbers[i]\n      closest_elements = [numbers[i], numbers[i+1]]\n    end\n\
    \  end\n  return closest_elements\nend", "  numbers.sort!\n  min_diff = numbers[1]\
    \ - numbers[0]\n  min_pair = [numbers[0], numbers[1]]\n  (1..numbers.length-2).each\
    \ do |i|\n    if numbers[i+1] - numbers[i] < min_diff\n      min_diff = numbers[i+1]\
    \ - numbers[i]\n      min_pair = [numbers[i], numbers[i+1]]\n    end\n  end\n\
    \  min_pair\nend", "  numbers.sort!\n  closest_numbers = []\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n  \
    \  next if index == numbers.length - 1\n    difference = numbers[index + 1] -\
    \ number\n    if difference < closest_difference\n      closest_difference = difference\n\
    \      closest_numbers = [number, numbers[index + 1]]\n    end\n  end\n  closest_numbers\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n\
    \    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n\
    \    if difference < closest_difference\n      closest_pair = [numbers[index -\
    \ 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do\
    \ |number, index|\n    next if index == 0\n    difference = number - numbers[index\
    \ - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index\
    \ - 1], number]\n      closest_difference = difference\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n\
    \    next if index == 0\n    distance = (number - numbers[index - 1]).abs\n  \
    \  if distance < closest_distance\n      closest_distance = distance\n      closest_pair\
    \ = [numbers[index - 1], number]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] -\
    \ numbers[0]).abs\n  numbers.each_with_index do |num, index|\n    next if index\
    \ == 0\n    if (num - numbers[index - 1]).abs < closest_distance\n      closest_distance\
    \ = (num - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1],\
    \ num]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n \
    \ numbers.each_with_index do |number, index|\n    next if index == 0\n    if numbers[index]\
    \ - numbers[index - 1] < closest_diff\n      closest_diff = numbers[index] - numbers[index\
    \ - 1]\n      closest_elements = [numbers[index - 1], numbers[index]]\n    end\n\
    \  end\n  closest_elements\nend", "  numbers.sort!\n  closest_diff = numbers[1]\
    \ - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, i|\n    next if i == 0\n    if numbers[i] - numbers[i - 1] < closest_diff\n\
    \      closest_diff = numbers[i] - numbers[i - 1]\n      closest_pair = [numbers[i\
    \ - 1], numbers[i]]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1]\
    \ - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index\
    \ == 0\n    if (number - numbers[index - 1]) < closest_difference\n      closest_pair\
    \ = [numbers[index - 1], number]\n      closest_difference = number - numbers[index\
    \ - 1]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]).abs < closest_distance\n      closest_distance = (num\
    \ - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1], num]\n\
    \    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  for i in 1..numbers.length-2\n\
    \    difference = numbers[i+1] - numbers[i]\n    if difference < closest_difference\n\
    \      closest_pair = [numbers[i], numbers[i+1]]\n      closest_difference = difference\n\
    \    end\n  end\n  return closest_pair\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n \
    \ numbers.each_with_index do |num, i|\n    next if i == 0\n    if num - numbers[i\
    \ - 1] < closest_distance\n      closest_pair = [numbers[i - 1], num]\n      closest_distance\
    \ = num - numbers[i - 1]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] -\
    \ numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index\
    \ == 0\n    if (number - numbers[index - 1]).abs < closest_distance\n      closest_distance\
    \ = (number - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1],\
    \ number]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n \
    \ numbers.each_with_index do |number, index|\n    next if index == 0\n    distance\
    \ = number - numbers[index - 1]\n    if distance < closest_distance\n      closest_distance\
    \ = distance\n      closest_pair = [numbers[index - 1], number]\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |n,\
    \ i|\n    next if i == 0\n    if numbers[i] - numbers[i - 1] < closest_distance\n\
    \      closest_pair = [numbers[i - 1], numbers[i]]\n      closest_distance = numbers[i]\
    \ - numbers[i - 1]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n \
    \ closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |num, index|\n    next if index == numbers.length\
    \ - 1\n    if numbers[index + 1] - num < closest_diff\n      closest_diff = numbers[index\
    \ + 1] - num\n      closest_pair = [num, numbers[index + 1]]\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num,\
    \ index|\n    next if index == 0\n    if (num - numbers[index - 1]) < closest_diff\n\
    \      closest_diff = num - numbers[index - 1]\n      closest_pair = [numbers[index\
    \ - 1], num]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n \
    \ numbers.each_with_index do |number, index|\n    next if index == 0\n    diff\
    \ = number - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff\
    \ = diff\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n\
    \  closest_elements\nend", "  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n\
    \  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num,\
    \ index|\n    next if index == 0\n    diff = num - numbers[index - 1]\n    if\
    \ diff < closest_diff\n      closest_diff = diff\n      closest_elements = [numbers[index\
    \ - 1], num]\n    end\n  end\n  closest_elements\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = numbers[index] - numbers[index - 1]\n    if difference < closest_difference\n\
    \      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference\
    \ = difference\n    end\n  end\n  closest_pair\nend", "  # TODO: implement this\
    \ method\n  numbers.sort!\n  closest_elements = []\n  closest_elements << numbers[0]\n\
    \  closest_elements << numbers[1]\n  i = 0\n  while i < numbers.length - 1\n \
    \   if (numbers[i+1] - numbers[i]) < (closest_elements[1] - closest_elements[0])\n\
    \      closest_elements[0] = numbers[i]\n      closest_elements[1] = numbers[i+1]\n\
    \    end\n    i += 1\n  end\n  closest_elements\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n \
    \ numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number\
    \ - numbers[index - 1]) < closest_distance\n      closest_pair = [numbers[index\
    \ - 1], number]\n      closest_distance = number - numbers[index - 1]\n    end\n\
    \  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff = numbers[1] -\
    \ numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      diff = numbers[index\
    \ + 1] - num\n      if diff < closest_diff\n        closest_diff = diff\n    \
    \    closest_pair = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n\
    \    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n\
    \    if difference < closest_difference\n      closest_pair = [numbers[index -\
    \ 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do\
    \ |number, index|\n    next if index == 0\n    if (number - numbers[index - 1])\
    \ < closest_difference\n      closest_pair = [numbers[index - 1], number]\n  \
    \    closest_difference = number - numbers[index - 1]\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |num, index|\n    next\
    \ if index == 0\n    if num - numbers[index - 1] < closest_distance\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_distance = num - numbers[index -\
    \ 1]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = number - numbers[index - 1]\n    if difference < closest_difference\n    \
    \  closest_difference = difference\n      closest_elements = [numbers[index -\
    \ 1], number]\n    end\n  end\n  closest_elements\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n \
    \ numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number\
    \ - numbers[index - 1]) < closest_distance\n      closest_pair = [numbers[index\
    \ - 1], number]\n      closest_distance = number - numbers[index - 1]\n    end\n\
    \  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff = numbers[1] -\
    \ numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    diff = number - numbers[index\
    \ - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_elements\
    \ = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend", " \
    \ numbers.sort!\n  closest_numbers = [numbers[0], numbers[1]]\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n  \
    \  next if index == 0\n    difference = number - numbers[index - 1]\n    if difference\
    \ < closest_difference\n      closest_difference = difference\n      closest_numbers\
    \ = [numbers[index - 1], number]\n    end\n  end\n  closest_numbers\nend", " \
    \ numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n\
    \    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n\
    \    if difference < closest_difference\n      closest_pair = [numbers[index -\
    \ 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_difference = numbers[1] - numbers[0]\n  (0..numbers.length - 2).each\
    \ do |i|\n    if (numbers[i + 1] - numbers[i]) < closest_difference\n      closest_pair\
    \ = [numbers[i], numbers[i + 1]]\n      closest_difference = numbers[i + 1] -\
    \ numbers[i]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_numbers = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, i|\n    next if i == 0\n    diff = num - numbers[i - 1]\n    if diff\
    \ < closest_diff\n      closest_diff = diff\n      closest_numbers = [numbers[i\
    \ - 1], num]\n    end\n  end\n  closest_numbers\nend", "  numbers.sort!\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = number - numbers[index - 1]\n    if difference < closest_difference\n    \
    \  closest_difference = difference\n      closest_elements = [numbers[index -\
    \ 1], number]\n    end\n  end\n  closest_elements\nend", "  # TODO: implement\
    \ this method\n  numbers.sort!\n  closest_elements = []\n  closest_elements <<\
    \ numbers[0]\n  closest_elements << numbers[1]\n  closest_difference = closest_elements[1]\
    \ - closest_elements[0]\n  numbers.each_with_index do |number, index|\n    if\
    \ index < numbers.length - 1\n      difference = numbers[index + 1] - number\n\
    \      if difference < closest_difference\n        closest_elements = []\n   \
    \     closest_elements << number\n        closest_elements << numbers[index +\
    \ 1]\n        closest_difference = difference\n      end\n    end\n  end\n  closest_elements\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n  \
    \  next if index == 0\n    difference = numbers[index] - numbers[index - 1]\n\
    \    if difference < closest_difference\n      closest_pair = [numbers[index -\
    \ 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    difference = (numbers[index]\
    \ - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair\
    \ = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n\
    \    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    distance = number - numbers[index\
    \ - 1]\n    if distance < closest_distance\n      closest_distance = distance\n\
    \      closest_pair = [numbers[index - 1], number]\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |num, index|\n    if\
    \ index < numbers.length - 1\n      difference = numbers[index + 1] - num\n  \
    \    if difference < closest_difference\n        closest_difference = difference\n\
    \        closest_elements = [num, numbers[index + 1]]\n      end\n    end\n  end\n\
    \  closest_elements\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do\
    \ |number, index|\n    next if index == 0\n    difference = numbers[index] - numbers[index\
    \ - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index\
    \ - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    difference = (numbers[index]\
    \ - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair\
    \ = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n\
    \    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_elements =\
    \ [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n \
    \ numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = number - numbers[index - 1]\n    if difference < closest_difference\n    \
    \  closest_difference = difference\n      closest_elements = [numbers[index -\
    \ 1], number]\n    end\n  end\n  closest_elements\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n \
    \ numbers.each_with_index do |number, index|\n    next if index == 0\n    if number\
    \ - numbers[index - 1] < closest_distance\n      closest_pair = [numbers[index\
    \ - 1], number]\n      closest_distance = number - numbers[index - 1]\n    end\n\
    \  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff = numbers[1] -\
    \ numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  for i in 0..numbers.length-2\n\
    \    if numbers[i+1] - numbers[i] < closest_diff\n      closest_diff = numbers[i+1]\
    \ - numbers[i]\n      closest_pair = [numbers[i], numbers[i+1]]\n    end\n  end\n\
    \  return closest_pair\nend", "  numbers.sort!\n  closest_diff = numbers[1] -\
    \ numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, i|\n    next if i == numbers.length - 1\n    if numbers[i + 1] - num\
    \ < closest_diff\n      closest_diff = numbers[i + 1] - num\n      closest_pair\
    \ = [num, numbers[i + 1]]\n    end\n  end\n  closest_pair\nend", "  # TODO: Return\
    \ the two numbers that are closest to each other\n  numbers.sort!\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = number - numbers[index - 1]\n    if difference < closest_difference\n    \
    \  closest_difference = difference\n      closest_elements = [numbers[index -\
    \ 1], number]\n    end\n  end\n  closest_elements\nend", "  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) <\
    \ closest_diff\n      closest_diff = num - numbers[index - 1]\n      closest_pair\
    \ = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_diff = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ num - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n\
    \      closest_elements = [numbers[index - 1], num]\n    end\n  end\n  closest_elements\n\
    end", "  # TODO: return the two numbers that are closest to each other\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend", "  numbers.sort!\n  closest_diff = numbers[1]\
    \ - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) <\
    \ closest_diff\n      closest_diff = num - numbers[index - 1]\n      closest_pair\
    \ = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] -\
    \ numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index\
    \ == 0\n    distance = number - numbers[index - 1]\n    if distance < closest_distance\n\
    \      closest_distance = distance\n      closest_pair = [numbers[index - 1],\
    \ number]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = numbers[index] - numbers[index - 1]\n    if difference < closest_difference\n\
    \      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference\
    \ = difference\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  smallest_difference\
    \ = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n \
    \ numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = numbers[index] - numbers[index - 1]\n    if difference < smallest_difference\n\
    \      smallest_difference = difference\n      closest_elements = [numbers[index\
    \ - 1], numbers[index]]\n    end\n  end\n  closest_elements\nend", "  numbers.sort!\n\
    \  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1]\
    \ - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index\
    \ == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n\
    \      closest_difference = difference\n      closest_elements = [numbers[index\
    \ - 1], number]\n    end\n  end\n  closest_elements\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1]\
    \ - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index\
    \ == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n\
    \      closest_pair = [numbers[index - 1], number]\n      closest_difference =\
    \ difference\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n \
    \ numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number\
    \ - numbers[index - 1]) < closest_distance\n      closest_pair = [numbers[index\
    \ - 1], number]\n      closest_distance = number - numbers[index - 1]\n    end\n\
    \  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    difference = numbers[index]\
    \ - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair\
    \ = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n\
    \    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |n, i|\n    next if i == 0\n    if (numbers[i] - numbers[i - 1]).abs < closest_difference\n\
    \      closest_pair = [numbers[i - 1], numbers[i]]\n      closest_difference =\
    \ (numbers[i] - numbers[i - 1]).abs\n    end\n  end\n  closest_pair\nend", " \
    \ numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |num, i|\n    next if\
    \ i == 0\n    if num - numbers[i - 1] < closest_distance\n      closest_pair =\
    \ [numbers[i - 1], num]\n      closest_distance = num - numbers[i - 1]\n    end\n\
    \  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    difference = (numbers[index]\
    \ - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair\
    \ = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n\
    \    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff = numbers[1]\
    \ - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    if num - numbers[index - 1] < closest_diff\n\
    \      closest_diff = num - numbers[index - 1]\n      closest_pair = [numbers[index\
    \ - 1], num]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, i|\n    if i == numbers.length - 1\n      break\n    end\n    if numbers[i\
    \ + 1] - num < closest_diff\n      closest_diff = numbers[i + 1] - num\n     \
    \ closest_pair = [num, numbers[i + 1]]\n    end\n  end\n  closest_pair\nend",
  "  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_elements =\
    \ [numbers[0], numbers[1]]\n  for i in 0..numbers.length-2\n    diff = numbers[i+1]\
    \ - numbers[i]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_elements\
    \ = [numbers[i], numbers[i+1]]\n    end\n  end\n  return closest_elements\nend",
  "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n\
    \    next if index == 0\n    if (num - numbers[index - 1]).abs < closest_distance\n\
    \      closest_distance = (num - numbers[index - 1]).abs\n      closest_pair =\
    \ [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] -\
    \ numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index\
    \ == 0\n    if (numbers[index] - numbers[index - 1]) < closest_distance\n    \
    \  closest_pair = [numbers[index - 1], numbers[index]]\n      closest_distance\
    \ = numbers[index] - numbers[index - 1]\n    end\n  end\n  closest_pair\nend",
  "  numbers.sort!\n  closest_numbers = [numbers[0], numbers[1]]\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n  \
    \  next if index == 0\n    if (number - numbers[index - 1]) < closest_difference\n\
    \      closest_numbers = [numbers[index - 1], number]\n      closest_difference\
    \ = number - numbers[index - 1]\n    end\n  end\n  closest_numbers\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1]\
    \ - numbers[0]\n  numbers.each_with_index do |num, index|\n    next if index ==\
    \ 0\n    if (num - numbers[index - 1]) < closest_difference\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_difference = num - numbers[index\
    \ - 1]\n    end\n  end\n  closest_pair\nend", "  # TODO: return the two numbers\
    \ that are closest to each other\n  numbers.sort!\n  closest_diff = numbers[1]\
    \ - numbers[0]\n  closest_numbers = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == numbers.length - 1\n    diff = numbers[index\
    \ + 1] - number\n    if diff < closest_diff\n      closest_diff = diff\n     \
    \ closest_numbers = [number, numbers[index + 1]]\n    end\n  end\n  closest_numbers\n\
    end", "  # TODO: return the two numbers that are closest to each other\n  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_diff = numbers[1] - numbers[0]\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    if\
    \ (number - numbers[index - 1]) < closest_diff\n      closest_pair = [numbers[index\
    \ - 1], number]\n      closest_diff = number - numbers[index - 1]\n    end\n \
    \ end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    if (number - numbers[index -\
    \ 1]).abs < closest_distance\n      closest_distance = (number - numbers[index\
    \ - 1]).abs\n      closest_pair = [numbers[index - 1], number]\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]).abs\
    \ < closest_distance\n      closest_pair = [numbers[index - 1], num]\n      closest_distance\
    \ = (num - numbers[index - 1]).abs\n    end\n  end\n  closest_pair\nend", "  #\
    \ TODO: return the two numbers that are closest to each other\n  numbers.sort!\n\
    \  closest_elements = []\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      difference = numbers[index\
    \ + 1] - number\n      if difference < closest_difference\n        closest_difference\
    \ = difference\n        closest_elements = [number, numbers[index + 1]]\n    \
    \  end\n    end\n  end\n  closest_elements\nend", "  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_numbers = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    diff = number - numbers[index\
    \ - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_numbers\
    \ = [numbers[index - 1], number]\n    end\n  end\n  closest_numbers\nend", " \
    \ # TODO: return the two closest elements in the array\n  numbers.sort!\n  min\
    \ = numbers[1] - numbers[0]\n  result = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      if numbers[index\
    \ + 1] - number < min\n        min = numbers[index + 1] - number\n        result\
    \ = [number, numbers[index + 1]]\n      end\n    end\n  end\n  result\nend", " \
    \ numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  for i in 0..numbers.length-2\n    if numbers[i+1] - numbers[i]\
    \ < closest_diff\n      closest_diff = numbers[i+1] - numbers[i]\n      closest_pair\
    \ = [numbers[i], numbers[i+1]]\n    end\n  end\n  return closest_pair\nend", " \
    \ # TODO: Return the two numbers that are closest to each other\n  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] -\
    \ numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index\
    \ == 0\n    if (number - numbers[index - 1]).abs < closest_distance\n      closest_pair\
    \ = [numbers[index - 1], number]\n      closest_distance = (number - numbers[index\
    \ - 1]).abs\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = numbers[index] - numbers[index - 1]\n    if difference < closest_difference\n\
    \      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference\
    \ = difference\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n\
    \      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference\
    \ = difference\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    diff = num - numbers[index - 1]\n\
    \    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, i|\n    next if i == 0\n    if (num - numbers[i\
    \ - 1]).abs < closest_distance\n      closest_pair = [numbers[i - 1], num]\n \
    \     closest_distance = (num - numbers[i - 1]).abs\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n\
    \    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n\
    \    if difference < closest_difference\n      closest_pair = [numbers[index -\
    \ 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number,\
    \ index|\n    next if index == numbers.length - 1\n    diff = numbers[index +\
    \ 1] - number\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair\
    \ = [number, numbers[index + 1]]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1]\
    \ - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index\
    \ == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n\
    \      closest_pair = [numbers[index - 1], number]\n      closest_difference =\
    \ difference\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n\
    \      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference\
    \ = difference\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = number - numbers[index - 1]\n    if difference < closest_difference\n    \
    \  closest_pair = [numbers[index - 1], number]\n      closest_difference = difference\n\
    \    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_distance =\
    \ numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  for\
    \ i in 0..numbers.length-2\n    if numbers[i+1] - numbers[i] < closest_distance\n\
    \      closest_distance = numbers[i+1] - numbers[i]\n      closest_elements =\
    \ [numbers[i], numbers[i+1]]\n    end\n  end\n  return closest_elements\nend",
  "  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  numbers.each_with_index do |num, i|\n    next if i == 0\n   \
    \ if (num - numbers[i - 1]) < closest_diff\n      closest_diff = num - numbers[i\
    \ - 1]\n      closest_pair = [numbers[i - 1], num]\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n    next\
    \ if i == numbers.length - 1\n    diff = numbers[i + 1] - num\n    if diff < closest_diff\n\
    \      closest_diff = diff\n      closest_pair = [num, numbers[i + 1]]\n    end\n\
    \  end\n  closest_pair\nend", "  # TODO: return the two numbers that are closest\
    \ to each other\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n \
    \ closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number,\
    \ index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_diff\n\
    \      closest_diff = number - numbers[index - 1]\n      closest_elements = [numbers[index\
    \ - 1], number]\n    end\n  end\n  closest_elements\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1]\
    \ - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if\
    \ index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n   \
    \ if difference < closest_difference\n      closest_pair = [numbers[index - 1],\
    \ numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n  \
    \  next if index == 0\n    difference = number - numbers[index - 1]\n    if difference\
    \ < closest_difference\n      closest_difference = difference\n      closest_elements\
    \ = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend", " \
    \ numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n  \
    \  next if index == 0\n    if (number - numbers[index - 1]) < closest_distance\n\
    \      closest_pair = [numbers[index - 1], number]\n      closest_distance = number\
    \ - numbers[index - 1]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ num - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n\
    \      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n  \
    \  next if index == 0\n    difference = numbers[index] - numbers[index - 1]\n\
    \    if difference < closest_difference\n      closest_pair = [numbers[index -\
    \ 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do\
    \ |number, index|\n    next if index == 0\n    difference = numbers[index] - numbers[index\
    \ - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index\
    \ - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n\
    \  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do\
    \ |number, index|\n    next if index == 0\n    difference = number - numbers[index\
    \ - 1]\n    if difference < closest_difference\n      closest_difference = difference\n\
    \      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\n\
    end", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n  \
    \  next if index == 0\n    if (number - numbers[index - 1]) < closest_distance\n\
    \      closest_pair = [numbers[index - 1], number]\n      closest_distance = number\
    \ - numbers[index - 1]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n\
    \  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1]\
    \ - numbers[0]\n  numbers.each_with_index do |n, i|\n    next if i == 0\n    difference\
    \ = n - numbers[i - 1]\n    if difference < closest_difference\n      closest_pair\
    \ = [numbers[i - 1], n]\n      closest_difference = difference\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_pair_distance = numbers[1] - numbers[0]\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    if (number - numbers[index -\
    \ 1]) < closest_pair_distance\n      closest_pair = [numbers[index - 1], number]\n\
    \      closest_pair_distance = number - numbers[index - 1]\n    end\n  end\n \
    \ closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_difference = numbers[1] - numbers[0]\n  (0..numbers.length - 2).each\
    \ do |i|\n    if numbers[i + 1] - numbers[i] < closest_difference\n      closest_pair\
    \ = [numbers[i], numbers[i + 1]]\n      closest_difference = numbers[i + 1] -\
    \ numbers[i]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    diff = num - numbers[index - 1]\n\
    \    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n    end\n  end\n  closest_pair\nend", "  numbers.sort!\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]) < closest_difference\n      closest_elements = [numbers[index\
    \ - 1], num]\n      closest_difference = num - numbers[index - 1]\n    end\n \
    \ end\n  closest_elements\nend", "  numbers.sort!\n  closest_diff = numbers[1]\
    \ - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    if (number - numbers[index -\
    \ 1]) < closest_diff\n      closest_diff = number - numbers[index - 1]\n     \
    \ closest_pair = [numbers[index - 1], number]\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  (1..numbers.length - 1).each do |i|\n    diff\
    \ = numbers[i] - numbers[i - 1]\n    if diff < closest_diff\n      closest_diff\
    \ = diff\n      closest_pair = [numbers[i - 1], numbers[i]]\n    end\n  end\n\
    \  closest_pair\nend", "  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    difference = (num - numbers[index\
    \ - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index\
    \ - 1], num]\n      closest_difference = difference\n    end\n  end\n  closest_pair\n\
    end", "  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference\
    \ = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n  \
    \  next if index == 0\n    difference = number - numbers[index - 1]\n    if difference\
    \ < closest_difference\n      closest_difference = difference\n      closest_elements\
    \ = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
