name: HumanEval_103_rounded_avg
language: rb
prompt: "# You are given two positive integers n and m, and your task is to compute\
  \ the\n# average of the integers from n through m (including n and m). \n# Round\
  \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
  \ than m, return -1.\n# Example:\ndef rounded_avg(n, m)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
  \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
  \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
  0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
  \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
  0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
  \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
  0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
  \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\", candidate.call(5,\
  \ 5))\n  end\nend\n"
completions: ["  if n > m\n    return -1\n  end\n  average = (n + m) / 2\n  average.to_s(2)\n\
    end", "  # your code here\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n\
    \  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  # your\
    \ code here\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  # your code here\nend", "  return -1 if n > m\n  average = (n + m) /\
    \ 2\n  average.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n\
    \  ((n + m) / 2.0).round.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m)\
    \ / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  (n + m) / 2\nend", "  return -1 if n > m\n  avg\
    \ = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) /\
    \ 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  (n + m) / 2\nend", "  return\
    \ -1 if n > m\n  average = (n + m) / 2\n  average.to_s(2)\nend", "  return -1\
    \ if n > m\n  average = (n + m) / 2\n  average.to_s(2)\nend", "  return -1 if\
    \ n > m\n  (n + m) / 2\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  average = (n + m) / 2\n  average.to_s(2)\nend",
  "  return -1 if n > m\n  ((n + m) / 2.0).round.to_s(2)\nend", "  return -1 if n\
    \ > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg\
    \ = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) /\
    \ 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  ((n + m) / 2.0).round.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return\
    \ -1 if n > m\n  average = (n + m) / 2\n  average.to_s(2)\nend", "  # your code\
    \ here\nend", "  if n > m\n    return -1\n  end\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  # your code here\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n\
    \  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  # your code here\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n\
    \  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  # your code here\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n\
    \  average = (n + m) / 2\n  average.to_s(2)\nend", "  return -1 if n > m\n  avg\
    \ = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) /\
    \ 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  # your code here\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n\
    \  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  ((n + m) / 2.0).round.to_s(2)\nend", "  if n >\
    \ m\n    return -1\n  else\n    sum = 0\n    (n..m).each do |num|\n      sum +=\
    \ num\n    end\n    avg = sum / (m - n + 1)\n    return avg.to_s(2)\n  end\nend",
  "  return -1 if n > m\n  (n + m) / 2\nend", "  return -1 if n > m\n  avg = (n +\
    \ m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return\
    \ -1 if n > m\n  (n + m) / 2\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n\
    \  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  ((n + m) / 2.0).round.to_s(2)\nend", "  return\
    \ -1 if n > m\n  (n + m) / 2\nend", "  return -1 if n > m\n  ((n + m) / 2.0).round.to_s(2)\n\
    end", "  return -1 if n > m\n  (n + m) / 2\nend", "  return -1 if n > m\n  avg\
    \ = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) /\
    \ 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  (n + m) / 2\nend", "  return -1 if n > m\n  avg\
    \ = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  (n + m) / 2\nend",
  "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if\
    \ n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  average\
    \ = (n + m) / 2\n  average.to_s(2)\nend", "  # your code here\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n\
    \  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n +\
    \ m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  average = (n + m) / 2\n\
    \  average.to_s(2)\nend", "  return -1 if n > m\n  (n + m) / 2\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n\
    \  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n +\
    \ m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return\
    \ -1 if n > m\n  (n + m) / 2\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n\
    \  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n\
    \  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  ((n + m) /\
    \ 2.0).round.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  (n + m) / 2\nend", "  return -1 if n > m\n  ((n\
    \ + m) / 2.0).round.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n\
    \  avg.to_s(2)\nend", "  if n > m\n    return -1\n  else\n    avg = (n + m) /\
    \ 2\n    return avg.to_s(2)\n  end\nend", "  return -1 if n > m\n  average = (n\
    \ + m) / 2\n  average.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) /\
    \ 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n\
    \  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n +\
    \ m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  (n + m) / 2\nend", " \
    \ return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if\
    \ n > m\n  (n + m) / 2\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  (n + m) / 2\nend", "  return -1 if n > m\n  ((n\
    \ + m) / 2.0).round.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n\
    \  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  if n > m\n    return\
    \ -1\n  else\n    avg = (n + m) / 2\n    return avg.to_s(2)\n  end\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n\
    \  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n +\
    \ m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n\
    \  binary = (n + m) / 2.0\n  binary.round.to_s(2)\nend", "  return -1 if n > m\n\
    \  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  (n + m) /\
    \ 2\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", " \
    \ return -1 if n > m\n  bin = ((n + m) / 2.0).round.to_s(2)\n  bin.to_i\nend",
  "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if\
    \ n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  # your code here\nend",
  "  # your code here\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n\
    \  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  (n + m) /\
    \ 2\nend", "  return -1 if n > m\n  (n + m) / 2\nend", "  return -1 if n > m\n\
    \  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  (n + m) /\
    \ 2\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", " \
    \ return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if\
    \ n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg\
    \ = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  binary = (n + m)\
    \ / 2.0\n  binary.round.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m)\
    \ / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n\
    \  (n + m) / 2\nend", "  return -1 if n > m\n  ((n + m) / 2.0).round.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n\
    \  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n +\
    \ m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  ((n + m) / 2.0).round.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  # your\
    \ code here\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  # your\
    \ code here\nend", "  return -1 if n > m\n  ((n + m) / 2.0).round.to_s(2)\nend",
  "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if\
    \ n > m\n  ((n + m) / 2.0).round.to_s(2)\nend", "  return -1 if n > m\n  avg =\
    \ (n + m) / 2\n  avg.to_s(2)\nend", "  if n > m\n    return -1\n  else\n    avg\
    \ = (n + m) / 2\n    return avg.to_s(2)\n  end\nend", "  return -1 if n > m\n\
    \  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n +\
    \ m) / 2\n  avg.to_s(2)\nend", "  if n > m\n    return -1\n  else\n    avg = (n\
    \ + m) / 2\n    return avg.to_s(2)\n  end\nend", "  return -1 if n > m\n  avg\
    \ = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  (n + m) / 2\nend",
  "  # your code here\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  # your code here\nend", "  return -1 if n > m\n  (n + m) / 2\nend", " \
    \ # your code here\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n\
    \  n = n.to_f\n  m = m.to_f\n  average = (n + m) / 2\n  average.round.to_s(2)\n\
    end", "  return -1 if n > m\n  average = (n + m) / 2\n  average.to_s(2)\nend",
  "  return -1 if n > m\n  (n + m) / 2\nend", "  if n > m\n    return -1\n  else\n\
    \    average = (n + m) / 2\n    average.to_s(2)\n  end\nend", "  return -1 if\
    \ n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg\
    \ = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  (n + m) / 2\nend",
  "  if n > m\n    return -1\n  else\n    avg = (n + m) / 2\n    return avg.to_s(2)\n\
    \  end\nend", "  # your code here\nend", "  return -1 if n > m\n  avg = (n + m)\
    \ / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end", "  return -1 if n > m\n  (n + m) / 2\nend", "  return -1 if n > m\n  average\
    \ = (n + m) / 2\n  average.to_s(2)\nend", "  return -1 if n > m\n  avg = (n +\
    \ m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  ((n + m) / 2.0).round.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return\
    \ -1 if n > m\n  (n + m) / 2\nend", "  return -1 if n > m\n  (n + m) / 2\nend",
  "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if\
    \ n > m\n  binary = (n + m) / 2.0\n  binary.round.to_s(2)\nend", "  # your code\
    \ here\nend", "  return -1 if n > m\n  average = (n + m) / 2\n  average.to_s(2)\n\
    end", "  return -1 if n > m\n  (n + m) / 2\nend", "  return -1 if n > m\n  avg\
    \ = (n + m) / 2\n  avg.to_s(2)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
