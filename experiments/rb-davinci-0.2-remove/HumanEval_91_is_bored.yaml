name: HumanEval_91_is_bored
language: rb
prompt: "# You'll be given a string of words, and your task is to count the number\n\
  # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
  \ are delimited by '.', '?' or '!'.\n# For example:\ndef is_bored(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_bored\n\
  \    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"Hello world\"\
  ))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n    assert_equal(1,\
  \ candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"bIt\"))\n\
  \    assert_equal(2, candidate.call(\"I feel good today. I will be productive. will\
  \ kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for a walk\"\
  ))\n  end\nend\n"
completions: ["  s.split(/[.?!]/).count { |x| x.start_with?('I') }\nend", "  s.start_with?(\"\
    I\")\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?('I') }\n\
    end", "  s.split(/[.?!]/).count { |s| s.start_with?('I') }\nend", "  s.split(/[.?!]/).select\
    \ { |sentence| sentence.start_with?(\"I\") }.count\nend", "  s.split(/[.?!]/).map\
    \ { |sentence| sentence.strip }.select { |sentence| sentence.start_with?(\"I\"\
    ) }.count\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?('I')\
    \ }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?('I') }\n\
    end", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"I\") }\nend",
  "  s.split(/[.?!]/).select { |sentence| sentence.start_with?('I') }.size\nend",
  "  s.split(/[.?!]/).select { |s| s.strip.start_with?(\"I\") }.size\nend", "  s.split(/[.?!]/).select\
    \ { |s| s.start_with?('I') }.size\nend", "  s.split(/[.?!]/).select { |s| s.strip.start_with?(\"\
    I\") }.count\nend", "  s.start_with?(\"I\")\nend", "  s.split(/[.?!]/).select\
    \ { |s| s.strip.start_with?(\"I\") }.size\nend", "  s.split(/[.?!]/).count { |sentence|\
    \ sentence.start_with?('I') }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.split.first == 'I'\
    \ }\nend", "  s.split(/[.?!]/).count { |s| s.strip.start_with?('I') }\nend", " \
    \ s.split(/\\.|\\?|\\!/).count { |sentence| sentence.strip.start_with?(\"I\")\
    \ }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?('I') }\n\
    end", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"I\") }\nend",
  "  s.split(/[.?!]/).map(&:strip).select { |s| s.start_with?('I') }.size\nend", " \
    \ s.split(/[.?!]/).select { |sentence| sentence.start_with?('I') }.count\nend",
  "  s.split(/[.?!]/).select { |sentence| sentence.start_with?(\"I\") }.count\nend",
  "  s.split(/[.?!]/).count { |s| s.strip.start_with?('I') }\nend", "  s.split(/[.?!]/).select\
    \ { |x| x.strip.start_with?(\"I\") }.size\nend", "  s.split(/[.?!]/).count { |sentence|\
    \ sentence.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count { |sentence|\
    \ sentence.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count { |sentence|\
    \ sentence.start_with?('I') }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend", "  return s.split(\" \")[0] == \"I\"\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.start_with?('I') }\nend", "  s.split(/[.?!]/).count {\
    \ |sentence| sentence.start_with?('I') }\nend", "  s.split(/[.?!]/).count { |e|\
    \ e.strip.start_with?('I') }\nend", "  s.split(/[.?!]/).count { |s| s.strip.start_with?(\"\
    I\") }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend", "  s.split(/[.?!]/).select { |s| s.strip.start_with?(\"I\") }.size\n\
    end", "  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"I\"\
    ) }\nend", "  s.split(/[.?!]/).select { |s| s.start_with?('I') }.size\nend", " \
    \ s.split(/[.?!]/).count { |sentence| sentence.start_with?('I') }\nend", "  s.split(/[.?!]/).select\
    \ { |sentence| sentence.start_with?('I') }.count\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.start_with?('I') }\nend", "  s.split(/[.?!]/).select {\
    \ |s| s.start_with?(\"I\") }.size\nend", "  s.split(/[.?!]/).count { |sentence|\
    \ sentence.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).select { |x| x.strip.start_with?(\"\
    I\") }.count\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?('I')\
    \ }\nend", "  s.split(/[.?!]/).count { |s| s.start_with?(\"I\") }\nend", "  s.split(/\\\
    .|\\?|\\!/).count { |s| s.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |s| s.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend", "  s.split(/[.?!]/).map(&:strip).count { |s| s.start_with?(\"I\"\
    ) }\nend", "  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend", "  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend", "  s.split(/[.?!]/).select { |s| s.start_with?('I') }.count\nend",
  "  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).select\
    \ { |sentence| sentence.start_with?(\"I\") }.count\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.start_with?('I') }\nend", "  s.split(/[.?!]/).count {\
    \ |sentence| sentence.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |s| s.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count { |sentence|\
    \ sentence.strip.start_with?('I') }\nend", "  s.split(/[.?!]/).count { |s| s.strip.start_with?(\"\
    I\") }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"I\"\
    ) }\nend", "  s.split(/[.?!]/).select { |s| s.strip.start_with?('I') }.count\n\
    end", "  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"I\"\
    ) }.count\nend", "  s.split(/[.?!]/).select { |s| s.start_with?(\"I\") }.size\n\
    end", "  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I') }\n\
    end", "  s.split(/[.?!]/).select { |s| s.start_with?(\"I\") }.size\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |s| s.strip.start_with?('I') }\nend", "  s.split(/[.?!]/).count { |sentence|\
    \ sentence.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count { |sentence|\
    \ sentence.start_with?('I') }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?('I')\
    \ }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"I\")\
    \ }\nend", "  s.split(/[.?!]/).select { |sentence| sentence.start_with?(\"I\"\
    ) }.size\nend", "  s.split(/[.?!]/).select { |s| s.start_with?(\"I\") }.count\n\
    end", "  s.split(/[.?!]/).count { |s| s.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |s| s.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).select { |s| s.strip.start_with?(\"\
    I\") }.size\nend", "  s.split(/[.?!]/).select { |s| s.start_with?(\"I\") }.size\n\
    end", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"I\") }\nend",
  "  s.split(/[.?!]/).count { |s| s.strip.start_with?('I') }\nend", "  s.split(/[.?!]/).count\
    \ { |s| s.start_with?('I') }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend", "  s.split(/\\.|\\?|\\!/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?('I')\
    \ }\nend", "  return s.start_with?(\"I\")\nend", "  s.split(/[.?!]/).select {\
    \ |s| s.start_with?(\"I\") }.size\nend", "  s.split(/[.?!]/).count { |sentence|\
    \ sentence.start_with?('I') }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?('I')\
    \ }\nend", "  s.split(/[.?!]/).count { |s| s.strip.start_with?(\"I\") }\nend",
  "  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).select\
    \ { |sentence| sentence.start_with?('I') }.count\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.start_with?(\"I\") }\nend", "  s.split(/[.!?]/).map(&:strip).select\
    \ { |x| x.start_with?('I') }.count\nend", "  s.split(/[.?!]/).select { |sentence|\
    \ sentence.start_with?(\"I\") }.count\nend", "  s.split(/[.?!]/).select { |s|\
    \ s.start_with?('I') }.size\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?('I')\
    \ }\nend", "  s.split(/[.?!]/).each do |sentence|\n    return true if sentence.split('\
    \ ')[0] == 'I'\n  end\n  false\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?('I')\
    \ }\nend", "  s.split(/[.?!]/).select { |s| s.strip.start_with?('I') }.count\n\
    end", "  s.split(/[.?!]/).select { |s| s.strip.start_with?(\"I\") }.count\nend",
  "  s.split(/[.?!]/).count { |x| x.start_with?('I') }\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |x| x.strip.start_with?('I') }\nend", "  s.split(/[.?!]/).select { |s| s.strip.start_with?(\"\
    I\") }.count\nend", "  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend", "  s.split(/[.?!]/).select { |s| s.strip.start_with?('I') }.size\n\
    end", "  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"I\"\
    ) }.size\nend", "  s.split(/[.?!]/).select { |x| x.start_with?('I') }.count\n\
    end", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"I\") }\nend",
  "  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.start_with?('I') }\nend", "  s.split(/[.?!]/).select {\
    \ |s| s.strip.start_with?('I') }.size\nend", "  s.split(/[.?!]/).select { |s|\
    \ s.strip.start_with?('I') }.size\nend", "  s.split(/[.?!]/).count { |s| s.start_with?('I')\
    \ }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?('I') }\n\
    end", "  s.split(/[.?!]/).count { |x| x.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).select\
    \ { |s| s.strip.start_with?(\"I\") }.size\nend", "  s.split(/[.?!]/).count { |sentence|\
    \ sentence.start_with?('I') }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend", "  s.split(/[.?!]/).count { |x| x.strip.start_with?('I') }\nend", " \
    \ s.split(/[.?!]/).count { |sentence| sentence.start_with?('I') }\nend", "  s.split(/[.?!]/).map(&:strip).select\
    \ { |s| s.start_with?('I') }.size\nend", "  s.split(/[.?!]/).map(&:strip).select\
    \ { |s| s.start_with?('I') }.count\nend", "  s.split(/[.?!]/).select { |s| s.start_with?(\"\
    I\") }.size\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"I\"\
    ) }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"I\")\
    \ }\nend", "  s.split(/[.?!]/).select { |s| s.strip.start_with?('I') }.count\n\
    end", "  s.split(/[.?!]/).count { |s| s.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.start_with?('I') }\nend", "  s.split(/[.?!]/).count {\
    \ |sentence| sentence.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).select {\
    \ |s| s.start_with?(\"I\") }.count\nend", "  s.split(/[.?!]/).count { |sentence|\
    \ sentence.start_with?('I') }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend", "  s.split(/[.?!]/).count { |s| s.strip.start_with?('I') }\nend",
  "  s.split(/[.?!]/).each do |sentence|\n    return true if sentence.strip.start_with?(\"\
    I\")\n  end\n  false\nend", "  s.split(/[.?!]/).select { |s| s.strip.start_with?(\"\
    I\") }.count\nend", "  s.split(/[.?!]/).map(&:strip).select { |s| s.start_with?('I')\
    \ }.count\nend", "  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend", "  s.split(/[.?!]/).select { |s| s.start_with?(\"I\") }.count\n\
    end", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"I\") }\nend",
  "  s.split(/[.?!]/).count { |s| s.strip.start_with?('I') }\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |s| s.start_with?('I') }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?('I')\
    \ }\nend", "  s.split(/[.?!]/).select { |s| s.strip.start_with?(\"I\") }.size\n\
    end", "  s.split(/[.?!]/).count { |s| s.start_with?('I') }\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.strip.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).select\
    \ { |sentence| sentence.start_with?(\"I\") }.count\nend", "  s.split(/[.?!]/).count\
    \ { |s| s.strip.start_with?('I') }\nend", "  s.split(/[.?!]/).select { |s| s.strip.start_with?(\"\
    I\") }.count\nend", "  s.split(/[.?!]/).select { |s| s.strip.start_with?(\"I\"\
    ) }.count\nend", "  s.split(/[.?!]/).count { |x| x.strip.start_with?(\"I\") }\n\
    end", "  s.split(/[.?!]/).count { |s| s.start_with?('I') }\nend", "  s.split(/[.?!]/).count\
    \ { |sentence| sentence.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).count\
    \ { |s| s.start_with?('I') }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?('I')\
    \ }\nend", "  s.split(/[.?!]/).select { |s| s.strip.start_with?(\"I\") }.size\n\
    end", "  s.split(/[.?!]/).count { |sentence| sentence.start_with? 'I' }\nend",
  "  s.split(/[.?!]/).count { |s| s.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).select\
    \ { |s| s.strip.start_with?(\"I\") }.size\nend", "  s.split(/[.?!]/).count { |sentence|\
    \ sentence.start_with?('I') }\nend", "  s.split(/[.?!]/).select { |sentence| sentence.start_with?('I')\
    \ }.count\nend", "  s.split(/[.?!]/).select { |sentence| sentence.start_with?(\"\
    I\") }.count\nend", "  s.split(/[.?!]/).each do |sentence|\n    return true if\
    \ sentence.strip.start_with?(\"I\")\n  end\n  false\nend", "  s.split(/[.?!]/).count\
    \ { |x| x.strip.start_with?('I') }\nend", "  s.split(/[.?!]/).count { |sentence|\
    \ sentence.start_with?(\"I\") }\nend", "  s.split(/[.?!]/).select { |sentence|\
    \ sentence.start_with?(\"I\") }.count\nend", "  s.split(/\\.|\\?|\\!/).count {\
    \ |sentence| sentence.strip.start_with?('I') }\nend", "  s.split(/[.?!]/).count\
    \ { |s| s.strip.start_with?('I') }\nend", "  s.split(/[.?!]/).map(&:strip).select\
    \ { |s| s.start_with?('I') }.count\nend", "  s.split(/[.?!]/).count { |sentence|\
    \ sentence.start_with?('I') }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?('I')\
    \ }\nend", "  s.split(/[.?!]/).count { |s| s.strip.start_with?(\"I\") }\nend",
  "  s.split(/[.?!]/).select { |sentence| sentence.start_with?(\"I\") }.count\nend",
  "  s.split(/[.?!]/).select { |x| x.strip.start_with?(\"I\") }.size\nend", "  s.split(/[.?!]/).select\
    \ { |sentence| sentence.start_with?(\"I\") }.size\nend", "  s.split(/[.?!]/).select\
    \ { |x| x.strip.start_with?(\"I\") }.size\nend", "  s.split(/[.?!]/).count { |s|\
    \ s.strip.start_with?('I') }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?('I')\
    \ }\nend", "  s.split(/[.?!]/).map(&:strip).count { |s| s.start_with?('I') }\n\
    end", "  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"I\"\
    ) }\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?('I') }\n\
    end", "  s.split(/[.?!]/).select { |s| s.start_with?(\"I\") }.count\nend", " \
    \ s.split(/[.?!]/).count { |sentence| sentence.start_with?('I') }\nend", "  s.start_with?(\"\
    I\")\nend", "  s.split(/[.?!]/).select { |s| s.start_with?('I') }.count\nend",
  "  s.split(/[.?!]/).count { |s| s.start_with?('I') }\nend", "  s.split(/[.?!]/).each\
    \ do |sentence|\n    return true if sentence.strip.start_with?('I')\n  end\n \
    \ false\nend", "  s.split(/[.?!]/).map { |s| s.strip }.select { |s| s.start_with?(\"\
    I\") }.count\nend", "  s.split(/[.?!]/).count { |sentence| sentence.start_with?('I')\
    \ }\nend", "  s.split(/[.?!]/).select { |x| x.start_with?(\"I\") }.count\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
