language: rb
name: HumanEval_66_digitSum
results:
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5zpbs3c0\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp5zpbs3c0.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006871345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.53 tests/s, 145.53 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnlf9zf87\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnlf9zf87.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006989419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.07 tests/s, 143.07 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0li4wvsv\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp0li4wvsv.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006883231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.28 tests/s, 145.28 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7v60xj9o\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp7v60xj9o.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006878899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.37 tests/s, 145.37 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnlf9zf87\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnlf9zf87.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006989419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.07 tests/s, 143.07 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnlf9zf87\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnlf9zf87.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006989419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.07 tests/s, 143.07 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7v60xj9o\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp7v60xj9o.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006878899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.37 tests/s, 145.37 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |i| i.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqf89_8_

    Started

    .

    Finished in 0.000639469 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.80 tests/s, 12510.38 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x > 64 && x < 91 }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2tpp1j91\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp2tpp1j91.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007084139 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.16 tests/s, 141.16 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.count('A-Z')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptsuyxsnk\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmptsuyxsnk.rb:13:in `test_digitSum'\n\
    \     10:   def test_digitSum\n     11:     candidate = method(:digitSum)\n  \
    \   12:     assert_equal(0, candidate.call(\"\"))\n  => 13:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     14:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     15:     assert_equal(69, candidate.call(\"helloE\"))\n     16:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007176765 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.34 tests/s, 278.68 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |n| n.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxrk978nj

    Started

    .

    Finished in 0.00044804 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2231.94 tests/s, 17855.55 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.reduce(0) { |sum, c| sum + c.ord - 64 if c =~ /[A-Z]/ }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0fnyu7q1\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `+' for\
    \ nil:NilClass\n  \n    s.chars.reduce(0) { |sum, c| sum + c.ord - 64 if c =~\
    \ /[A-Z]/ }\n                                     ^\n/tmp/tmp0fnyu7q1.rb:6:in\
    \ `block in digitSum'\n/tmp/tmp0fnyu7q1.rb:6:in `each'\n/tmp/tmp0fnyu7q1.rb:6:in\
    \ `reduce'\n/tmp/tmp0fnyu7q1.rb:6:in `digitSum'\n/tmp/tmp0fnyu7q1.rb:13:in `call'\n\
    /tmp/tmp0fnyu7q1.rb:13:in `test_digitSum'\n     10:   def test_digitSum\n    \
    \ 11:     candidate = method(:digitSum)\n     12:     assert_equal(0, candidate.call(\"\
    \"))\n  => 13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n     16:     assert_equal(131, candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.002094703 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    477.39 tests/s, 477.39 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfz3knz43

    Started

    .

    Finished in 0.000475003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2105.25 tests/s, 16842.00 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0li4wvsv\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp0li4wvsv.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006883231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.28 tests/s, 145.28 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplbm6tmzt\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmplbm6tmzt.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007334858 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.34 tests/s, 136.34 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ze02m57

    Started

    .

    Finished in 0.000599041 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1669.33 tests/s, 13354.68 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7v60xj9o\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp7v60xj9o.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006878899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.37 tests/s, 145.37 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpownv0n9i\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpownv0n9i.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006798529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.09 tests/s, 147.09 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.upcase.chars.map { |x| x.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7xop004w\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp7xop004w.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00681094 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.82 tests/s, 146.82 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  #your code here\n  s.chars.map(&:ord).select{|x| x >= 65 && x <= 90}.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpm8u98jdk\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpm8u98jdk.rb:13:in `test_digitSum'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_digitSum\n\
    \     12:     candidate = method(:digitSum)\n  => 13:     assert_equal(0, candidate.call(\"\
    \"))\n     14:     assert_equal(131, candidate.call(\"abAB\"))\n     15:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     16:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013035423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.71 tests/s, 76.71 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0li4wvsv\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp0li4wvsv.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006883231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.28 tests/s, 145.28 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5zpbs3c0\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp5zpbs3c0.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006871345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.53 tests/s, 145.53 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |i| i.between?(65, 90) }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsu03kqhk\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpsu03kqhk.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00677961 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.50 tests/s, 147.50 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpownv0n9i\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpownv0n9i.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006798529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.09 tests/s, 147.09 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 if c =~ /[A-Z]/ }.compact.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmppyx1uyyw\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmppyx1uyyw.rb:13:in `test_digitSum'\n\
    \     10:   def test_digitSum\n     11:     candidate = method(:digitSum)\n  \
    \   12:     assert_equal(0, candidate.call(\"\"))\n  => 13:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     14:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     15:     assert_equal(69, candidate.call(\"helloE\"))\n     16:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<3>\n\ndiff:\n? 131\n\
    ===============================================================================\n\
    \nFinished in 0.007024926 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.35 tests/s, 284.70 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjquxo7g8\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpjquxo7g8.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007084975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.14 tests/s, 141.14 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0li4wvsv\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp0li4wvsv.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006883231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.28 tests/s, 145.28 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfz3knz43

    Started

    .

    Finished in 0.000475003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2105.25 tests/s, 16842.00 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjquxo7g8\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpjquxo7g8.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007084975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.14 tests/s, 141.14 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map{|x| x.ord}.select{|x| x.between?(65,90)}.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcf99nkna\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpcf99nkna.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006706866 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.10 tests/s, 149.10 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnlf9zf87\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnlf9zf87.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006989419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.07 tests/s, 143.07 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x.between?(65, 90) }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3o3co4cl\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp3o3co4cl.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007334874 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.33 tests/s, 136.33 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map { |x| x.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1ol6yarr\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp1ol6yarr.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007196096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.96 tests/s, 138.96 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.split('').map(&:ord).select { |x| x >= 65 && x <= 90 }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfyyi_oem\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpfyyi_oem.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007142639 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.00 tests/s, 140.00 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |n| n.between?(65, 90) }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3ggikinv\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp3ggikinv.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007176657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.34 tests/s, 139.34 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^A-Z]/, '').chars.map { |c| c.ord - 64 }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpt4gjf0pd\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpt4gjf0pd.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006581087 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.95 tests/s, 151.95 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0li4wvsv\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp0li4wvsv.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006883231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.28 tests/s, 145.28 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x.between?(65, 90) }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3o3co4cl\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp3o3co4cl.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007334874 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.33 tests/s, 136.33 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |i| i.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqf89_8_

    Started

    .

    Finished in 0.000639469 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.80 tests/s, 12510.38 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjquxo7g8\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpjquxo7g8.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007084975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.14 tests/s, 141.14 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnlf9zf87\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnlf9zf87.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006989419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.07 tests/s, 143.07 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map { |x| x.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1ol6yarr\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp1ol6yarr.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007196096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.96 tests/s, 138.96 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfz3knz43

    Started

    .

    Finished in 0.000475003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2105.25 tests/s, 16842.00 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |char| char.ord }.select { |num| num.between?(65, 90) }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo_hmsxch\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpo_hmsxch.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010129166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.72 tests/s, 98.72 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x.between?(65, 90) }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3o3co4cl\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp3o3co4cl.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007334874 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.33 tests/s, 136.33 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.upcase.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_f0hj28\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp4_f0hj28.rb:13:in `test_digitSum'\n\
    \     10:   def test_digitSum\n     11:     candidate = method(:digitSum)\n  \
    \   12:     assert_equal(0, candidate.call(\"\"))\n  => 13:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     14:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     15:     assert_equal(69, candidate.call(\"helloE\"))\n     16:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\
    \nFinished in 0.007035841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.13 tests/s, 284.26 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpownv0n9i\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpownv0n9i.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006798529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.09 tests/s, 147.09 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7v60xj9o\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp7v60xj9o.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006878899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.37 tests/s, 145.37 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.upcase.chars.map { |c| c.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpek_3h_hs\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpek_3h_hs.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006538773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.93 tests/s, 152.93 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.split('').map { |x| x.ord }.select { |x| x.between?(65, 90) }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpt4gdp0i8\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpt4gdp0i8.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00659248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.69 tests/s, 151.69 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnlf9zf87\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnlf9zf87.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006989419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.07 tests/s, 143.07 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfz3knz43

    Started

    .

    Finished in 0.000475003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2105.25 tests/s, 16842.00 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqw7eki46

    Started

    .

    Finished in 0.000464217 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2154.16 tests/s, 17233.32 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0li4wvsv\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp0li4wvsv.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006883231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.28 tests/s, 145.28 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |n| n >= 65 && n <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3b6urca9

    Started

    .

    Finished in 0.000715689 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1397.25 tests/s, 11178.04 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |e| e.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp55xuw_tb

    Started

    .

    Finished in 0.000470439 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2125.67 tests/s, 17005.39 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0li4wvsv\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp0li4wvsv.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006883231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.28 tests/s, 145.28 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7v60xj9o\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp7v60xj9o.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006878899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.37 tests/s, 145.37 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |char| char.ord }.select { |num| num.between?(65, 90) }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplqioix5m

    Started

    .

    Finished in 0.000454215 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2201.60 tests/s, 17612.80 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpe1mlbrpb

    Started

    .

    Finished in 0.000494105 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2023.86 tests/s, 16190.89 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |i| i.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqf89_8_

    Started

    .

    Finished in 0.000639469 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.80 tests/s, 12510.38 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4b4as1rr\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp4b4as1rr.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006208886 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.06 tests/s, 161.06 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map { |i| i.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpasbu_koy\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpasbu_koy.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00995261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.48 tests/s, 100.48 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5zpbs3c0\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp5zpbs3c0.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006871345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.53 tests/s, 145.53 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjv65gr35\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpjv65gr35.rb:13:in `test_digitSum'\n\
    \     10:   def test_digitSum\n     11:     candidate = method(:digitSum)\n  \
    \   12:     assert_equal(0, candidate.call(\"\"))\n  => 13:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     14:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     15:     assert_equal(69, candidate.call(\"helloE\"))\n     16:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<70>\n===============================================================================\n\
    \nFinished in 0.006392974 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.42 tests/s, 312.84 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7v60xj9o\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp7v60xj9o.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006878899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.37 tests/s, 145.37 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfz3knz43

    Started

    .

    Finished in 0.000475003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2105.25 tests/s, 16842.00 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^A-Z]/, '').chars.map(&:ord).sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz8_oy707

    Started

    .

    Finished in 0.000648831 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1541.23 tests/s, 12329.87 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4b4as1rr\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp4b4as1rr.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006208886 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.06 tests/s, 161.06 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5zpbs3c0\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp5zpbs3c0.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006871345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.53 tests/s, 145.53 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpx8xf_xuj\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpx8xf_xuj.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006296202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.83 tests/s, 158.83 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0w9ebgla\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp0w9ebgla.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006570145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.20 tests/s, 152.20 assertions/s\n"
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ze02m57

    Started

    .

    Finished in 0.000599041 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1669.33 tests/s, 13354.68 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqw7eki46

    Started

    .

    Finished in 0.000464217 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2154.16 tests/s, 17233.32 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |i| i.between?(65, 90) }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsu03kqhk\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpsu03kqhk.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00677961 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.50 tests/s, 147.50 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqw7eki46

    Started

    .

    Finished in 0.000464217 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2154.16 tests/s, 17233.32 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |n| n >= 65 && n <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3b6urca9

    Started

    .

    Finished in 0.000715689 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1397.25 tests/s, 11178.04 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5zpbs3c0\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp5zpbs3c0.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006871345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.53 tests/s, 145.53 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0w9ebgla\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp0w9ebgla.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006570145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.20 tests/s, 152.20 assertions/s\n"
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |char| char.ord }.select { |num| num.between?(65, 90) }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplqioix5m

    Started

    .

    Finished in 0.000454215 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2201.60 tests/s, 17612.80 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |i| i.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqf89_8_

    Started

    .

    Finished in 0.000639469 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.80 tests/s, 12510.38 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0li4wvsv\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp0li4wvsv.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006883231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.28 tests/s, 145.28 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map { |x| x.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1ol6yarr\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp1ol6yarr.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007196096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.96 tests/s, 138.96 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjquxo7g8\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpjquxo7g8.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007084975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.14 tests/s, 141.14 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ze02m57

    Started

    .

    Finished in 0.000599041 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1669.33 tests/s, 13354.68 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.upcase.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwecguour\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpwecguour.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006315779 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.33 tests/s, 158.33 assertions/s\n"
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |char| char.ord }.select { |num| num.between?(65, 90) }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplqioix5m

    Started

    .

    Finished in 0.000454215 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2201.60 tests/s, 17612.80 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4b4as1rr\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp4b4as1rr.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006208886 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.06 tests/s, 161.06 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map { |x| x.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1ol6yarr\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp1ol6yarr.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007196096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.96 tests/s, 138.96 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfz3knz43

    Started

    .

    Finished in 0.000475003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2105.25 tests/s, 16842.00 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7v60xj9o\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp7v60xj9o.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006878899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.37 tests/s, 145.37 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.upcase.chars.map { |x| x.ord - 64 }.sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9yqi3hwy\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp9yqi3hwy.rb:13:in `test_digitSum'\n\
    \     10:   def test_digitSum\n     11:     candidate = method(:digitSum)\n  \
    \   12:     assert_equal(0, candidate.call(\"\"))\n  => 13:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     14:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     15:     assert_equal(69, candidate.call(\"helloE\"))\n     16:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<6>\n===============================================================================\n\
    \nFinished in 0.006557475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.50 tests/s, 305.00 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4b4as1rr\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp4b4as1rr.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006208886 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.06 tests/s, 161.06 assertions/s\n"
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |i| i.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqf89_8_

    Started

    .

    Finished in 0.000639469 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.80 tests/s, 12510.38 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjv65gr35\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpjv65gr35.rb:13:in `test_digitSum'\n\
    \     10:   def test_digitSum\n     11:     candidate = method(:digitSum)\n  \
    \   12:     assert_equal(0, candidate.call(\"\"))\n  => 13:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     14:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     15:     assert_equal(69, candidate.call(\"helloE\"))\n     16:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<70>\n===============================================================================\n\
    \nFinished in 0.006392974 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.42 tests/s, 312.84 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |x| x.ord }.select { |x| x >= 65 && x <= 90 }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn93w15py\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpn93w15py.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006442343 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.22 tests/s, 155.22 assertions/s\n"
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |i| i.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqf89_8_

    Started

    .

    Finished in 0.000639469 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.80 tests/s, 12510.38 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map { |c| c.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnoqe9uv9\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnoqe9uv9.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006427045 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.59 tests/s, 155.59 assertions/s\n"
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |i| i >= 65 && i <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnyki3tvn

    Started

    .

    Finished in 0.000489166 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2044.30 tests/s, 16354.37 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map(&:ord).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnnp4r7a_

    Started

    .

    Finished in 0.000584454 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1711.00 tests/s, 13687.99 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |i| i >= 65 && i <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnyki3tvn

    Started

    .

    Finished in 0.000489166 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2044.30 tests/s, 16354.37 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnlf9zf87\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnlf9zf87.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006989419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.07 tests/s, 143.07 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |x| x.ord }.select { |x| x >= 65 && x <= 90 }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn93w15py\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpn93w15py.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006442343 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.22 tests/s, 155.22 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0li4wvsv\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp0li4wvsv.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006883231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.28 tests/s, 145.28 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfz3knz43

    Started

    .

    Finished in 0.000475003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2105.25 tests/s, 16842.00 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.upcase.chars.map(&:ord).select { |i| i >= 65 && i <= 90 }.sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpe2bskfps\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpe2bskfps.rb:13:in `test_digitSum'\n\
    \     10:   def test_digitSum\n     11:     candidate = method(:digitSum)\n  \
    \   12:     assert_equal(0, candidate.call(\"\"))\n  => 13:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     14:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     15:     assert_equal(69, candidate.call(\"helloE\"))\n     16:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\
    \nFinished in 0.006493391 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.00 tests/s, 308.01 assertions/s\n"
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfz3knz43

    Started

    .

    Finished in 0.000475003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2105.25 tests/s, 16842.00 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |i| i.between?(65, 90) }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsu03kqhk\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpsu03kqhk.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00677961 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.50 tests/s, 147.50 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^A-Z]/, '').chars.map(&:ord).sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz8_oy707

    Started

    .

    Finished in 0.000648831 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1541.23 tests/s, 12329.87 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |i| i > 64 && i < 91 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp_m_n7ydg

    Started

    .

    Finished in 0.000427206 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2340.79 tests/s, 18726.33 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjquxo7g8\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpjquxo7g8.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007084975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.14 tests/s, 141.14 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x.between?(65, 90) }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3o3co4cl\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp3o3co4cl.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007334874 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.33 tests/s, 136.33 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqw7eki46

    Started

    .

    Finished in 0.000464217 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2154.16 tests/s, 17233.32 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjquxo7g8\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpjquxo7g8.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007084975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.14 tests/s, 141.14 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |e| e.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp55xuw_tb

    Started

    .

    Finished in 0.000470439 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2125.67 tests/s, 17005.39 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map { |x| x.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1ol6yarr\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp1ol6yarr.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007196096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.96 tests/s, 138.96 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnlf9zf87\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnlf9zf87.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006989419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.07 tests/s, 143.07 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnlf9zf87\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnlf9zf87.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006989419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.07 tests/s, 143.07 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.upcase.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfv5zh8l5\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpfv5zh8l5.rb:13:in `test_digitSum'\n\
    \     10:   def test_digitSum\n     11:     candidate = method(:digitSum)\n  \
    \   12:     assert_equal(0, candidate.call(\"\"))\n  => 13:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     14:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     15:     assert_equal(69, candidate.call(\"helloE\"))\n     16:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\
    \nFinished in 0.006111919 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.61 tests/s, 327.23 assertions/s\n"
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |char| char.ord }.select { |num| num.between?(65, 90) }.sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplqioix5m

    Started

    .

    Finished in 0.000454215 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2201.60 tests/s, 17612.80 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpe1mlbrpb

    Started

    .

    Finished in 0.000494105 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2023.86 tests/s, 16190.89 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnlf9zf87\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnlf9zf87.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006989419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.07 tests/s, 143.07 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |x| x.ord }.select { |x| x.between?(65, 90) }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxgg0w3_a\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpxgg0w3_a.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006145944 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.71 tests/s, 162.71 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnlf9zf87\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnlf9zf87.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006989419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.07 tests/s, 143.07 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqw7eki46

    Started

    .

    Finished in 0.000464217 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2154.16 tests/s, 17233.32 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnlf9zf87\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnlf9zf87.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006989419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.07 tests/s, 143.07 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5zpbs3c0\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp5zpbs3c0.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006871345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.53 tests/s, 145.53 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.upcase.chars.map { |c| c.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpek_3h_hs\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpek_3h_hs.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006538773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.93 tests/s, 152.93 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |x| x.ord }.select { |x| x.between?(65, 90) }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxgg0w3_a\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpxgg0w3_a.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006145944 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.71 tests/s, 162.71 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |i| i > 64 && i < 91 }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpre8e9upn\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpre8e9upn.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006111521 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.63 tests/s, 163.63 assertions/s\n"
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |n| n.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxrk978nj

    Started

    .

    Finished in 0.00044804 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2231.94 tests/s, 17855.55 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |char| char.ord }.select { |num| num.between?(65, 90) }.reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo_hmsxch\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpo_hmsxch.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010129166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.72 tests/s, 98.72 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7v60xj9o\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp7v60xj9o.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006878899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.37 tests/s, 145.37 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjquxo7g8\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpjquxo7g8.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007084975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.14 tests/s, 141.14 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfz3knz43

    Started

    .

    Finished in 0.000475003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2105.25 tests/s, 16842.00 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.select { |c| c.ord.between?(65, 90) }.map(&:ord).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9y80ij3p\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp9y80ij3p.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006205232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.15 tests/s, 161.15 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnlf9zf87\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnlf9zf87.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006989419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.07 tests/s, 143.07 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^A-Z]/, '').chars.map(&:ord).sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz8_oy707

    Started

    .

    Finished in 0.000648831 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1541.23 tests/s, 12329.87 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpownv0n9i\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpownv0n9i.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006798529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.09 tests/s, 147.09 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjv65gr35\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpjv65gr35.rb:13:in `test_digitSum'\n\
    \     10:   def test_digitSum\n     11:     candidate = method(:digitSum)\n  \
    \   12:     assert_equal(0, candidate.call(\"\"))\n  => 13:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     14:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     15:     assert_equal(69, candidate.call(\"helloE\"))\n     16:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<70>\n===============================================================================\n\
    \nFinished in 0.006392974 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.42 tests/s, 312.84 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjquxo7g8\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpjquxo7g8.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007084975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.14 tests/s, 141.14 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5zpbs3c0\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp5zpbs3c0.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006871345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.53 tests/s, 145.53 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0w9ebgla\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp0w9ebgla.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006570145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.20 tests/s, 152.20 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4b4as1rr\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp4b4as1rr.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006208886 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.06 tests/s, 161.06 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map { |x| x.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1ol6yarr\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp1ol6yarr.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007196096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.96 tests/s, 138.96 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0li4wvsv\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp0li4wvsv.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006883231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.28 tests/s, 145.28 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0w9ebgla\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp0w9ebgla.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006570145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.20 tests/s, 152.20 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^\\d]/, '').split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmg0tkxtl\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpmg0tkxtl.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006134176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.02 tests/s, 163.02 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x.between?(65, 90) }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp3o3co4cl\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp3o3co4cl.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007334874 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.33 tests/s, 136.33 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^A-Z]/, '').chars.map(&:ord).sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz8_oy707

    Started

    .

    Finished in 0.000648831 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1541.23 tests/s, 12329.87 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |n| n.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxrk978nj

    Started

    .

    Finished in 0.00044804 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2231.94 tests/s, 17855.55 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5zpbs3c0\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp5zpbs3c0.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006871345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.53 tests/s, 145.53 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^a-zA-Z]/, '').chars.map(&:ord).sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphato_u02\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmphato_u02.rb:13:in `test_digitSum'\n\
    \     10:   def test_digitSum\n     11:     candidate = method(:digitSum)\n  \
    \   12:     assert_equal(0, candidate.call(\"\"))\n  => 13:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     14:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     15:     assert_equal(69, candidate.call(\"helloE\"))\n     16:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<326>\n\ndiff:\n? 131\
    \ \n?   26\n? - ?\n===============================================================================\n\
    \nFinished in 0.006618511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.09 tests/s, 302.18 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.upcase.chars.map { |c| c.ord - 64 }.sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprevj65d1\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmprevj65d1.rb:13:in `test_digitSum'\n\
    \     10:   def test_digitSum\n     11:     candidate = method(:digitSum)\n  \
    \   12:     assert_equal(0, candidate.call(\"\"))\n  => 13:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     14:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     15:     assert_equal(69, candidate.call(\"helloE\"))\n     16:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<6>\n===============================================================================\n\
    \nFinished in 0.006200496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.28 tests/s, 322.55 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpx8xf_xuj\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpx8xf_xuj.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006296202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.83 tests/s, 158.83 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.split('').map{|x| x.ord}.select{|x| x > 64 && x < 91}.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnvsid0a1\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnvsid0a1.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006039467 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.58 tests/s, 165.58 assertions/s\n"
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^A-Z]/, '').chars.map(&:ord).sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz8_oy707

    Started

    .

    Finished in 0.000648831 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1541.23 tests/s, 12329.87 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjv65gr35\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpjv65gr35.rb:13:in `test_digitSum'\n\
    \     10:   def test_digitSum\n     11:     candidate = method(:digitSum)\n  \
    \   12:     assert_equal(0, candidate.call(\"\"))\n  => 13:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     14:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     15:     assert_equal(69, candidate.call(\"helloE\"))\n     16:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<70>\n===============================================================================\n\
    \nFinished in 0.006392974 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.42 tests/s, 312.84 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7v60xj9o\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp7v60xj9o.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006878899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.37 tests/s, 145.37 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmzua2x1p\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpmzua2x1p.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006176867 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.89 tests/s, 161.89 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjquxo7g8\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpjquxo7g8.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007084975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.14 tests/s, 141.14 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map { |x| x.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1ol6yarr\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp1ol6yarr.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007196096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.96 tests/s, 138.96 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7v60xj9o\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp7v60xj9o.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006878899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.37 tests/s, 145.37 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7v60xj9o\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp7v60xj9o.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006878899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.37 tests/s, 145.37 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0w9ebgla\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp0w9ebgla.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006570145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.20 tests/s, 152.20 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjv65gr35\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpjv65gr35.rb:13:in `test_digitSum'\n\
    \     10:   def test_digitSum\n     11:     candidate = method(:digitSum)\n  \
    \   12:     assert_equal(0, candidate.call(\"\"))\n  => 13:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     14:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     15:     assert_equal(69, candidate.call(\"helloE\"))\n     16:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<70>\n===============================================================================\n\
    \nFinished in 0.006392974 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.42 tests/s, 312.84 assertions/s\n"
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgj3577zu

    Started

    .

    Finished in 0.000444336 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2250.55 tests/s, 18004.39 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnlf9zf87\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnlf9zf87.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006989419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.07 tests/s, 143.07 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0w9ebgla\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp0w9ebgla.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006570145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.20 tests/s, 152.20 assertions/s\n"
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |i| i.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqf89_8_

    Started

    .

    Finished in 0.000639469 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.80 tests/s, 12510.38 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqw7eki46

    Started

    .

    Finished in 0.000464217 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2154.16 tests/s, 17233.32 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ze02m57

    Started

    .

    Finished in 0.000599041 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1669.33 tests/s, 13354.68 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnlf9zf87\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnlf9zf87.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006989419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.07 tests/s, 143.07 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjv65gr35\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpjv65gr35.rb:13:in `test_digitSum'\n\
    \     10:   def test_digitSum\n     11:     candidate = method(:digitSum)\n  \
    \   12:     assert_equal(0, candidate.call(\"\"))\n  => 13:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     14:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     15:     assert_equal(69, candidate.call(\"helloE\"))\n     16:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<70>\n===============================================================================\n\
    \nFinished in 0.006392974 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.42 tests/s, 312.84 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0w9ebgla\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp0w9ebgla.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006570145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.20 tests/s, 152.20 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map { |x| x.ord - 64 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1ol6yarr\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp1ol6yarr.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007196096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.96 tests/s, 138.96 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.scan(/[A-Z]/).map(&:ord).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnnp4r7a_

    Started

    .

    Finished in 0.000584454 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1711.00 tests/s, 13687.99 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5zpbs3c0\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp5zpbs3c0.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006871345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.53 tests/s, 145.53 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfz3knz43

    Started

    .

    Finished in 0.000475003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2105.25 tests/s, 16842.00 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |i| i.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqf89_8_

    Started

    .

    Finished in 0.000639469 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.80 tests/s, 12510.38 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ze02m57

    Started

    .

    Finished in 0.000599041 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1669.33 tests/s, 13354.68 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |i| i.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqf89_8_

    Started

    .

    Finished in 0.000639469 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1563.80 tests/s, 12510.38 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5zpbs3c0\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp5zpbs3c0.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006871345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.53 tests/s, 145.53 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |char| char.ord - 64 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5cufju28\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp5cufju28.rb:13:in `test_digitSum'\n\
    \     10:   def test_digitSum\n     11:     candidate = method(:digitSum)\n  \
    \   12:     assert_equal(0, candidate.call(\"\"))\n  => 13:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     14:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     15:     assert_equal(69, candidate.call(\"helloE\"))\n     16:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<70>\n===============================================================================\n\
    \nFinished in 0.005990866 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.92 tests/s, 333.84 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnlf9zf87\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnlf9zf87.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006989419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.07 tests/s, 143.07 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map{|x| x.ord}.select{|x| x >= 65 && x <= 90}.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp86owwmd3\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp86owwmd3.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006053735 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.19 tests/s, 165.19 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjquxo7g8\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpjquxo7g8.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007084975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.14 tests/s, 141.14 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^A-Z]/, '').chars.map(&:ord).sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz8_oy707

    Started

    .

    Finished in 0.000648831 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1541.23 tests/s, 12329.87 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpownv0n9i\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpownv0n9i.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006798529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.09 tests/s, 147.09 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnlf9zf87\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnlf9zf87.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006989419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.07 tests/s, 143.07 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjquxo7g8\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpjquxo7g8.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007084975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.14 tests/s, 141.14 assertions/s\n"
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').chars.map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnlf9zf87\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpnlf9zf87.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006989419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.07 tests/s, 143.07 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfz3knz43

    Started

    .

    Finished in 0.000475003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2105.25 tests/s, 16842.00 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^A-Z]/, '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp0w9ebgla\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp0w9ebgla.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006570145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.20 tests/s, 152.20 assertions/s\n"
  timestamp: 1659794973
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.gsub(/[^0-9]/, '').split('').map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjquxo7g8\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpjquxo7g8.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007084975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.14 tests/s, 141.14 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfz3knz43

    Started

    .

    Finished in 0.000475003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2105.25 tests/s, 16842.00 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5zpbs3c0\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp5zpbs3c0.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006871345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.53 tests/s, 145.53 assertions/s\n"
  timestamp: 1659794972
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x >= 65 && x <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ze02m57

    Started

    .

    Finished in 0.000599041 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1669.33 tests/s, 13354.68 assertions/s

    '
  stdout: ''
  timestamp: 1659794972
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map { |c| c.ord - 64 }.inject(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpq5tgi611\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpq5tgi611.rb:12:in `test_digitSum'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_digitSum\n\
    \     11:     candidate = method(:digitSum)\n  => 12:     assert_equal(0, candidate.call(\"\
    \"))\n     13:     assert_equal(131, candidate.call(\"abAB\"))\n     14:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     15:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008375199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.40 tests/s, 119.40 assertions/s\n"
  timestamp: 1659794973
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\ndef digitSum(s)\n\
    \  s.chars.map(&:ord).select { |x| x.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqw7eki46

    Started

    .

    Finished in 0.000464217 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2154.16 tests/s, 17233.32 assertions/s

    '
  stdout: ''
  timestamp: 1659794973
