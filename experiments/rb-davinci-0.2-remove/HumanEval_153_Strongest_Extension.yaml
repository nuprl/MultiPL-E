name: HumanEval_153_Strongest_Extension
language: rb
prompt: "# You will be given the name of a class (a string) and a list of extensions.\n\
  # The extensions are to be used to load additional classes to the class. The\n#\
  \ strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  # letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n# in the extension's name, the strength is given by the fraction CAP - SM. \n\
  # You should find the strongest extension and return a string in this \n# format:\
  \ ClassName.StrongestExtensionName.\n# If there are two or more extensions with\
  \ the same strength, you should\n# choose the one that comes first in the list.\n\
  # For example, if you are given \"Slices\" as the class and a list of the\n# extensions:\
  \ ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes'\
  \ since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n#\
  \ Example:\ndef Strongest_Extension(class_name, extensions)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_Strongest_Extension\n\
  \    candidate = method(:Strongest_Extension)\n    assert_equal(\"Watashi.eIGHt8OKe\"\
  , candidate.call(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]))\n    assert_equal(\"\
  Boku123.YEs.WeCaNe\", candidate.call(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
  , \"32145tggg\"]))\n    assert_equal(\"__YESIMHERE.NuLl__\", candidate.call(\"__YESIMHERE\"\
  , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]))\n\
  \    assert_equal(\"K.TAR\", candidate.call(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
  , \"cosSo\"]))\n    assert_equal(\"__HAHA.123\", candidate.call(\"__HAHA\", [\"\
  Tab\", \"123\", \"781345\", \"-_-\"]))\n    assert_equal(\"YameRore.okIWILL123\"\
  , candidate.call(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\"\
  , \"-_-\"]))\n    assert_equal(\"finNNalLLly.WoW\", candidate.call(\"finNNalLLly\"\
  , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]))\n    assert_equal(\"_.Bb\", candidate.call(\"\
  _\", [\"Bb\", \"91245\"]))\n    assert_equal(\"Sp.671235\", candidate.call(\"Sp\"\
  , [\"671235\", \"Bb\"]))\n  end\nend\n"
completions: ["  strongest_extension = extensions.max_by do |extension|\n    extension.count(\"\
    A-Z\") - extension.count(\"a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend", "  # Your code here\nend", "  strongest_extension = extensions.max_by\
    \ do |extension|\n    extension.count(\"A-Z\") - extension.count(\"a-z\")\n  end\n\
    \  \"#{class_name}.#{strongest_extension}\"\nend", "  # Your code here\nend",
  "  # find the strongest extension\n  # return a string in this format: ClassName.StrongestExtensionName\n\
    \  # if there are two or more extensions with the same strength, choose the one\
    \ that comes first in the list\n  # your code here\n  strength = 0\n  strongest_extension\
    \ = \"\"\n  extensions.each do |extension|\n    cap = extension.count(\"A-Z\"\
    )\n    sm = extension.count(\"a-z\")\n    if cap - sm > strength\n      strength\
    \ = cap - sm\n      strongest_extension = extension\n    end\n  end\n  return\
    \ \"#{class_name}.#{strongest_extension}\"\nend", "  # your code here\nend", " \
    \ # Your code here\nend", "  # Your code here\nend", "  strongest_extension =\
    \ extensions.max_by do |extension|\n    extension.count('A-Z') - extension.count('a-z')\n\
    \  end\n  \"#{class_name}.#{strongest_extension}\"\nend", "  # Your code here\n\
    end", "  strongest_extension = extensions.max_by do |extension|\n    extension.count(\"\
    A-Z\") - extension.count(\"a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend", "  # your code here\nend", "  # your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  strongest_extension = ''\n  strongest_strength\
    \ = 0\n  extensions.each do |extension|\n    strength = extension.count('A-Z')\
    \ - extension.count('a-z')\n    if strength > strongest_strength\n      strongest_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name + '.' + strongest_extension\nend", "  # Your code here\nend", " \
    \ # Your code here\nend", "  strongest_extension = extensions.max_by do |extension|\n\
    \    extension.count(\"A-Z\") - extension.count(\"a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend", "  strongest_extension = \"\"\n  strongest_strength = 0\n  extensions.each\
    \ do |extension|\n    strength = extension.count(\"A-Z\") - extension.count(\"\
    a-z\")\n    if strength > strongest_strength\n      strongest_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\
    \nend", "  # Your code here\nend", "  strongest_extension = \"\"\n  strongest_extension_strength\
    \ = 0\n  extensions.each do |extension|\n    strength = extension.count(\"A-Z\"\
    ) - extension.count(\"a-z\")\n    if strength > strongest_extension_strength\n\
    \      strongest_extension_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name + \".\" + strongest_extension\nend", "  #\
    \ code here\nend", "  # Your code here\nend", "  # Your code here\nend", "  #\
    \ Your code here\nend", "  # Your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  strongest_extension = extensions.max_by do |extension|\n    extension.count(\"\
    A-Z\") - extension.count(\"a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend", "  strongest_extension = extensions.max_by do |extension|\n    extension.count(\"\
    A-Z\") - extension.count(\"a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend", "  # Your code here\nend", "  # your code here\nend", "  # find the strongest\
    \ extension\n  # return the strongest extension\n  # return a string in this format:\
    \ ClassName.StrongestExtensionName\n  # if there are two or more extensions with\
    \ the same strength, choose the one that comes first in the list\n  # for example,\
    \ if you are given \"Slices\" as the class and a list of the extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
    \ is the strongest extension (its strength is -1)\n  # strength of the extension\
    \ is as follows: Let CAP be the number of the uppercase letters in the extension's\
    \ name, and let SM be the number of lowercase letters in the extension's name,\
    \ the strength is given by the fraction CAP - SM\n  # you will be given the name\
    \ of a class (a string) and a list of extensions. the extensions are to be used\
    \ to load additional classes to the class\n  # input: class_name (string), extensions\
    \ (array of strings)\n  # output: string\n  # algorithm:\n  #   - initialize a\
    \ variable called strongest_extension and assign it to nil\n  #   - initialize\
    \ a variable called strongest_extension_strength and assign it to 0\n  #   - iterate\
    \ through the extensions array\n  #     - calculate the strength of the extension\n\
    \  #       - initialize a variable called cap and assign it to 0\n  #       -\
    \ initialize a variable called sm and assign it to 0\n  #       - iterate through\
    \ the extension\n  #         - if the character is uppercase, increment cap by\
    \ 1\n  #         - if the character is lowercase, increment sm by 1\n  #     \
    \  - end\n  #       - calculate the strength of the extension by subtracting sm\
    \ from cap\n  #     - if the strength of the extension is greater than the strongest_extension_strength\n\
    \  #       - assign the extension to strongest_extension\n  #       - assign the\
    \ strength of the extension to strongest_extension_strength\n  #     - end\n \
    \ #   - end\n  #   - return the string class_name + '.' + strongest_extension\n\
    \  #   - end\n  #   - end\n  strongest", "  strongest_extension = extensions.max_by\
    \ do |extension|\n    extension.count(\"A-Z\") - extension.count(\"a-z\")\n  end\n\
    \  return \"#{class_name}.#{strongest_extension}\"\nend", "  # Your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # Your code here\n\
    end", "  strongest_extension = extensions.max_by do |extension|\n    extension.count(\"\
    A-Z\") - extension.count(\"a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend", "  # your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # your code here\nend", "  # find the strongest extension\n  # return\
    \ the string in the format ClassName.StrongestExtensionName\n  # if there are\
    \ two or more extensions with the same strength, choose the one that comes first\
    \ in the list\n  # for example, if you are given \"Slices\" as the class and a\
    \ list of the extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\
    \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ (its strength is -1)\n  # your code here\n  class_name = class_name.to_s\n \
    \ extensions = extensions.to_s\n  strength = 0\n  strongest_extension = \"\"\n\
    \  extensions.each do |extension|\n    extension = extension.to_s\n    cap = extension.count(\"\
    A-Z\")\n    sm = extension.count(\"a-z\")\n    if cap - sm > strength\n      strength\
    \ = cap - sm\n      strongest_extension = extension\n    end\n  end\n  class_name\
    \ + \".\" + strongest_extension\nend", "  # Your code here\nend", "  # your code\
    \ here\nend", "  strongest_extension = extensions.max_by do |extension|\n    extension.count('A-Z')\
    \ - extension.count('a-z')\n  end\n  \"#{class_name}.#{strongest_extension}\"\n\
    end", "  # your code here\nend", "  # Your code here\nend", "  # your code here\n\
    end", "  # find the strongest extension\n  # return the class name and the strongest\
    \ extension\n  # if there are two or more extensions with the same strength, \n\
    \  # return the one that comes first in the list.\n  # return a string in this\
    \ format: ClassName.StrongestExtensionName\n  # Your code here\n  return class_name\
    \ + \".\" + extensions.max_by{|x| (x.count(\"A-Z\") - x.count(\"a-z\"))}\nend",
  "  # Your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  extensions.map! do |extension|\n    extension.split('').map do |letter|\n   \
    \   letter.match(/[A-Z]/) ? 1 : -1\n    end.reduce(:+)\n  end\n  \"#{class_name}.#{extensions.index(extensions.max)}\"\
    \nend", "  # Your code here\nend", "  # your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  strongest_extension\
    \ = extensions.max_by do |extension|\n    extension.count(\"A-Z\") - extension.count(\"\
    a-z\")\n  end\n  return \"#{class_name}.#{strongest_extension}\"\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  # create a hash with the extensions as keys and their\
    \ strength as values\n  strengths = {}\n  extensions.each do |extension|\n   \
    \ strengths[extension] = extension.count(\"A-Z\") - extension.count(\"a-z\")\n\
    \  end\n  # find the strongest extension\n  strongest = strengths.max_by { |k,\
    \ v| v }\n  # return the class name and the strongest extension\n  return \"#{class_name}.#{strongest[0]}\"\
    \nend", "  strongest_extension = extensions.max_by do |extension|\n    extension.count(\"\
    A-Z\") - extension.count(\"a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend", "  # Your code here\nend", "  # your code here\nend", "  strongest_extension\
    \ = extensions.max_by do |extension|\n    extension.count(\"A-Z\") - extension.count(\"\
    a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\nend", "  # Your code\
    \ here\nend", "  # Your code here\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # your code here\nend", "  #\
    \ Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # Your code here\nend", "  strongest_extension = extensions.max_by do |extension|\n\
    \    extension.count(\"A-Z\") - extension.count(\"a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend", "  # your code here\nend", "  # your code here\nend", "  # Your code here\n\
    end", "    # Get the strength of each extension\n    strengths = extensions.map\
    \ { |ext| ext.count(\"A-Z\") - ext.count(\"a-z\") }\n    # Get the index of the\
    \ strongest extension\n    strongest_index = strengths.index(strengths.max)\n\
    \    # Return the strongest extension\n    return \"#{class_name}.#{extensions[strongest_index]}\"\
    \nend", "  # Your code here\nend", "  # Your code here\nend", "  strongest_extension\
    \ = extensions.max_by { |extension| strength(extension) }\n  \"#{class_name}.#{strongest_extension}\"\
    \nend", "  # find the strongest extension\n  # return a string in this format:\
    \ ClassName.StrongestExtensionName\n  # if there are two or more extensions with\
    \ the same strength, choose the one that comes first in the list\n  # strength\
    \ of the extension is as follows: Let CAP be the number of the uppercase letters\
    \ in the extension's name, and let SM be the number of lowercase letters in the\
    \ extension's name, the strength is given by the fraction CAP - SM.\n  # if there\
    \ are two or more extensions with the same strength, choose the one that comes\
    \ first in the list\n  # if there are two or more extensions with the same strength,\
    \ choose the one that comes first in the list\n  # if there are two or more extensions\
    \ with the same strength, choose the one that comes first in the list\n  # if\
    \ there are two or more extensions with the same strength, choose the one that\
    \ comes first in the list\n  # if there are two or more extensions with the same\
    \ strength, choose the one that comes first in the list\n  # if there are two\
    \ or more extensions with the same strength, choose the one that comes first in\
    \ the list\n  # if there are two or more extensions with the same strength, choose\
    \ the one that comes first in the list\n  # if there are two or more extensions\
    \ with the same strength, choose the one that comes first in the list\n  # if\
    \ there are two or more extensions with the same strength, choose the one that\
    \ comes first in the list\n  # if there are two or more extensions with the same\
    \ strength, choose the one that comes first in the list\n  # if there are two\
    \ or more extensions with the same strength, choose the one that comes first in\
    \ the list\n  # if there are two or more extensions with the same strength, choose\
    \ the one that comes first in the list\n  # if there are two or more extensions\
    \ with the same strength, choose the one that comes first in the list\n  # if\
    \ there are two or more extensions with the same strength, choose the one that\
    \ comes first in the list\n  # if there are two or more extensions with the same\
    \ strength, choose the one that comes first in the list\n  # if there are two\
    \ or more extensions with the same strength, choose the one that comes first in\
    \ the list\n  # if there are two or more extensions with the same strength, choose\
    \ the one that comes first in the list", "  # your code here\nend", "  # create\
    \ a hash of the extensions and their strengths\n  strengths = {}\n  extensions.each\
    \ do |ext|\n    strengths[ext] = ext.count(\"A-Z\") - ext.count(\"a-z\")\n  end\n\
    \  # find the strongest extension\n  strongest = strengths.max_by { |k, v| v }\n\
    \  # return the strongest extension\n  return \"#{class_name}.#{strongest[0]}\"\
    \nend", "  strongest_extension = \"\"\n  strongest_strength = 0\n  extensions.each\
    \ do |extension|\n    strength = extension.count(\"A-Z\") - extension.count(\"\
    a-z\")\n    if strength > strongest_strength\n      strongest_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\
    \nend", "  # your code here\nend", "  strongest_extension = extensions.max_by\
    \ do |extension|\n    extension.count(\"A-Z\") - extension.count(\"a-z\")\n  end\n\
    \  \"#{class_name}.#{strongest_extension}\"\nend", "  strongest_extension = extensions.max_by\
    \ do |extension|\n    extension.count(\"A-Z\") - extension.count(\"a-z\")\n  end\n\
    \  \"#{class_name}.#{strongest_extension}\"\nend", "  # your code here\nend",
  "  # your code here\nend", "  # Your code here\nend", "  extensions.map! { |ext|\
    \ [ext, ext.count(\"A-Z\") - ext.count(\"a-z\")] }\n  extensions.sort_by! { |ext|\
    \ [ext[1], extensions.index(ext)] }\n  \"#{class_name}.#{extensions.last[0]}\"\
    \nend", "  # your code here\nend", "  cap = 0\n  sm = 0\n  strongest = ''\n  extensions.each\
    \ do |ext|\n    ext.each_char do |char|\n      if char.match(/[A-Z]/)\n      \
    \  cap += 1\n      elsif char.match(/[a-z]/)\n        sm += 1\n      end\n   \
    \ end\n    if (cap - sm) > (cap - sm)\n      strongest = ext\n    end\n  end\n\
    \  return class_name + '.' + strongest\nend", "  # your code here\nend", "  #\
    \ Your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # Your code here\n  return class_name + \".\" + extensions.max_by\
    \ { |ext| ext.count(\"A-Z\") - ext.count(\"a-z\") }\nend", "  # your code here\n\
    end", "  strongest_extension = \"\"\n  strongest_strength = 0\n  extensions.each\
    \ do |extension|\n    strength = extension.count(\"A-Z\") - extension.count(\"\
    a-z\")\n    if strength > strongest_strength\n      strongest_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\
    \nend", "  # find the strongest extension\n  # return the strongest extension\n\
    \  strongest_extension = \"\"\n  strongest_strength = 0\n  extensions.each do\
    \ |extension|\n    strength = extension.count(\"A-Z\") - extension.count(\"a-z\"\
    )\n    if strength > strongest_strength\n      strongest_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\
    \nend", "  # your code here\nend", "  # your code here\nend", "  # Your code here\n\
    end", "  strongest_extension = \"\"\n  strongest_extension_strength = 0\n  extensions.each\
    \ do |extension|\n    strength = extension.count(\"A-Z\") - extension.count(\"\
    a-z\")\n    if strength > strongest_extension_strength\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ \"#{class_name}.#{strongest_extension}\"\nend", "  # your code here\nend", " \
    \ # your code here\nend", "  # Your code here\nend", "  strength = 0\n  strongest_extension\
    \ = ''\n  extensions.each do |extension|\n    cap = extension.count('A-Z')\n \
    \   sm = extension.count('a-z')\n    if cap - sm > strength\n      strength =\
    \ cap - sm\n      strongest_extension = extension\n    end\n  end\n  return class_name\
    \ + '.' + strongest_extension\nend", "  strongest_extension = extensions.max_by\
    \ do |extension|\n    extension.count(\"A-Z\") - extension.count(\"a-z\")\n  end\n\
    \  \"#{class_name}.#{strongest_extension}\"\nend", "  strongest_extension = extensions.max_by\
    \ do |extension|\n    extension.count(\"A-Z\") - extension.count(\"a-z\")\n  end\n\
    \  \"#{class_name}.#{strongest_extension}\"\nend", "  # Your code here\nend",
  "  # your code here\nend", "  strongest_extension = extensions.max_by do |extension|\n\
    \    extension.count(\"A-Z\") - extension.count(\"a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend", "  strongest_extension = extensions.max_by do |extension|\n    extension.count(\"\
    A-Z\") - extension.count(\"a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend", "  # your code here\nend", "  # your code here\nend", "  strongest_extension\
    \ = ''\n  strongest_extension_strength = 0\n  extensions.each do |extension|\n\
    \    strength = extension.count('A-Z') - extension.count('a-z')\n    if strength\
    \ > strongest_extension_strength\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\
    \nend", "  # your code here\nend", "  return class_name + \".\" + extensions.max_by{|e|\
    \ e.count(\"A-Z\") - e.count(\"a-z\")}\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  strength = 0\n  strongest_extension = ''\n  extensions.each\
    \ do |extension|\n    extension_strength = extension.count('A-Z') - extension.count('a-z')\n\
    \    if extension_strength > strength\n      strength = extension_strength\n \
    \     strongest_extension = extension\n    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\
    \nend", "  # your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # your code here\nend", "  # Your code here\nend", "  class_name = class_name.to_s\n\
    \  extensions = extensions.map(&:to_s)\n  strongest_extension = extensions.max_by\
    \ do |extension|\n    extension.count(\"A-Z\") - extension.count(\"a-z\")\n  end\n\
    \  \"#{class_name}.#{strongest_extension}\"\nend", "  # Your code here\nend",
  "  # your code here\nend", "  # Your code here\nend", "  strength = 0\n  strongest_extension\
    \ = \"\"\n  extensions.each do |extension|\n    cap = extension.count(\"A-Z\"\
    )\n    sm = extension.count(\"a-z\")\n    if cap - sm > strength\n      strength\
    \ = cap - sm\n      strongest_extension = extension\n    end\n  end\n  return\
    \ \"#{class_name}.#{strongest_extension}\"\nend", "  # your code here\nend", " \
    \ # your code here\nend", "  # Your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # your code here\nend", "  cap = 0\n  sm = 0\n  strongest\
    \ = 0\n  strongest_extension = \"\"\n  extensions.each do |extension|\n    cap\
    \ = extension.count(\"A-Z\")\n    sm = extension.count(\"a-z\")\n    if cap -\
    \ sm > strongest\n      strongest = cap - sm\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name + \".\" + strongest_extension\nend", "  #\
    \ Your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # Your code here\nend", "  strength = 0\n  strongest_extension = ''\n  extensions.each\
    \ do |extension|\n    cap = extension.count('A-Z')\n    sm = extension.count('a-z')\n\
    \    if cap - sm > strength\n      strength = cap - sm\n      strongest_extension\
    \ = extension\n    end\n  end\n  class_name + '.' + strongest_extension\nend",
  "  # Your code here\nend", "  strongest_extension = \"\"\n  strongest_extension_strength\
    \ = 0\n  extensions.each do |extension|\n    extension_strength = extension.count(\"\
    A-Z\") - extension.count(\"a-z\")\n    if extension_strength > strongest_extension_strength\n\
    \      strongest_extension = extension\n      strongest_extension_strength = extension_strength\n\
    \    end\n  end\n  return \"#{class_name}.#{strongest_extension}\"\nend", "  #\
    \ Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  strongest_extension = extensions.max_by do |extension|\n\
    \    extension.count(\"A-Z\") - extension.count(\"a-z\")\n  end\n  \"#{class_name}.#{strongest_extension}\"\
    \nend", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  class_name = class_name.to_s\n  extensions\
    \ = extensions.map { |ext| ext.to_s }\n  strengths = extensions.map { |ext| ext.count(\"\
    A-Z\") - ext.count(\"a-z\") }\n  strongest_ext = extensions[strengths.index(strengths.max)]\n\
    \  return class_name + \".\" + strongest_ext\nend", "  # your code here\nend",
  "  # Your code here\nend", "  # create a hash to store the strength of each extension\n\
    \  strength = Hash.new\n  # loop through each extension\n  extensions.each do\
    \ |extension|\n    # find the number of uppercase letters\n    cap = extension.count(\"\
    A-Z\")\n    # find the number of lowercase letters\n    sm = extension.count(\"\
    a-z\")\n    # calculate the strength\n    strength[extension] = cap - sm\n  end\n\
    \  # find the strongest extension\n  strongest = strength.max_by{|k,v| v}\n  #\
    \ return the result\n  return \"#{class_name}.#{strongest[0]}\"\nend", "  # your\
    \ code here\nend", "  # Your code here\nend", "  # create a hash of the extensions\
    \ and their strengths\n  strengths = {}\n  extensions.each do |ext|\n    strengths[ext]\
    \ = ext.count(\"A-Z\") - ext.count(\"a-z\")\n  end\n  # find the strongest extension\n\
    \  strongest = strengths.max_by { |k, v| v }\n  # return the class name and the\
    \ strongest extension\n  \"#{class_name}.#{strongest[0]}\"\nend", "  # your code\
    \ here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
