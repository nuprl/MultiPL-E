language: rb
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpup6pd7of

    Started

    .

    Finished in 0.000490784 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2037.56 tests/s, 16300.45 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |e| e.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzhya80vg\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpzhya80vg.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013996068 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.45 tests/s, 71.45 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpup6pd7of

    Started

    .

    Finished in 0.000490784 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2037.56 tests/s, 16300.45 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmparztud5h\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmparztud5h.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013899761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.94 tests/s, 71.94 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.sort!\n \
    \ [evens[0], arr.index(evens[0])]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxlmoxh7u

    Started

    .

    Finished in 0.000461875 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2165.09 tests/s, 17320.70 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprw7r3kwi

    Started

    .

    Finished in 0.001027362 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    973.37 tests/s, 7786.93 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |e| e.even? }\n  return [] if evens.empty?\n  evens.min == evens.max\
    \ ? [evens.min, arr.index(evens.min)] : [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9u0rrzoc

    Started

    .

    Finished in 0.000457348 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2186.52 tests/s, 17492.15 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpup6pd7of

    Started

    .

    Finished in 0.000490784 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2037.56 tests/s, 16300.45 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmparztud5h\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmparztud5h.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013899761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.94 tests/s, 71.94 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpup6pd7of

    Started

    .

    Finished in 0.000490784 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2037.56 tests/s, 16300.45 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppwfgqy8x

    Started

    .

    Finished in 0.000717565 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1393.60 tests/s, 11148.82 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_nums\
    \ = arr.select { |num| num.even? }\n  return [] if even_nums.empty?\n  even_nums.min\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbe4_hrne\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpbe4_hrne.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013753174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.71 tests/s, 72.71 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even?\
    \ }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvlb9b376

    Started

    .

    Finished in 0.000447003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2237.12 tests/s, 17896.97 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprw7r3kwi

    Started

    .

    Finished in 0.001027362 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    973.37 tests/s, 7786.93 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpup6pd7of

    Started

    .

    Finished in 0.000490784 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2037.56 tests/s, 16300.45 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even?\
    \ }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmgf89ttg

    Started

    .

    Finished in 0.000454956 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2198.01 tests/s, 17584.12 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmparztud5h\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmparztud5h.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013899761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.94 tests/s, 71.94 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvmms24xo

    Started

    .

    Finished in 0.000449164 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2226.36 tests/s, 17810.87 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min <=> evens.max\n\
    \  evens.min\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl1iw7hxt\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpl1iw7hxt.rb:29:in `test_pluck'\n \
    \    26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_pluck\n\
    \     28:     candidate = method(:pluck)\n  => 29:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     30:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 31:     assert_equal([], candidate.call([]))\n     32:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014046701 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.19 tests/s, 71.19 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpup6pd7of

    Started

    .

    Finished in 0.000490784 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2037.56 tests/s, 16300.45 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmparztud5h\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmparztud5h.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013899761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.94 tests/s, 71.94 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min == evens.max\
    \ ? [evens.min, arr.index(evens.min)] : [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4hwira91

    Started

    .

    Finished in 0.000544362 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1837.01 tests/s, 14696.10 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprw7r3kwi

    Started

    .

    Finished in 0.001027362 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    973.37 tests/s, 7786.93 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpup6pd7of

    Started

    .

    Finished in 0.000490784 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2037.56 tests/s, 16300.45 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even?\
    \ }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvlb9b376

    Started

    .

    Finished in 0.000447003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2237.12 tests/s, 17896.97 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmparztud5h\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmparztud5h.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013899761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.94 tests/s, 71.94 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_values\
    \ = arr.select { |n| n.even? }\n  return [] if even_values.empty?\n  even_values.min\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1fhp90au\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp1fhp90au.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.01425761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.14 tests/s, 70.14 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.sort!\n \
    \ [evens[0], arr.index(evens[0])]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxlmoxh7u

    Started

    .

    Finished in 0.000461875 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2165.09 tests/s, 17320.70 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppwfgqy8x

    Started

    .

    Finished in 0.000717565 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1393.60 tests/s, 11148.82 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  min_idx = arr.index(min)\n  [min, min_idx]\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n\
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6s3wnptj

    Started

    .

    Finished in 0.000546875 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1828.57 tests/s, 14628.57 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min <=> evens.max\n\
    \  evens.min\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl1iw7hxt\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpl1iw7hxt.rb:29:in `test_pluck'\n \
    \    26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_pluck\n\
    \     28:     candidate = method(:pluck)\n  => 29:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     30:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 31:     assert_equal([], candidate.call([]))\n     32:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014046701 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.19 tests/s, 71.19 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  index = arr.index(min)\n  [min, index]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3ndlj7gr

    Started

    .

    Finished in 0.000443367 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2255.47 tests/s, 18043.74 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmparztud5h\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmparztud5h.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013899761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.94 tests/s, 71.94 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min == evens.max\
    \ ? [evens.min, arr.index(evens.min)] : [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4hwira91

    Started

    .

    Finished in 0.000544362 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1837.01 tests/s, 14696.10 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |num| num.even? }\n  return [] if evens.empty?\n  evens.min\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4xee3izd\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp4xee3izd.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013219662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.64 tests/s, 75.64 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even?\
    \ }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n\
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptli8u8bk\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmptli8u8bk.rb:27:in `test_pluck'\n \
    \    24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_pluck\n\
    \     26:     candidate = method(:pluck)\n  => 27:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     28:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 29:     assert_equal([], candidate.call([]))\n     30:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014133582 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.75 tests/s, 70.75 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprw7r3kwi

    Started

    .

    Finished in 0.001027362 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    973.37 tests/s, 7786.93 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprw7r3kwi

    Started

    .

    Finished in 0.001027362 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    973.37 tests/s, 7786.93 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_nums\
    \ = arr.select { |num| num.even? }\n  return [] if even_nums.empty?\n  min_even\
    \ = even_nums.min\n  [min_even, arr.index(min_even)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpb_04jy3l

    Started

    .

    Finished in 0.000481787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2075.61 tests/s, 16604.85 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min <=> evens.max\n\
    \  evens.min\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl1iw7hxt\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpl1iw7hxt.rb:29:in `test_pluck'\n \
    \    26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_pluck\n\
    \     28:     candidate = method(:pluck)\n  => 29:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     30:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 31:     assert_equal([], candidate.call([]))\n     32:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014046701 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.19 tests/s, 71.19 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even?\
    \ }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n\
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptli8u8bk\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmptli8u8bk.rb:27:in `test_pluck'\n \
    \    24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_pluck\n\
    \     26:     candidate = method(:pluck)\n  => 27:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     28:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 29:     assert_equal([], candidate.call([]))\n     30:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014133582 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.75 tests/s, 70.75 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |num| num.even? }\n  return [] if evens.empty?\n  evens.min ==\
    \ evens.max ? [evens.min, arr.index(evens.min)] : [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp8epb3ku7

    Started

    .

    Finished in 0.000444835 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2248.02 tests/s, 17984.20 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.sort!\n \
    \ [evens[0], arr.index(evens[0])]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxlmoxh7u

    Started

    .

    Finished in 0.000461875 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2165.09 tests/s, 17320.70 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmparztud5h\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmparztud5h.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013899761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.94 tests/s, 71.94 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.sort!\n \
    \ even = evens.first\n  [even, arr.index(even)]\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n\
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxxqiuw5c

    Started

    .

    Finished in 0.000452923 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2207.88 tests/s, 17663.05 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpup6pd7of

    Started

    .

    Finished in 0.000490784 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2037.56 tests/s, 16300.45 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.sort!\n \
    \ smallest = evens.first\n  [smallest, arr.index(smallest)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp68cv_u9x

    Started

    .

    Finished in 0.00042796 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2336.67 tests/s, 18693.34 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index.min_by { |x,\
    \ _| x.even? ? x : Float::INFINITY }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqgzqmgwd\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpqgzqmgwd.rb:27:in `test_pluck'\n \
    \    24:     candidate = method(:pluck)\n     25:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     26:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n  =>\
    \ 27:     assert_equal([], candidate.call([]))\n     28:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n     29:     assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n     30:     assert_equal([4, 1], candidate.call([5, 4, 8,\
    \ 4, 8]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00621044 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.02 tests/s, 483.06 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.sort!\n \
    \ smallest = evens.first\n  [smallest, arr.index(smallest)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6zl_ocq5

    Started

    .

    Finished in 0.000421544 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2372.23 tests/s, 18977.85 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmppwfgqy8x

    Started

    .

    Finished in 0.000717565 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1393.60 tests/s, 11148.82 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |e| e.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpewkj8cs3

    Started

    .

    Finished in 0.000415973 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2404.00 tests/s, 19232.02 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  arr.each_with_index do |x, i|\n\
    \    return [x, i] if x.even?\n  end\n  []\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpk_xj8gbs\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpk_xj8gbs.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[4, 0]>\n\
    \ndiff:\n? [2, 1]\n?  4  0 \n?  ?  ? \n===============================================================================\n\
    \nFinished in 0.006782236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.44 tests/s, 147.44 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpup6pd7of

    Started

    .

    Finished in 0.000490784 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2037.56 tests/s, 16300.45 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpup6pd7of

    Started

    .

    Finished in 0.000490784 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2037.56 tests/s, 16300.45 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmparztud5h\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmparztud5h.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013899761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.94 tests/s, 71.94 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = []\n  arr.each_with_index do |num, idx|\n    evens << [num, idx] if num.even?\n\
    \  end\n  evens.sort_by { |num, idx| [num, idx] }.first\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpeyk5vhel\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpeyk5vhel.rb:37:in `test_pluck'\n \
    \    34:     assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n     35:\
    \     assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n     36:     assert_equal([6,\
    \ 1], candidate.call([7, 6, 7, 1]))\n  => 37:     assert_equal([], candidate.call([7,\
    \ 9, 7, 1]))\n     38:   end\n     39: end\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006089429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 8 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    164.22 tests/s, 1313.75 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmparztud5h\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmparztud5h.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013899761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.94 tests/s, 71.94 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpup6pd7of

    Started

    .

    Finished in 0.000490784 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2037.56 tests/s, 16300.45 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  min_idx = arr.index(min)\n  [min, min_idx]\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n\
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6s3wnptj

    Started

    .

    Finished in 0.000546875 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1828.57 tests/s, 14628.57 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.sort!\n \
    \ [evens[0], arr.index(evens[0])]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxlmoxh7u

    Started

    .

    Finished in 0.000461875 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2165.09 tests/s, 17320.70 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpup6pd7of

    Started

    .

    Finished in 0.000490784 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2037.56 tests/s, 16300.45 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.sort!\n \
    \ [evens[0], arr.index(evens[0])]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxlmoxh7u

    Started

    .

    Finished in 0.000461875 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2165.09 tests/s, 17320.70 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpup6pd7of

    Started

    .

    Finished in 0.000490784 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2037.56 tests/s, 16300.45 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpup6pd7of

    Started

    .

    Finished in 0.000490784 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2037.56 tests/s, 16300.45 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  evens = arr.select { |x| x.even?\
    \ }\n  return [] if evens.empty?\n  evens.min\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n\
    \    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptli8u8bk\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmptli8u8bk.rb:27:in `test_pluck'\n \
    \    24: class TestHumanEval < Test::Unit::TestCase\n     25:   def test_pluck\n\
    \     26:     candidate = method(:pluck)\n  => 27:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     28:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 29:     assert_equal([], candidate.call([]))\n     30:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014133582 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.75 tests/s, 70.75 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_nums\
    \ = arr.select { |num| num.even? }\n  return [] if even_nums.empty?\n  min_even\
    \ = even_nums.min\n  [min_even, arr.index(min_even)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpb_04jy3l

    Started

    .

    Finished in 0.000481787 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2075.61 tests/s, 16604.85 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_nums\
    \ = arr.select { |num| num.even? }\n  return [] if even_nums.empty?\n  even_nums.min\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbe4_hrne\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpbe4_hrne.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013753174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.71 tests/s, 72.71 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.sort!\n \
    \ evens.unshift(arr.index(evens.first))\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpltj1q2nc\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpltj1q2nc.rb:29:in `test_pluck'\n \
    \    26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_pluck\n\
    \     28:     candidate = method(:pluck)\n  => 29:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     30:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 31:     assert_equal([], candidate.call([]))\n     32:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<[1, 2,\
    \ 4]>\n\ndiff:\n? [   2, 1]\n?  1,    4 \n?  +++   ? \n===============================================================================\n\
    \nFinished in 0.006797078 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.12 tests/s, 147.12 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  min_index = arr.index(min)\n  [min, min_index]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpr7zbyi44

    Started

    .

    Finished in 0.000424598 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2355.17 tests/s, 18841.35 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  index = arr.index(min)\n  [min, index]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpv83s39yz

    Started

    .

    Finished in 0.000454093 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2202.19 tests/s, 17617.54 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_nums\
    \ = arr.select { |num| num.even? }\n  return [] if even_nums.empty?\n  smallest_even\
    \ = even_nums.min\n  [smallest_even, arr.index(smallest_even)]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n    candidate =\
    \ method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2,\
    \ 1], candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n \
    \   assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0,\
    \ 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5,\
    \ 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuidvb75q

    Started

    .

    Finished in 0.000430213 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2324.43 tests/s, 18595.44 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min == evens.max\
    \ ? [evens.min, arr.index(evens.min)] : [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpt8uw5k_k

    Started

    .

    Finished in 0.000429517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2328.20 tests/s, 18625.57 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_numbers\
    \ = arr.select { |num| num.even? }\n  return [] if even_numbers.empty?\n  even_numbers.min\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyxiooyhu\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpyxiooyhu.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.006419978 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.76 tests/s, 155.76 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  even_nums\
    \ = arr.select { |num| num.even? }\n  return [] if even_nums.empty?\n  smallest_even\
    \ = even_nums.min\n  smallest_even_index = arr.index(smallest_even)\n  [smallest_even,\
    \ smallest_even_index]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9na4qiu2

    Started

    .

    Finished in 0.000416576 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2400.52 tests/s, 19204.18 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = []\n  arr.each_with_index { |x, i| evens << [x, i] if x.even? }\n  evens.empty?\
    \ ? [] : evens.min\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpod6avmgb

    Started

    .

    Finished in 0.000517237 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1933.35 tests/s, 15466.80 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmparztud5h\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmparztud5h.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013899761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.94 tests/s, 71.94 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |num| num.even? }\n  return [] if evens.empty?\n  evens.min\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4xee3izd\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmp4xee3izd.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013219662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.64 tests/s, 75.64 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpup6pd7of

    Started

    .

    Finished in 0.000490784 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2037.56 tests/s, 16300.45 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmparztud5h\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmparztud5h.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013899761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.94 tests/s, 71.94 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.sort!\n \
    \ [evens[0], arr.index(evens[0])]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_pluck\n    candidate = method(:pluck)\n \
    \   assert_equal([2, 1], candidate.call([4, 2, 3]))\n    assert_equal([2, 1],\
    \ candidate.call([1, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n    assert_equal([0, 3], candidate.call([1,\
    \ 2, 3, 0, 5, 3]))\n    assert_equal([4, 1], candidate.call([5, 4, 8, 4, 8]))\n\
    \    assert_equal([6, 1], candidate.call([7, 6, 7, 1]))\n    assert_equal([],\
    \ candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxlmoxh7u

    Started

    .

    Finished in 0.000461875 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2165.09 tests/s, 17320.70 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_pluck\n    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpup6pd7of

    Started

    .

    Finished in 0.000490784 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2037.56 tests/s, 16300.45 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min == evens.max\
    \ ? [evens.min, arr.index(evens.min)] : [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpt8uw5k_k

    Started

    .

    Finished in 0.000429517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2328.20 tests/s, 18625.57 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpogksis0u\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpogksis0u.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014293001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.96 tests/s, 69.96 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmparztud5h\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmparztud5h.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013899761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.94 tests/s, 71.94 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmparztud5h\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmparztud5h.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013899761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.94 tests/s, 71.94 assertions/s\n"
  timestamp: 1659977732
- exit_code: 0
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min == evens.max\
    \ ? [evens.min, arr.index(evens.min)] : [evens.min, arr.index(evens.min)]\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4hwira91

    Started

    .

    Finished in 0.000544362 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1837.01 tests/s, 14696.10 assertions/s

    '
  stdout: ''
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |e| e.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzhya80vg\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpzhya80vg.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.013996068 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.45 tests/s, 71.45 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
- exit_code: 1
  program: "# \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
    \ plucked node should be the node with the smallest even value.\n# If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n# If there are no even values or the given array is empty, return\
    \ [].\n# Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n# Example 2:\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0\
    \ is the smallest value, but  there are two zeros,\n# so we will choose the first\
    \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
    \ 10000\n# * 0 <= node.value\ndef pluck(arr)\n  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
    \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
    \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4,\
    \ 2]))\n    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
    \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
    \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpamrzt499\nStarted\nF\n===============================================================================\n\
    Failure: test_pluck(TestHumanEval)\n/tmp/tmpamrzt499.rb:28:in `test_pluck'\n \
    \    25: class TestHumanEval < Test::Unit::TestCase\n     26:   def test_pluck\n\
    \     27:     candidate = method(:pluck)\n  => 28:     assert_equal([2, 1], candidate.call([4,\
    \ 2, 3]))\n     29:     assert_equal([2, 1], candidate.call([1, 2, 3]))\n    \
    \ 30:     assert_equal([], candidate.call([]))\n     31:     assert_equal([0,\
    \ 1], candidate.call([5, 0, 3, 0, 4, 2]))\n<[2, 1]> expected but was\n<2>\n\n\
    diff:\n? [2, 1]\n===============================================================================\n\
    \nFinished in 0.014191368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.47 tests/s, 70.47 assertions/s\n"
  timestamp: 1659977732
