name: HumanEval_161_solve
language: rb
prompt: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
  \ contains no letters, reverse the string.\n# The function should return the resulted\
  \ string.\n# Examples\ndef solve(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
  \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"\
  ))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\"\
  , candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n\
  \    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
  2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
  #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
completions: ["  s.chars.map { |x| x =~ /[a-z]/ ? x.upcase : x.downcase }.join\nend",
  "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.swapcase : c }.join\nend", "  s.chars.map { |c| c =~\
    \ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a' => 'A', 'b' => 'B', 'c' =>\
    \ 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I',\
    \ 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p'\
    \ => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V',\
    \ 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z', 'A' => 'a', 'B' => 'b', 'C'\
    \ => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G' => 'g', 'H' => 'h', 'I' => 'i',\
    \ 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm', 'N' => 'n', 'O' => 'o', 'P'\
    \ => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T' => 't', 'U' => 'u', 'V' => 'v',\
    \ 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~\
    \ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a' => 'A',\
    \ 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G', 'h'\
    \ => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n' => 'N',\
    \ 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T', 'u'\
    \ => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z', 'A' => 'a',\
    \ 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G' => 'g', 'H'\
    \ => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm', 'N' => 'n',\
    \ 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T' => 't', 'U'\
    \ => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\nend", " \
    \ s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map\
    \ { |x| x =~ /[a-z]/ ? x.upcase : x.downcase }.join\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a' =>\
    \ 'A', 'A' => 'a', 'b' => 'B', 'B' => 'b', 'c' => 'C', 'C' => 'c', 'd' => 'D',\
    \ 'D' => 'd', 'e' => 'E', 'E' => 'e', 'f' => 'F', 'F' => 'f', 'g' => 'G', 'G'\
    \ => 'g', 'h' => 'H', 'H' => 'h', 'i' => 'I', 'I' => 'i', 'j' => 'J', 'J' => 'j',\
    \ 'k' => 'K', 'K' => 'k', 'l' => 'L', 'L' => 'l', 'm' => 'M', 'M' => 'm', 'n'\
    \ => 'N', 'N' => 'n', 'o' => 'O', 'O' => 'o', 'p' => 'P', 'P' => 'p', 'q' => 'Q',\
    \ 'Q' => 'q', 'r' => 'R', 'R' => 'r', 's' => 'S', 'S' => 's', 't' => 'T', 'T'\
    \ => 't', 'u' => 'U', 'U' => 'u', 'v' => 'V', 'V' => 'v', 'w' => 'W', 'W' => 'w',\
    \ 'x' => 'X', 'X' => 'x', 'y' => 'Y', 'Y' => 'y', 'z' => 'Z', 'Z' => 'z')\nend",
  "    s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |x| x =~\
    \ /[a-z]/ ? x.swapcase : x }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.gsub(/[a-z]/i, 'a' => 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e'\
    \ => 'E', 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K',\
    \ 'l' => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r'\
    \ => 'R', 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X',\
    \ 'y' => 'Y', 'z' => 'Z', 'A' => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E'\
    \ => 'e', 'F' => 'f', 'G' => 'g', 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k',\
    \ 'L' => 'l', 'M' => 'm', 'N' => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R'\
    \ => 'r', 'S' => 's', 'T' => 't', 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x',\
    \ 'Y' => 'y', 'Z' => 'z')\nend", "  s.chars.map { |char| char =~ /[a-z]/ ? char.upcase\
    \ : char.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase :\
    \ c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i,\
    \ 'a' => 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g'\
    \ => 'G', 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M',\
    \ 'n' => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't'\
    \ => 'T', 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z',\
    \ 'A' => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G'\
    \ => 'g', 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm',\
    \ 'N' => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T'\
    \ => 't', 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\n\
    end", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "  s.chars.map { |char| char =~ /[a-z]/ ? char.upcase : char.downcase }.join\nend",
  "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.swapcase : c }.join\nend", "  s.chars.map{|x| x =~ /[a-z]/\
    \ ? x.upcase : x.downcase}.join\nend", "  s.chars.map { |char| char =~ /[a-z]/\
    \ ? char.upcase : char.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a' => 'A',\
    \ 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G', 'h'\
    \ => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n' => 'N',\
    \ 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T', 'u'\
    \ => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z', 'A' => 'a',\
    \ 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G' => 'g', 'H'\
    \ => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm', 'N' => 'n',\
    \ 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T' => 't', 'U'\
    \ => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\nend", " \
    \ s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i,\
    \ 'a' => 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g'\
    \ => 'G', 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M',\
    \ 'n' => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't'\
    \ => 'T', 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z',\
    \ 'A' => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G'\
    \ => 'g', 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm',\
    \ 'N' => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T'\
    \ => 't', 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\n\
    end", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "  s.gsub(/[a-z]/i, 'a' => 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E',\
    \ 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l'\
    \ => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R',\
    \ 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y'\
    \ => 'Y', 'z' => 'Z', 'A' => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e',\
    \ 'F' => 'f', 'G' => 'g', 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L'\
    \ => 'l', 'M' => 'm', 'N' => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r',\
    \ 'S' => 's', 'T' => 't', 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y'\
    \ => 'y', 'Z' => 'z')\nend", "  s.gsub(/[a-z]/i, 'a' => 'A', 'b' => 'B', 'c' =>\
    \ 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I',\
    \ 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p'\
    \ => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V',\
    \ 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z', 'A' => 'a', 'B' => 'b', 'C'\
    \ => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G' => 'g', 'H' => 'h', 'I' => 'i',\
    \ 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm', 'N' => 'n', 'O' => 'o', 'P'\
    \ => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T' => 't', 'U' => 'u', 'V' => 'v',\
    \ 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~\
    \ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "    s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.gsub(/[a-z]/i, 'a' => 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e'\
    \ => 'E', 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K',\
    \ 'l' => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r'\
    \ => 'R', 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X',\
    \ 'y' => 'Y', 'z' => 'Z', 'A' => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E'\
    \ => 'e', 'F' => 'f', 'G' => 'g', 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k',\
    \ 'L' => 'l', 'M' => 'm', 'N' => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R'\
    \ => 'r', 'S' => 's', 'T' => 't', 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x',\
    \ 'Y' => 'y', 'Z' => 'z')\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.reverse.gsub(/[a-z]/i) { |x| x == x.upcase ?\
    \ x.downcase : x.upcase }\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.swapcase : c }.join\nend",
  "  s.gsub(/[a-z]/i, 'a' => 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E',\
    \ 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l'\
    \ => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R',\
    \ 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y'\
    \ => 'Y', 'z' => 'Z', 'A' => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e',\
    \ 'F' => 'f', 'G' => 'g', 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L'\
    \ => 'l', 'M' => 'm', 'N' => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r',\
    \ 'S' => 's', 'T' => 't', 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y'\
    \ => 'y', 'Z' => 'z')\nend", "  s.reverse.tr('a-zA-Z', 'A-Za-z')\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~\
    \ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.chars.map do |char|\n    if char\
    \ =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n      char.downcase\n\
    \    else\n      char\n    end\n  end.join\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.chars.map { |char| char =~ /[a-z]/ ? char.upcase : char.downcase }.join\n\
    end", "  s.chars.map { |i| i =~ /[a-z]/ ? i.upcase : i.downcase }.join\nend",
  "  s.gsub(/[a-z]/i, 'a' => 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E',\
    \ 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l'\
    \ => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R',\
    \ 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y'\
    \ => 'Y', 'z' => 'Z', 'A' => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e',\
    \ 'F' => 'f', 'G' => 'g', 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L'\
    \ => 'l', 'M' => 'm', 'N' => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r',\
    \ 'S' => 's', 'T' => 't', 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y'\
    \ => 'y', 'Z' => 'z')\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "  s.chars.map { |char| char =~ /[a-z]/ ? char.upcase : char.downcase }.join\nend",
  "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~\
    \ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.swapcase : c }.join\nend", "  #..\n  if s.empty?\n    return s\n  end\n\
    \  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a' =>\
    \ 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G',\
    \ 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n'\
    \ => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T',\
    \ 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z', 'A'\
    \ => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G' => 'g',\
    \ 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm', 'N'\
    \ => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T' => 't',\
    \ 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\nend",
  "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |x|\
    \ x =~ /[a-z]/ ? x.upcase : x.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a' =>\
    \ 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G',\
    \ 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n'\
    \ => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T',\
    \ 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z', 'A'\
    \ => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G' => 'g',\
    \ 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm', 'N'\
    \ => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T' => 't',\
    \ 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\nend",
  "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map\
    \ { |c| c.match(/[a-z]/i) ? c.swapcase : c }.join\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~\
    \ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a' => 'A', 'b' =>\
    \ 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G', 'h' => 'H',\
    \ 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n' => 'N', 'o'\
    \ => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T', 'u' => 'U',\
    \ 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z', 'A' => 'a', 'B'\
    \ => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G' => 'g', 'H' => 'h',\
    \ 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm', 'N' => 'n', 'O'\
    \ => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T' => 't', 'U' => 'u',\
    \ 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~\
    \ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a' => 'A',\
    \ 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G', 'h'\
    \ => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n' => 'N',\
    \ 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T', 'u'\
    \ => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z', 'A' => 'a',\
    \ 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G' => 'g', 'H'\
    \ => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm', 'N' => 'n',\
    \ 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T' => 't', 'U'\
    \ => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\nend", " \
    \ s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i,\
    \ 'a' => 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g'\
    \ => 'G', 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M',\
    \ 'n' => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't'\
    \ => 'T', 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z',\
    \ 'A' => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G'\
    \ => 'g', 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm',\
    \ 'N' => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T'\
    \ => 't', 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\n\
    end", "    s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "  s.gsub(/[a-z]/i, 'a' => 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E',\
    \ 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l'\
    \ => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R',\
    \ 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y'\
    \ => 'Y', 'z' => 'Z', 'A' => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e',\
    \ 'F' => 'f', 'G' => 'g', 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L'\
    \ => 'l', 'M' => 'm', 'N' => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r',\
    \ 'S' => 's', 'T' => 't', 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y'\
    \ => 'y', 'Z' => 'z')\nend", "  s.chars.map{|x| x =~ /[a-z]/ ? x.upcase : x.downcase}.join\n\
    end", "  s.chars.map{|x| x =~ /[a-z]/ ? x.swapcase : x}.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~\
    \ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c.match(/[a-z]/i)\
    \ ? c.swapcase : c }.join\nend", "  s.reverse.gsub(/[a-z]/i) { |c| c == c.upcase\
    \ ? c.downcase : c.upcase }\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.chars.map { |x| x =~ /[a-z]/ ? x.upcase : x.downcase\
    \ }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.chars.map { |char| char =~ /[a-z]/ ? char.upcase : char.downcase }.join\n\
    end", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "    s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c|\
    \ c.match(/[a-z]/i) ? c.swapcase : c }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a' => 'A', 'b' =>\
    \ 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G', 'h' => 'H',\
    \ 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n' => 'N', 'o'\
    \ => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T', 'u' => 'U',\
    \ 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z', 'A' => 'a', 'B'\
    \ => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G' => 'g', 'H' => 'h',\
    \ 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm', 'N' => 'n', 'O'\
    \ => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T' => 't', 'U' => 'u',\
    \ 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~\
    \ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.gsub(/[a-z]/i, 'a' => 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e'\
    \ => 'E', 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K',\
    \ 'l' => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r'\
    \ => 'R', 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X',\
    \ 'y' => 'Y', 'z' => 'Z', 'A' => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E'\
    \ => 'e', 'F' => 'f', 'G' => 'g', 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k',\
    \ 'L' => 'l', 'M' => 'm', 'N' => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R'\
    \ => 'r', 'S' => 's', 'T' => 't', 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x',\
    \ 'Y' => 'y', 'Z' => 'z')\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "  s.gsub(/[a-z]/i, 'a' => 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E',\
    \ 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l'\
    \ => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R',\
    \ 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y'\
    \ => 'Y', 'z' => 'Z', 'A' => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e',\
    \ 'F' => 'f', 'G' => 'g', 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L'\
    \ => 'l', 'M' => 'm', 'N' => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r',\
    \ 'S' => 's', 'T' => 't', 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y'\
    \ => 'y', 'Z' => 'z')\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "    s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "  s.chars.map { |x| x =~ /[a-z]/ ? x.upcase : x.downcase }.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a' =>\
    \ 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G',\
    \ 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n'\
    \ => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T',\
    \ 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z', 'A'\
    \ => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G' => 'g',\
    \ 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm', 'N'\
    \ => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T' => 't',\
    \ 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\nend",
  "  s.gsub(/[a-z]/i, 'a' => 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E',\
    \ 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l'\
    \ => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R',\
    \ 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y'\
    \ => 'Y', 'z' => 'Z', 'A' => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e',\
    \ 'F' => 'f', 'G' => 'g', 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L'\
    \ => 'l', 'M' => 'm', 'N' => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r',\
    \ 'S' => 's', 'T' => 't', 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y'\
    \ => 'y', 'Z' => 'z')\nend", "  s.chars.map { |x| x =~ /[a-z]/ ? x.upcase : x.downcase\
    \ }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.chars.map { |char| char =~ /[a-z]/ ? char.upcase : char.downcase }.join\n\
    end", "  s.gsub(/[a-z]/i, 'a' => 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e'\
    \ => 'E', 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K',\
    \ 'l' => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r'\
    \ => 'R', 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X',\
    \ 'y' => 'Y', 'z' => 'Z', 'A' => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E'\
    \ => 'e', 'F' => 'f', 'G' => 'g', 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k',\
    \ 'L' => 'l', 'M' => 'm', 'N' => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R'\
    \ => 'r', 'S' => 's', 'T' => 't', 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x',\
    \ 'Y' => 'y', 'Z' => 'z')\nend", "  s.gsub(/[a-z]/i, 'a' => 'A', 'A' => 'a', 'b'\
    \ => 'B', 'B' => 'b', 'c' => 'C', 'C' => 'c', 'd' => 'D', 'D' => 'd', 'e' => 'E',\
    \ 'E' => 'e', 'f' => 'F', 'F' => 'f', 'g' => 'G', 'G' => 'g', 'h' => 'H', 'H'\
    \ => 'h', 'i' => 'I', 'I' => 'i', 'j' => 'J', 'J' => 'j', 'k' => 'K', 'K' => 'k',\
    \ 'l' => 'L', 'L' => 'l', 'm' => 'M', 'M' => 'm', 'n' => 'N', 'N' => 'n', 'o'\
    \ => 'O', 'O' => 'o', 'p' => 'P', 'P' => 'p', 'q' => 'Q', 'Q' => 'q', 'r' => 'R',\
    \ 'R' => 'r', 's' => 'S', 'S' => 's', 't' => 'T', 'T' => 't', 'u' => 'U', 'U'\
    \ => 'u', 'v' => 'V', 'V' => 'v', 'w' => 'W', 'W' => 'w', 'x' => 'X', 'X' => 'x',\
    \ 'y' => 'Y', 'Y' => 'y', 'z' => 'Z', 'Z' => 'z')\nend", "    s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~\
    \ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "    s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "    s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.swapcase : c }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |x| x =~ /[a-z]/ ? x.upcase\
    \ : x.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a' => 'A', 'A' => 'a', 'b' =>\
    \ 'B', 'B' => 'b', 'c' => 'C', 'C' => 'c', 'd' => 'D', 'D' => 'd', 'e' => 'E',\
    \ 'E' => 'e', 'f' => 'F', 'F' => 'f', 'g' => 'G', 'G' => 'g', 'h' => 'H', 'H'\
    \ => 'h', 'i' => 'I', 'I' => 'i', 'j' => 'J', 'J' => 'j', 'k' => 'K', 'K' => 'k',\
    \ 'l' => 'L', 'L' => 'l', 'm' => 'M', 'M' => 'm', 'n' => 'N', 'N' => 'n', 'o'\
    \ => 'O', 'O' => 'o', 'p' => 'P', 'P' => 'p', 'q' => 'Q', 'Q' => 'q', 'r' => 'R',\
    \ 'R' => 'r', 's' => 'S', 'S' => 's', 't' => 'T', 'T' => 't', 'u' => 'U', 'U'\
    \ => 'u', 'v' => 'V', 'V' => 'v', 'w' => 'W', 'W' => 'w', 'x' => 'X', 'X' => 'x',\
    \ 'y' => 'Y', 'Y' => 'y', 'z' => 'Z', 'Z' => 'z')\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~\
    \ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a' => 'A', 'b' => 'B', 'c' =>\
    \ 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I',\
    \ 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p'\
    \ => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V',\
    \ 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z', 'A' => 'a', 'B' => 'b', 'C'\
    \ => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G' => 'g', 'H' => 'h', 'I' => 'i',\
    \ 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm', 'N' => 'n', 'O' => 'o', 'P'\
    \ => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T' => 't', 'U' => 'u', 'V' => 'v',\
    \ 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map do |char|\n\
    \    if char =~ /[a-z]/\n      char.upcase\n    elsif char =~ /[A-Z]/\n      char.downcase\n\
    \    else\n      char\n    end\n  end.join\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "  s.chars.map { |c| c =~ /[a-z]/ ? c.swapcase : c }.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~\
    \ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |char| char =~\
    \ /[a-z]/ ? char.upcase : char.downcase }.join\nend", "  s.chars.map { |c| c =~\
    \ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/\
    \ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase\
    \ }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\n\
    end", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend",
  "  s.chars.map { |char| char =~ /[a-z]/ ? char.upcase : char.downcase }.join\nend",
  "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |c| c =~\
    \ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map { |x| x =~ /[a-z]/\
    \ ? x.upcase : x.downcase }.join\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a' => 'A', 'b' => 'B', 'c' =>\
    \ 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I',\
    \ 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p'\
    \ => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V',\
    \ 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z', 'A' => 'a', 'B' => 'b', 'C'\
    \ => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G' => 'g', 'H' => 'h', 'I' => 'i',\
    \ 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm', 'N' => 'n', 'O' => 'o', 'P'\
    \ => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T' => 't', 'U' => 'u', 'V' => 'v',\
    \ 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\nend", "  s.chars.map { |c|\
    \ c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a' =>\
    \ 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G',\
    \ 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n'\
    \ => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T',\
    \ 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z', 'A'\
    \ => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G' => 'g',\
    \ 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm', 'N'\
    \ => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T' => 't',\
    \ 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\nend",
  "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.chars.map\
    \ { |c| c =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.reverse.gsub(/[a-z]/i)\
    \ { |c| c == c.upcase ? c.downcase : c.upcase }\nend", "  s.chars.map { |c| c\
    \ =~ /[a-z]/ ? c.upcase : c.downcase }.join\nend", "  s.tr('a-zA-Z', 'A-Za-z').reverse\n\
    end", "  s.gsub(/[a-z]/i, 'a' => 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e'\
    \ => 'E', 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K',\
    \ 'l' => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r'\
    \ => 'R', 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X',\
    \ 'y' => 'Y', 'z' => 'Z', 'A' => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E'\
    \ => 'e', 'F' => 'f', 'G' => 'g', 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k',\
    \ 'L' => 'l', 'M' => 'm', 'N' => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R'\
    \ => 'r', 'S' => 's', 'T' => 't', 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x',\
    \ 'Y' => 'y', 'Z' => 'z')\nend", "  s.chars.map { |c| c =~ /[a-z]/ ? c.upcase\
    \ : c.downcase }.join\nend", "  s.gsub(/[a-z]/i, 'a' => 'A', 'b' => 'B', 'c' =>\
    \ 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F', 'g' => 'G', 'h' => 'H', 'i' => 'I',\
    \ 'j' => 'J', 'k' => 'K', 'l' => 'L', 'm' => 'M', 'n' => 'N', 'o' => 'O', 'p'\
    \ => 'P', 'q' => 'Q', 'r' => 'R', 's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V',\
    \ 'w' => 'W', 'x' => 'X', 'y' => 'Y', 'z' => 'Z', 'A' => 'a', 'B' => 'b', 'C'\
    \ => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f', 'G' => 'g', 'H' => 'h', 'I' => 'i',\
    \ 'J' => 'j', 'K' => 'k', 'L' => 'l', 'M' => 'm', 'N' => 'n', 'O' => 'o', 'P'\
    \ => 'p', 'Q' => 'q', 'R' => 'r', 'S' => 's', 'T' => 't', 'U' => 'u', 'V' => 'v',\
    \ 'W' => 'w', 'X' => 'x', 'Y' => 'y', 'Z' => 'z')\nend", "    s.chars.map { |x|\
    \ x =~ /[a-z]/ ? x.upcase : x.downcase }.join\nend", "  s.chars.map { |c| c =~\
    \ /[a-z]/ ? c.upcase : c.downcase }.join\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
