name: HumanEval_134_check_if_last_char_is_a_letter
language: rb
prompt: "# Create a function that returns True if the last character\n# of a given\
  \ string is an alphabetical character and is not\n# a part of a word, and False\
  \ otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n\
  def check_if_last_char_is_a_letter(txt)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_if_last_char_is_a_letter\n\
  \    candidate = method(:check_if_last_char_is_a_letter)\n    assert_equal(false,\
  \ candidate.call(\"apple\"))\n    assert_equal(true, candidate.call(\"apple pi e\"\
  ))\n    assert_equal(false, candidate.call(\"eeeee\"))\n    assert_equal(true, candidate.call(\"\
  A\"))\n    assert_equal(false, candidate.call(\"Pumpkin pie \"))\n    assert_equal(false,\
  \ candidate.call(\"Pumpkin pie 1\"))\n    assert_equal(false, candidate.call(\"\"\
  ))\n    assert_equal(false, candidate.call(\"eeeee e \"))\n    assert_equal(false,\
  \ candidate.call(\"apple pie\"))\n    assert_equal(false, candidate.call(\"apple\
  \ pi e \"))\n  end\nend\n"
completions: ["  if txt[-1] =~ /[a-zA-Z]/\n    return true\n  else\n    return false\n\
    \  end\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/).nil? ? false : true\n\
    end", "  if txt[-1] =~ /[a-zA-Z]/\n    true\n  else\n    false\n  end\nend", " \
    \ txt.split(\" \").last.match(/[a-z]/i) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/\\w/) ? false : true\nend", "  txt.split(\" \").last.chars.last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  if txt[-1] =~ /[a-zA-Z]/ && txt[-1] =~ /\\s/\n    return\
    \ true\n  else\n    return false\n  end\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/).nil?\
    \ ? false : true\nend", "  txt.split(\" \").last.match(/\\w/).nil?\nend", "  txt[-1]\
    \ =~ /[a-zA-Z]/ && txt[-2] =~ /\\s/\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.chars.last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  if txt[-1] =~ /[a-zA-Z]/ && txt[-1] =~ /\\s/\n    return\
    \ true\n  else\n    return false\n  end\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.chars.last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/).nil? ? false\
    \ : true\nend", "  txt[-1] =~ /[a-zA-Z]/ && txt[-2] =~ /\\s/\nend", "  txt.split(\"\
    \ \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\" \").last.match(/\\\
    w/).nil? ? false : true\nend", "  txt[-1] =~ /[a-zA-Z]/ && txt[-2] =~ /\\s/\n\
    end", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  # if\
    \ txt.split(\" \").last.match(/[a-zA-Z]/)\n  #   return true\n  # else\n  #  \
    \ return false\n  # end\n  # or\n  txt.split(\" \").last.match(/[a-zA-Z]/) ? true\
    \ : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend",
  "  txt.split(\" \").last.match(/[a-zA-Z]$/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/).nil?\
    \ ? false : true\nend", "  # your code here\nend", "  txt.split(\" \").last.chars.last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split.last.match(/[a-z]/i) ? true : false\nend",
  "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/\\w/) ? false : true\nend", "  txt.split(\" \").last.match(/[a-z]/i)\
    \ ? true : false\nend", "  if txt[-1].match(/[a-zA-Z]/) && txt[-1].match(/\\s/)\n\
    \    return true\n  else\n    return false\n  end\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\n\
    end", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  if txt[-1]\
    \ =~ /[a-zA-Z]/ && txt[-1] =~ /\\s/\n    return true\n  else\n    return false\n\
    \  end\nend", "  txt.split(\" \").last.match(/[a-zA-Z]$/) ? true : false\nend",
  "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-z]/i) ? true : false\nend", "  txt.split(\" \").last.chars.last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\n\
    end", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-z]/i) ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\n\
    end", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-zA-Z]/) ? true : false\nend", "  if txt.split(\" \").last.match(/[a-zA-Z]/)\n\
    \    return true\n  else\n    return false\n  end\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\n\
    end", "  txt.split(\" \").last.chars.last.match(/[a-zA-Z]/) ? true : false\nend",
  "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt[-1].match(/[a-zA-Z]/)\
    \ && txt[-2] == \" \"\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true\
    \ : false\nend", "  if txt[-1] =~ /[a-zA-Z]/ && txt[-1] =~ /\\s/\n    true\n \
    \ else\n    false\n  end\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) &&\
    \ !txt.split(\" \").last.match(/[a-zA-Z]+/)\nend", "  if txt[-1] =~ /[a-zA-Z]/\n\
    \    return true\n  else\n    return false\n  end\nend", "  txt.split(\" \").last.chars.last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\n\
    end", "  if txt[-1] =~ /[a-zA-Z]/ && txt[-1] =~ /\\s/\n    return true\n  else\n\
    \    return false\n  end\nend", "  txt.split(\" \").last.match(/[a-z]/i) ? true\
    \ : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend",
  "  txt.split(\" \").last.match(/\\w/) ? false : true\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\n\
    end", "  txt.split(\" \").last.match(/[a-zA-Z]/).nil? ? false : true\nend", " \
    \ txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.chars.last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-z]/i) ? true : false\n\
    end", "  txt.split(\" \").last.match(/[a-z]/i) ? true : false\nend", "  if txt.split(\"\
    \ \").last.chars.last =~ /[a-zA-Z]/\n    true\n  else\n    false\n  end\nend",
  "  txt.split(\" \").last.match(/\\w/) ? false : true\nend", "  if txt[-1] =~ /[a-zA-Z]/\n\
    \    true\n  else\n    false\n  end\nend", "  txt.split(\" \").last.chars.last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\n\
    end", "  if txt[-1] =~ /[a-zA-Z]/\n    return true\n  else\n    return false\n\
    \  end\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend",
  "  txt[-1] =~ /[[:alpha:]]/ && txt[-2] =~ /[[:space:]]/\nend", "  txt[-1] =~ /[a-zA-Z]/\
    \ && txt[-2] =~ /\\s/\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true\
    \ : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend",
  "  # code\nend", "  txt.split(\" \").last.match(/[a-z]/i) ? true : false\nend",
  "  txt.split(\" \").last.match(/[a-zA-Z]$/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-z]/i) ? true : false\nend", "  txt.split.last.match(/[a-zA-Z]/).nil?\
    \ ? false : true\nend", "  txt.split(\" \").last.match(/[a-z]/i) ? true : false\n\
    end", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-z]/i) ? true : false\nend", "  if txt[-1] =~ /[a-zA-Z]/ &&\
    \ txt[-1] != \" \"\n    return true\n  else\n    return false\n  end\nend", " \
    \ txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt[-1] =~ /[a-zA-Z]/ && txt[-2] =~ /\\s/\nend", " \
    \ txt.split(\" \").last.match(/[a-z]/i) && txt.split(\" \").last.match(/[^a-z]/i)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-z]/i) ? true : false\n\
    end", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\" \").last.match(/[a-z]/i)\
    \ ? true : false\nend", "  txt.split(\" \").last.chars.last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  if txt[-1] =~ /[a-zA-Z]/ && txt[-1] =~ /\\s/\n    return\
    \ true\n  else\n    return false\n  end\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  if txt[-1] =~ /[a-zA-Z]/ && txt[-1] != \" \"\n    return\
    \ true\n  else\n    return false\n  end\nend", "  if txt[-1] =~ /[a-zA-Z]/ &&\
    \ txt[-1] !~ /\\w/\n    return true\n  else\n    return false\n  end\nend", " \
    \ txt.split(\" \").last.chars.last.match(/[a-zA-Z]/) ? true : false\nend", " \
    \ if txt[-1] =~ /[a-zA-Z]/ && txt[-1] =~ /\\s/\n    return true\n  else\n    return\
    \ false\n  end\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\n\
    end", "  txt.split.last.match(/\\w/) ? false : true\nend", "  if txt[-1] =~ /[a-zA-Z]/\
    \ && txt[-1] =~ /\\W/\n    return true\n  else\n    return false\n  end\nend",
  "  txt.split(\" \").last.chars.last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\" \").last.match(/[a-z]/i)\
    \ ? true : false\nend", "  if txt[-1] =~ /[a-zA-Z]/ && txt[-1] != \" \"\n    return\
    \ true\n  else\n    return false\n  end\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/).to_s\
    \ == txt.split(\" \").last ? true : false\nend", "  txt.split(\" \").last.chars.last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\n\
    end", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\n\
    end", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split.last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\n\
    end", "  txt.split(\" \").last.chars.last.match(/[a-zA-Z]/) ? true : false\nend",
  "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-z]/i) ? true : false\nend", "  txt.split(\" \").last.match(/[a-z]/i)\
    \ ? true : false\nend", "  txt.split.last.match(/[a-z]/i) ? true : false\nend",
  "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last.chars.last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last[-1] =~ /[a-zA-Z]/ ? true : false\nend", "  if txt[-1] =~ /[a-zA-Z]/\
    \ && txt[-1] =~ /\\W/\n    return true\n  else\n    return false\n  end\nend",
  "  txt.split(\" \").last.match(/[a-z]/i) ? true : false\nend", "  if txt[-1] =~\
    \ /[a-zA-Z]/ && txt[-1] =~ /\\W/\n    return true\n  else\n    return false\n\
    \  end\nend", "  # if txt.split(\" \").last.chars.last.match(/[a-zA-Z]/)\n  #\
    \   true\n  # else\n  #   false\n  # end\n  txt.split(\" \").last.chars.last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\n\
    end", "  txt.split(\" \").last.match(/[a-z]/i) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/).to_s == txt.split(\"\
    \ \").last\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\n\
    end", "  if txt[-1] =~ /[a-zA-Z]/ && txt[-1] != txt[-2]\n    return true\n  else\n\
    \    return false\n  end\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true\
    \ : false\nend", "  txt[-1] =~ /[a-zA-Z]/ && txt[-2] =~ /\\s/\nend", "  txt.split(\"\
    \ \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\" \").last.match(/\\\
    w/).nil?\nend", "  if txt[-1] =~ /[a-zA-Z]/ && txt[-1] != \" \"\n    return true\n\
    \  else\n    return false\n  end\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  if txt[-1] =~ /[A-Za-z]/ && txt[-2] =~ /\\s/\n    true\n\
    \  else\n    false\n  end\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/).to_s\
    \ == txt.split(\" \").last ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\n\
    end", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\" \").last.match(/[a-z]/i)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/).nil? ? false\
    \ : true\nend", "  txt.split(\" \").last.chars.last.match(/[a-zA-Z]/) ? true :\
    \ false\nend", "  txt.split(\" \").last.match(/[a-z]/i) ? true : false\nend",
  "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-zA-Z]/) ? true : false\nend", "  return txt[-1].match(/[a-zA-Z]/)\
    \ && !txt[-1].match(/\\w/)\nend", "  return txt[-1].match(/[a-zA-Z]/) && !txt[-1].match(/\\\
    w/)\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", " \
    \ txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]$/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/\\w/) ? false : true\n\
    end", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  if txt[-1]\
    \ =~ /[a-zA-Z]/\n    return true\n  else\n    return false\n  end\nend", "  txt.split(\"\
    \ \").last.match(/[a-z]/i) ? true : false\nend", "  txt.split(\" \").last.match(/[a-z]/i)\
    \ ? true : false\nend", "  txt.split(\" \").last.chars.last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.chars.last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\n\
    end", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-z]/i) ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\n\
    end", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-zA-Z]/) ? true : false\nend", "  if txt[-1] =~ /[a-zA-Z]/\
    \ && txt[-1] =~ /\\W/\n    true\n  else\n    false\n  end\nend", "  if txt[-1]\
    \ =~ /[a-zA-Z]/ && txt[-1] != \" \"\n    return true\n  else\n    return false\n\
    \  end\nend", "  txt.split(\" \").last.match(/[a-z]/i) ? true : false\nend", " \
    \ txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\nend", "  txt.split(\"\
    \ \").last.match(/[a-z]/i) ? true : false\nend", "  txt.split(\" \").last.chars.last\
    \ =~ /[a-zA-Z]/ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.chars.last =~ /[a-zA-Z]/ ? true\
    \ : false\nend", "  if txt[-1] =~ /[a-zA-Z]/ && txt[-1] =~ /\\s/\n    true\n \
    \ else\n    false\n  end\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true\
    \ : false\nend", "  txt.split(\" \").last.match(/\\w/).nil?\nend", "  txt.split('').last.match(/[a-zA-Z]/)\
    \ && txt.split('').last.match(/[^\\w]/)\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/)\
    \ ? true : false\nend", "  txt.split(\" \").last.match(/[a-zA-Z]/) ? true : false\n\
    end", "  if txt[-1] =~ /[a-zA-Z]/ && txt[-1] =~ /\\s/\n    true\n  else\n    false\n\
    \  end\nend", "  if txt[-1] =~ /[a-zA-Z]/ && txt[-1] != \" \"\n    true\n  else\n\
    \    false\n  end\nend", "  if txt[-1] =~ /[a-zA-Z]/ && txt[-1] =~ /\\W/\n   \
    \ return true\n  else\n    return false\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
