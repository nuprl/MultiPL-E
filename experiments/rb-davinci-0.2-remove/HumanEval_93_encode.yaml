name: HumanEval_93_encode
language: rb
prompt: "# Write a function that takes a message, and encodes in such a \n# way that\
  \ it swaps case of all letters, replaces all vowels in \n# the message with the\
  \ letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\ndef encode(message)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
  \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"\
  ))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
  ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
  This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
  I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
completions: ["  # your code here\nend", "  alphabet = ('a'..'z').to_a\n  vowels =\
    \ %w(a e i o u)\n  encoded_message = ''\n  message.each_char do |char|\n    if\
    \ alphabet.include?(char)\n      if vowels.include?(char)\n        encoded_message\
    \ += alphabet[alphabet.index(char) + 2]\n      else\n        encoded_message +=\
    \ char\n      end\n    else\n      encoded_message += char\n    end\n  end\n \
    \ encoded_message\nend", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase.tr('aeiou', 'eioua')\nend", "  vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      if char == \"z\"\n        encoded_message\
    \ += \"b\"\n      elsif char == \"Z\"\n        encoded_message += \"B\"\n    \
    \  else\n        encoded_message += char.next.next\n      end\n    elsif char\
    \ == char.upcase\n      encoded_message += char.downcase\n    else\n      encoded_message\
    \ += char.upcase\n    end\n  end\n  encoded_message\nend", "  vowels = \"aeiou\"\
    \n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  # your code here\n  vowels\
    \ = \"aeiou\"\n  alphabet = (\"a\"..\"z\").to_a\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message << alphabet[(alphabet.index(char.downcase)\
    \ + 2) % 26]\n    elsif char == char.upcase\n      encoded_message << alphabet[(alphabet.index(char.downcase)\
    \ + 2) % 26].upcase\n    else\n      encoded_message << char\n    end\n  end\n\
    \  encoded_message\nend", "  alphabet = ('a'..'z').to_a\n  vowels = ['a', 'e',\
    \ 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += alphabet[alphabet.index(char.downcase)\
    \ + 2]\n    elsif char == char.upcase\n      encoded_message += alphabet[alphabet.index(char.downcase)\
    \ + 2].upcase\n    else\n      encoded_message += char\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char.upcase == char\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = %w(a e i o u)\n  letters = ('a'..'z').to_a\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = letters.index(char.downcase)\n      encoded_message += letters[index\
    \ + 2]\n    else\n      encoded_message += char\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  vowels = \"aeiou\"\
    \n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\
    \n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n     \
    \ encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "\tvowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n\tencoded_message = \"\"\n\tmessage.each_char do\
    \ |char|\n\t\tif vowels.include?(char.downcase)\n\t\t\tencoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n\t\telsif char == char.upcase\n\t\t\tencoded_message += char.downcase\n\
    \t\telse\n\t\t\tencoded_message += char.upcase\n\t\tend\n\tend\n\tencoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "    vowels = \"aeiou\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    encoded_message = \"\"\n    message.each_char do |char|\n        if vowels.include?(char.downcase)\n\
    \            index = vowels.index(char.downcase)\n            encoded_message\
    \ += vowels[(index + 2) % 5]\n        elsif alphabet.include?(char.downcase)\n\
    \            index = alphabet.index(char.downcase)\n            encoded_message\
    \ += alphabet[(index + 2) % 26]\n        else\n            encoded_message +=\
    \ char\n        end\n    end\n    encoded_message\nend", "  vowels = \"aeiou\"\
    \n  message.chars.map do |char|\n    if vowels.include?(char.downcase)\n     \
    \ index = vowels.index(char.downcase)\n      index += 2\n      index -= 5 if index\
    \ > 4\n      char = vowels[index].upcase if char == char.upcase\n      char =\
    \ vowels[index]\n    elsif char == char.upcase\n      char = char.downcase\n \
    \   else\n      char = char.upcase\n    end\n  end.join\nend", "  vowels = \"\
    aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  # your code here\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char.match(/[A-Z]/)\n      encoded_message += char.downcase\n    elsif char.match(/[a-z]/)\n\
    \      encoded_message += char.upcase\n    else\n      encoded_message += char\n\
    \    end\n  end\n  encoded_message\nend", "  alphabet = ('a'..'z').to_a\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = ''\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      if char == char.upcase\n\
    \        encoded_message += alphabet[(alphabet.index(char.downcase) + 2) % 26].upcase\n\
    \      else\n        encoded_message += alphabet[(alphabet.index(char) + 2) %\
    \ 26]\n      end\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += alphabet[(alphabet.index(char.downcase) + 2) % 26]\n\
    \    elsif char == char.upcase\n      encoded_message += alphabet[(alphabet.index(char.downcase)\
    \ + 2) % 26].upcase\n    else\n      encoded_message += char\n    end\n  end\n\
    \  encoded_message\nend", "  # your code here\nend", "  vowels = \"aeiou\"\n \
    \ encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  alphabet = (\"a\"..\"z\").to_a\n  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += alphabet[alphabet.index(char.downcase) + 2]\n    elsif\
    \ char == char.upcase\n      encoded_message += alphabet[alphabet.index(char.downcase)\
    \ + 2].upcase\n    else\n      encoded_message += char\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  # your code here\nend", "  # your code here\nend", "  # code here\nend", "  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "\t# your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  alphabet = (\"a\"..\"z\").to_a\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += alphabet[(alphabet.index(char.downcase) + 2) % 26]\n\
    \    elsif char == char.upcase\n      encoded_message += alphabet[(alphabet.index(char.downcase)\
    \ + 2) % 26].upcase\n    else\n      encoded_message += char\n    end\n  end\n\
    \  encoded_message\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # TODO\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # TODO: implement this method\nend", "  # your code here\nend", "  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  new_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      new_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      new_message += char.downcase\n\
    \    else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend",
  "  alphabet = ('a'..'z').to_a\n  vowels = %w(a e i o u)\n  new_message = ''\n  message.each_char\
    \ do |char|\n    if char == char.upcase\n      new_message += char.downcase\n\
    \    elsif char == char.downcase\n      new_message += char.upcase\n    else\n\
    \      new_message += char\n    end\n  end\n  new_message.each_char do |char|\n\
    \    if vowels.include?(char)\n      index = alphabet.index(char)\n      new_message[new_message.index(char)]\
    \ = alphabet[index + 2]\n    end\n  end\n  new_message\nend", "  vowels = \"aeiou\"\
    \n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n    if vowels.include?(char.downcase)\n\
    \      encoded_message[-1] = vowels[(vowels.index(char.downcase) + 2) % 5]\n \
    \   end\n  end\n  encoded_message\nend", "  vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = vowels.index(char.downcase)\n      index += 2\n      index -= 5\
    \ if index > 4\n      encoded_message += vowels[index].upcase if char == char.upcase\n\
    \      encoded_message += vowels[index] if char == char.downcase\n    else\n \
    \     encoded_message += char.swapcase\n    end\n  end\n  encoded_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.each_char.map do |char|\n    if char =~ /[aeiou]/i\n      char.next.next\n\
    \    else\n      char\n    end\n  end.join\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  # your code here\nend", " \
    \ message.chars.map do |char|\n    if char =~ /[a-z]/i\n      if char =~ /[aeiou]/i\n\
    \        char = char.next.next\n      else\n        char = char.next\n      end\n\
    \    end\n    char.upcase! if char =~ /[a-z]/\n    char\n  end.join\nend", " \
    \ vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  message.downcase.tr(\"aeiou\", \"eioua\")\n\
    end", "  vowels = \"aeiou\"\n  message.downcase.chars.map do |char|\n    if vowels.include?(char)\n\
    \      index = vowels.index(char)\n      if index == 4\n        vowels[0]\n  \
    \    else\n        vowels[index + 2]\n      end\n    else\n      char\n    end\n\
    \  end.join.upcase\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  # your code here\nend", "  message.chars.map do |char|\n    if char =~ /[aeiou]/i\n\
    \      char = char.next.next\n    else\n      char\n    end\n  end.join\nend",
  "  vowels = %w(a e i o u)\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (char.ord + 2).chr\n\
    \    elsif char.ord >= 65 && char.ord <= 90\n      encoded_message += (char.ord\
    \ + 32).chr\n    elsif char.ord >= 97 && char.ord <= 122\n      encoded_message\
    \ += (char.ord - 32).chr\n    else\n      encoded_message += char\n    end\n \
    \ end\n  encoded_message\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\
    \n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n     \
    \ encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5])\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  message.chars.map do |char|\n    if char.match(/[a-z]/i)\n\
    \      if char.match(/[aeiou]/i)\n        char = char.next.next\n      else\n\
    \        char = char.next\n      end\n    end\n    char.tr('a-z', 'A-Z')\n  end.join\n\
    end", "  # your code here\nend", "  # your code here\nend", "  message.downcase.tr('aeiou',\
    \ 'eioua')\nend", "  vowels = \"aeiou\"\n  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      new_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      new_message += char.downcase\n\
    \    else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend",
  "  # your code here\nend", "  # code goes here\nend", "  # your code here\nend",
  "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  alphabet = ('a'..'z').to_a\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  encoded_message\
    \ = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      if char == char.upcase\n        encoded_message += alphabet[(alphabet.index(char.downcase)\
    \ + 2) % 26].upcase\n      else\n        encoded_message += alphabet[(alphabet.index(char)\
    \ + 2) % 26]\n      end\n    elsif char == char.upcase\n      encoded_message\
    \ += char.downcase\n    else\n      encoded_message += char.upcase\n    end\n\
    \  end\n  encoded_message\nend", "  # your code here\nend", "  # your code here\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  message.downcase.tr('aeiou',\
    \ 'eioua')\nend", "  # your code here\nend", "  alphabet = ('a'..'z').to_a\n \
    \ vowels = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      index = alphabet.index(char.downcase)\n\
    \      if index + 2 > 25\n        encoded_message += alphabet[index + 2 - 26]\n\
    \      else\n        encoded_message += alphabet[index + 2]\n      end\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.chars.map do |char|\n    if char.match(/[a-z]/i)\n      if char.match(/[aeiou]/i)\n\
    \        char = char.next.next\n      else\n        char = char.next\n      end\n\
    \    end\n    char\n  end.join\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  alphabet = ('a'..'z').to_a\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  new_message\
    \ = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = alphabet.index(char.downcase)\n      new_message += alphabet[index\
    \ + 2]\n    elsif char == char.upcase\n      new_message += char.downcase\n  \
    \  else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend",
  "  # your code here\nend", "  message.downcase.tr('aeiou', 'eioau')\nend", "  message.downcase!\n\
    \  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char)\n      encoded_message += vowels[(vowels.index(char)\
    \ + 2) % 5]\n    else\n      encoded_message += char\n    end\n  end\n  encoded_message.upcase\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase.tr('aeiou', 'eioua')\nend", "  vowels = \"aeiou\"\n\
    \  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  alphabet = ('a'..'z').to_a\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = alphabet.index(char.downcase)\n      encoded_message += alphabet[index\
    \ + 2]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  message.downcase.tr('aeiou', 'eioua')\nend",
  "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  # your code here\nend", " \
    \ vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # TODO: implement this method\n  alphabet = ('a'..'z').to_a\n  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message << alphabet[alphabet.index(char.downcase)\
    \ + 2]\n    elsif char == char.upcase\n      encoded_message << alphabet[alphabet.index(char.downcase)\
    \ + 2].upcase\n    else\n      encoded_message << char\n    end\n  end\n  encoded_message\n\
    end", "  message.chars.map do |char|\n    if char.match(/[aeiou]/i)\n      char\
    \ = char.next.next\n    else\n      char\n    end\n  end.join\nend", "    # Write\
    \ your code here\n    vowels = \"aeiou\"\n    encoded_message = \"\"\n    message.each_char\
    \ do |char|\n        if vowels.include?(char.downcase)\n            encoded_message\
    \ += (char.ord + 2).chr\n        else\n            encoded_message += char\n \
    \       end\n    end\n    encoded_message\nend", "  message.chars.map do |char|\n\
    \    if char =~ /[aeiou]/i\n      char = char.ord + 2\n      char = char > 122\
    \ ? char - 26 : char\n      char = char > 90 ? char - 26 : char\n      char.chr\n\
    \    else\n      char\n    end\n  end.join\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase)\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  new_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      new_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      new_message += char.downcase\n\
    \    else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  message.downcase.tr('aeiou', 'eioua')\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    vowels = \"aeiou\"\n\
    \    encoded_message = \"\"\n    message.each_char do |char|\n        if alphabet.include?(char)\n\
    \            if char == char.upcase\n                encoded_message += alphabet[(alphabet.index(char.downcase)\
    \ + 2) % 26].upcase\n            else\n                encoded_message += alphabet[(alphabet.index(char)\
    \ + 2) % 26]\n            end\n        else\n            encoded_message += char\n\
    \        end\n    end\n    encoded_message\nend", "  alphabet = (\"a\"..\"z\"\
    ).to_a\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if alphabet.include?(char)\n      if vowels.include?(char)\n\
    \        encoded_message += alphabet[alphabet.index(char) + 2]\n      else\n \
    \       encoded_message += char\n      end\n    else\n      encoded_message +=\
    \ char\n    end\n  end\n  encoded_message\nend", "  # your code here\nend", " \
    \ vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  alphabet = (\"a\"..\"z\").to_a\n  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = alphabet.index(char.downcase)\n      if index + 2 > 25\n      \
    \  encoded_message += alphabet[index + 2 - 26]\n      else\n        encoded_message\
    \ += alphabet[index + 2]\n      end\n    elsif char == char.upcase\n      encoded_message\
    \ += char.downcase\n    else\n      encoded_message += char.upcase\n    end\n\
    \  end\n  encoded_message\nend", "  vowels = \"aeiou\"\n  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = vowels.index(char.downcase)\n      if index == 4\n        encoded_message\
    \ += vowels[0]\n      else\n        encoded_message += vowels[index + 1]\n   \
    \   end\n    elsif alphabet.include?(char.downcase)\n      index = alphabet.index(char.downcase)\n\
    \      if index == 25\n        encoded_message += alphabet[0]\n      else\n  \
    \      encoded_message += alphabet[index + 1]\n      end\n    else\n      encoded_message\
    \ += char\n    end\n  end\n  encoded_message\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.chars.map do |char|\n    if char.match(/[aeiou]/i)\n      char\
    \ = char.next.next\n    else\n      char\n    end\n  end.join\nend", "  # your\
    \ code here\nend", "  alphabet = ('a'..'z').to_a\n  vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n  encoded_message = ''\n  message.each_char do |char|\n    if alphabet.include?(char)\n\
    \      if vowels.include?(char)\n        encoded_message += alphabet[alphabet.index(char)\
    \ + 2]\n      else\n        encoded_message += char\n      end\n    else\n   \
    \   encoded_message += char\n    end\n  end\n  encoded_message\nend", "  message.split(\"\
    \").map do |char|\n    if char.match(/[a-z]/)\n      if char.match(/[aeiou]/)\n\
    \        char = char.next.next\n      else\n        char = char.next\n      end\n\
    \    else\n      char = char.next\n    end\n  end.join(\"\").tr(\"abcdefghijklmnopqrstuvwxyz\"\
    , \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5].upcase)\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  # your code here\n  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase!\n  vowels = \"aeiou\"\n  encoded_message = \"\"\n \
    \ message.each_char do |char|\n    if vowels.include?(char)\n      encoded_message\
    \ += vowels[(vowels.index(char) + 2) % 5]\n    else\n      encoded_message +=\
    \ char\n    end\n  end\n  encoded_message.upcase\nend", "  vowels = \"aeiou\"\n\
    \  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  message.downcase.tr('aeiou', 'eioua')\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = vowels.index(char.downcase)\n      index += 2\n      index -= 5\
    \ if index > 4\n      encoded_message += vowels[index].upcase\n    elsif char\
    \ == char.upcase\n      encoded_message += char.downcase\n    else\n      encoded_message\
    \ += char.upcase\n    end\n  end\n  encoded_message\nend", "\tmessage.downcase!\n\
    \tvowels = \"aeiou\"\n\tencoded_message = \"\"\n\tmessage.each_char do |char|\n\
    \t\tif vowels.include?(char)\n\t\t\tencoded_message += (vowels[(vowels.index(char)\
    \ + 2) % 5])\n\t\telse\n\t\t\tencoded_message += char\n\t\tend\n\tend\n\tencoded_message.swapcase!\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = vowels.index(char.downcase)\n      encoded_message += vowels[(index\
    \ + 2) % 5]\n    elsif alphabet.include?(char.downcase)\n      index = alphabet.index(char.downcase)\n\
    \      encoded_message += alphabet[(index + 2) % 26]\n    else\n      encoded_message\
    \ += char\n    end\n  end\n  encoded_message\nend", "  # code goes here\nend",
  "  # your code here\nend", "    vowels = \"aeiou\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    encoded_message = \"\"\n    message.each_char do |char|\n        if char\
    \ == char.upcase\n            encoded_message += char.downcase\n        else\n\
    \            encoded_message += char.upcase\n        end\n    end\n    encoded_message.each_char.with_index\
    \ do |char, i|\n        if vowels.include?(char)\n            encoded_message[i]\
    \ = alphabet[alphabet.index(char) + 2]\n        end\n    end\n    encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "\talphabet = (\"a\"..\"z\").to_a\n\tvowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n\tnew_message = \"\"\n\tmessage.each_char do |char|\n\t\tif alphabet.include?(char)\n\
    \t\t\tif char == char.upcase\n\t\t\t\tnew_message += alphabet[alphabet.index(char.downcase)\
    \ - 2].upcase\n\t\t\telse\n\t\t\t\tnew_message += alphabet[alphabet.index(char)\
    \ - 2]\n\t\t\tend\n\t\telse\n\t\t\tnew_message += char\n\t\tend\n\tend\n\tnew_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.split(\"\").map do |char|\n    if char.match(/[a-z]/)\n     \
    \ char = char.next\n      char = char.next if char.match(/[aeiou]/)\n    elsif\
    \ char.match(/[A-Z]/)\n      char = char.downcase\n      char = char.next\n  \
    \    char = char.next if char.match(/[aeiou]/)\n      char = char.upcase\n   \
    \ else\n      char\n    end\n  end.join(\"\")\nend", "  message.chars.map do |char|\n\
    \    if char.match(/[aeiou]/i)\n      char = char.next.next\n    else\n      char\n\
    \    end\n  end.join\nend", "  vowels = \"aeiou\"\n  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = alphabet.index(char.downcase)\n      encoded_message += alphabet[index\
    \ + 2]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  message.split(\"\").map do |letter|\n    if letter.match(/[a-z]/)\n      if letter.match(/[aeiou]/)\n\
    \        letter = letter.next.next\n      else\n        letter = letter.next\n\
    \      end\n    elsif letter.match(/[A-Z]/)\n      if letter.match(/[AEIOU]/)\n\
    \        letter = letter.next.next.upcase\n      else\n        letter = letter.next.upcase\n\
    \      end\n    else\n      letter\n    end\n  end.join(\"\")\nend", "  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += alphabet[(alphabet.index(char.downcase) + 2) % 26]\n\
    \    elsif char == char.upcase\n      encoded_message += alphabet[(alphabet.index(char.downcase)\
    \ + 2) % 26].upcase\n    else\n      encoded_message += char\n    end\n  end\n\
    \  encoded_message\nend", "  message.downcase.tr('aeiou', 'eioua')\nend", "  \
    \  vowels = \"aeiou\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message\
    \ = \"\"\n    message.each_char do |char|\n        if vowels.include?(char.downcase)\n\
    \            index = vowels.index(char.downcase)\n            encoded_message\
    \ += vowels[(index + 2) % 5]\n        elsif alphabet.include?(char.downcase)\n\
    \            index = alphabet.index(char.downcase)\n            encoded_message\
    \ += alphabet[(index + 2) % 26]\n        else\n            encoded_message +=\
    \ char\n        end\n    end\n    encoded_message\nend", "  message.downcase.tr(\"\
    aeiou\", \"eioua\")\nend", "  # your code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
