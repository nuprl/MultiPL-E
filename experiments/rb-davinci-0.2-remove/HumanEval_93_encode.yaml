name: HumanEval_93_encode
language: rb
prompt: "# Write a function that takes a message, and encodes in such a \n# way that\
  \ it swaps case of all letters, replaces all vowels in \n# the message with the\
  \ letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\ndef encode(message)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
  \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"\
  ))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
  ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
  This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
  I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
completions: ["  # your code here\nend", "  # your code here\nend", "  vowels = \"\
    aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.chars.map do |char|\n    if char.match(/[aeiou]/i)\n      char\
    \ = char.next.next\n    else\n      char\n    end\n  end.join\nend", "  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  new_message = \"\"\n  vowels = \"aeiou\"\n\
    \  message.each_char do |char|\n    if vowels.include?(char.downcase)\n      new_message\
    \ += (char.ord + 2).chr\n    elsif char == char.upcase\n      new_message += char.downcase\n\
    \    else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase.tr('aeiou', 'eioua')\nend", "  # your code here\nend",
  "  # your code here\nend", "  message.downcase!\n  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char)\n      index\
    \ = vowels.index(char)\n      if index == 4\n        encoded_message += vowels[0]\n\
    \      else\n        encoded_message += vowels[index + 2]\n      end\n    else\n\
    \      if char == char.upcase\n        encoded_message += char.downcase\n    \
    \  else\n        encoded_message += char.upcase\n      end\n    end\n  end\n \
    \ encoded_message\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  alphabet\
    \ = (\"a\"..\"z\").to_a\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      index = alphabet.index(char.downcase)\n\
    \      encoded_message += alphabet[index + 2]\n    elsif char == char.upcase\n\
    \      index = alphabet.index(char.downcase)\n      encoded_message += alphabet[index].upcase\n\
    \    else\n      index = alphabet.index(char)\n      encoded_message += alphabet[index]\n\
    \    end\n  end\n  encoded_message\nend", "  # your code here\nend", "  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.split(\"\").map do |letter|\n    if letter.match(/[aeiou]/)\n\
    \      letter = letter.next.next\n    elsif letter.match(/[AEIOU]/)\n      letter\
    \ = letter.next.next.upcase\n    else\n      letter\n    end\n  end.join\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase!\n  vowels = \"aeiou\"\n  encoded_message = \"\"\n \
    \ message.each_char do |char|\n    if vowels.include?(char)\n      encoded_message\
    \ += vowels[(vowels.index(char) + 2) % 5]\n    else\n      encoded_message +=\
    \ char\n    end\n  end\n  encoded_message.upcase\nend", "  vowels = \"aeiou\"\n\
    \  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.chars.map do |char|\n    if char.match(/[aeiou]/i)\n      char\
    \ = char.next.next\n    else\n      char\n    end\n  end.join\nend", "  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char.upcase == char\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  vowels = \"aeiou\"\n  message.chars.map do |char|\n    if vowels.include?(char.downcase)\n\
    \      vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif char == char.upcase\n\
    \      char.downcase\n    else\n      char.upcase\n    end\n  end.join\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase!\n  vowels = \"aeiou\"\n  encoded_message = \"\"\n \
    \ message.each_char do |char|\n    if vowels.include?(char)\n      encoded_message\
    \ += vowels[(vowels.index(char) + 2) % 5]\n    else\n      encoded_message +=\
    \ char\n    end\n  end\n  encoded_message.swapcase\nend", "    vowels = \"aeiou\"\
    \n    encoded_message = \"\"\n    message.each_char do |char|\n        if vowels.include?(char.downcase)\n\
    \            encoded_message += (char.ord + 2).chr\n        else\n           \
    \ encoded_message += char\n        end\n    end\n    encoded_message\nend", " \
    \ vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char.upcase == char\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\
    \n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n     \
    \ encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  message.downcase.tr('aeiou', 'eioua')\nend", "  # your code here\nend", "  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  message.chars.map do\
    \ |char|\n    if vowels.include?(char.downcase)\n      new_vowel = vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n      char == char.downcase ? new_vowel : new_vowel.upcase\n    else\n\
    \      char == char.downcase ? char.upcase : char.downcase\n    end\n  end.join\n\
    end", "  # your code here\nend", "  # your code here\nend", "  vowels = \"aeiou\"\
    \n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "\tvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\talphabet = (\"a\"..\"z\").to_a\n\
    \tencoded_message = \"\"\n\tmessage.each_char do |char|\n\t\tif vowels.include?(char)\n\
    \t\t\tencoded_message += alphabet[alphabet.index(char) + 2]\n\t\telsif char ==\
    \ \" \"\n\t\t\tencoded_message += \" \"\n\t\telsif char == char.upcase\n\t\t\t\
    encoded_message += char.downcase\n\t\telse\n\t\t\tencoded_message += char.upcase\n\
    \t\tend\n\tend\n\tencoded_message\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ alphabet = (\"a\"..\"z\").to_a\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += alphabet[(alphabet.index(char.downcase) + 2) % 26]\n\
    \    elsif char == char.upcase\n      encoded_message += alphabet[(alphabet.index(char.downcase)\
    \ + 2) % 26].upcase\n    else\n      encoded_message += char\n    end\n  end\n\
    \  encoded_message\nend", "  # your code here\nend", "  message.downcase.tr('aeiou',\
    \ 'eioua')\nend", "    vowels = \"aeiou\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    encoded_message = \"\"\n    message.each_char do |char|\n        if vowels.include?(char.downcase)\n\
    \            index = vowels.index(char.downcase)\n            if index == 4\n\
    \                encoded_message += vowels[0]\n            else\n            \
    \    encoded_message += vowels[index + 2]\n            end\n        elsif alphabet.include?(char.downcase)\n\
    \            index = alphabet.index(char.downcase)\n            if index == 25\n\
    \                encoded_message += alphabet[0]\n            else\n          \
    \      encoded_message += alphabet[index + 1]\n            end\n        else\n\
    \            encoded_message += char\n        end\n    end\n    encoded_message\n\
    end", "  message.downcase.tr('aeiou', 'eioua')\nend", "  # your code here\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase)\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  # your code here\nend", "  vowels = \"aeiou\"\
    \n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ # your code here\nend", "  vowels = \"aeiou\"\n  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      new_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      new_message += char.downcase\n\
    \    else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  new_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      new_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      new_message += char.downcase\n\
    \    else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend",
  "  vowels = \"aeiou\"\n  message.chars.map do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = vowels.index(char.downcase)\n      if index == 4\n        vowels[0]\n\
    \      else\n        vowels[index + 2]\n      end\n    else\n      char.swapcase\n\
    \    end\n  end.join\nend", "    vowels = \"aeiou\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    encoded_message = \"\"\n    message.each_char do |char|\n        if vowels.include?(char.downcase)\n\
    \            index = vowels.index(char.downcase)\n            encoded_message\
    \ += vowels[(index + 2) % 5]\n        elsif alphabet.include?(char.downcase)\n\
    \            index = alphabet.index(char.downcase)\n            encoded_message\
    \ += alphabet[(index + 2) % 26]\n        else\n            encoded_message +=\
    \ char\n        end\n    end\n    encoded_message\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  vowels = \"aeiou\"\
    \n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char.upcase == char\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = vowels.index(char.downcase)\n      encoded_message += vowels[(index\
    \ + 2) % 5]\n    elsif alphabet.include?(char.downcase)\n      index = alphabet.index(char.downcase)\n\
    \      encoded_message += alphabet[(index + 2) % 26]\n    else\n      encoded_message\
    \ += char\n    end\n  end\n  encoded_message\nend", "  # your code here\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  new_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      new_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      new_message += char.downcase\n\
    \    else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend",
  "  vowels = \"aeiou\"\n  new_message = \"\"\n  message.each_char do |char|\n   \
    \ if vowels.include?(char.downcase)\n      new_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      new_message += char.downcase\n\
    \    else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend",
  "  # your code here\nend", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += encode_vowel(char)\n    else\n      encoded_message\
    \ += encode_consonant(char)\n    end\n  end\n  encoded_message\nend", "  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  alphabet = (\"a\"..\"z\").to_a\n  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += alphabet[(alphabet.index(char.downcase) + 2) % 26]\n\
    \    elsif char == char.upcase\n      encoded_message += alphabet[(alphabet.index(char.downcase)\
    \ + 2) % 26].upcase\n    else\n      encoded_message += char\n    end\n  end\n\
    \  encoded_message\nend", "  vowels = 'aeiou'\n  encoded_message = ''\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase.tr('aeiou', 'egioua')\nend", "  alphabet = (\"a\"..\"\
    z\").to_a\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message =\
    \ \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += alphabet[alphabet.index(char.downcase) + 2]\n    elsif\
    \ char == char.upcase\n      encoded_message += alphabet[alphabet.index(char.downcase)\
    \ + 2].upcase\n    else\n      encoded_message += char\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      if char == \"z\" || char == \"Z\"\n        encoded_message += \"b\"\n \
    \     elsif char == \"y\" || char == \"Y\"\n        encoded_message += \"a\"\n\
    \      else\n        encoded_message += char.next.next\n      end\n    elsif char\
    \ == char.upcase\n      encoded_message += char.downcase\n    else\n      encoded_message\
    \ += char.upcase\n    end\n  end\n  encoded_message\nend", "  vowels = \"aeiou\"\
    \n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  message.split(\"\").map do |letter|\n    if letter.match(/[aeiou]/)\n      letter\
    \ = letter.next.next\n    elsif letter.match(/[AEIOU]/)\n      letter = letter.next.next.upcase\n\
    \    else\n      letter\n    end\n  end.join\nend", "  # your code here\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  encoded_message = \"\"\n  vowels = \"aeiou\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (char.ord\
    \ + 2).chr\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  vowels = \"aeiou\"\
    \n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  alphabet = (\"a\"..\"z\").to_a\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n  new_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      new_message += alphabet[alphabet.index(char.downcase) + 2]\n    elsif char\
    \ == char.upcase\n      new_message += alphabet[alphabet.index(char.downcase)\
    \ + 2].upcase\n    else\n      new_message += char\n    end\n  end\n  new_message\n\
    end", "  message.downcase.tr('aeiou', 'eioua')\nend", "  # your code here\nend",
  "  message.downcase!\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char)\n      encoded_message\
    \ += vowels[(vowels.index(char) + 2) % 5]\n    elsif char == \" \"\n      encoded_message\
    \ += \" \"\n    else\n      encoded_message += char.swapcase\n    end\n  end\n\
    \  encoded_message\nend", "  # your code here\nend", "  # your code here\nend",
  "  alphabet = ('a'..'z').to_a\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  encoded_message\
    \ = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = alphabet.index(char.downcase)\n      encoded_message += alphabet[index\
    \ + 2]\n    elsif char == char.upcase\n      index = alphabet.index(char.downcase)\n\
    \      encoded_message += alphabet[index].upcase\n    else\n      index = alphabet.index(char)\n\
    \      encoded_message += alphabet[index]\n    end\n  end\n  encoded_message\n\
    end", "  message.split(\"\").map do |char|\n    if char.match(/[aeiou]/)\n   \
    \   char = char.next.next\n    elsif char.match(/[AEIOU]/)\n      char = char.next.next.upcase\n\
    \    else\n      char\n    end\n  end.join(\"\")\nend", "  # your code here\n\
    end", "\tvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\talphabet = (\"a\"..\"\
    z\").to_a\n\tnew_message = \"\"\n\tmessage.each_char do |char|\n\t\tif vowels.include?(char)\n\
    \t\t\tnew_message += alphabet[alphabet.index(char) + 2]\n\t\telsif alphabet.include?(char)\n\
    \t\t\tnew_message += alphabet[alphabet.index(char) - 2]\n\t\telse\n\t\t\tnew_message\
    \ += char\n\t\tend\n\tend\n\tnew_message\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  alphabet = (\"a\"..\"\
    z\").to_a\n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = alphabet.index(char.downcase)\n      encoded_message += alphabet[index\
    \ + 2]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  # code here\nend", "  message.downcase.tr('aeiou', 'eioua')\nend", "  alphabet\
    \ = ('a'..'z').to_a\n  vowels = %w(a e i o u)\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      index = alphabet.index(char.downcase)\n\
    \      encoded_message += alphabet[index + 2]\n    elsif char == char.upcase\n\
    \      encoded_message += char.downcase\n    else\n      encoded_message += char.upcase\n\
    \    end\n  end\n  encoded_message\nend", "  message.downcase.tr('aeiou', 'eioua')\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase!\n  vowels = \"aeiou\"\n  encoded_message = \"\"\n \
    \ message.each_char do |char|\n    if vowels.include?(char)\n      encoded_message\
    \ += vowels[(vowels.index(char) + 2) % 5]\n    else\n      encoded_message +=\
    \ char\n    end\n  end\n  encoded_message.upcase\nend", "  alphabet = ('a'..'z').to_a\n\
    \  vowels = %w(a e i o u)\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message << alphabet[(alphabet.index(char.downcase)\
    \ + 2) % 26]\n    elsif char == char.upcase\n      encoded_message << alphabet[(alphabet.index(char.downcase)\
    \ + 2) % 26].upcase\n    else\n      encoded_message << char\n    end\n  end\n\
    \  encoded_message\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\
    \n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n     \
    \ encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = vowels.index(char.downcase)\n      if index == 4\n        encoded_message\
    \ += vowels[0]\n      else\n        encoded_message += vowels[index + 1]\n   \
    \   end\n    elsif alphabet.include?(char.downcase)\n      index = alphabet.index(char.downcase)\n\
    \      if index == 25\n        encoded_message += alphabet[0]\n      else\n  \
    \      encoded_message += alphabet[index + 1]\n      end\n    else\n      encoded_message\
    \ += char\n    end\n  end\n  encoded_message\nend", "  # your code here\nend",
  "  vowels = %w(a e i o u)\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (char.ord + 2).chr\n\
    \    elsif char.ord >= 65 && char.ord <= 90\n      encoded_message += (char.ord\
    \ + 32).chr\n    elsif char.ord >= 97 && char.ord <= 122\n      encoded_message\
    \ += (char.ord - 32).chr\n    else\n      encoded_message += char\n    end\n \
    \ end\n  encoded_message\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\
    \n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n     \
    \ encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  message.downcase.tr(\"\
    aeiou\", \"eioua\")\nend", "  # your code here\nend", "  vowels = \"aeiou\"\n\
    \  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase.tr('aeiou', 'eioua')\nend", "  vowels = \"aeiou\"\n\
    \  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      index = alphabet.index(char.downcase)\n\
    \      encoded_message += alphabet[index + 2]\n    elsif alphabet.include?(char.downcase)\n\
    \      index = alphabet.index(char.downcase)\n      encoded_message += alphabet[index\
    \ + 1]\n    else\n      encoded_message += char\n    end\n  end\n  encoded_message\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\
    \n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n     \
    \ encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ # your code here\nend", "  # your code here\nend", "  vowels = \"aeiou\"\n \
    \ encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  message.split(\"\").map do |letter|\n    if letter.match(/[aeiou]/)\n      letter\
    \ = letter.next.next\n    elsif letter.match(/[AEIOU]/)\n      letter = letter.next.next.upcase\n\
    \    else\n      letter\n    end\n  end.join\nend", "  vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      index = vowels.index(char.downcase)\n\
    \      index += 2\n      index -= 5 if index > 4\n      encoded_message += vowels[index].upcase\
    \ if char == char.upcase\n      encoded_message += vowels[index] if char == char.downcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  new_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      new_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      new_message += char.downcase\n\
    \    else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend",
  "  message.downcase.tr('a-z', 'c-za-b')\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \   vowels = \"aeiou\"\n    new_message = \"\"\n    message.each_char do |char|\n\
    \        if vowels.include?(char.downcase)\n            new_message += next_vowel(char)\n\
    \        elsif char == char.upcase\n            new_message += char.downcase\n\
    \        else\n            new_message += char.upcase\n        end\n    end\n\
    \    new_message\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\
    \n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n     \
    \ encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ message.downcase.tr('aeiou', 'eioua')\nend", "  vowels = 'aeiou'\n  encoded_message\
    \ = ''\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "    vowels = \"aeiou\"\n    new_message = \"\"\n    message.each_char do |char|\n\
    \        if vowels.include?(char.downcase)\n            new_message += (char.ord\
    \ + 2).chr\n        else\n            new_message += char\n        end\n    end\n\
    \    new_message.swapcase\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", " \
    \ alphabet = ('a'..'z').to_a\n  vowels = ['a', 'e', 'i', 'o', 'u']\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += alphabet[alphabet.index(char.downcase) + 2]\n    elsif\
    \ char == char.upcase\n      encoded_message += alphabet[alphabet.index(char.downcase)\
    \ + 2].upcase\n    else\n      encoded_message += char\n    end\n  end\n  encoded_message\n\
    end", "  message.chars.map do |char|\n    if char.match(/[a-z]/i)\n      if char.match(/[aeiou]/i)\n\
    \        char = char.next.next\n      else\n        char = char.next\n      end\n\
    \    end\n    char\n  end.join\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    elsif\
    \ char == char.upcase\n      encoded_message += char.downcase\n    else\n    \
    \  encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend", "\t\
    # your code here\n\tmessage.downcase!\n\tvowels = \"aeiou\"\n\tmessage.each_char.with_index\
    \ do |char, i|\n\t\tif vowels.include?(char)\n\t\t\tmessage[i] = vowels[(vowels.index(char)\
    \ + 2) % 5]\n\t\tend\n\tend\n\tmessage.swapcase!\nend", "  vowels = \"aeiou\"\n\
    \  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += alphabet[(alphabet.index(char.downcase)\
    \ + 2) % 26]\n    elsif char == char.upcase\n      encoded_message += alphabet[(alphabet.index(char.downcase)\
    \ + 2) % 26].upcase\n    else\n      encoded_message += char\n    end\n  end\n\
    \  encoded_message\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.chars.map do |char|\n    if char.match(/[aeiou]/i)\n      char\
    \ = char.next.next\n    else\n      char\n    end\n  end.join\nend", "  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  # your code here\nend", "  message.downcase.tr('aeiou',\
    \ 'eioua')\nend", "    alphabet = ('a'..'z').to_a\n    vowels = ['a', 'e', 'i',\
    \ 'o', 'u']\n    encoded_message = \"\"\n    message.each_char do |char|\n   \
    \     if alphabet.include?(char)\n            if vowels.include?(char)\n     \
    \           encoded_message += alphabet[alphabet.index(char) + 2]\n          \
    \  else\n                encoded_message += char\n            end\n        else\n\
    \            encoded_message += char\n        end\n    end\n    encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase)\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    elsif char == char.upcase\n      encoded_message += char.downcase\n    else\n\
    \      encoded_message += char.upcase\n    end\n  end\n  encoded_message\nend",
  "  # your code here\nend", "  # your code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
