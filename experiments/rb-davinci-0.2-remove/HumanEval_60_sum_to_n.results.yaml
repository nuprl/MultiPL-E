language: rb
name: HumanEval_60_sum_to_n
results:
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ipjy5pd

    Started

    .

    Finished in 0.000443633 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2254.12 tests/s, 11270.58 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ipjy5pd

    Started

    .

    Finished in 0.000443633 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2254.12 tests/s, 11270.58 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ipjy5pd

    Started

    .

    Finished in 0.000443633 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2254.12 tests/s, 11270.58 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ipjy5pd

    Started

    .

    Finished in 0.000443633 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2254.12 tests/s, 11270.58 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate\
    \ = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(6))\n    assert_equal(66, candidate.call(11))\n    assert_equal(465,\
    \ candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy9389tnp

    Started

    .

    Finished in 0.00029785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3357.39 tests/s, 16786.97 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate\
    \ = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(6))\n    assert_equal(66, candidate.call(11))\n    assert_equal(465,\
    \ candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy9389tnp

    Started

    .

    Finished in 0.00029785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3357.39 tests/s, 16786.97 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ipjy5pd

    Started

    .

    Finished in 0.000443633 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2254.12 tests/s, 11270.58 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ipjy5pd

    Started

    .

    Finished in 0.000443633 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2254.12 tests/s, 11270.58 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ipjy5pd

    Started

    .

    Finished in 0.000443633 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2254.12 tests/s, 11270.58 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ipjy5pd

    Started

    .

    Finished in 0.000443633 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2254.12 tests/s, 11270.58 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ipjy5pd

    Started

    .

    Finished in 0.000443633 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2254.12 tests/s, 11270.58 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ipjy5pd

    Started

    .

    Finished in 0.000443633 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2254.12 tests/s, 11270.58 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate\
    \ = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(6))\n    assert_equal(66, candidate.call(11))\n    assert_equal(465,\
    \ candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy9389tnp

    Started

    .

    Finished in 0.00029785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3357.39 tests/s, 16786.97 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  # Base case\n  if n == 1\n    return 1\n  else\n    # Recursive case\n    return\
    \ n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdlh2d2lc

    Started

    .

    Finished in 0.000396427 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2522.53 tests/s, 12612.66 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate\
    \ = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(6))\n    assert_equal(66, candidate.call(11))\n    assert_equal(465,\
    \ candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy9389tnp

    Started

    .

    Finished in 0.00029785 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3357.39 tests/s, 16786.97 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return n if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzz36kqyx

    Started

    .

    Finished in 0.000307815 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3248.70 tests/s, 16243.52 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ipjy5pd

    Started

    .

    Finished in 0.000443633 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2254.12 tests/s, 11270.58 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ipjy5pd

    Started

    .

    Finished in 0.000443633 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2254.12 tests/s, 11270.58 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  # sum is a variable that keeps track of the sum.\n  sum = 0\n  # i is a variable\
    \ that keeps track of the current number.\n  i = 1\n  # while i is less than or\
    \ equal to n, keep adding i to sum.\n  while i <= n\n    sum += i\n    i += 1\n\
    \  end\n  # return the sum.\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp_o3dlcfr

    Started

    .

    Finished in 0.000393234 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2543.02 tests/s, 12715.08 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ipjy5pd

    Started

    .

    Finished in 0.000443633 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2254.12 tests/s, 11270.58 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ipjy5pd

    Started

    .

    Finished in 0.000443633 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2254.12 tests/s, 11270.58 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ipjy5pd

    Started

    .

    Finished in 0.000443633 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2254.12 tests/s, 11270.58 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ipjy5pd

    Started

    .

    Finished in 0.000443633 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2254.12 tests/s, 11270.58 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ipjy5pd

    Started

    .

    Finished in 0.000443633 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2254.12 tests/s, 11270.58 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return nil if n < 1\n  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpxnjmfh4c

    Started

    .

    Finished in 0.000353134 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2831.79 tests/s, 14158.93 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  # sum is a variable that keeps track of the sum.\n  sum = 0\n  # i is a variable\
    \ that keeps track of the current number.\n  i = 1\n  # while i is less than or\
    \ equal to n, we add i to sum and increment i.\n  while i <= n\n    sum += i\n\
    \    i += 1\n  end\n  # return the sum.\n  return sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate\
    \ = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n    assert_equal(21,\
    \ candidate.call(6))\n    assert_equal(66, candidate.call(11))\n    assert_equal(465,\
    \ candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphqh15veh

    Started

    .

    Finished in 0.000338205 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2956.79 tests/s, 14783.93 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  if n == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5ipjy5pd

    Started

    .

    Finished in 0.000443633 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2254.12 tests/s, 11270.58 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\ndef sum_to_n(n)\n\
    \  return 1 if n == 1\n  n + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbqnx2kez

    Started

    .

    Finished in 0.000323437 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    3091.79 tests/s, 15458.96 assertions/s

    '
  stdout: ''
  timestamp: 1659793009
