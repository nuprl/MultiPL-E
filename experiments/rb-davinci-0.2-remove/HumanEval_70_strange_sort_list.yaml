name: HumanEval_70_strange_sort_list
language: rb
prompt: "# Given list of integers, return list in strange order.\n# Strange sorting,\
  \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
  \ then minimum and so on.\ndef strange_sort_list(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
  \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
  \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
  \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
  \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5,\
  \ 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7,\
  \ 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2,\
  \ 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n  end\n\
  end\n"
completions: ["  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  # your code here\nend", "  lst.sort!\n  i = 0\n  j = lst.length - 1\n\
    \  result = []\n  while i <= j\n    result << lst[i]\n    result << lst[j]\n \
    \   i += 1\n    j -= 1\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  sorted = []\n  lst.sort!\n  while lst.length > 0\n    sorted << lst.shift\n\
    \    sorted << lst.pop\n  end\n  sorted\nend", "  lst.sort!\n  i = 0\n  while\
    \ i < lst.length\n    lst.insert(i, lst.pop)\n    i += 2\n  end\n  lst\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort!\n  result =\
    \ []\n  while lst.length > 0\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend", "  lst.sort!\n  i = 0\n  j = lst.length - 1\n  result\
    \ = []\n  while i <= j\n    result << lst[i]\n    result << lst[j] if i != j\n\
    \    i += 1\n    j -= 1\n  end\n  result\nend", "  lst.sort!\n  result = []\n\
    \  i = 0\n  while lst.length > 0\n    if i % 2 == 0\n      result << lst.shift\n\
    \    else\n      result << lst.pop\n    end\n    i += 1\n  end\n  result\nend",
  "  sorted = []\n  lst = lst.sort\n  while lst.length > 0\n    sorted << lst.shift\n\
    \    sorted << lst.pop\n  end\n  sorted\nend", "  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort!\n  i = 0\n  j = lst.length - 1\n  new_lst = []\n  while i <\
    \ j\n    new_lst << lst[i]\n    new_lst << lst[j]\n    i += 1\n    j -= 1\n  end\n\
    \  new_lst << lst[i] if i == j\n  new_lst\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort!\n  result\
    \ = []\n  while lst.length > 0\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend", "  lst.sort!\n  i = 0\n  j = lst.length - 1\n  result\
    \ = []\n  while i <= j\n    result << lst[i]\n    result << lst[j]\n    i += 1\n\
    \    j -= 1\n  end\n  result\nend", "  lst.sort!\n  result = []\n  while lst.length\
    \ > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort!\n  lst.map.with_index\
    \ { |_, i| i.even? ? lst.shift : lst.pop }\nend", "  lst.sort!\n  result = []\n\
    \  while lst.length > 0\n    result << lst.shift\n    result << lst.pop\n  end\n\
    \  result\nend", "  lst.sort_by.with_index { |x, i| i.even? ? x : -x }\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort!\n  result =\
    \ []\n  while lst.length > 0\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend", "  lst.sort!\n  result = []\n  while lst.length > 0\n\
    \    result << lst.shift\n    result << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  result = []\n  lst.sort!\n  while lst.length > 0\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  lst.sort!\n  i = 0\n  j = lst.length\
    \ - 1\n  result = []\n  while i <= j\n    result << lst[i]\n    result << lst[j]\n\
    \    i += 1\n    j -= 1\n  end\n  result\nend", "  sorted = []\n  until lst.empty?\n\
    \    sorted << lst.min\n    lst.delete(lst.min)\n    sorted << lst.max\n    lst.delete(lst.max)\n\
    \  end\n  sorted\nend", "  # TODO: implement strange_sort_list\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  result = []\n  lst.sort!\n \
    \ while lst.length > 0\n    result << lst.shift\n    result << lst.pop\n  end\n\
    \  result\nend", "  lst.sort!\n  result = []\n  until lst.empty?\n    result <<\
    \ lst.shift\n    result << lst.pop\n  end\n  result\nend", "  lst.sort!\n  result\
    \ = []\n  while lst.length > 0\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend", "  lst.sort!\n  i = 0\n  while i < lst.length\n    if\
    \ i.even?\n      lst.insert(i, lst.pop)\n    end\n    i += 1\n  end\n  lst\nend",
  "  result = []\n  lst.sort!\n  while lst.length > 0\n    result << lst.shift\n \
    \   result << lst.pop\n  end\n  result\nend", "  # your code here\n  lst.sort!\n\
    \  i = 0\n  j = lst.length - 1\n  new_lst = []\n  while i <= j\n    new_lst <<\
    \ lst[i]\n    new_lst << lst[j]\n    i += 1\n    j -= 1\n  end\n  new_lst\nend",
  "  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n \
    \   result << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort!\n \
    \ result = []\n  while lst.length > 0\n    result << lst.shift\n    result <<\
    \ lst.pop\n  end\n  result\nend", "  lst.sort!\n  new_lst = []\n  while lst.length\
    \ > 0\n    new_lst << lst.shift\n    new_lst << lst.pop\n  end\n  new_lst\nend",
  "  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n \
    \   result << lst.pop\n  end\n  result\nend", "  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  result = []\n  lst.sort!\n  while lst.length > 0\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  # your code here\n  lst.sort!\n\
    \  result = []\n  while lst.length > 0\n    result << lst.shift\n    result <<\
    \ lst.pop\n  end\n  result\nend", "  result = []\n  while lst.length > 0\n   \
    \ result << lst.min\n    lst.delete(lst.min)\n    result << lst.max\n    lst.delete(lst.max)\n\
    \  end\n  result\nend", "  # Your code here\nend", "  lst.sort!\n  result = []\n\
    \  while lst.length > 0\n    result << lst.shift\n    result << lst.pop\n  end\n\
    \  result\nend", "  lst.sort!\n  i = 0\n  while i < lst.length\n    lst.insert(i,\
    \ lst.pop)\n    i += 2\n  end\n  lst\nend", "  lst.sort!\n  result = []\n  while\
    \ lst.length > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result\n\
    end", "  lst.sort!\n  i = 0\n  j = lst.length - 1\n  new_lst = []\n  while i <\
    \ j\n    new_lst << lst[i]\n    new_lst << lst[j]\n    i += 1\n    j -= 1\n  end\n\
    \  new_lst << lst[i] if i == j\n  new_lst\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  result = []\n  lst = lst.sort\n  while lst.length > 0\n    result <<\
    \ lst.shift\n    result << lst.pop\n  end\n  result\nend", "  lst.sort!\n  lst.map.with_index\
    \ do |_, i|\n    if i.even?\n      lst.shift\n    else\n      lst.pop\n    end\n\
    \  end\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  # sort\
    \ list\n  sorted_lst = lst.sort\n  # create new list\n  new_lst = []\n  # loop\
    \ through sorted list\n  sorted_lst.each_with_index do |num, idx|\n    # if index\
    \ is even, add to beginning of new list\n    if idx.even?\n      new_lst.unshift(num)\n\
    \    # if index is odd, add to end of new list\n    else\n      new_lst.push(num)\n\
    \    end\n  end\n  # return new list\n  new_lst\nend", "  lst.sort!\n  i = 0\n\
    \  while i < lst.length\n    lst.insert(i, lst.pop)\n    i += 2\n  end\n  lst\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  sorted = []\n  while lst.length > 0\n    sorted << lst.min\n    lst.delete(lst.min)\n\
    \    sorted << lst.max\n    lst.delete(lst.max)\n  end\n  sorted\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  lst.sort!\n  new_lst = []\n\
    \  while lst.length > 0\n    new_lst << lst.shift\n    new_lst << lst.pop\n  end\n\
    \  new_lst\nend", "  lst.sort!\n  i = 0\n  j = lst.length - 1\n  new_lst = []\n\
    \  while i <= j\n    new_lst << lst[i]\n    new_lst << lst[j]\n    i += 1\n  \
    \  j -= 1\n  end\n  new_lst\nend", "  lst.sort!\n  result = []\n  while lst.length\
    \ > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result\nend",
  "  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n \
    \   result << lst.pop\n  end\n  result\nend", "  lst.sort!\n  result = []\n  while\
    \ lst.length > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  sorted = []\n\
    \  while lst.length > 0\n    sorted << lst.min\n    lst.delete(lst.min)\n    sorted\
    \ << lst.max\n    lst.delete(lst.max)\n  end\n  sorted\nend", "  result = []\n\
    \  lst.sort!\n  while lst.length > 0\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend", "  result = []\n  lst.sort!\n  while lst.length > 0\n\
    \    result << lst.shift\n    result << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort!\n  new_lst = []\n  while lst.length > 0\n    new_lst << lst.shift\n\
    \    new_lst << lst.pop\n  end\n  new_lst\nend", "  lst.sort!\n  result = []\n\
    \  while lst.length > 0\n    result << lst.shift\n    result << lst.pop\n  end\n\
    \  result\nend", "  lst.sort!\n  result = []\n  while lst.size > 0\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result\nend", "  lst.sort!\n \
    \ result = []\n  i = 0\n  while lst.length > 0\n    result << lst.delete_at(i)\n\
    \    i = lst.length - 1 - i\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  # TODO: implement strange_sort_list\n  lst.sort!\n  i = 0\n  while i\
    \ < lst.length\n    if i.even?\n      lst[i] = lst[i]\n    else\n      lst[i]\
    \ = lst[-i]\n    end\n    i += 1\n  end\n  lst\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  result = []\n  lst = lst.sort\n  while lst.length > 0\n    result <<\
    \ lst.shift\n    result << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  result = []\n  lst.sort!\n  while lst.length > 0\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort!\n  i = 0\n  j = lst.length - 1\n  result = []\n  while i <=\
    \ j\n    result << lst[i]\n    result << lst[j]\n    i += 1\n    j -= 1\n  end\n\
    \  result\nend", "  sorted = []\n  lst.sort!\n  while lst.length > 0\n    sorted\
    \ << lst.shift\n    sorted << lst.pop\n  end\n  sorted\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  # TODO: implement\
    \ strange_sort_list\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  result = []\n\
    \  lst.sort!\n  while lst.length > 0\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend", "  lst.sort!\n  result = []\n  while lst.length > 0\n\
    \    result << lst.shift\n    result << lst.pop\n  end\n  result\nend", "  # sort\
    \ the list\n  lst.sort!\n  # create a new list\n  new_list = []\n  # create a\
    \ loop that will run until the list is empty\n  until lst.empty?\n    # add the\
    \ first value of the list to the new list\n    new_list << lst.shift\n    # add\
    \ the last value of the list to the new list\n    new_list << lst.pop\n  end\n\
    \  # return the new list\n  new_list\nend", "  # your code here\nend", "  sorted\
    \ = []\n  lst.sort!\n  while lst.length > 0\n    sorted << lst.shift\n    sorted\
    \ << lst.pop\n  end\n  sorted\nend", "  lst.sort!\n  result = []\n  while lst.size\
    \ > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result\nend",
  "  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n \
    \   result << lst.pop\n  end\n  result\nend", "  lst.sort!\n  i = 0\n  j = lst.length\
    \ - 1\n  result = []\n  while i <= j\n    result << lst[i]\n    result << lst[j]\n\
    \    i += 1\n    j -= 1\n  end\n  result\nend", "  lst.sort!\n  i = 0\n  while\
    \ i < lst.length\n    lst.insert(i, lst.pop)\n    i += 2\n  end\n  lst\nend",
  "  # sort the list\n  # create a new list\n  # iterate through the list\n  # add\
    \ the first and last element to the new list\n  # remove the first and last element\
    \ from the list\n  # repeat until the list is empty\n  # return the new list\n\
    \  sorted_list = lst.sort\n  new_list = []\n  until sorted_list.empty?\n    new_list\
    \ << sorted_list.shift\n    new_list << sorted_list.pop\n  end\n  new_list\nend",
  "  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n \
    \   result << lst.pop\n  end\n  result\nend", "  sorted = []\n  lst = lst.sort\n\
    \  while lst.length > 0\n    sorted << lst.shift\n    sorted << lst.pop\n  end\n\
    \  sorted\nend", "  result = []\n  lst = lst.sort\n  while lst.length > 0\n  \
    \  result << lst.shift\n    result << lst.pop\n  end\n  result\nend", "  lst.sort!\n\
    \  result = []\n  while lst.length > 0\n    result << lst.shift\n    result <<\
    \ lst.pop\n  end\n  result\nend", "  lst.sort!\n  odd_lst = []\n  even_lst = []\n\
    \  lst.each_with_index do |num, index|\n    if index.even?\n      even_lst <<\
    \ num\n    else\n      odd_lst << num\n    end\n  end\n  odd_lst.reverse!\n  even_lst\
    \ + odd_lst\nend", "  lst.sort!\n  (lst.length / 2).times do |i|\n    lst.insert(i\
    \ * 2 + 1, lst.pop)\n  end\n  lst\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort!\n  i = 0\n  while i < lst.length\n    lst.insert(i, lst.pop)\n\
    \    i += 2\n  end\n  lst\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  sorted = []\n  lst.sort!\n  while lst.length > 0\n    sorted << lst.shift\n\
    \    sorted << lst.pop\n  end\n  sorted\nend", "  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort!\n \
    \ result = []\n  while lst.length > 0\n    result << lst.shift\n    result <<\
    \ lst.pop\n  end\n  result\nend", "  lst.sort!\n  result = []\n  while lst.length\
    \ > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result\nend",
  "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.reverse.each_slice(2).to_a.flatten.reverse\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort!\n \
    \ new_lst = []\n  while lst.length > 0\n    new_lst << lst.shift\n    new_lst\
    \ << lst.pop\n  end\n  new_lst\nend", "  lst.sort!\n  result = []\n  while lst.length\
    \ > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result\nend",
  "  lst.sort!\n  i = 0\n  while i < lst.length\n    lst.insert(i, lst.pop)\n    i\
    \ += 2\n  end\n  lst\nend", "  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  # Your code here\nend", "  lst.sort!\n\
    \  i = 0\n  j = lst.length - 1\n  result = []\n  while i <= j\n    result << lst[i]\n\
    \    result << lst[j] if i != j\n    i += 1\n    j -= 1\n  end\n  result\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  # Your code here\nend",
  "  lst.sort!\n  i = 0\n  while i < lst.length\n    if i.even?\n      lst.insert(i,\
    \ lst.shift)\n    else\n      lst.insert(i, lst.pop)\n    end\n    i += 1\n  end\n\
    \  lst\nend", "  # TODO: Implement strange sort list\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  lst.sort!\n  i = 0\n  j = lst.length\
    \ - 1\n  result = []\n  while i <= j\n    result << lst[i]\n    result << lst[j]\
    \ if i != j\n    i += 1\n    j -= 1\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort!\n \
    \ result = []\n  while lst.length > 0\n    result << lst.shift\n    result <<\
    \ lst.pop\n  end\n  result\nend", "  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort!\n  new_lst = []\n  while lst.length > 0\n    new_lst << lst.shift\n\
    \    new_lst << lst.pop\n  end\n  new_lst\nend", "  result = []\n  lst.sort!\n\
    \  while lst.length > 0\n    result << lst.shift\n    result << lst.pop\n  end\n\
    \  result\nend", "  result = []\n  lst.sort!\n  while lst.length > 0\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  lst.sort!\n  i = 0\n  j = lst.length\
    \ - 1\n  new_lst = []\n  while i <= j\n    new_lst << lst[i]\n    new_lst << lst[j]\n\
    \    i += 1\n    j -= 1\n  end\n  new_lst\nend", "  # sort the list\n  sorted_list\
    \ = lst.sort\n  # create a new list\n  new_list = []\n  # create a loop to iterate\
    \ through the list\n  while sorted_list.length > 0\n    # push the first element\
    \ to the new list\n    new_list << sorted_list.shift\n    # push the last element\
    \ to the new list\n    new_list << sorted_list.pop\n  end\n  # return the new\
    \ list\n  new_list\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\nend",
  "  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n \
    \   result << lst.pop\n  end\n  result\nend", "  lst.sort!.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort!\n  result = []\n  while lst.size > 0\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  sorted = []\n  while lst.length\
    \ > 0\n    sorted << lst.min\n    lst.delete(lst.min)\n    sorted << lst.max\n\
    \    lst.delete(lst.max)\n  end\n  sorted\nend", "  lst.sort!\n  result = []\n\
    \  until lst.empty?\n    result << lst.shift\n    result << lst.pop\n  end\n \
    \ result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort!\n\
    \  result = []\n  while lst.length > 0\n    result << lst.shift\n    result <<\
    \ lst.pop\n  end\n  result\nend", "  lst.sort!\n  result = []\n  while lst.size\
    \ > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result\nend",
  "  lst.sort!\n  i = 0\n  j = lst.length - 1\n  new_lst = []\n  while i <= j\n  \
    \  new_lst << lst[i]\n    new_lst << lst[j]\n    i += 1\n    j -= 1\n  end\n \
    \ new_lst\nend", "  lst.sort!\n  i = 0\n  while i < lst.length\n    lst.insert(i,\
    \ lst.pop)\n    i += 2\n  end\n  lst\nend", "  lst.sort!\n  result = []\n  while\
    \ lst.length > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result\n\
    end", "  lst.sort!\n  i = 0\n  j = lst.length - 1\n  result = []\n  while i <=\
    \ j\n    result << lst[i]\n    result << lst[j] if i != j\n    i += 1\n    j -=\
    \ 1\n  end\n  result\nend", "  # sort the list\n  lst.sort!\n  # create a new\
    \ list\n  new_list = []\n  # loop through the list\n  while lst.length > 0\n \
    \   # add the first element to the new list\n    new_list << lst.shift\n    #\
    \ add the last element to the new list\n    new_list << lst.pop\n  end\n  # return\
    \ the new list\n  new_list\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  lst.sort!\n  result = []\n \
    \ while lst.length > 0\n    result << lst.shift\n    result << lst.pop\n  end\n\
    \  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  sorted = []\n  lst.sort!\n \
    \ while lst.length > 0\n    sorted << lst.shift\n    sorted << lst.pop\n  end\n\
    \  sorted\nend", "  # Your code here\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  lst.sort!\n  result = []\n \
    \ while lst.length > 0\n    result << lst.shift\n    result << lst.pop\n  end\n\
    \  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  sorted = []\n  lst.sort!\n  until lst.empty?\n    sorted << lst.shift\n\
    \    sorted << lst.pop\n  end\n  sorted\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort!\n  i = 0\n  j = lst.length - 1\n  res = []\n  while i <= j\n\
    \    res << lst[i]\n    res << lst[j]\n    i += 1\n    j -= 1\n  end\n  res\n\
    end", "  sorted = []\n  lst = lst.sort\n  while lst.length > 0\n    sorted <<\
    \ lst.shift\n    sorted << lst.pop\n  end\n  sorted\nend", "  lst.sort!\n  result\
    \ = []\n  while lst.length > 0\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend", "  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort!\n  (lst.length / 2).times do |i|\n    lst.insert(i * 2 + 1,\
    \ lst.pop)\n  end\n  lst\nend", "  lst.sort!\n  i = 0\n  while i < lst.length\n\
    \    if i.even?\n      lst.insert(i, lst.pop)\n    end\n    i += 1\n  end\n  lst\n\
    end", "  lst.sort!\n  i = 0\n  while i < lst.length\n    lst.insert(i, lst.pop)\n\
    \    i += 2\n  end\n  lst\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  # your code here\n\
    end", "  lst.sort!\n  i = 0\n  while i < lst.length\n    lst.insert(i, lst.pop)\n\
    \    i += 2\n  end\n  lst\nend", "  lst.sort!\n  i = 0\n  new_lst = []\n  while\
    \ lst.length > 0\n    new_lst << lst.shift\n    new_lst << lst.pop\n  end\n  new_lst\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort!\n \
    \ lst.each_slice(2).to_a.transpose.flatten\nend", "  # TODO: implement strange_sort_list\n\
    \  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
