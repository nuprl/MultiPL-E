name: HumanEval_70_strange_sort_list
language: rb
prompt: "# Given list of integers, return list in strange order.\n# Strange sorting,\
  \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
  \ then minimum and so on.\n# Examples:\ndef strange_sort_list(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
  \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
  \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
  \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
  \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5,\
  \ 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7,\
  \ 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2,\
  \ 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n  end\n\
  end\n"
completions: ["  # 1. [1, 2, 3, 4, 5] => [1, 5, 2, 4, 3]\n  # 2. [5, 4, 3, 2, 1] =>\
    \ [1, 5, 2, 4, 3]\n  # 3. [1, 2, 3, 4, 5, 6] => [1, 6, 2, 5, 3, 4]\n  # 4. [1,\
    \ 2, 3, 4, 5, 6, 7] => [1, 7, 2, 6, 3, 5, 4]\n  # 5. [1, 2, 3, 4, 5, 6, 7, 8]\
    \ => [1, 8, 2, 7, 3, 6, 4, 5]\n  # 6. [1, 2, 3, 4, 5, 6, 7, 8, 9] => [1, 9, 2,\
    \ 8, 3, 7, 4, 6, 5]\n  # 7. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] => [1, 10, 2, 9, 3,\
    \ 8, 4, 7, 5, 6]\n  # 8. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] => [1, 11, 2, 10,\
    \ 3, 9, 4, 8, 5, 7, 6]\n  # 9. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] => [1,\
    \ 12, 2, 11, 3, 10, 4, 9, 5, 8, 6, 7]\n  # 10. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13] => [1, 13, 2, 12, 3, 11, 4, 10, 5, 9, 6, 8, 7]\n  # 11. [1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] => [1, 14, 2, 13, 3, 12, 4, 11, 5, 10,\
    \ 6, 9, 7, 8]\n  # 12. [1, 2, 3, 4, 5, 6, 7, 8, 9,", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  sorted\
    \ = []\n  while lst.length > 0\n    sorted << lst.min\n    lst.delete(lst.min)\n\
    \    sorted << lst.max\n    lst.delete(lst.max)\n  end\n  sorted\nend", "  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort[0..-2].sort.reverse + [lst.sort.last]\nend", "  # sort list\n\
    \  sorted_list = lst.sort\n  # create new list\n  new_list = []\n  # loop through\
    \ sorted list\n  while sorted_list.length > 0\n    # add first element to new\
    \ list\n    new_list << sorted_list.shift\n    # add last element to new list\n\
    \    new_list << sorted_list.pop\n  end\n  # return new list\n  new_list\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.reverse.each_slice(2).to_a.flatten.reverse\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  result = []\n  sorted = lst.sort\n  while sorted.length > 0\n    result\
    \ << sorted.shift\n    result << sorted.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort_by.with_index\
    \ { |_, i| i.even? ? lst.min : lst.max }\nend", "  sorted = []\n  while lst.length\
    \ > 0\n    sorted << lst.min\n    lst.delete(lst.min)\n    sorted << lst.max\n\
    \    lst.delete(lst.max)\n  end\n  sorted\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  result\
    \ = []\n  lst.sort!\n  while lst.length > 0\n    result << lst.shift\n    result\
    \ << lst.pop\n  end\n  result\nend", "  lst.sort.reverse.each_slice(2).to_a.flatten.reverse\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.reverse.each_slice(2).to_a.flatten.reverse\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  sorted\
    \ = []\n  lst.each do |num|\n    if sorted.empty?\n      sorted << num\n    elsif\
    \ num > sorted[-1]\n      sorted << num\n    elsif num < sorted[0]\n      sorted.unshift(num)\n\
    \    else\n      sorted.each_with_index do |n, i|\n        if num > n && num <\
    \ sorted[i+1]\n          sorted.insert(i+1, num)\n        end\n      end\n   \
    \ end\n  end\n  sorted\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort!\n\
    \  lst.each_with_index.map do |_, i|\n    if i.even?\n      lst.shift\n    else\n\
    \      lst.pop\n    end\n  end\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort!\n  lst.map.with_index do |num, idx|\n    idx.even? ? lst.shift\
    \ : lst.pop\n  end\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort!\n  lst.map.with_index do |_, i|\n    if i.even?\n      lst.shift\n\
    \    else\n      lst.pop\n    end\n  end\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.reverse.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort!\n  lst.map.with_index do |x, i|\n    if i.even?\n      lst.shift\n\
    \    else\n      lst.pop\n    end\n  end\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.reverse.each_slice(2).to_a.flatten.reverse\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).flat_map\
    \ { |a, b| [a, b].compact }.reverse\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  sorted = []\n \
    \ lst.sort!\n  while lst.length > 0\n    sorted << lst.shift\n    sorted << lst.pop\n\
    \  end\n  sorted\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten.compact\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  # lst.sort.each_slice(2).to_a.flatten\n  # lst.sort.each_slice(2).to_a.reverse.flatten\n\
    \  lst.sort.each_slice(2).to_a.reverse.flatten.reverse\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.map.with_index\
    \ { |_, i| i.even? ? lst.min : lst.max }\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort!\n\
    \  new_lst = []\n  while lst.length > 0\n    new_lst << lst.shift\n    new_lst\
    \ << lst.pop\n  end\n  new_lst\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  sorted = []\n  until lst.empty?\n    sorted << lst.min\n    lst.delete(lst.min)\n\
    \    sorted << lst.max\n    lst.delete(lst.max)\n  end\n  sorted\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort!\n\
    \  i = 0\n  while i < lst.length\n    lst.insert(i, lst.pop)\n    i += 2\n  end\n\
    \  lst\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend",
  "  lst.sort.reverse.each_slice(2).to_a.flatten.reverse\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.map.with_index { |_, i| i.even? ? lst.min : lst.max }\nend",
  "  lst.sort_by.with_index { |_, i| i.even? ? lst.min : lst.max }\nend", "  lst.sort!\n\
    \  i = 0\n  while i < lst.length\n    if i.even?\n      lst.insert(i, lst.pop)\n\
    \    end\n    i += 1\n  end\n  lst\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort!\n  i = 0\n  while i < lst.length\n    lst.insert(i, lst.pop)\n\
    \    i += 2\n  end\n  lst\nend", "  # lst.sort.each_slice(2).to_a.flatten.reverse\n\
    \  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.flatten.reverse\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  # lst.sort.each_slice(2).to_a.flatten\n  # lst.sort.each_slice(2).to_a.reverse.flatten\n\
    \  lst.sort.each_slice(2).to_a.reverse.flatten.reverse\nend", "  # sort the list\n\
    \  # create a new list\n  # add the first item to the new list\n  # add the last\
    \ item to the new list\n  # add the second item to the new list\n  # add the second\
    \ to last item to the new list\n  # repeat until the new list is the same length\
    \ as the old list\n  new_list = []\n  lst.sort!\n  while new_list.length < lst.length\n\
    \    new_list << lst.shift\n    new_list << lst.pop\n  end\n  new_list\nend",
  "  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.partition.with_index { |_, i| i.even? }.flatten\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.partition.with_index\
    \ { |_, i| i.even? }.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  result = []\n  lst = lst.sort\n  while lst.length > 0\n    result <<\
    \ lst.shift\n    result << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort!\n  lst.map.with_index do |x, i|\n    if i.even?\n      lst.shift\n\
    \    else\n      lst.pop\n    end\n  end\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  result\
    \ = []\n  lst.sort!\n  while lst.length > 0\n    result << lst.shift\n    result\
    \ << lst.pop\n  end\n  result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
