name: HumanEval_65_circular_shift
language: rb
prompt: "# Circular shift the digits of the integer x, shift the digits right by shift\n\
  # and return the result as a string.\n# If shift > number of digits, return digits\
  \ reversed.\ndef circular_shift(x, shift)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_circular_shift\n\
  \    candidate = method(:circular_shift)\n    assert_equal(\"001\", candidate.call(100,\
  \ 2))\n    assert_equal(\"12\", candidate.call(12, 2))\n    assert_equal(\"79\"\
  , candidate.call(97, 8))\n    assert_equal(\"21\", candidate.call(12, 1))\n    assert_equal(\"\
  11\", candidate.call(11, 101))\n  end\nend\n"
completions: ["  if shift > x.to_s.length\n    return x.to_s.reverse\n  end\n  x.to_s.split('').rotate(shift).join('')\n\
    end", "  x = x.to_s\n  shift = shift.to_i\n  if shift > x.length\n    x.reverse\n\
    \  else\n    x[-shift..-1] + x[0..-shift-1]\n  end\nend", "  digits = x.to_s.split('')\n\
    \  shift.times do\n    digits.unshift(digits.pop)\n  end\n  digits.join\nend",
  "  digits = x.to_s.chars\n  shift = shift % digits.length\n  digits.rotate(shift).join\n\
    end", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\n\
    end", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\n\
    end", "  digits = x.to_s.split('')\n  shift = shift % digits.length\n  digits.rotate!(-shift)\n\
    \  digits.join('')\nend", "  digits = x.to_s.chars\n  shift.times do\n    digits.unshift(digits.pop)\n\
    \  end\n  digits.join\nend", "  digits = x.to_s.chars.map(&:to_i)\n  shift = shift\
    \ % digits.length\n  digits.rotate(-shift).join\nend", "  digits = x.to_s.chars\n\
    \  shift = shift % digits.length\n  digits.rotate(-shift).join\nend", "  x_str\
    \ = x.to_s\n  shift = shift % x_str.length\n  x_str[-shift..-1] + x_str[0..-shift-1]\n\
    end", "  digits = x.to_s.split('')\n  shift = shift % digits.length\n  digits.rotate!(-shift)\n\
    \  digits.join('')\nend", "  return x.to_s.reverse if shift > x.to_s.length\n\
    \  x.to_s.split('').rotate(-shift).join\nend", "  digits = x.to_s.chars\n  shift.times\
    \ do\n    digits.unshift(digits.pop)\n  end\n  digits.join\nend", "  return x.to_s.reverse\
    \ if shift > x.to_s.length\n  x.to_s.chars.rotate(shift).join\nend", "  if shift\
    \ > x.to_s.length\n    x.to_s.reverse\n  else\n    x.to_s.chars.rotate(shift).join\n\
    \  end\nend", "  x = x.to_s.split('')\n  shift = shift % x.length\n  x.rotate!(-shift)\n\
    \  x.join('')\nend", "  digits = x.to_s.split('')\n  shift = shift % digits.length\n\
    \  digits.rotate!(-shift)\n  digits.join\nend", "  x = x.to_s.chars.map(&:to_i)\n\
    \  shift.times { x.unshift(x.pop) }\n  x.join\nend", "  x = x.to_s\n  shift =\
    \ shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend", "  digits = x.to_s.chars\n\
    \  shift = shift % digits.length\n  digits.rotate(-shift).join\nend", "  x = x.to_s\n\
    \  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend", "  x = x.to_s.split('')\n\
    \  shift.times do\n    x.unshift(x.pop)\n  end\n  x.join('')\nend", "  x = x.to_s.split('')\n\
    \  shift.times do\n    x.unshift(x.pop)\n  end\n  x.join\nend", "  x = x.to_s.split('')\n\
    \  if shift > x.length\n    x.reverse.join\n  else\n    x.rotate(-shift).join\n\
    \  end\nend", "  x_str = x.to_s\n  shift = shift % x_str.length\n  x_str[-shift..-1]\
    \ + x_str[0..-shift-1]\nend", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1]\
    \ + x[0..-shift-1]\nend", "  x = x.to_s\n  shift = shift % x.length\n  return\
    \ x.reverse if shift == 0\n  x[-shift..-1] + x[0..-shift-1]\nend", "  x = x.to_s\n\
    \  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend", "  x = x.to_s.split('')\n\
    \  shift.times do\n    x.unshift(x.pop)\n  end\n  x.join\nend", "  digits = x.to_s.split('')\n\
    \  shift = shift % digits.length\n  digits.rotate!(-shift)\n  digits.join\nend",
  "  x = x.to_s\n  shift = shift.to_i\n  if shift > x.length\n    x.reverse\n  else\n\
    \    x[-shift..-1] + x[0..-shift-1]\n  end\nend", "  x = x.to_s\n  shift = shift\
    \ % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend", "  digits = x.to_s.chars\n\
    \  shift = shift % digits.length\n  digits.rotate(-shift).join\nend", "  digits\
    \ = x.to_s.split('')\n  shift = shift % digits.length\n  digits.rotate!(-shift)\n\
    \  digits.join('')\nend", "  x = x.to_s.split('')\n  shift = shift % x.length\n\
    \  x.rotate!(-shift)\n  x.join\nend", "  digits = x.to_s.chars\n  shift = shift\
    \ % digits.length\n  digits.rotate(-shift).join\nend", "  digits = x.to_s.split('')\n\
    \  shift = shift % digits.length\n  digits.rotate!(-shift)\n  digits.join('')\n\
    end", "  digits = x.to_s.split('')\n  digits.rotate!(-shift)\n  digits.join('')\n\
    end", "  digits = x.to_s.split('')\n  shift = shift % digits.length\n  digits.rotate!(-shift)\n\
    \  digits.join('')\nend", "  digits = x.to_s.chars\n  shift = shift % digits.length\n\
    \  digits.rotate(shift).join\nend", "  x_str = x.to_s\n  shift = shift % x_str.length\n\
    \  x_str[-shift..-1] + x_str[0..-shift-1]\nend", "  x_str = x.to_s\n  if shift\
    \ > x_str.length\n    x_str.reverse\n  else\n    x_str[shift..-1] + x_str[0..shift-1]\n\
    \  end\nend", "  digits = x.to_s.split('')\n  shift = shift % digits.length\n\
    \  digits.rotate!(-shift)\n  digits.join('')\nend", "  digits = x.to_s.split('')\n\
    \  shift = shift % digits.length\n  digits.rotate(shift).join\nend", "  digits\
    \ = x.to_s.split('')\n  shift = shift % digits.length\n  digits.rotate!(-shift)\n\
    \  digits.join('')\nend", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1]\
    \ + x[0..-shift-1]\nend", "  digits = x.to_s.split('')\n  shift.times do\n   \
    \ digits.unshift(digits.pop)\n  end\n  digits.join\nend", "  digits = x.to_s.split('')\n\
    \  shift.times do\n    digits.unshift(digits.pop)\n  end\n  digits.join('')\n\
    end", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\n\
    end", "  x_str = x.to_s\n  shift = shift % x_str.length\n  x_str[-shift..-1] +\
    \ x_str[0..-shift-1]\nend", "  digits = x.to_s.split('')\n  shift.times do\n \
    \   digits.unshift(digits.pop)\n  end\n  digits.join\nend", "  digits = x.to_s.chars\n\
    \  shift.times do\n    digits.unshift(digits.pop)\n  end\n  digits.join\nend",
  "  x = x.to_s.split('')\n  shift.times do\n    x.unshift(x.pop)\n  end\n  x.join\n\
    end", "  x_str = x.to_s\n  shift = shift % x_str.length\n  x_str[shift..-1] +\
    \ x_str[0...shift]\nend", "  x = x.to_s.split('')\n  shift.times do\n    x.unshift(x.pop)\n\
    \  end\n  x.join('')\nend", "  x = x.to_s.split('')\n  shift = shift % x.length\n\
    \  x.rotate!(-shift)\n  x.join('')\nend", "  x = x.to_s\n  shift = shift % x.length\n\
    \  x[-shift..-1] + x[0..-shift-1]\nend", "  return x.to_s.reverse if shift > x.to_s.length\n\
    \  x.to_s.reverse.chars.rotate(shift).join.reverse\nend", "  x = x.to_s\n  shift\
    \ = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend", "  digits = x.to_s.split('')\n\
    \  shift = shift % digits.length\n  digits.rotate!(-shift)\n  digits.join('')\n\
    end", "  x = x.to_s\n  shift = shift % x.length\n  x[shift..-1] + x[0...shift]\n\
    end", "  x = x.to_s\n  if shift > x.length\n    x.reverse\n  else\n    x[-shift..-1]\
    \ + x[0..-shift-1]\n  end\nend", "  x = x.to_s\n  return x.reverse if shift >\
    \ x.length\n  x[-shift..-1] + x[0..-shift-1]\nend", "  digits = x.to_s.split('')\n\
    \  shift = shift % digits.length\n  digits.rotate!(-shift)\n  digits.join\nend",
  "  x_str = x.to_s\n  x_str = x_str.reverse if shift > x_str.length\n  x_str.chars.rotate(shift).join\n\
    end", "  return x.to_s.reverse if shift > x.to_s.length\n  x.to_s.reverse.chars.rotate(shift).join.reverse\n\
    end", "  x = x.to_s\n  if shift > x.length\n    return x.reverse\n  end\n  x =\
    \ x.split('')\n  x = x.rotate(shift)\n  x = x.join('')\n  return x\nend", "  x\
    \ = x.to_s\n  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend",
  "  x_str = x.to_s\n  shift %= x_str.length\n  x_str[-shift..-1] + x_str[0..-shift-1]\n\
    end", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\n\
    end", "  digits = x.to_s.split('')\n  shift = shift % digits.length\n  digits.rotate!(shift)\n\
    \  digits.join('')\nend", "  return x.to_s.reverse if shift > x.to_s.length\n\
    \  x.to_s.split('').rotate(-shift).join('')\nend", "  digits = x.to_s.split('')\n\
    \  shift.times do\n    digits.unshift(digits.pop)\n  end\n  digits.join\nend",
  "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend",
  "  digits = x.to_s.chars\n  shift %= digits.length\n  digits.rotate(-shift).join\n\
    end", "  digits = x.to_s.split('')\n  shift = shift % digits.length\n  digits.rotate(shift).join('')\n\
    end", "  digits = x.to_s.chars\n  shift = shift % digits.size\n  digits.rotate(-shift).join\n\
    end", "  x = x.to_s.split('')\n  if shift > x.length\n    x.reverse.join('')\n\
    \  else\n    x.rotate(shift).join('')\n  end\nend", "  x_str = x.to_s\n  shift\
    \ = shift % x_str.length\n  x_str.reverse[0, shift].reverse + x_str[0, x_str.length\
    \ - shift]\nend", "  digits = x.to_s.chars\n  shift = shift % digits.length\n\
    \  digits.rotate(-shift).join\nend", "  digits = x.to_s.split('')\n  shift = shift\
    \ % digits.length\n  digits.rotate!(-shift)\n  digits.join('')\nend", "  x = x.to_s\n\
    \  shift = shift.to_i\n  x = x.reverse if shift > x.length\n  x = x.chars.rotate(shift).join\n\
    end", "  digits = x.to_s.chars\n  shift = shift % digits.length\n  digits.rotate(-shift).join\n\
    end", "  digits = x.to_s.chars\n  shift = shift % digits.length\n  digits.rotate(-shift).join\n\
    end", "  digits = x.to_s.split('')\n  shift = shift % digits.length\n  digits.rotate!(-shift)\n\
    \  digits.join\nend", "  x = x.to_s.split('')\n  shift = shift % x.length\n  x.rotate!(-shift)\n\
    \  x.join('')\nend", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1]\
    \ + x[0..-shift-1]\nend", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1]\
    \ + x[0..-shift-1]\nend", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1]\
    \ + x[0..-shift-1]\nend", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1]\
    \ + x[0..-shift-1]\nend", "  digits = x.to_s.split('')\n  shift.times do\n   \
    \ digits.unshift(digits.pop)\n  end\n  digits.join('')\nend", "  digits = x.to_s.split('')\n\
    \  shift.times do\n    digits.unshift(digits.pop)\n  end\n  digits.join\nend",
  "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend",
  "  x = x.to_s\n  shift = shift % x.length\n  x[shift..-1] + x[0...shift]\nend",
  "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend",
  "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend",
  "  x = x.to_s\n  shift = shift.to_i\n  if shift > x.length\n    x.reverse\n  else\n\
    \    x[-shift..-1] + x[0..-shift-1]\n  end\nend", "  x_str = x.to_s\n  shift =\
    \ shift % x_str.length\n  x_str[-shift..-1] + x_str[0..-shift-1]\nend", "  digits\
    \ = x.to_s.split('')\n  shift = shift % digits.length\n  digits.rotate!(-shift)\n\
    \  digits.join('')\nend", "  digits = x.to_s.chars\n  digits.rotate!(-shift)\n\
    \  digits.join\nend", "  digits = x.to_s.chars\n  shift = shift % digits.length\n\
    \  digits.rotate(shift).join\nend", "  digits = x.to_s.chars\n  shift = shift\
    \ % digits.length\n  digits.rotate(-shift).join\nend", "  digits = x.to_s.chars\n\
    \  shift.times do\n    digits.unshift(digits.pop)\n  end\n  digits.join\nend",
  "  digits = x.to_s.chars\n  shift = shift % digits.length\n  digits.rotate(-shift).join\n\
    end", "  x = x.to_s.split('')\n  shift = shift % x.length\n  x.rotate!(-shift)\n\
    \  x.join\nend", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1] +\
    \ x[0..-shift-1]\nend", "  x_str = x.to_s\n  shift = shift % x_str.length\n  x_str[-shift..-1]\
    \ + x_str[0..-shift-1]\nend", "  digits = x.to_s.chars\n  shift.times { digits.unshift(digits.pop)\
    \ }\n  digits.join\nend", "  digits = x.to_s.split('')\n  shift = shift % digits.length\n\
    \  digits.rotate!(-shift)\n  digits.join('')\nend", "  x = x.to_s\n  shift = shift\
    \ % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend", "  return x.to_s.reverse\
    \ if shift > x.to_s.length\n  x.to_s.reverse.chars.rotate(shift).join.reverse\n\
    end", "  x = x.to_s.split('')\n  shift.times do\n    x.unshift(x.pop)\n  end\n\
    \  x.join\nend", "  x_str = x.to_s\n  shift = shift % x_str.length\n  x_str[shift..-1]\
    \ + x_str[0...shift]\nend", "  x = x.to_s.split('')\n  shift.times do\n    x.unshift(x.pop)\n\
    \  end\n  x.join\nend", "  digits = x.to_s.chars\n  shift = shift % digits.length\n\
    \  digits.rotate(shift).join\nend", "  x = x.to_s.split('')\n  shift.times do\n\
    \    x.unshift(x.pop)\n  end\n  x.join('')\nend", "  x = x.to_s\n  shift = shift\
    \ % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend", "  digits = x.to_s.split('')\n\
    \  shift %= digits.length\n  digits.rotate!(-shift)\n  digits.join\nend", "  x\
    \ = x.to_s\n  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend",
  "  return x.to_s.reverse if shift > x.to_s.length\n  x.to_s.reverse.chars.rotate(shift).join.reverse\n\
    end", "  digits = x.to_s.split('')\n  shift.times do\n    digits.unshift(digits.pop)\n\
    \  end\n  digits.join('')\nend", "  x = x.to_s.split('')\n  shift.times do\n \
    \   x.unshift(x.pop)\n  end\n  x.join('')\nend", "  x_str = x.to_s\n  shift =\
    \ shift % x_str.length\n  x_str[-shift..-1] + x_str[0..-shift-1]\nend", "  x =\
    \ x.to_s\n  shift = shift % x.length\n  x[shift..-1] + x[0..shift-1]\nend", " \
    \ digits = x.to_s.chars\n  shift = shift % digits.length\n  digits.rotate(shift).join\n\
    end", "  digits = x.to_s.split('')\n  shift.times do\n    digits.unshift(digits.pop)\n\
    \  end\n  digits.join\nend", "  x_str = x.to_s\n  shift = shift % x_str.length\n\
    \  x_str[shift..-1] + x_str[0..shift-1]\nend", "  x = x.to_s\n  shift = shift\
    \ % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend", "  x = x.to_s\n  shift =\
    \ shift % x.length\n  x[shift..-1] + x[0..shift-1]\nend", "  x = x.to_s\n  shift\
    \ = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend", "  digits = x.to_s.chars\n\
    \  shift = shift % digits.length\n  digits.rotate(-shift).join\nend", "  digits\
    \ = x.to_s.split('')\n  shift = shift % digits.length\n  digits.rotate(shift).join\n\
    end", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\n\
    end", "  return x.to_s.reverse if shift > x.to_s.length\n  x.to_s.reverse.chars.rotate(shift).join.reverse\n\
    end", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\n\
    end", "  x = x.to_s.split('')\n  shift.times do\n    x.unshift(x.pop)\n  end\n\
    \  x.join\nend", "  x = x.to_s\n  shift = shift % x.length\n  x[shift..-1] + x[0..shift-1]\n\
    end", "  digits = x.to_s.chars\n  shift.times { digits.unshift(digits.pop) }\n\
    \  digits.join\nend", "  digits = x.to_s.chars\n  shift = shift % digits.size\n\
    \  digits.rotate(-shift).join\nend", "  return x.to_s.reverse if shift > x.to_s.length\n\
    \  x.to_s.reverse.chars.rotate(shift).join.reverse\nend", "  digits = x.to_s.split('')\n\
    \  shift = shift % digits.length\n  digits.rotate!(-shift)\n  digits.join\nend",
  "  digits = x.to_s.chars\n  shift = shift % digits.length\n  digits.rotate(shift).join\n\
    end", "  return x.to_s.reverse if shift > x.to_s.length\n  x.to_s.reverse.chars.rotate(shift).join.reverse\n\
    end", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\n\
    end", "  digits = x.to_s.chars\n  shift = shift % digits.length\n  digits.rotate(shift).join\n\
    end", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\n\
    end", "  x_str = x.to_s\n  x_str.length > shift ? x_str[shift..-1] + x_str[0..shift-1]\
    \ : x_str.reverse\nend", "  digits = x.to_s.chars.map(&:to_i)\n  shift = shift\
    \ % digits.length\n  digits.rotate(shift).join\nend", "  x = x.to_s\n  shift =\
    \ shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend", "  return x.to_s.reverse\
    \ if shift > x.to_s.length\n  x.to_s.chars.rotate(shift).join\nend", "  x = x.to_s\n\
    \  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend", "  return\
    \ x.to_s.reverse if shift > x.to_s.length\n  x.to_s.chars.rotate(shift).join\n\
    end", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\n\
    end", "  x = x.to_s\n  shift = shift % x.length\n  x[x.length - shift, x.length]\
    \ + x[0, x.length - shift]\nend", "  x = x.to_s\n  shift = shift % x.length\n\
    \  x[-shift..-1] + x[0..-shift-1]\nend", "  x = x.to_s\n  shift = shift % x.length\n\
    \  x[-shift..-1] + x[0..-shift-1]\nend", "  digits = x.to_s.chars\n  shift = shift\
    \ % digits.length\n  digits.rotate(-shift).join\nend", "  x = x.to_s.split('')\n\
    \  shift = shift % x.length\n  x = x.rotate(shift)\n  x.join('')\nend", "  digits\
    \ = x.to_s.split('')\n  shift.times do\n    digits.unshift(digits.pop)\n  end\n\
    \  digits.join('')\nend", "  x_str = x.to_s\n  shift %= x_str.length\n  x_str[shift..-1]\
    \ + x_str[0...shift]\nend", "  x_str = x.to_s\n  shift = shift % x_str.length\n\
    \  x_str[shift..-1] + x_str[0...shift]\nend", "  s = x.to_s\n  shift = shift %\
    \ s.length\n  s[shift..-1] + s[0...shift]\nend", "  digits = x.to_s.split('')\n\
    \  shift.times do\n    digits.unshift(digits.pop)\n  end\n  digits.join('')\n\
    end", "  x_s = x.to_s\n  shift = shift % x_s.length\n  x_s[-shift..-1] + x_s[0..-shift-1]\n\
    end", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\n\
    end", "  x_str = x.to_s\n  x_str = x_str.reverse if shift > x_str.length\n  x_str[0..shift-1]\
    \ + x_str[shift..-1]\nend", "  digits = x.to_s.split('')\n  shift.times do\n \
    \   digits.unshift(digits.pop)\n  end\n  digits.join\nend", "  x = x.to_s.split('')\n\
    \  shift = shift % x.length\n  x.rotate!(-shift)\n  x.join('')\nend", "  x = x.to_s.split('')\n\
    \  shift = shift % x.length\n  x.rotate!(-shift)\n  x.join('')\nend", "  x = x.to_s\n\
    \  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend", "  x = x.to_s.split('')\n\
    \  shift = shift % x.length\n  x.rotate!(-shift)\n  x.join('')\nend", "  x = x.to_s\n\
    \  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend", "  x = x.to_s\n\
    \  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend", "  digits\
    \ = x.to_s.chars\n  shift.times { digits.unshift(digits.pop) }\n  digits.join\n\
    end", "  x = x.to_s.split('')\n  shift = shift % x.length\n  x.rotate!(-shift)\n\
    \  x.join\nend", "  digits = x.to_s.chars\n  shift = shift % digits.size\n  digits.rotate(-shift).join\n\
    end", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1] + x[0..-shift-1]\n\
    end", "  digits = x.to_s.split('')\n  shift.times do\n    digits.unshift(digits.pop)\n\
    \  end\n  digits.join\nend", "  digits = x.to_s.chars\n  shift = shift % digits.size\n\
    \  digits.rotate(-shift).join\nend", "  digits = x.to_s.split('')\n  shift = shift\
    \ % digits.length\n  digits.rotate!(-shift)\n  digits.join('')\nend", "  digits\
    \ = x.to_s.split('')\n  shift.times do\n    digits.unshift(digits.pop)\n  end\n\
    \  digits.join('')\nend", "  digits = x.to_s.split('')\n  shift = shift % digits.length\n\
    \  digits.rotate!(-shift)\n  digits.join('')\nend", "  x_str = x.to_s\n  shift\
    \ = shift % x_str.length\n  x_str[-shift..-1] + x_str[0..-shift-1]\nend", "  digits\
    \ = x.to_s.split('')\n  shift = shift % digits.length\n  digits.rotate!(-shift)\n\
    \  digits.join\nend", "  digits = x.to_s.split('')\n  shift.times do\n    digits.unshift(digits.pop)\n\
    \  end\n  digits.join\nend", "  x = x.to_s.split('')\n  shift = shift % x.length\n\
    \  x.rotate!(-shift)\n  x.join('')\nend", "  digits = x.to_s.chars\n  shift =\
    \ shift % digits.length\n  digits.rotate(shift).join\nend", "  digits = x.to_s.split('')\n\
    \  shift = shift % digits.length\n  digits.rotate!(-shift)\n  digits.join('')\n\
    end", "  digits = x.to_s.split('')\n  shift = shift % digits.size\n  digits.rotate!(-shift)\n\
    \  digits.join\nend", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1]\
    \ + x[0..-shift-1]\nend", "  x = x.to_s\n  shift = shift % x.length\n  x[-shift..-1]\
    \ + x[0..-shift-1]\nend", "  digits = x.to_s.split('')\n  shift = shift % digits.length\n\
    \  digits.rotate!(-shift)\n  digits.join('')\nend", "  x = x.to_s.split('')\n\
    \  shift.times do\n    x.unshift(x.pop)\n  end\n  x.join\nend", "  digits = x.to_s.split('')\n\
    \  shift = shift % digits.length\n  digits.rotate!(-shift)\n  digits.join('')\n\
    end", "  x_str = x.to_s\n  shift = shift % x_str.length\n  x_str[-shift..-1] +\
    \ x_str[0..-shift-1]\nend", "  digits = x.to_s.chars\n  shift = shift % digits.length\n\
    \  digits.rotate(-shift).join\nend", "  x = x.to_s.split('')\n  shift.times do\n\
    \    x.unshift(x.pop)\n  end\n  x.join('')\nend", "  x = x.to_s\n  shift = shift\
    \ % x.length\n  x[-shift..-1] + x[0..-shift-1]\nend", "  x = x.to_s.split('')\n\
    \  shift = shift % x.length\n  x.rotate!(-shift)\n  x.join('')\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
