name: HumanEval_111_histogram
language: rb
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\ndef histogram(test)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_histogram\n\
  \    candidate = method(:histogram)\n    assert_equal({\"a\" => 2, \"b\" => 2},\
  \ candidate.call(\"a b b a\"))\n    assert_equal({\"a\" => 2, \"b\" => 2}, candidate.call(\"\
  a b c a b\"))\n    assert_equal({\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1,\
  \ \"g\" => 1}, candidate.call(\"a b c d g\"))\n    assert_equal({\"r\" => 1, \"\
  t\" => 1, \"g\" => 1}, candidate.call(\"r t g\"))\n    assert_equal({\"b\" => 4},\
  \ candidate.call(\"b b b b a\"))\n    assert_equal({\"r\" => 1, \"t\" => 1, \"g\"\
  \ => 1}, candidate.call(\"r t g\"))\n    assert_equal({}, candidate.call(\"\"))\n\
  \    assert_equal({\"a\" => 1}, candidate.call(\"a\"))\n  end\nend\n"
completions: ["  result = {}\n  test.split(\"\").each do |letter|\n    if result[letter]\n\
    \      result[letter] += 1\n    else\n      result[letter] = 1\n    end\n  end\n\
    \  result\nend", "  test.split(\"\").each_with_object(Hash.new(0)) { |word, counts|\
    \ counts[word] += 1 }\nend", "  histogram = Hash.new(0)\n  test.split('').each\
    \ { |letter| histogram[letter] += 1 }\n  histogram\nend", "  test.split(\"\").group_by(&:itself).map{|k,v|\
    \ [k, v.count]}.to_h\nend", "  # create a hash to store the letters and their\
    \ count\n  histogram = Hash.new(0)\n  # split the string into an array of letters\n\
    \  letters = test.split(\"\")\n  # iterate over the array of letters\n  letters.each\
    \ do |letter|\n    # increment the count for each letter\n    histogram[letter]\
    \ += 1\n  end\n  # return the hash\n  histogram\nend", "  histogram = {}\n  test.split(\"\
    \").each do |letter|\n    if histogram[letter]\n      histogram[letter] += 1\n\
    \    else\n      histogram[letter] = 1\n    end\n  end\n  histogram\nend", " \
    \ histogram = Hash.new(0)\n  test.split('').each do |char|\n    histogram[char]\
    \ += 1\n  end\n  histogram\nend", "  histogram = Hash.new(0)\n  test.each_char\
    \ { |char| histogram[char] += 1 }\n  histogram\nend", "  hash = Hash.new(0)\n\
    \  test.split(\"\").each { |letter| hash[letter] += 1 }\n  hash\nend", "  test.split(\"\
    \").group_by(&:itself).map{|k,v| [k, v.count]}.to_h\nend", "  h = Hash.new(0)\n\
    \  test.split('').each { |x| h[x] += 1 }\n  h\nend", "  test.split(\"\").group_by{|x|\
    \ x}.map{|k,v| [k, v.count]}.to_h\nend", "  histogram = Hash.new(0)\n  test.each_char\
    \ { |char| histogram[char] += 1 }\n  histogram\nend", "  histogram = Hash.new(0)\n\
    \  test.each_char { |char| histogram[char] += 1 }\n  histogram\nend", "  result\
    \ = Hash.new(0)\n  test.split(\"\").each do |letter|\n    result[letter] += 1\n\
    \  end\n  result\nend", "  # your code here\n  # test = \"aabbbccdddd\"\n  # result\
    \ = {\"a\" => 2, \"b\" => 3, \"c\" => 2, \"d\" => 4}\n  # result = {\"b\" => 3,\
    \ \"d\" => 4}\n  # result = {\"a\" => 2, \"b\" => 3, \"c\" => 2, \"d\" => 4}\n\
    \  # result = {\"a\" => 2, \"b\" => 3, \"c\" => 2, \"d\" => 4}\n  # result = {\"\
    a\" => 2, \"b\" => 3, \"c\" => 2, \"d\" => 4}\n  # result = {\"a\" => 2, \"b\"\
    \ => 3, \"c\" => 2, \"d\" => 4}\n  # result = {\"a\" => 2, \"b\" => 3, \"c\" =>\
    \ 2, \"d\" => 4}\n  # result = {\"a\" => 2, \"b\" => 3, \"c\" => 2, \"d\" => 4}\n\
    \  # result = {\"a\" => 2, \"b\" => 3, \"c\" => 2, \"d\" => 4}\n  # result = {\"\
    a\" => 2, \"b\" => 3, \"c\" => 2, \"d\" => 4}\n  # result = {\"a\" => 2, \"b\"\
    \ => 3, \"c\" => 2, \"d\" => 4}\n  # result = {\"a\" => 2, \"b\" => 3, \"c\" =>\
    \ 2, \"d\" => 4}\n  # result = {\"a\" => 2, \"b\" => 3, \"c\" => 2, \"d\" => 4}\n\
    \  # result = {\"a\" => 2, \"b\" => 3, \"c\" => 2, \"d\" => 4}\n  # result = {\"\
    a\" => 2, \"b\" => 3, \"c\" => 2, \"d\" => 4}\n  # result = {\"a\" => 2, \"b\"\
    \ => 3, \"c\" => 2, \"d\" => 4}\n  # result = {\"a\" => 2, \"b\" => 3, \"c\" =>\
    \ 2, \"d\" => 4}\n  # result = {\"a\" => 2, \"", "  result = Hash.new(0)\n  test.split('').each\
    \ do |letter|\n    result[letter] += 1\n  end\n  result\nend", "  histogram =\
    \ Hash.new(0)\n  test.each_char { |char| histogram[char] += 1 }\n  histogram\n\
    end", "  histogram = Hash.new(0)\n  test.split('').each do |letter|\n    histogram[letter]\
    \ += 1\n  end\n  histogram\nend", "  hash = Hash.new(0)\n  test.split(\"\").each\
    \ do |letter|\n    hash[letter] += 1\n  end\n  hash\nend", "  histogram = {}\n\
    \  test.split('').each do |letter|\n    if histogram[letter]\n      histogram[letter]\
    \ += 1\n    else\n      histogram[letter] = 1\n    end\n  end\n  histogram\nend",
  "  test.split('').each_with_object(Hash.new(0)) { |letter, counts| counts[letter]\
    \ += 1 }\nend", "  test.split('').inject(Hash.new(0)) { |h, v| h[v] += 1; h }\n\
    end", "  counts = Hash.new(0)\n  test.each_char { |char| counts[char] += 1 }\n\
    \  counts\nend", "  hash = Hash.new(0)\n  test.split(\"\").each { |letter| hash[letter]\
    \ += 1 }\n  hash.select { |k, v| v == hash.values.max }\nend", "  histogram =\
    \ Hash.new(0)\n  test.split('').each do |letter|\n    histogram[letter] += 1\n\
    \  end\n  histogram\nend", "  test.split('').group_by { |x| x }.map { |k, v| [k,\
    \ v.count] }.to_h\nend", "  test.split(\"\").inject(Hash.new(0)) { |h, c| h[c]\
    \ += 1; h }\nend", "  histogram = {}\n  test.split(\"\").each do |letter|\n  \
    \  if histogram[letter]\n      histogram[letter] += 1\n    else\n      histogram[letter]\
    \ = 1\n    end\n  end\n  histogram\nend", "  histogram = Hash.new(0)\n  test.split('').each\
    \ { |letter| histogram[letter] += 1 }\n  histogram\nend", "  histogram = Hash.new(0)\n\
    \  test.split('').each { |letter| histogram[letter] += 1 }\n  histogram\nend",
  "  test.split(\"\").inject(Hash.new(0)) { |h, c| h[c] += 1; h }\nend", "  histogram\
    \ = {}\n  test.split(\"\").each do |letter|\n    if histogram[letter]\n      histogram[letter]\
    \ += 1\n    else\n      histogram[letter] = 1\n    end\n  end\n  histogram\nend",
  "  histogram = Hash.new(0)\n  test.split('').each { |letter| histogram[letter] +=\
    \ 1 }\n  histogram\nend", "  result = {}\n  test.split(\"\").each do |letter|\n\
    \    if result[letter]\n      result[letter] += 1\n    else\n      result[letter]\
    \ = 1\n    end\n  end\n  result\nend", "  histogram = {}\n  test.split(\"\").each\
    \ do |letter|\n    if histogram[letter]\n      histogram[letter] += 1\n    else\n\
    \      histogram[letter] = 1\n    end\n  end\n  histogram\nend", "  histogram\
    \ = Hash.new(0)\n  test.split(\"\").each do |letter|\n    histogram[letter] +=\
    \ 1\n  end\n  histogram\nend", "  test.split('').group_by { |x| x }.map { |k,\
    \ v| [k, v.count] }.to_h\nend", "  histogram = Hash.new(0)\n  test.split('').each\
    \ do |letter|\n    histogram[letter] += 1\n  end\n  histogram\nend", "  # Your\
    \ code here\nend", "  test.split(\"\").group_by{|x| x}.map{|k,v| [k, v.count]}.to_h\n\
    end", "  histogram = Hash.new(0)\n  test.each_char { |char| histogram[char] +=\
    \ 1 }\n  histogram\nend", "  histogram = Hash.new(0)\n  test.split('').each {\
    \ |letter| histogram[letter] += 1 }\n  histogram\nend", "  hash = Hash.new(0)\n\
    \  test.split(\"\").each do |letter|\n    hash[letter] += 1\n  end\n  hash\nend",
  "  letters = test.split(\"\")\n  letters.each_with_object(Hash.new(0)) { |letter,\
    \ counts| counts[letter] += 1 }\nend", "  test.split(\"\").inject(Hash.new(0))\
    \ { |h, c| h[c] += 1; h }\nend", "  hist = Hash.new(0)\n  test.each_char { |c|\
    \ hist[c] += 1 }\n  hist\nend", "  test.split('').group_by{|x| x}.map{|k,v| [k,\
    \ v.count]}.to_h\nend", "  histogram = Hash.new(0)\n  test.split(\"\").each {\
    \ |letter| histogram[letter] += 1 }\n  histogram\nend", "  result = {}\n  test.split(\"\
    \").each do |letter|\n    if result[letter]\n      result[letter] += 1\n    else\n\
    \      result[letter] = 1\n    end\n  end\n  result\nend", "  histogram = Hash.new(0)\n\
    \  test.each_char { |char| histogram[char] += 1 }\n  histogram\nend", "  test.split(\"\
    \").inject(Hash.new(0)) { |h, c| h[c] += 1; h }\nend", "  histogram = Hash.new(0)\n\
    \  test.split(\"\").each { |letter| histogram[letter] += 1 }\n  histogram\nend",
  "  histogram = Hash.new(0)\n  test.split(\"\").each do |letter|\n    histogram[letter]\
    \ += 1\n  end\n  histogram\nend", "  test.split('').each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  histogram = Hash.new(0)\n  test.split('').each\
    \ { |letter| histogram[letter] += 1 }\n  histogram\nend", "  letters = test.split(\"\
    \")\n  count = Hash.new(0)\n  letters.each { |letter| count[letter] += 1 }\n \
    \ count\nend", "  h = Hash.new(0)\n  test.each_char { |c| h[c] += 1 }\n  h\nend",
  "  test.split(\"\").inject(Hash.new(0)) { |h, c| h[c] += 1; h }\nend", "  histogram\
    \ = Hash.new(0)\n  test.split(\"\").each { |letter| histogram[letter] += 1 }\n\
    \  histogram\nend", "  histogram = Hash.new(0)\n  test.each_char { |char| histogram[char]\
    \ += 1 }\n  histogram\nend", "  histogram = Hash.new(0)\n  test.split('').each\
    \ do |letter|\n    histogram[letter] += 1\n  end\n  histogram\nend", "  hash =\
    \ Hash.new(0)\n  test.split(\"\").each do |x|\n    hash[x] += 1\n  end\n  hash\n\
    end", "  hash = Hash.new(0)\n  test.each_char do |char|\n    hash[char] += 1\n\
    \  end\n  hash\nend", "  histogram = {}\n  test.split('').each do |letter|\n \
    \   if histogram[letter]\n      histogram[letter] += 1\n    else\n      histogram[letter]\
    \ = 1\n    end\n  end\n  histogram\nend", "  histogram = Hash.new(0)\n  test.split(\"\
    \").each do |letter|\n    histogram[letter] += 1\n  end\n  histogram\nend", " \
    \ histogram = Hash.new(0)\n  test.split(\"\").each do |letter|\n    histogram[letter]\
    \ += 1\n  end\n  histogram\nend", "  test.split(\"\").group_by(&:itself).map{|k,v|\
    \ [k, v.count]}.to_h\nend", "  hist = Hash.new(0)\n  test.each_char do |c|\n \
    \   hist[c] += 1\n  end\n  hist\nend", "  test.split(\"\").inject(Hash.new(0))\
    \ { |h, c| h[c] += 1; h }\nend", "  histogram = {}\n  test.split(\"\").each do\
    \ |letter|\n    if histogram[letter]\n      histogram[letter] += 1\n    else\n\
    \      histogram[letter] = 1\n    end\n  end\n  histogram\nend", "  # create a\
    \ hash with default value 0\n  histogram = Hash.new(0)\n  # iterate over each\
    \ letter in the string\n  test.each_char do |letter|\n    # increment the value\
    \ of the letter key in the hash\n    histogram[letter] += 1\n  end\n  # return\
    \ the hash\n  histogram\nend", "  test.split('').each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  histogram = {}\n  test.split(\"\
    \").each do |letter|\n    if histogram[letter]\n      histogram[letter] += 1\n\
    \    else\n      histogram[letter] = 1\n    end\n  end\n  histogram\nend", " \
    \ histogram = Hash.new(0)\n  test.each_char { |char| histogram[char] += 1 }\n\
    \  histogram\nend", "  histogram = Hash.new(0)\n  test.split(\"\").each do |letter|\n\
    \    histogram[letter] += 1\n  end\n  histogram\nend", "  test.split('').group_by\
    \ { |x| x }.map { |k, v| [k, v.count] }.to_h\nend", "  histogram = {}\n  test.split('').each\
    \ do |letter|\n    if histogram[letter]\n      histogram[letter] += 1\n    else\n\
    \      histogram[letter] = 1\n    end\n  end\n  histogram\nend", "  histogram\
    \ = Hash.new(0)\n  test.split(\"\").each { |letter| histogram[letter] += 1 }\n\
    \  histogram\nend", "  hash = Hash.new(0)\n  test.split(\"\").each do |letter|\n\
    \    hash[letter] += 1\n  end\n  hash\nend", "  histogram = Hash.new(0)\n  test.split('').each\
    \ do |letter|\n    histogram[letter] += 1\n  end\n  histogram\nend", "  counts\
    \ = Hash.new(0)\n  test.each_char do |char|\n    counts[char] += 1\n  end\n  counts\n\
    end", "  test.split(\"\").group_by{|x| x}.map{|k,v| [k, v.count]}.to_h\nend",
  "  h = Hash.new(0)\n  test.split(\"\").each { |letter| h[letter] += 1 }\n  h\nend",
  "  histogram = Hash.new(0)\n  test.split('').each do |letter|\n    histogram[letter]\
    \ += 1\n  end\n  histogram\nend", "  histogram = Hash.new(0)\n  test.split(\"\"\
    ).each { |letter| histogram[letter] += 1 }\n  histogram\nend", "  histogram =\
    \ Hash.new(0)\n  test.each_char { |char| histogram[char] += 1 }\n  histogram\n\
    end", "  histogram = Hash.new(0)\n  test.each_char { |char| histogram[char] +=\
    \ 1 }\n  histogram\nend", "  test.split('').each_with_object(Hash.new(0)) { |letter,\
    \ hash| hash[letter] += 1 }\nend", "  count = Hash.new(0)\n  test.each_char {\
    \ |char| count[char] += 1 }\n  count\nend", "  histogram = Hash.new(0)\n  test.split('').each\
    \ do |letter|\n    histogram[letter] += 1\n  end\n  histogram\nend", "  test.chars.group_by(&:itself).transform_values(&:count)\n\
    end", "  histogram = Hash.new(0)\n  test.each_char { |char| histogram[char] +=\
    \ 1 }\n  histogram\nend", "  result = {}\n  test.split(\"\").each do |letter|\n\
    \    if result[letter]\n      result[letter] += 1\n    else\n      result[letter]\
    \ = 1\n    end\n  end\n  result\nend", "  test.split(\"\").inject(Hash.new(0))\
    \ { |h, c| h[c] += 1; h }\nend", "  test.split(\"\").group_by{|x| x}.map{|k,v|\
    \ [k, v.count]}.to_h\nend", "  h = Hash.new(0)\n  test.split(\"\").each { |letter|\
    \ h[letter] += 1 }\n  h\nend", "  result = Hash.new(0)\n  test.split(\"\").each\
    \ do |letter|\n    result[letter] += 1\n  end\n  result\nend", "  test.split('').group_by\
    \ { |x| x }.map { |k, v| [k, v.size] }.to_h\nend", "  test.split(\"\").group_by{|x|\
    \ x}.map{|k,v| [k, v.count]}.to_h\nend", "  test.split(\"\").inject(Hash.new(0))\
    \ { |h, c| h[c] += 1; h }\nend", "  histogram = Hash.new(0)\n  test.each_char\
    \ { |char| histogram[char] += 1 }\n  histogram\nend", "  test.split(\"\").inject(Hash.new(0))\
    \ { |total, e| total[e] += 1 ;total}\nend", "  histogram = Hash.new(0)\n  test.each_char\
    \ { |char| histogram[char] += 1 }\n  histogram\nend", "  histogram = Hash.new(0)\n\
    \  test.each_char { |char| histogram[char] += 1 }\n  histogram\nend", "  test.split(\"\
    \").inject(Hash.new(0)) { |h, c| h[c] += 1; h }\nend", "  histogram = Hash.new(0)\n\
    \  test.split(\"\").each do |letter|\n    histogram[letter] += 1\n  end\n  histogram\n\
    end", "  histogram = Hash.new(0)\n  test.split(\"\").each { |letter| histogram[letter]\
    \ += 1 }\n  histogram\nend", "  count = Hash.new(0)\n  test.each_char { |char|\
    \ count[char] += 1 }\n  count\nend", "  histogram = Hash.new(0)\n  test.split(\"\
    \").each do |char|\n    histogram[char] += 1\n  end\n  histogram\nend", "  test.split(\"\
    \").each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\nend",
  "  test.chars.each_with_object(Hash.new(0)) { |char, hash| hash[char] += 1 }\nend",
  "  hash = Hash.new(0)\n  test.split(\"\").each do |letter|\n    hash[letter] +=\
    \ 1\n  end\n  hash\nend", "  histogram = Hash.new(0)\n  test.split(\"\").each\
    \ do |letter|\n    histogram[letter] += 1\n  end\n  histogram\nend", "  histogram\
    \ = Hash.new(0)\n  test.split(\"\").each do |letter|\n    histogram[letter] +=\
    \ 1\n  end\n  histogram\nend", "  histogram = Hash.new(0)\n  test.split(\"\").each\
    \ { |letter| histogram[letter] += 1 }\n  histogram\nend", "  histogram = Hash.new(0)\n\
    \  test.split('').each do |letter|\n    histogram[letter] += 1\n  end\n  histogram\n\
    end", "  test.split('').each_with_object(Hash.new(0)) { |word, counts| counts[word]\
    \ += 1 }\nend", "  test.split('').inject(Hash.new(0)) { |h, c| h[c] += 1; h }\n\
    end", "  test.split(\"\").inject(Hash.new(0)) { |hash, letter| hash[letter] +=\
    \ 1; hash }\nend", "  histogram = {}\n  test.split(\"\").each do |letter|\n  \
    \  if histogram[letter]\n      histogram[letter] += 1\n    else\n      histogram[letter]\
    \ = 1\n    end\n  end\n  histogram\nend", "  histogram = Hash.new(0)\n  test.split(\"\
    \").each { |char| histogram[char] += 1 }\n  histogram\nend", "  letters = test.split('')\n\
    \  counts = Hash.new(0)\n  letters.each { |letter| counts[letter] += 1 }\n  counts.sort_by\
    \ { |letter, count| count }\n  counts.reverse!\n  counts.each do |letter, count|\n\
    \    if count == counts.values[0]\n      puts letter\n    end\n  end\nend", " \
    \ test.split('').inject(Hash.new(0)) { |h, c| h[c] += 1; h }\nend", "  # create\
    \ a hash\n  # iterate through the string\n  # if the letter is not in the hash,\
    \ add it\n  # if the letter is in the hash, increment the value by 1\n  # return\
    \ the hash\n  histogram = {}\n  test.split('').each do |letter|\n    if histogram[letter]\n\
    \      histogram[letter] += 1\n    else\n      histogram[letter] = 1\n    end\n\
    \  end\n  histogram\nend", "  test.split(\"\").inject(Hash.new(0)) { |h, c| h[c]\
    \ += 1; h }\nend", "  test.split('').group_by { |x| x }.map { |k, v| [k, v.count]\
    \ }.to_h\nend", "  test.split(\"\").inject(Hash.new(0)) { |h, c| h[c] += 1; h\
    \ }\nend", "  letters = test.split(\"\")\n  counts = Hash.new(0)\n  letters.each\
    \ { |letter| counts[letter] += 1 }\n  counts\nend", "  # your code here\nend",
  "  histogram = Hash.new(0)\n  test.split('').each { |letter| histogram[letter] +=\
    \ 1 }\n  histogram\nend", "  histogram = Hash.new(0)\n  test.split(\"\").each\
    \ { |letter| histogram[letter] += 1 }\n  histogram\nend", "  histogram = Hash.new(0)\n\
    \  test.split('').each { |letter| histogram[letter] += 1 }\n  histogram\nend",
  "  test.split('').inject(Hash.new(0)) { |h, c| h[c] += 1; h }\nend", "  histogram\
    \ = Hash.new(0)\n  test.split('').each do |letter|\n    histogram[letter] += 1\n\
    \  end\n  histogram\nend", "  histogram = Hash.new(0)\n  test.split(\"\").each\
    \ do |letter|\n    histogram[letter] += 1\n  end\n  histogram\nend", "  histogram\
    \ = Hash.new(0)\n  test.split('').each do |letter|\n    histogram[letter] += 1\n\
    \  end\n  histogram\nend", "  counts = Hash.new(0)\n  test.each_char do |char|\n\
    \    counts[char] += 1\n  end\n  counts\nend", "  histogram = Hash.new(0)\n  test.split('').each\
    \ { |letter| histogram[letter] += 1 }\n  histogram\nend", "  histogram = Hash.new(0)\n\
    \  test.split(\"\").each do |letter|\n    histogram[letter] += 1\n  end\n  histogram\n\
    end", "  histogram = Hash.new(0)\n  test.split(\"\").each do |letter|\n    histogram[letter]\
    \ += 1\n  end\n  histogram\nend", "  test.split(\"\").group_by{|x| x}.map{|k,v|\
    \ [k, v.count]}.to_h\nend", "  histogram = Hash.new(0)\n  test.each_char { |char|\
    \ histogram[char] += 1 }\n  histogram\nend", "  # your code here\n  # test = \"\
    aabbbccccdddd\"\n  # test = \"aabbbccccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
  "  histogram = Hash.new(0)\n  test.split('').each { |letter| histogram[letter] +=\
    \ 1 }\n  histogram\nend", "  result = Hash.new(0)\n  test.split('').each do |letter|\n\
    \    result[letter] += 1\n  end\n  result\nend", "  histogram = Hash.new(0)\n\
    \  test.split('').each { |letter| histogram[letter] += 1 }\n  histogram\nend",
  "  histogram = Hash.new(0)\n  test.split(\"\").each do |letter|\n    histogram[letter]\
    \ += 1\n  end\n  histogram\nend", "  test.split('').group_by { |x| x }.map { |k,\
    \ v| [k, v.size] }.to_h\nend", "  histogram = Hash.new(0)\n  test.split(\"\").each\
    \ do |letter|\n    histogram[letter] += 1\n  end\n  histogram\nend", "  histogram\
    \ = Hash.new(0)\n  test.split(\"\").each do |letter|\n    histogram[letter] +=\
    \ 1\n  end\n  histogram\nend", "  test.split(\"\").group_by{|x| x}.map{|k,v| [k,\
    \ v.length]}.to_h\nend", "  test.split('').each_with_object(Hash.new(0)) { |word,\
    \ counts| counts[word] += 1 }\nend", "  histogram = Hash.new(0)\n  test.each_char\
    \ { |char| histogram[char] += 1 }\n  histogram\nend", "  # your code here\n  #\
    \ test.split(\"\").each_with_object(Hash.new(0)) { |word,counts| counts[word]\
    \ += 1 }\n  test.split(\"\").each_with_object(Hash.new(0)) { |word,counts| counts[word]\
    \ += 1 }.sort_by { |k,v| v }.reverse.to_h\nend", "  histogram = Hash.new(0)\n\
    \  test.split(\"\").each { |letter| histogram[letter] += 1 }\n  histogram\nend",
  "  test.split('').group_by{|x| x}.map{|k,v| [k, v.size]}.to_h\nend", "  histogram\
    \ = Hash.new(0)\n  test.split(\"\").each { |letter| histogram[letter] += 1 }\n\
    \  histogram\nend", "  histogram = Hash.new(0)\n  test.split('').each { |letter|\
    \ histogram[letter] += 1 }\n  histogram\nend", "  test.split(\"\").each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  test.split(\"\").inject(Hash.new(0))\
    \ { |h, c| h[c] += 1; h }\nend", "  test.split(\"\").each_with_object(Hash.new(0))\
    \ { |letter, hash| hash[letter] += 1 }\nend", "  histogram = {}\n  test.split('').each\
    \ do |letter|\n    if histogram[letter]\n      histogram[letter] += 1\n    else\n\
    \      histogram[letter] = 1\n    end\n  end\n  histogram\nend", "  h = Hash.new(0)\n\
    \  test.split(\"\").each { |letter| h[letter] += 1 }\n  h\nend", "  test.split(\"\
    \").group_by { |x| x }.map { |k, v| [k, v.count] }.to_h\nend", "  histogram =\
    \ Hash.new(0)\n  test.each_char { |char| histogram[char] += 1 }\n  histogram\n\
    end", "  test.split.each_with_object(Hash.new(0)) { |word, counts| counts[word]\
    \ += 1 }\nend", "  hist = Hash.new(0)\n  test.split(\"\").each do |letter|\n \
    \   hist[letter] += 1\n  end\n  hist\nend", "  histogram = Hash.new(0)\n  test.each_char\
    \ { |char| histogram[char] += 1 }\n  histogram\nend", "  histogram = Hash.new(0)\n\
    \  test.split('').each { |letter| histogram[letter] += 1 }\n  histogram\nend",
  "  test.split(\"\").inject(Hash.new(0)) { |h, c| h[c] += 1; h }\nend", "  histogram\
    \ = Hash.new(0)\n  test.split(\"\").each { |letter| histogram[letter] += 1 }\n\
    \  histogram\nend", "  histogram = Hash.new(0)\n  test.split(\"\").each do |letter|\n\
    \    histogram[letter] += 1\n  end\n  histogram\nend", "  test.split(\"\").inject(Hash.new(0))\
    \ { |h, c| h[c] += 1; h }\nend", "  histogram = Hash.new(0)\n  test.split(\"\"\
    ).each do |letter|\n    histogram[letter] += 1\n  end\n  histogram\nend", "  test.split(\"\
    \").each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\nend",
  "  hist = Hash.new(0)\n  test.split(\"\").each do |letter|\n    hist[letter] +=\
    \ 1\n  end\n  hist\nend", "  histogram = Hash.new(0)\n  test.split(\"\").each\
    \ { |letter| histogram[letter] += 1 }\n  histogram\nend", "  # your code here\n\
    \  test.split('').each_with_object(Hash.new(0)) { |word, counts| counts[word]\
    \ += 1 }\nend", "  dict = {}\n  test.split(\"\").each do |letter|\n    if dict[letter]\n\
    \      dict[letter] += 1\n    else\n      dict[letter] = 1\n    end\n  end\n \
    \ dict\nend", "  histogram = Hash.new(0)\n  test.split('').each do |letter|\n\
    \    histogram[letter] += 1\n  end\n  histogram\nend", "  histogram = Hash.new(0)\n\
    \  test.split(\"\").each do |letter|\n    histogram[letter] += 1\n  end\n  histogram\n\
    end", "  test.split(\"\").group_by{|x| x}.map{|k,v| [k, v.count]}.to_h\nend",
  "  result = {}\n  test.split(\"\").each do |letter|\n    if result[letter]\n   \
    \   result[letter] += 1\n    else\n      result[letter] = 1\n    end\n  end\n\
    \  result\nend", "  histogram = Hash.new(0)\n  test.split('').each do |letter|\n\
    \    histogram[letter] += 1\n  end\n  histogram\nend", "  histogram = Hash.new(0)\n\
    \  test.split(\"\").each { |letter| histogram[letter] += 1 }\n  histogram\nend",
  "  hash = Hash.new(0)\n  test.split(\"\").each do |letter|\n    hash[letter] +=\
    \ 1\n  end\n  hash\nend", "  histogram = Hash.new(0)\n  test.split('').each {\
    \ |letter| histogram[letter] += 1 }\n  histogram\nend", "  test.split('').inject(Hash.new(0))\
    \ { |h, c| h[c] += 1; h }\nend", "  test.split(\"\").each_with_object(Hash.new(0))\
    \ { |word, counts| counts[word] += 1 }\nend", "  test.split('').group_by{|x| x}.map{|k,v|\
    \ [k, v.count]}.to_h\nend", "  histogram = {}\n  test.split(\"\").each do |letter|\n\
    \    if histogram[letter]\n      histogram[letter] += 1\n    else\n      histogram[letter]\
    \ = 1\n    end\n  end\n  histogram\nend", "  histogram = {}\n  test.split(\"\"\
    ).each do |letter|\n    if histogram[letter]\n      histogram[letter] += 1\n \
    \   else\n      histogram[letter] = 1\n    end\n  end\n  histogram\nend", "  letters\
    \ = test.split('')\n  letters.each_with_object(Hash.new(0)) { |letter, hash| hash[letter]\
    \ += 1 }\nend", "  letters = test.split('')\n  counts = Hash.new(0)\n  letters.each\
    \ { |letter| counts[letter] += 1 }\n  counts\nend", "  test.split(\"\").each_with_object(Hash.new(0))\
    \ { |letter, hash| hash[letter] += 1 }\nend", "  histogram = Hash.new(0)\n  test.each_char\
    \ { |char| histogram[char] += 1 }\n  histogram\nend", "  test.split(\"\").group_by{|x|\
    \ x}.map{|k,v| [k, v.count]}.to_h\nend", "  histogram = {}\n  test.split('').each\
    \ do |letter|\n    if histogram[letter]\n      histogram[letter] += 1\n    else\n\
    \      histogram[letter] = 1\n    end\n  end\n  histogram\nend", "  histogram\
    \ = Hash.new(0)\n  test.split(\"\").each do |letter|\n    histogram[letter] +=\
    \ 1\n  end\n  histogram\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
