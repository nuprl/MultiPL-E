name: HumanEval_59_largest_prime_factor
language: rb
prompt: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  def largest_prime_factor(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_prime_factor\n\
  \    candidate = method(:largest_prime_factor)\n    assert_equal(5, candidate.call(15))\n\
  \    assert_equal(3, candidate.call(27))\n    assert_equal(7, candidate.call(63))\n\
  \    assert_equal(11, candidate.call(330))\n    assert_equal(29, candidate.call(13195))\n\
  \  end\nend\n"
completions: ["  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  i\nend", "  # TODO\nend", "  i = 2\n  while i\
    \ <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  i\nend", "  # TODO: implement this\nend", "  # TODO\nend", "  # TODO\nend",
  "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  i\nend", "  i = 2\n  while i < n\n    if n % i == 0\n \
    \     n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  # TODO\nend",
  "  i = 2\n  while i < n\n    if n % i == 0\n      return largest_prime_factor(n\
    \ / i)\n    end\n    i += 1\n  end\n  return n\nend", "  i = 2\n  while i <= n\n\
    \    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\n\
    end", "  # TODO: implement this method\n  i = 2\n  while i <= n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  #\
    \ TODO\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while i < n\n    if n %\
    \ i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", " \
    \ return n if is_prime?(n)\n  (2..n).each do |i|\n    return largest_prime_factor(n\
    \ / i) if n % i == 0\n  end\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n\
    \      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  # TODO: Implement\
    \ me!\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  n\nend", "  i = 2\n  while i < n\n    if n %\
    \ i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", " \
    \ (2..n).each do |i|\n    if n % i == 0\n      return largest_prime_factor(n /\
    \ i)\n    end\n  end\nend", "  # TODO\nend", "  (2..n).each do |i|\n    if n %\
    \ i == 0\n      return largest_prime_factor(n / i)\n    end\n  end\nend", "  i\
    \ = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n\
    \    end\n  end\n  return i\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n\
    \      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  i = 2\n \
    \ while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n\
    \  end\n  n\nend", "  # TODO\nend", "  # TODO\nend", "  # TODO\nend", "  # Your\
    \ code here\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  n\nend", "  i = 2\n  while i <= n\n\
    \    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\n\
    end", "  # TODO\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /=\
    \ i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  # TODO\nend", "  #\
    \ TODO: Implement this!\nend", "  # TODO: implement me!\nend", "  factor = 2\n\
    \  while n > 1\n    if n % factor == 0\n      n /= factor\n      factor -= 1\n\
    \    end\n    factor += 1\n  end\n  factor\nend", "  i = 2\n  while i <= n\n \
    \   if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\n\
    end", "  return n if is_prime?(n)\n  (2..n).each do |i|\n    return largest_prime_factor(n\
    \ / i) if n % i == 0\n  end\nend", "  # TODO\nend", "  # We can start with 2,\
    \ since it is the smallest prime.\n  i = 2\n  # We will keep dividing n by i until\
    \ n is no longer divisible by i.\n  while n % i == 0\n    n /= i\n  end\n  # Now\
    \ we can increment i by 1, since we know that i is not a factor of n.\n  i +=\
    \ 1\n  # We will keep doing this until i is greater than the square root of n.\n\
    \  # This is because if i is greater than the square root of n, then i^2 is\n\
    \  # greater than n, so i cannot be a factor of n.\n  while i <= Math.sqrt(n)\n\
    \    # If i is a factor of n, then we will divide n by i until n is no longer\n\
    \    # divisible by i.\n    while n % i == 0\n      n /= i\n    end\n    # Now\
    \ we can increment i by 1, since we know that i is not a factor of n.\n    i +=\
    \ 1\n  end\n  # If n is still greater than 1, then n is prime, so n is the largest\
    \ prime\n  # factor of n.\n  if n > 1\n    return n\n  # Otherwise, i-1 is the\
    \ largest prime factor of n.\n  else\n    return i-1\n  end\nend", "  i = 2\n\
    \  while i < n\n    if n % i == 0\n      return largest_prime_factor(n / i)\n\
    \    end\n    i += 1\n  end\n  return n\nend", "  # TODO: Implement this method.\n\
    \  #puts \"n: #{n}\"\n  factor = 2\n  while factor <= n\n    if n % factor ==\
    \ 0\n      n /= factor\n      #puts \"factor: #{factor}\"\n      #puts \"n: #{n}\"\
    \n    else\n      factor += 1\n    end\n  end\n  factor\nend", "  i = 2\n  while\
    \ i <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n \
    \ end\n  i\nend", "  factor = 2\n  while n > 1\n    if n % factor == 0\n     \
    \ n /= factor\n      factor -= 1\n    end\n    factor += 1\n  end\n  factor\n\
    end", "  # TODO: implement this\nend", "  i = 2\n  while i <= n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  #\
    \ TODO\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  i\nend", "  # TODO\nend", "  # TODO\nend", " \
    \ # TODO\nend", "  # TODO: Implement this method.\n  i = 2\n  while i < n\n  \
    \  if n % i == 0\n      n = n / i\n    else\n      i += 1\n    end\n  end\n  return\
    \ n\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while i <= n\n    if n %\
    \ i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", " \
    \ i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  return n\nend", "  # TODO\nend", "  # TODO\nend", "  #\
    \ TODO\nend", "  return n if n.prime?\n  (2..n).each do |i|\n    return largest_prime_factor(n\
    \ / i) if n % i == 0\n  end\nend", "  # TODO: implement this\nend", "  i = 2\n\
    \  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n   \
    \ end\n  end\n  i\nend", "  # Write your code here\nend", "  (2..n).each do |i|\n\
    \    if n % i == 0\n      return largest_prime_factor(n / i)\n    end\n  end\n\
    end", "  # TODO\nend", "  # TODO\nend", "  # TODO\nend", "  i = 2\n  while i <=\
    \ n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  i\nend", "  # TODO\nend", "  # TODO\nend", "  # TODO\nend", "  i = 2\n  while\
    \ i <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n \
    \ end\n  i\nend", "  # TODO: implement me!\nend", "  i = 2\n  while i < n\n  \
    \  if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\n\
    end", "  # TODO\nend", "  # TODO\nend", "  i = 2\n  while i < n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  return\
    \ n if is_prime?(n)\n  (2..n).each do |i|\n    if n % i == 0\n      return largest_prime_factor(n\
    \ / i)\n    end\n  end\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n  \
    \    n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  # TODO: implement\
    \ this method\nend", "  # Your code here\nend", "  i = 2\n  while i < n\n    if\
    \ n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  return n\n\
    end", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n   \
    \   i += 1\n    end\n  end\n  n\nend", "  # TODO: Implement this method\nend",
  "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  i\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n\
    \      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  return nil\
    \ if n <= 1\n  return n if is_prime?(n)\n  (2..n).each do |i|\n    if n % i ==\
    \ 0\n      return largest_prime_factor(n / i)\n    end\n  end\nend", "  i = 2\n\
    \  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n   \
    \ end\n  end\n  i\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /=\
    \ i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  # TODO\nend", "  i\
    \ = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n\
    \    end\n  end\n  i\nend", "  (2..n).each do |i|\n    if n % i == 0\n      return\
    \ [i, largest_prime_factor(n / i)].max\n    end\n  end\nend", "  # TODO: Implement\
    \ this method.\n  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n   \
    \ else\n      i += 1\n    end\n  end\n  i\nend", "  # TODO\nend", "  # TODO\n\
    end", "  return nil if n < 2\n  return n if is_prime?(n)\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    if n % i == 0\n      return largest_prime_factor(n / i)\n    end\n\
    \  end\nend", "  # TODO\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n \
    \     n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while\
    \ i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  n\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      return largest_prime_factor(n\
    \ / i)\n    end\n    i += 1\n  end\n  return n\nend", "  # TODO\nend", "  # TODO\n\
    end", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n  \
    \    i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while i <= n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  #\
    \ Your code here\nend", "  # TODO\nend", "  i = 2\n  while i < n\n    if n % i\
    \ == 0\n      return largest_prime_factor(n / i)\n    end\n    i += 1\n  end\n\
    \  return n\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  n\nend", "  # TODO: implement this\
    \ method\n  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  return i\nend", "  i = 2\n  while i <= n\n  \
    \  if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\n\
    end", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n  \
    \    i += 1\n    end\n  end\n  i\nend", "  # TODO\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  # TODO: implement this\nend", "  # TODO\n\
    end", "  (2..n).each do |i|\n    if n % i == 0\n      return largest_prime_factor(n\
    \ / i)\n    end\n  end\nend", "  factors = []\n  (2..n).each do |i|\n    if n\
    \ % i == 0\n      factors << i\n      n /= i\n      i -= 1\n    end\n  end\n \
    \ factors.max\nend", "  # TODO: implement me\nend", "  i = 2\n  while i <= n\n\
    \    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\n\
    end", "  # TODO\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /=\
    \ i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  # TODO\nend", "  #\
    \ TODO\nend", "  # TODO\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n \
    \     n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  # TODO\nend",
  "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  i\nend", "  # Find the smallest prime factor of n.\n  prime\
    \ = smallest_prime_factor(n)\n  # If n is prime, return n.\n  return n if prime\
    \ == n\n  # Otherwise, return the largest prime factor of n / prime.\n  largest_prime_factor(n\
    \ / prime)\nend", "  # Start with the smallest prime factor, 2.\n  factor = 2\n\
    \  # Keep going until we've reached the largest prime factor.\n  while factor\
    \ * factor <= n\n    # If factor is a factor of n, divide it out as many times\
    \ as possible.\n    while n % factor == 0\n      n /= factor\n    end\n    # Move\
    \ on to the next prime number.\n    factor += 1\n  end\n  # The remaining n is\
    \ the largest prime factor.\n  n\nend", "  # TODO\nend", "  return nil if n <=\
    \ 1\n  return n if is_prime?(n)\n  (2..n).each do |i|\n    return n / i if n %\
    \ i == 0 && is_prime?(n / i)\n  end\nend", "  factors = []\n  (2..n).each do |i|\n\
    \    if n % i == 0\n      factors << i\n      n /= i\n      i -= 1\n    end\n\
    \  end\n  factors.max\nend", "  # TODO\nend", "  # TODO: implement this method\n\
    end", "  i = 2\n  while i < n\n    if n % i == 0\n      return largest_prime_factor(n\
    \ / i)\n    end\n    i += 1\n  end\n  return n\nend", "  i = 2\n  while i <= n\n\
    \    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\n\
    end", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n  \
    \    i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while i <= n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  #\
    \ TODO\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  return i\nend", "  # TODO\nend", "  # TODO: implement\
    \ me\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  n\nend", "  return nil if n <= 1\n  return n\
    \ if is_prime?(n)\n  (2..n).each do |i|\n    if n % i == 0\n      return largest_prime_factor(n\
    \ / i)\n    end\n  end\nend", "  # TODO: Implement this method.\n  # TODO: Implement\
    \ this method.\n  # TODO: Implement this method.\n  # TODO: Implement this method.\n\
    \  # TODO: Implement this method.\n  # TODO: Implement this method.\n  # TODO:\
    \ Implement this method.\n  # TODO: Implement this method.\n  # TODO: Implement\
    \ this method.\n  # TODO: Implement this method.\n  # TODO: Implement this method.\n\
    \  # TODO: Implement this method.\n  # TODO: Implement this method.\n  # TODO:\
    \ Implement this method.\n  # TODO: Implement this method.\n  # TODO: Implement\
    \ this method.\n  # TODO: Implement this method.\n  # TODO: Implement this method.\n\
    \  # TODO: Implement this method.\n  # TODO: Implement this method.\n  # TODO:\
    \ Implement this method.\n  # TODO: Implement this method.\n  # TODO: Implement\
    \ this method.\n  # TODO: Implement this method.\n  # TODO: Implement this method.\n\
    \  # TODO: Implement this method.\n  # TODO: Implement this method.\n  # TODO:\
    \ Implement this method.\n  # TODO: Implement this method.\n  # TODO: Implement\
    \ this method.\n  # TODO: Implement this method.\n  # TODO: Implement this method.\n\
    \  # TODO: Implement this method.\n  # TODO: Implement this method.\n  # TODO:\
    \ Implement this method.\n  # TODO: Implement this method.\n  # TODO: Implement\
    \ this method.\n  # TODO: Implement this method.\n  # TODO: Implement this method.\n\
    \  # TODO: Implement this method.\n  # TODO: Implement this method.\n  # TODO:\
    \ Implement this method.\n  # TODO: Implement this method.\n  # TODO: Implement\
    \ this method.\n  # TODO: Implement this method.\n  # TODO: Implement this method.\n\
    \  # TODO: Implement this method.\n  # TODO: Implement this method.\n  # TODO:\
    \ Implement this method.\n  # TODO: Implement this method.\n  # TODO: Implement\
    \ this method.\n ", "  # TODO\nend", "  # Start with the smallest prime factor\
    \ of n.\n  factor = 2\n  # Keep going until we have no more factors.\n  while\
    \ factor <= n\n    # If factor is a factor of n, divide it out as many times as\
    \ possible.\n    while n % factor == 0\n      n /= factor\n    end\n    # Move\
    \ on to the next possible factor.\n    factor += 1\n  end\n  # The last factor\
    \ we found is the largest.\n  return factor\nend", "  return nil if n <= 1\n \
    \ return n if is_prime?(n)\n  (2..n).each do |i|\n    if n % i == 0\n      return\
    \ largest_prime_factor(n / i)\n    end\n  end\nend", "  i = 2\n  while i <= n\n\
    \    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\n\
    end", "  # TODO\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /=\
    \ i\n    else\n      i += 1\n    end\n  end\n  return n\nend", "  # TODO\nend",
  "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n\
    \    end\n  end\n  n\nend", "  # Your code here\nend", "  i = 2\n  while i < n\n\
    \    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  return\
    \ n\nend", "  # TODO: implement me!\nend", "  i = 2\n  while i <= n\n    if n\
    \ % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", " \
    \ # TODO\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n   \
    \ else\n      i += 1\n    end\n  end\n  n\nend", "  i = 2\n  while i <= n\n  \
    \  if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\n\
    end", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n  \
    \    i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while i <= n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  #\
    \ TODO\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  i\nend", "  # Your code here\nend", "  # TODO:\
    \ Implement this!\nend", "  # TODO\nend", "  # TODO: Implement this!\nend", " \
    \ # TODO\nend", "  # TODO\nend", "  # TODO\nend", "  i = 2\n  while i < n\n  \
    \  if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\n\
    end", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n  \
    \    i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while i < n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  #\
    \ TODO: implement this method\n  i = 2\n  while i < n\n    if n % i == 0\n   \
    \   n = n / i\n    else\n      i += 1\n    end\n  end\n  return n\nend", "  #\
    \ TODO\nend", "  # Your code here\nend", "  # TODO\nend", "  # TODO\nend", " \
    \ i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  i\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n\
    \      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  # your code\
    \ here\nend", "  (2..n).each do |i|\n    if n % i == 0\n      return largest_prime_factor(n\
    \ / i)\n    end\n  end\nend", "  # TODO\nend", "  # TODO\nend", "  i = 2\n  while\
    \ i <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n \
    \ end\n  i\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n \
    \   else\n      i += 1\n    end\n  end\n  return n\nend", "  i = 2\n  while i\
    \ < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  n\nend", "  # TODO\nend", "  # TODO: Implement this method.\nend", "  # TODO:\
    \ Implement this method.\nend", "  # TODO: Implement this method.\nend", "  i\
    \ = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n\
    \    end\n  end\n  i\nend", "  # TODO: implement\nend", "  i = 2\n  while i <=\
    \ n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  i\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while i <= n\n    if n %\
    \ i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", " \
    \ i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  i\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
