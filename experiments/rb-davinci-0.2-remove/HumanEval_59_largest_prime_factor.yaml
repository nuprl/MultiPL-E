name: HumanEval_59_largest_prime_factor
language: rb
prompt: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  def largest_prime_factor(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_prime_factor\n\
  \    candidate = method(:largest_prime_factor)\n    assert_equal(5, candidate.call(15))\n\
  \    assert_equal(3, candidate.call(27))\n    assert_equal(7, candidate.call(63))\n\
  \    assert_equal(11, candidate.call(330))\n    assert_equal(29, candidate.call(13195))\n\
  \  end\nend\n"
completions: ["  # TODO: implement me\nend", "  i = 2\n  while i < n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  #\
    \ TODO: implement\nend", "  # TODO\nend", "  # Your code here\nend", "  i = 2\n\
    \  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n\
    \  end\n  n\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      return largest_prime_factor(n\
    \ / i)\n    end\n    i += 1\n  end\n  return n\nend", "  # TODO\nend", "  # TODO\n\
    end", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n  \
    \    i += 1\n    end\n  end\n  i\nend", "  # TODO: Implement this method.\nend",
  "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  i\nend", "  # Find the smallest prime factor of n.\n  #\
    \ If it is the largest prime factor, return it.\n  # Otherwise, divide n by it\
    \ and repeat.\n  #\n  # To find the smallest prime factor of n,\n  # start with\
    \ 2 and check if it divides n.\n  # If not, try the next prime number.\n  #\n\
    \  # To check if a number is prime,\n  # check if it is divisible by any prime\
    \ number\n  # between 2 and its square root.\n  #\n  # To generate prime numbers,\n\
    \  # start with 2 and keep generating the next prime number.\n  # To generate\
    \ the next prime number,\n  # start with the last prime number and check if it\
    \ is divisible\n  # by any prime number between 2 and its square root.\n  # If\
    \ not, it is the next prime number.\n  #\n  # To check if a number is divisible\
    \ by another number,\n  # use the modulo operator.\n  #\n  # To find the square\
    \ root of a number,\n  # raise it to the power of 0.5.\n  #\n  # To raise a number\
    \ to a power,\n  # use the ** operator.\n  #\n  # To find the square root of a\
    \ number,\n  # raise it to the power of 0.5.\n  #\n  # To raise a number to a\
    \ power,\n  # use the ** operator.\n  #\n  # To find the square root of a number,\n\
    \  # raise it to the power of 0.5.\n  #\n  # To raise a number to a power,\n \
    \ # use the ** operator.\n  #\n  # To find the square root of a number,\n  # raise\
    \ it to the power of 0.5.\n  #\n  # To raise a number to a power,\n  # use the\
    \ ** operator.\n  #\n  # To find the square root of a number,\n  # raise it to\
    \ the power of 0.5.\n  #\n  # To raise a number to a power,\n  # use the ** operator.\n\
    \  #\n  # To find the square root of a number,\n  # raise it to the power of 0.5.\n\
    \  #\n  # To raise a number to a power,\n", "  # TODO: return the largest prime\
    \ factor of n\n  i = 2\n  while i < n\n    if n % i == 0\n      n = n / i\n  \
    \  else\n      i += 1\n    end\n  end\n  n\nend", "  i = 2\n  while i < n\n  \
    \  if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\n\
    end", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n  \
    \    i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while i < n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  #\
    \ TODO: implement this\nend", "  i = 2\n  while i < n\n    if n % i == 0\n   \
    \   n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  i = 2\n  while\
    \ i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  n\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  n\nend", "  # Your code here\nend", "  i = 2\n\
    \  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n   \
    \ end\n  end\n  i\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n\
    \ /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while i\
    \ <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  i\nend", "  # TODO\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n   \
    \   n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while\
    \ i <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n \
    \ end\n  i\nend", "  # TODO\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n\
    \      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  # TODO: Implement\
    \ this!\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n   \
    \ else\n      i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while i <= n\n  \
    \  if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\n\
    end", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n  \
    \    i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while i < n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  #\
    \ TODO: implement\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n\
    \ /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while i\
    \ < n\n    if n % i == 0\n      return largest_prime_factor(n / i)\n    end\n\
    \    i += 1\n  end\n  return n\nend", "  # Start with the smallest prime factor,\
    \ 2.\n  factor = 2\n  # Keep going until we find a factor that is larger than\
    \ n.\n  while factor <= n\n    # If n is divisible by factor, then factor is a\
    \ prime factor of n.\n    if n % factor == 0\n      # Divide n by factor.\n  \
    \    n /= factor\n      # If n is now 1, then factor is the largest prime factor\
    \ of the original n.\n      if n == 1\n        return factor\n      end\n    else\n\
    \      # If n is not divisible by factor, then factor is not a prime factor of\
    \ n.\n      # Go to the next number.\n      factor += 1\n    end\n  end\nend",
  "  # TODO: Implement this method\nend", "  i = 2\n  while i <= n\n    if n % i ==\
    \ 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  # TODO\n\
    end", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n  \
    \    i += 1\n    end\n  end\n  i\nend", "  # TODO: implement this\nend", "  #\
    \ TODO\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  n\nend", "  # TODO\nend", "  i = 2\n  while i\
    \ < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  n\nend", "  # TODO\nend", "  # TODO\nend", "  i = 2\n  while i <= n\n    if\
    \ n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend",
  "  # TODO\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n   \
    \ else\n      i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while i <= n\n  \
    \  if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\n\
    end", "  # TODO\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /=\
    \ i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while i <\
    \ n\n    if n % i == 0\n      return largest_prime_factor(n / i)\n    end\n  \
    \  i += 1\n  end\n  return n\nend", "  # Start with the smallest prime number,\
    \ 2.\n  factor = 2\n  # Keep going until we have no more factors.\n  while factor\
    \ <= n\n    # If n is divisible by factor, divide it out.\n    if n % factor ==\
    \ 0\n      n /= factor\n    # Otherwise, move on to the next prime number.\n \
    \   else\n      factor += 1\n    end\n  end\n  # The last factor we found is the\
    \ largest prime factor.\n  factor\nend", "  # TODO\nend", "  i = 2\n  while i\
    \ <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  i\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  n\nend", "  i = 2\n  while i < n\n    if n %\
    \ i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", " \
    \ # TODO\nend", "  # TODO\nend", "  # TODO: implement this\nend", "  # TODO: Implement\
    \ this method\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n\
    \    else\n      i += 1\n    end\n  end\n  i\nend", "  # TODO: implement this!\n\
    end", "  # Find the smallest prime factor of n.\n  i = 2\n  while i <= n\n   \
    \ if n % i == 0\n      # Remove all factors of i from n.\n      while n % i ==\
    \ 0\n        n /= i\n      end\n      # i is now the largest prime factor of n.\n\
    \      return i\n    end\n    i += 1\n  end\nend", "  # TODO\nend", "  # TODO:\
    \ Implement this method.\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n\
    \      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  # TODO\n\
    end", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n  \
    \    i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while i <= n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  i\
    \ = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n\
    \    end\n  end\n  i\nend", "  i = 2\n  while i < n\n    if n % i == 0\n     \
    \ n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  i = 2\n  while\
    \ i <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n \
    \ end\n  i\nend", "  # TODO\nend", "  # TODO\nend", "  i = 2\n  while i <= n\n\
    \    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\n\
    end", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n   \
    \   i += 1\n    end\n  end\n  n\nend", "  # TODO\nend", "  # TODO\nend", "  i\
    \ = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n\
    \    end\n  end\n  n\nend", "  # TODO\nend", "  # TODO\nend", "  i = 2\n  while\
    \ i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  n\nend", "  # TODO: implement me!\nend", "  # TODO\nend", "  # TODO\nend",
  "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  i\nend", "  # TODO: implement\nend", "  i = 2\n  while\
    \ i < n\n    if n % i == 0\n      return largest_prime_factor(n / i)\n    end\n\
    \    i += 1\n  end\n  return n\nend", "  (2..n).each do |i|\n    if n % i == 0\n\
    \      return largest_prime_factor(n / i)\n    end\n  end\nend", "  # TODO\nend",
  "  # TODO\nend", "  # TODO: return the largest prime factor of n\n  # TODO: return\
    \ the largest prime factor of n\n  prime_factors(n).max\nend", "  # TODO\nend",
  "  # TODO\nend", "  # TODO\nend", "  # TODO\nend", "  i = 2\n  while i <= n\n  \
    \  if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\n\
    end", "  # TODO: implement this method\n  # return the largest prime factor of\
    \ n\n  # return nil if n is prime\n  # return nil if n <= 1\n  # return nil if\
    \ n is not an integer\n  # return nil if n is not a positive integer\n  # return\
    \ nil if n is not a positive integer\n  # return nil if n is not a positive integer\n\
    \  # return nil if n is not a positive integer\n  # return nil if n is not a positive\
    \ integer\n  # return nil if n is not a positive integer\n  # return nil if n\
    \ is not a positive integer\n  # return nil if n is not a positive integer\n \
    \ # return nil if n is not a positive integer\n  # return nil if n is not a positive\
    \ integer\n  # return nil if n is not a positive integer\n  # return nil if n\
    \ is not a positive integer\n  # return nil if n is not a positive integer\n \
    \ # return nil if n is not a positive integer\n  # return nil if n is not a positive\
    \ integer\n  # return nil if n is not a positive integer\n  # return nil if n\
    \ is not a positive integer\n  # return nil if n is not a positive integer\n \
    \ # return nil if n is not a positive integer\n  # return nil if n is not a positive\
    \ integer\n  # return nil if n is not a positive integer\n  # return nil if n\
    \ is not a positive integer\n  # return nil if n is not a positive integer\n \
    \ # return nil if n is not a positive integer\n  # return nil if n is not a positive\
    \ integer\n  # return nil if n is not a positive integer\n  # return nil if n\
    \ is not a positive integer\n  # return nil if n is not a positive integer\n \
    \ # return nil if n is not a positive integer\n  # return nil if n is not a positive\
    \ integer\n  # return nil if n is not a positive integer\n  # return nil if n\
    \ is not a positive integer\n  # return nil if n is not a positive integer\n \
    \ # return nil if n is not a positive integer\n  # return nil if n is not a positive\
    \ integer\n  # return nil if n is not a positive integer\n  # return nil if n\
    \ is not a positive integer\n  # return nil if n is not a positive integer\n \
    \ # return nil if n is", "  # TODO\nend", "  i = 2\n  while i <= n\n    if n %\
    \ i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", " \
    \ # Your code here\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n\
    \ /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  # TODO\nend", " \
    \ # TODO\nend", "  # Your code here\nend", "  i = 2\n  while i <= n\n    if n\
    \ % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", " \
    \ i = 2\n  while i < n\n    if n % i == 0\n      return largest_prime_factor(n\
    \ / i)\n    end\n    i += 1\n  end\n  return n\nend", "  i = 2\n  while i <= n\n\
    \    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\n\
    end", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n  \
    \    i += 1\n    end\n  end\n  i\nend", "  # TODO\nend", "  # TODO: Implement\
    \ this method.\nend", "  # TODO: Implement this method\n  i = 2\n  while i < n\n\
    \    if n % i == 0\n      n = n / i\n    else\n      i += 1\n    end\n  end\n\
    \  return n\nend", "  # Your code here\nend", "  i = 2\n  while i <= n\n    if\
    \ n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend",
  "  # TODO: Implement this method.\nend", "  i = 2\n  while i < n\n    if n % i ==\
    \ 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  # Find\
    \ the smallest prime factor of n.\n  i = 2\n  while i <= n\n    if n % i == 0\n\
    \      # Found a prime factor.\n      # Divide n by this prime factor.\n     \
    \ n /= i\n      # If n is now 1, then we're done.\n      if n == 1\n        return\
    \ i\n      end\n    else\n      # i is not a prime factor of n.\n      # Try the\
    \ next number.\n      i += 1\n    end\n  end\nend", "  i = 2\n  while i < n\n\
    \    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\n\
    end", "  # TODO\nend", "  # TODO: Implement this method.\nend", "  # Your code\
    \ here\nend", "  return nil if n <= 1\n  return n if is_prime?(n)\n  factors =\
    \ prime_factors(n)\n  factors[-1]\nend", "  i = 2\n  while i < n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\nend", "  #\
    \ TODO\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  i\nend", "  # TODO: implement me\nend", "  i\
    \ = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n\
    \    end\n  end\n  i\nend", "  # TODO\nend", "  i = 2\n  while i <= n\n    if\
    \ n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend",
  "  # TODO\nend", "  # TODO\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n\
    \      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  i = 2\n \
    \ while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n\
    \  end\n  return n\nend", "  # Your code here\nend", "  # TODO: implement this\n\
    end", "  # Write your code here.\n  i = 2\n  while i <= n\n    if n % i == 0\n\
    \      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  # TODO\n\
    end", "  # TODO: implement this method\n  i = 2\n  while i <= n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  #\
    \ TODO\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  return i\nend", "  i = 2\n  while i < n\n   \
    \ if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  return\
    \ n\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  i\nend", "  # TODO\nend", "  # Start with the\
    \ smallest prime factor, 2.\n  factor = 2\n  # Keep going until we've reached\
    \ the largest prime factor.\n  while factor <= n\n    # If n is divisible by factor,\
    \ divide it out.\n    if n % factor == 0\n      n /= factor\n    else\n      #\
    \ If it's not divisible by factor, increment factor.\n      factor += 1\n    end\n\
    \  end\n  # The last factor we divided out is the largest prime factor.\n  factor\n\
    end", "  # TODO\nend", "  i = 2\n  while i < n\n    if n % i == 0\n      return\
    \ largest_prime_factor(n / i)\n    end\n    i += 1\n  end\n  return n\nend", " \
    \ # TODO: implement this method\nend", "  i = 2\n  while i <= n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  return i\nend",
  "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  i\nend", "  # TODO\nend", "  # First, find the smallest\
    \ prime factor of n.\n  p = smallest_prime_factor(n)\n  # Now, divide n by p until\
    \ it is no longer divisible by p.\n  while n % p == 0\n    n /= p\n  end\n  #\
    \ Now, p is the largest prime factor of n.\n  return p\nend", "  # TODO\nend",
  "  # TODO: Implement this method\n  prime_factors(n).max\nend", "  # TODO\nend",
  "  # TODO\nend", "  # TODO\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n\
    \      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  # TODO\n\
    end", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n   \
    \   i += 1\n    end\n  end\n  return n\nend", "  i = 2\n  while i <= n\n    if\
    \ n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend",
  "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n      i +=\
    \ 1\n    end\n  end\n  i\nend", "  i = 2\n  while i < n\n    if n % i == 0\n \
    \     n /= i\n    else\n      i += 1\n    end\n  end\n  return n\nend", "  i =\
    \ 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n\
    \    end\n  end\n  n\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n    \
    \  n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  # TODO: implement\
    \ me\nend", "  # TODO: Implement this method.\nend", "  i = 2\n  while i < n\n\
    \    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\n\
    end", "  # TODO: implement\nend", "  # TODO\nend", "  i = 2\n  while i < n\n \
    \   if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  n\n\
    end", "  # TODO\nend", "  # Your code here\nend", "  i = 2\n  while i <= n\n \
    \   if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\n\
    end", "  i = 2\n  while i * i <= n\n    if n % i == 0\n      n /= i\n    else\n\
    \      i += 1\n    end\n  end\n  n\nend", "  # TODO\nend", "  i = 2\n  while i\
    \ <= n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  i\nend", "  # TODO: implement me\nend", "  # TODO\nend", "  # Your code here\n\
    end", "  i = 2\n  while i < n\n    if n % i == 0\n      n /= i\n    else\n   \
    \   i += 1\n    end\n  end\n  n\nend", "  i = 2\n  while i <= n\n    if n % i\
    \ == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  #\
    \ Your code here\nend", "  # Your code here\nend", "  i = 2\n  while i <= n\n\
    \    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n  i\n\
    end", "  i = 2\n  while i <= n\n    if n % i == 0\n      n /= i\n    else\n  \
    \    i += 1\n    end\n  end\n  i\nend", "  # TODO\nend", "  # TODO\nend", "  #\
    \ TODO: Implement this!\nend", "  i = 2\n  while i <= n\n    if n % i == 0\n \
    \     n /= i\n    else\n      i += 1\n    end\n  end\n  i\nend", "  i = 2\n  while\
    \ i < n\n    if n % i == 0\n      n /= i\n    else\n      i += 1\n    end\n  end\n\
    \  n\nend", "  # TODO\nend", "  # TODO\nend", "  factor = 2\n  while n > 1\n \
    \   if n % factor == 0\n      n /= factor\n      factor -= 1\n    end\n    factor\
    \ += 1\n  end\n  factor\nend", "  # TODO\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
