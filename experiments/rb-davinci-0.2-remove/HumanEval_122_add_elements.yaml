name: HumanEval_122_add_elements
language: rb
prompt: "# Given a non-empty array of integers arr and an integer k, return\n# the\
  \ sum of the elements with at most two digits from the first k elements of arr.\n\
  # Example:\ndef add_elements(arr, k)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
  \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
  \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
  \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
  \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5,\
  \ 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
completions: ["  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n     \
    \ sum += num\n    end\n  end\n  sum\nend", "  sum = 0\n  arr.each do |num|\n \
    \   if num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\nend", " \
    \ sum = 0\n  arr[0..k-1].each do |num|\n    if num < 10\n      sum += num\n  \
    \  elsif num < 100\n      sum += num % 10\n      sum += num / 10\n    end\n  end\n\
    \  sum\nend", "  arr.select { |num| num < 100 }.first(k).sum\nend", "  # arr.select\
    \ { |num| num < 100 }.first(k).sum\n  arr.select { |num| num < 100 }.take(k).sum\n\
    end", "  sum = 0\n  arr[0...k].each do |num|\n    if num < 10\n      sum += num\n\
    \    elsif num < 100\n      sum += num % 10\n      sum += num / 10\n    end\n\
    \  end\n  sum\nend", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <=\
    \ 2\n      sum += num\n    end\n  end\n  sum\nend", "  # arr.select { |num| num.to_s.length\
    \ <= 2 }.take(k).sum\n  arr.select { |num| num.to_s.length <= 2 }.first(k).sum\n\
    end", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum\
    \ += num\n    end\n  end\n  sum\nend", "  arr.select { |num| num < 100 }.first(k).sum\n\
    end", "  arr.map { |num| num.to_s.length <= 2 ? num : 0 }.take(k).sum\nend", " \
    \ arr.select { |num| num < 100 }.first(k).sum\nend", "  arr.slice(0, k).select\
    \ { |num| num < 100 }.sum\nend", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n  end\n  sum\nend", "  sum = 0\n  arr.each\
    \ do |num|\n    if num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\n\
    end", "  arr[0..k-1].select { |num| num < 100 }.sum\nend", "  sum = 0\n  arr.each\
    \ do |num|\n    if num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\n\
    end", "  arr.map { |num| num.to_s.length <= 2 ? num : 0 }.sum\nend", "  # your\
    \ code here\nend", "  # sum = 0\n  # arr.each do |num|\n  #   if num.to_s.length\
    \ <= 2\n  #     sum += num\n  #   end\n  # end\n  # sum\n  arr.select { |num|\
    \ num.to_s.length <= 2 }.take(k).sum\nend", "  sum = 0\n  arr.each do |num|\n\
    \    if num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\nend", " \
    \ # your code here\nend", "  arr.map { |num| num.to_s.length <= 2 ? num : 0 }.sum\n\
    end", "  sum = 0\n  arr[0...k].each do |num|\n    if num.to_s.length <= 2\n  \
    \    sum += num\n    end\n  end\n  sum\nend", "  sum = 0\n  arr[0...k].each do\
    \ |num|\n    sum += num if num < 100\n  end\n  sum\nend", "  # sum = 0\n  # arr.each\
    \ do |num|\n  #   if num.to_s.length <= 2\n  #     sum += num\n  #   end\n  #\
    \ end\n  # sum\n  arr.take(k).select { |num| num.to_s.length <= 2 }.sum\nend",
  "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum += num\n\
    \    end\n  end\n  sum\nend", "  arr.map { |num| num.to_s.length <= 2 ? num :\
    \ 0 }.sum\nend", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n\
    \      sum += num\n    end\n  end\n  sum\nend", "  sum = 0\n  arr.each do |num|\n\
    \    if num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\nend", " \
    \ arr.select { |num| num.digits.length <= 2 }.first(k).sum\nend", "  arr.select\
    \ { |num| num.to_s.length <= 2 }.take(k).sum\nend", "  arr.take(k).select { |num|\
    \ num < 100 }.sum\nend", "  sum = 0\n  i = 0\n  while i < k\n    if arr[i] < 10\n\
    \      sum += arr[i]\n    elsif arr[i] < 100\n      sum += arr[i]\n    end\n \
    \   i += 1\n  end\n  sum\nend", "  sum = 0\n  arr.each do |el|\n    if el.to_s.length\
    \ <= 2\n      sum += el\n    end\n  end\n  sum\nend", "  arr.select { |num| num\
    \ < 100 }.first(k).sum\nend", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n  end\n  sum\nend", "  sum = 0\n  arr.each\
    \ do |num|\n    if num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\n\
    end", "  sum = 0\n  arr.each do |num|\n    if num < 100\n      sum += num\n  \
    \  end\n  end\n  sum\nend", "  # your code here\nend", "  sum = 0\n  arr[0...k].each\
    \ do |num|\n    if num < 10\n      sum += num\n    elsif num < 100\n      sum\
    \ += num % 10\n      sum += num / 10\n    end\n  end\n  sum\nend", "  sum = 0\n\
    \  arr.each do |num|\n    if num.to_s.length <= 2\n      sum += num\n    end\n\
    \  end\n  sum\nend", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <=\
    \ 2\n      sum += num\n    end\n  end\n  sum\nend", "  # your code here\nend",
  "  # code here\nend", "  sum = 0\n  arr.each do |num|\n    if num < 100\n      sum\
    \ += num\n    end\n  end\n  sum\nend", "  # your code here\nend", "  sum = 0\n\
    \  arr.each do |num|\n    if num < 100\n      sum += num\n    end\n  end\n  sum\n\
    end", "  arr[0...k].select { |num| num < 100 }.sum\nend", "  sum = 0\n  arr.each\
    \ do |num|\n    if num < 100\n      sum += num\n    end\n  end\n  sum\nend", " \
    \ arr.select { |num| num < 100 }.first(k).sum\nend", "  sum = 0\n  arr.each do\
    \ |num|\n    if num.digits.length <= 2\n      sum += num\n    end\n  end\n  sum\n\
    end", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum\
    \ += num\n    end\n  end\n  sum\nend", "  # sum = 0\n  # arr.each do |num|\n \
    \ #   if num.to_s.length <= 2\n  #     sum += num\n  #   end\n  # end\n  # sum\n\
    \  arr.select { |num| num.to_s.length <= 2 }.reduce(:+)\nend", "  arr.select {\
    \ |num| num.digits.length <= 2 }.first(k).sum\nend", "  # arr.map { |x| x.to_s.length\
    \ <= 2 ? x : 0 }.sum\n  arr.map { |x| x.to_s.length <= 2 ? x : 0 }.take(k).sum\n\
    end", "  # your code here\nend", "  # 1. iterate through the array\n  # 2. if\
    \ the element is less than 10, add it to the sum\n  # 3. if the element is less\
    \ than 100, add it to the sum\n  # 4. if the element is greater than 100, break\n\
    \  # 5. return the sum\n  sum = 0\n  arr.each do |element|\n    if element < 10\n\
    \      sum += element\n    elsif element < 100\n      sum += element\n    else\n\
    \      break\n    end\n  end\n  sum\nend", "  sum = 0\n  i = 0\n  while i < k\n\
    \    sum += arr[i] if arr[i] < 100\n    i += 1\n  end\n  sum\nend", "  arr.select\
    \ { |num| num.digits.length <= 2 }.first(k).sum\nend", "  # arr.select { |num|\
    \ num.digits.length <= 2 }.take(k).sum\n  arr.select { |num| num.to_s.length <=\
    \ 2 }.take(k).sum\nend", "  arr.select { |num| num < 100 }.first(k).reduce(:+)\n\
    end", "  arr.take(k).select { |num| num < 100 }.reduce(:+)\nend", "  # sum = 0\n\
    \  # arr.each do |num|\n  #   if num.to_s.length <= 2\n  #     sum += num\n  #\
    \   end\n  # end\n  # sum\n  arr.take(k).select { |num| num.to_s.length <= 2 }.sum\n\
    end", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum\
    \ += num\n    end\n  end\n  sum\nend", "  # sum = 0\n  # arr.each do |num|\n \
    \ #   if num.to_s.length <= 2\n  #     sum += num\n  #   end\n  # end\n  # sum\n\
    \  arr.select { |num| num.to_s.length <= 2 }.sum\nend", "  sum = 0\n  arr.each\
    \ do |num|\n    if num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\n\
    end", "  arr.map(&:to_s).map(&:length).select { |len| len <= 2 }.map(&:to_i).sum\n\
    end", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum\
    \ += num\n    end\n  end\n  sum\nend", "  sum = 0\n  arr.each do |num|\n    if\
    \ num < 100\n      sum += num\n    end\n  end\n  sum\nend", "  sum = 0\n  arr.each\
    \ do |num|\n    if num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\n\
    end", "  arr.select { |num| num.digits.length <= 2 }.first(k).sum\nend", "  #\
    \ your code here\nend", "  arr.take(k).select { |num| num < 100 }.reduce(:+)\n\
    end", "  # arr.select { |num| num.digits.count <= 2 }.first(k).sum\n  arr.select\
    \ { |num| num.digits.count <= 2 }.take(k).sum\nend", "  arr.select { |num| num.digits.length\
    \ <= 2 }.take(k).sum\nend", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n  end\n  sum\nend", "  arr.take(k).select {\
    \ |x| x < 100 }.sum\nend", "  sum = 0\n  arr[0...k].each do |num|\n    sum +=\
    \ num if num < 100\n  end\n  sum\nend", "  sum = 0\n  arr.each do |num|\n    if\
    \ num < 100\n      sum += num\n    end\n  end\n  sum\nend", "  arr.map(&:to_s).map(&:size).select\
    \ { |size| size <= 2 }.map(&:to_i).sum\nend", "  sum = 0\n  arr.each do |num|\n\
    \    if num < 100\n      sum += num\n    end\n  end\n  sum\nend", "  arr.select\
    \ { |num| num.digits.length <= 2 }.first(k).sum\nend", "  arr.select { |num| num\
    \ < 100 }.first(k).sum\nend", "  arr.take(k).select { |num| num < 100 }.sum\n\
    end", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum\
    \ += num\n    end\n  end\n  sum\nend", "  # sum = 0\n  # arr.each_with_index do\
    \ |num, idx|\n  #   if num.to_s.length <= 2 && idx < k\n  #     sum += num\n \
    \ #   end\n  # end\n  # sum\n  arr.select { |num| num.to_s.length <= 2 }.take(k).sum\n\
    end", "  # your code here\nend", "  arr[0...k].select { |num| num < 100 }.sum\n\
    end", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum\
    \ += num\n    end\n  end\n  sum\nend", "  arr.select { |num| num < 100 }.first(k).sum\n\
    end", "  arr.select { |num| num < 100 }.first(k).sum\nend", "  arr.map { |num|\
    \ num.to_s.length <= 2 ? num : 0 }.first(k).sum\nend", "  sum = 0\n  arr.each\
    \ do |num|\n    if num < 100\n      sum += num\n    end\n  end\n  return sum\n\
    end", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum\
    \ += num\n    end\n  end\n  sum\nend", "  arr.select { |num| num < 100 }.take(k).sum\n\
    end", "  arr[0...k].select { |num| num < 100 }.sum\nend", "  sum = 0\n  arr.each\
    \ do |num|\n    if num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\n\
    end", "  # your code here\nend", "  arr.take(k).select { |num| num < 100 }.sum\n\
    end", "  # arr.select { |num| num < 100 }.first(k).sum\n  arr.select { |num| num\
    \ < 100 }.take(k).sum\nend", "  # your code here\nend", "  # your code here\n\
    end", "  sum = 0\n  arr.each_with_index do |num, i|\n    break if i == k\n   \
    \ sum += num if num.to_s.length <= 2\n  end\n  sum\nend", "  arr.select { |num|\
    \ num < 100 }.first(k).sum\nend", "  # your code here\nend", "  sum = 0\n  arr.each\
    \ do |num|\n    if num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\n\
    end", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum\
    \ += num\n    end\n  end\n  sum\nend", "  arr.take(k).select { |num| num < 100\
    \ }.reduce(:+)\nend", "  sum = 0\n  i = 0\n  while i < k\n    if arr[i] < 10\n\
    \      sum += arr[i]\n    elsif arr[i] < 100\n      sum += arr[i]\n    end\n \
    \   i += 1\n  end\n  sum\nend", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n  end\n  sum\nend", "  arr.select { |num| num\
    \ < 100 }.first(k).sum\nend", "  # sum = 0\n  # arr.each do |num|\n  #   if num.to_s.length\
    \ <= 2\n  #     sum += num\n  #   end\n  # end\n  # sum\n  arr.select { |num|\
    \ num.to_s.length <= 2 }.sum\nend", "  arr.select { |num| num < 100 }.first(k).sum\n\
    end", "  sum = 0\n  arr.each do |num|\n    if num < 100\n      sum += num\n  \
    \  end\n  end\n  sum\nend", "  arr[0...k].select { |num| num < 100 }.sum\nend",
  "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum += num\n\
    \    end\n  end\n  sum\nend", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n  end\n  sum\nend", "  # your code here\nend",
  "  arr.select { |e| e.digits.length <= 2 }.take(k).sum\nend", "  arr.first(k).select\
    \ { |num| num < 100 }.sum\nend", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n  end\n  sum\nend", "  arr.select { |num| num\
    \ < 100 }.first(k).sum\nend", "  # arr.select { |num| num.digits.length <= 2 }.first(k).sum\n\
    \  arr.select { |num| num.to_s.length <= 2 }.first(k).sum\nend", "  # your code\
    \ here\nend", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n \
    \     sum += num\n    end\n  end\n  sum\nend", "  arr.take(k).select { |num| num\
    \ < 100 }.reduce(:+)\nend", "  arr.select { |num| num < 100 }.first(k).sum\nend",
  "  arr.select { |num| num < 100 }.first(k).sum\nend", "  arr.take(k).select { |num|\
    \ num < 100 }.sum\nend", "  arr.map { |num| num.to_s.length <= 2 ? num : 0 }.take(k).sum\n\
    end", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum\
    \ += num\n    end\n  end\n  sum\nend", "  # your code here\nend", "  arr.select\
    \ { |num| num < 100 }.take(k).sum\nend", "  sum = 0\n  arr.each do |num|\n   \
    \ if num.digits.length <= 2\n      sum += num\n    end\n  end\n  sum\nend", " \
    \ arr.select { |num| num < 100 }.first(k).sum\nend", "  sum = 0\n  arr.each do\
    \ |num|\n    if num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\n\
    end", "  # sum = 0\n  # arr.each do |num|\n  #   if num.to_s.length <= 2\n  #\
    \     sum += num\n  #   end\n  # end\n  # sum\n  arr.select { |num| num.to_s.length\
    \ <= 2 }.sum\nend", "  sum = 0\n  i = 0\n  while i < k\n    if arr[i] < 10\n \
    \     sum += arr[i]\n    elsif arr[i] < 100\n      sum += arr[i]\n    end\n  \
    \  i += 1\n  end\n  sum\nend", "  sum = 0\n  i = 0\n  while i < k\n    if arr[i]\
    \ < 10\n      sum += arr[i]\n    elsif arr[i] < 100\n      sum += arr[i]\n   \
    \ end\n    i += 1\n  end\n  sum\nend", "  sum = 0\n  arr.each do |num|\n    if\
    \ num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\nend", "  sum\
    \ = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum += num\n  \
    \  end\n  end\n  sum\nend", "  sum = 0\n  arr.each_with_index do |num, i|\n  \
    \  break if i == k\n    sum += num if num.to_s.length <= 2\n  end\n  sum\nend",
  "  # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  # k = 3\n  # output = 6\n  # 1 + 2\
    \ + 3 = 6\n  # 1 + 2 + 3 + 4 = 10\n  # 1 + 2 + 3 + 4 + 5 = 15\n  # 1 + 2 + 3 +\
    \ 4 + 5 + 6 = 21\n  # 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28\n  # 1 + 2 + 3 + 4 + 5 +\
    \ 6 + 7 + 8 = 36\n  # 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45\n  # 1 + 2 + 3 +\
    \ 4 + 5 + 6 + 7 + 8 + 9 + 10 = 55\n  # 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\
    \ + 11 = 66\n  # 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 = 78\n  # 1\
    \ + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 = 91\n  # 1 + 2 + 3 + 4\
    \ + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 = 105\n  # 1 + 2 + 3 + 4 + 5 +\
    \ 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 = 120\n  # 1 + 2 + 3 + 4 + 5 + 6\
    \ + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 = 136\n  # 1 + 2 + 3 + 4 + 5\
    \ + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 = 153\n  # 1 + 2 + 3\
    \ + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 = 171\n\
    \  # 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17\
    \ + 18 + 19 = 190\n  # 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 +\
    \ 14 + 15", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n   \
    \   sum += num\n    end\n  end\n  sum\nend", "  sum = 0\n  i = 0\n  while i <\
    \ k\n    if arr[i] < 10\n      sum += arr[i]\n    elsif arr[i] < 100\n      sum\
    \ += arr[i]\n    end\n    i += 1\n  end\n  sum\nend", "  sum = 0\n  arr.each do\
    \ |num|\n    if num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\n\
    end", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum\
    \ += num\n    end\n  end\n  sum\nend", "  arr.select { |x| x.digits.length <=\
    \ 2 }.take(k).sum\nend", "  arr.select { |num| num < 100 }.take(k).sum\nend",
  "  # your code here\nend", "  arr.select { |num| num.to_s.length <= 2 }.first(k).sum\n\
    end", "  arr.select { |num| num.to_s.length <= 2 }.first(k).sum\nend", "  # sum\
    \ = 0\n  # arr.each do |num|\n  #   if num.to_s.length <= 2\n  #     sum += num\n\
    \  #   end\n  # end\n  # sum\n  arr.select { |num| num.to_s.length <= 2 }.sum\n\
    end", "  arr.take(k).select { |n| n < 100 }.sum\nend", "  arr.map { |num| num.to_s.length\
    \ < 3 ? num : 0 }.sum\nend", "  arr.select { |num| num < 100 }.first(k).sum\n\
    end", "  # your code here\nend", "  arr.map(&:to_s).map(&:length).map.with_index\
    \ { |len, i| len <= 2 ? arr[i] : 0 }.first(k).sum\nend", "  sum = 0\n  arr.each_with_index\
    \ do |num, idx|\n    break if idx >= k\n    sum += num if num < 100\n  end\n \
    \ sum\nend", "  sum = 0\n  arr.each do |num|\n    if num < 10\n      sum += num\n\
    \    elsif num < 100\n      sum += num\n    end\n  end\n  sum\nend", "  arr.select\
    \ { |num| num < 100 }.first(k).sum\nend", "  sum = 0\n  arr.each do |num|\n  \
    \  if num < 100\n      sum += num\n    end\n  end\n  sum\nend", "  arr.select\
    \ { |num| num < 100 }.first(k).sum\nend", "  sum = 0\n  arr.each do |num|\n  \
    \  if num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\nend", " \
    \ sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum += num\n\
    \    end\n  end\n  sum\nend", "  arr.select { |num| num < 100 }.first(k).sum\n\
    end", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum\
    \ += num\n    end\n  end\n  sum\nend", "  # arr.select { |num| num.digits.length\
    \ <= 2 }.take(k).sum\n  arr.select { |num| num.digits.length <= 2 }.first(k).sum\n\
    end", "  arr.map { |num| num.to_s.length < 3 ? num : 0 }.first(k).sum\nend", " \
    \ sum = 0\n  arr[0...k].each do |num|\n    if num < 10\n      sum += num\n   \
    \ elsif num < 100\n      sum += num % 10\n      sum += num / 10\n    end\n  end\n\
    \  sum\nend", "  # your code here\nend", "  # your code here\nend", "  arr.select\
    \ { |num| num < 100 }.take(k).sum\nend", "  sum = 0\n  arr.each do |num|\n   \
    \ if num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\nend", "  sum\
    \ = 0\n  i = 0\n  while i < k\n    if arr[i] < 10\n      sum += arr[i]\n    elsif\
    \ arr[i] < 100\n      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend",
  "  arr.take(k).select { |num| num < 100 }.sum\nend", "  arr.select { |num| num <\
    \ 100 }.first(k).sum\nend", "  # your code here\nend", "  sum = 0\n  arr.each\
    \ do |num|\n    if num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\n\
    end", "  arr.take(k).select { |num| num < 100 }.sum\nend", "  arr.select { |num|\
    \ num < 100 }.first(k).sum\nend", "  arr.select { |num| num < 100 }.first(k).sum\n\
    end", "  # add code here\n  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n  end\n  sum\nend", "  sum = 0\n  i = 0\n \
    \ while i < k\n    if arr[i] < 10\n      sum += arr[i]\n    elsif arr[i] < 100\n\
    \      sum += arr[i]\n    end\n    i += 1\n  end\n  sum\nend", "  sum = 0\n  arr[0...k].each\
    \ do |num|\n    if num < 10\n      sum += num\n    elsif num < 100\n      sum\
    \ += num / 10 + num % 10\n    else\n      sum += num / 100 + (num % 100) / 10\
    \ + num % 10\n    end\n  end\n  sum\nend", "  # Write your code here\n  sum =\
    \ 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum += num\n    end\n\
    \  end\n  sum\nend", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <=\
    \ 2\n      sum += num\n    end\n  end\n  sum\nend", "  sum = 0\n  arr.each do\
    \ |num|\n    if num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\n\
    end", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum\
    \ += num\n    end\n  end\n  sum\nend", "  arr.select { |num| num < 100 }.first(k).sum\n\
    end", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum\
    \ += num\n    end\n  end\n  sum\nend", "  arr.slice(0, k).select { |num| num <\
    \ 100 }.sum\nend", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <=\
    \ 2\n      sum += num\n    end\n  end\n  sum\nend", "  sum = 0\n  arr.each do\
    \ |num|\n    if num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\n\
    end", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum\
    \ += num\n    end\n  end\n  sum\nend", "  sum = 0\n  arr[0...k].each do |num|\n\
    \    sum += num if num < 100\n  end\n  sum\nend", "  sum = 0\n  arr.each do |num|\n\
    \    sum += num if num.to_s.length <= 2\n    k -= 1\n    break if k == 0\n  end\n\
    \  sum\nend", "  sum = 0\n  arr[0...k].each do |num|\n    sum += num if num <\
    \ 100\n  end\n  sum\nend", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length\
    \ <= 2\n      sum += num\n    end\n  end\n  sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
