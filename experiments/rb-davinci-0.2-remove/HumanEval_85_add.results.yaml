language: rb
name: HumanEval_85_add
results:
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if num.even? && index.odd?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdisw6sx

    Started

    .

    Finished in 0.000629473 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1588.63 tests/s, 6354.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if num.even? && index.odd?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdisw6sx

    Started

    .

    Finished in 0.000629473 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1588.63 tests/s, 6354.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if num.even? && index.odd?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdisw6sx

    Started

    .

    Finished in 0.000629473 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1588.63 tests/s, 6354.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |x,\
    \ i| x + lst[i + 1] if i.odd? }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpa6hdvrrs\nStarted\nE\n===============================================================================\n\
    Error: test_add(TestHumanEval): TypeError: nil can't be coerced into Integer\n\
    /tmp/tmpa6hdvrrs.rb:4:in `+'\n/tmp/tmpa6hdvrrs.rb:4:in `block in add'\n/tmp/tmpa6hdvrrs.rb:4:in\
    \ `each'\n/tmp/tmpa6hdvrrs.rb:4:in `each_with_index'\n/tmp/tmpa6hdvrrs.rb:4:in\
    \ `each'\n/tmp/tmpa6hdvrrs.rb:4:in `map'\n/tmp/tmpa6hdvrrs.rb:4:in `add'\n/tmp/tmpa6hdvrrs.rb:10:in\
    \ `call'\n/tmp/tmpa6hdvrrs.rb:10:in `test_add'\n      7: class TestHumanEval <\
    \ Test::Unit::TestCase\n      8:   def test_add\n      9:     candidate = method(:add)\n\
    \  => 10:     assert_equal(88, candidate.call([4, 88]))\n     11:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     12:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     13:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n===============================================================================\n\
    \nFinished in 0.001304106 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    766.81 tests/s, 0.00 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if num.even? && index.odd?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdisw6sx

    Started

    .

    Finished in 0.000629473 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1588.63 tests/s, 6354.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9b5jip66\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp9b5jip66.rb:11:in `test_add'\n     \
    \ 8:   def test_add\n      9:     candidate = method(:add)\n     10:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 11:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     12:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     13:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     14:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.010785099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.72 tests/s, 185.44 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if num.even? && index.odd?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdisw6sx

    Started

    .

    Finished in 0.000629473 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1588.63 tests/s, 6354.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |x, i|\
    \ x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm40opx41

    Started

    .

    Finished in 0.000413094 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2420.76 tests/s, 9683.03 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |e,\
    \ i| e + i if e.even? && i.odd? }.compact.sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpkapgt9jw\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpkapgt9jw.rb:10:in `test_add'\n     \
    \ 7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_add\n   \
    \   9:     candidate = method(:add)\n  => 10:     assert_equal(88, candidate.call([4,\
    \ 88]))\n     11:     assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n\
    \     12:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n     13:     assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n<88> expected but was\n<89>\n\ndiff:\n? 88\n\
    ?  9\n?  ?\n===============================================================================\n\
    \nFinished in 0.007217648 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.55 tests/s, 138.55 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.inject(0)\
    \ { |sum, (e, i)| sum + (e if i.odd? && e.even?) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzqeieg8i\nStarted\nE\n===============================================================================\n\
    Error: test_add(TestHumanEval): TypeError: nil can't be coerced into Integer\n\
    /tmp/tmpzqeieg8i.rb:4:in `+'\n/tmp/tmpzqeieg8i.rb:4:in `block in add'\n/tmp/tmpzqeieg8i.rb:4:in\
    \ `each'\n/tmp/tmpzqeieg8i.rb:4:in `each_with_index'\n/tmp/tmpzqeieg8i.rb:4:in\
    \ `each'\n/tmp/tmpzqeieg8i.rb:4:in `inject'\n/tmp/tmpzqeieg8i.rb:4:in `add'\n\
    /tmp/tmpzqeieg8i.rb:10:in `call'\n/tmp/tmpzqeieg8i.rb:10:in `test_add'\n     \
    \ 7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_add\n   \
    \   9:     candidate = method(:add)\n  => 10:     assert_equal(88, candidate.call([4,\
    \ 88]))\n     11:     assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n\
    \     12:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n     13:     assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n===============================================================================\n\
    \nFinished in 0.001282294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    779.85 tests/s, 0.00 assertions/s\n"
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo9lz73a4\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpo9lz73a4.rb:11:in `test_add'\n     \
    \ 8:   def test_add\n      9:     candidate = method(:add)\n     10:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 11:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     12:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     13:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     14:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.013708625 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.95 tests/s, 145.89 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |x,\
    \ i| i.odd? ? x : 0 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_bixzvre\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp_bixzvre.rb:11:in `test_add'\n     \
    \ 8:   def test_add\n      9:     candidate = method(:add)\n     10:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 11:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     12:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     13:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     14:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.007328073 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.46 tests/s, 272.92 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |num,\
    \ idx| num.even? && idx.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp726l9bth

    Started

    .

    Finished in 0.000581234 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1720.48 tests/s, 6881.91 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |x,\
    \ i| x if i.odd? && x.even? }.compact.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptx1n0xqm

    Started

    .

    Finished in 0.000608152 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1644.33 tests/s, 6577.30 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    sum += num if num.even? && index.odd?\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n\
    \    candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n\
    \    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp82u46onm

    Started

    .

    Finished in 0.000412549 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2423.95 tests/s, 9695.82 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9b5jip66\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp9b5jip66.rb:11:in `test_add'\n     \
    \ 8:   def test_add\n      9:     candidate = method(:add)\n     10:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 11:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     12:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     13:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     14:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.010785099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.72 tests/s, 185.44 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |x,\
    \ i| x if i.odd? && x.even? }.compact.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptx1n0xqm

    Started

    .

    Finished in 0.000608152 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1644.33 tests/s, 6577.30 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |x,\
    \ i| i.odd? ? x : 0 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_bixzvre\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp_bixzvre.rb:11:in `test_add'\n     \
    \ 8:   def test_add\n      9:     candidate = method(:add)\n     10:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 11:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     12:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     13:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     14:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.007328073 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.46 tests/s, 272.92 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |e,\
    \ i| e if i.odd? && e.even? }.compact.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdpyhwmab

    Started

    .

    Finished in 0.000576897 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1733.41 tests/s, 6933.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  # lst = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]\n  # lst = [1, 3, 5, 7, 9]\n  # lst = [2, 4, 6, 8, 10]\n  # lst =\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  #\
    \ lst = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n  # lst = [2, 4, 6, 8, 10, 12, 14,\
    \ 16, 18, 20]\n  # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n  # lst = [1, 3, 5,\
    \ 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]\n  # lst = [2, 4, 6, 8, 10, 12,\
    \ 14, 16, 18, 20, 22, 24, 26, 28, 30]\n  # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]\n  # lst = [1, 3, 5, 7, 9, 11, 13,\
    \ 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]\n  # lst = [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]\n  # lst = [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmp5je46r6v.rb:18: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmp5je46r6v.rb:26: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |x,\
    \ i| x if i.odd? && x.even? }.compact.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptx1n0xqm

    Started

    .

    Finished in 0.000608152 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1644.33 tests/s, 6577.30 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, idx|\n    if idx.odd? && num.even?\n      sum += num\n    end\n  end\n\
    \  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpto_0z2s3

    Started

    .

    Finished in 0.000579402 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1725.92 tests/s, 6903.67 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if num.even? && index.odd?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdisw6sx

    Started

    .

    Finished in 0.000629473 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1588.63 tests/s, 6354.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo9lz73a4\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpo9lz73a4.rb:11:in `test_add'\n     \
    \ 8:   def test_add\n      9:     candidate = method(:add)\n     10:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 11:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     12:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     13:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     14:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.013708625 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.95 tests/s, 145.89 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |x,\
    \ i| x if i.odd? && x.even? }.compact.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptx1n0xqm

    Started

    .

    Finished in 0.000608152 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1644.33 tests/s, 6577.30 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.inject(0)\
    \ { |sum, (x, i)| i.odd? && x.even? ? sum + x : sum }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp60oczu_k

    Started

    .

    Finished in 0.000566877 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1764.05 tests/s, 7056.20 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if num.even? && index.odd?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdisw6sx

    Started

    .

    Finished in 0.000629473 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1588.63 tests/s, 6354.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if num.even? && index.odd?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdisw6sx

    Started

    .

    Finished in 0.000629473 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1588.63 tests/s, 6354.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  # lst = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]\n  # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20]\n  # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\
    \ 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\
    \ 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,\
    \ 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,\
    \ 92, 93, 94, 95, 96, 97, 98, 99, 100]\n  # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112,\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmpyya2fk2y.rb:9: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmpyya2fk2y.rb:17: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo9lz73a4\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpo9lz73a4.rb:11:in `test_add'\n     \
    \ 8:   def test_add\n      9:     candidate = method(:add)\n     10:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 11:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     12:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     13:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     14:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.013708625 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.95 tests/s, 145.89 assertions/s\n"
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  i = 0\n  sum = 0\n  while i <\
    \ lst.length\n    if i % 2 != 0\n      sum += lst[i]\n    end\n    i += 1\n  end\n\
    \  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn34pwmx7\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpn34pwmx7.rb:19:in `test_add'\n     16:\
    \   def test_add\n     17:     candidate = method(:add)\n     18:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 19:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     20:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     21:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     22:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.007115373 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.54 tests/s, 281.08 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9b5jip66\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp9b5jip66.rb:11:in `test_add'\n     \
    \ 8:   def test_add\n      9:     candidate = method(:add)\n     10:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 11:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     12:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     13:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     14:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.010785099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.72 tests/s, 185.44 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |x, i|\n    if i.odd? && x.even?\n      sum += x\n    end\n  end\n  sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n\
    \    candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n\
    \    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvi_lhw72

    Started

    .

    Finished in 0.000575329 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1738.14 tests/s, 6952.54 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if num.even? && index.odd?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdisw6sx

    Started

    .

    Finished in 0.000629473 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1588.63 tests/s, 6354.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |e,\
    \ i| e if i.odd? }.compact.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplcrv33q1\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmplcrv33q1.rb:11:in `test_add'\n     \
    \ 8:   def test_add\n      9:     candidate = method(:add)\n     10:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 11:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     12:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     13:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     14:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006878956 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.37 tests/s, 290.74 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |x,\
    \ i| x if i.odd? && x.even? }.compact.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo9tjgn0j

    Started

    .

    Finished in 0.000582834 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1715.75 tests/s, 6863.02 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpctuejnll

    Started

    .

    Finished in 0.000594107 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1683.20 tests/s, 6732.79 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |e, i|\
    \ e.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptlu1tt43

    Started

    .

    Finished in 0.000400085 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2499.47 tests/s, 9997.88 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if num.even? && index.odd?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdisw6sx

    Started

    .

    Finished in 0.000629473 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1588.63 tests/s, 6354.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if num.even? && index.odd?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdisw6sx

    Started

    .

    Finished in 0.000629473 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1588.63 tests/s, 6354.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.inject(0)\
    \ { |sum, (v, i)| i.odd? && v.even? ? sum + v : sum }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwge79gfq

    Started

    .

    Finished in 0.000393047 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2544.22 tests/s, 10176.90 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp9b5jip66\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp9b5jip66.rb:11:in `test_add'\n     \
    \ 8:   def test_add\n      9:     candidate = method(:add)\n     10:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 11:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     12:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     13:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     14:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.010785099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.72 tests/s, 185.44 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |x,\
    \ i| x if i.odd? && x.even? }.compact.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptx1n0xqm

    Started

    .

    Finished in 0.000608152 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1644.33 tests/s, 6577.30 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if num.even? && index.odd?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdisw6sx

    Started

    .

    Finished in 0.000629473 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1588.63 tests/s, 6354.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, i|\n    sum += num if num.even? && i.odd?\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6pfx6fdr

    Started

    .

    Finished in 0.000493467 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2026.48 tests/s, 8105.91 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |x,\
    \ i| x if i.odd? && x.even? }.compact.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo9tjgn0j

    Started

    .

    Finished in 0.000582834 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1715.75 tests/s, 6863.02 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  # lst.each_with_index.map { |x,\
    \ i| x if i.odd? }.compact.reduce(:+)\n  lst.select.with_index { |x, i| x if i.odd?\
    \ }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpduhw8fsq\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpduhw8fsq.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006247613 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.06 tests/s, 320.12 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map{|x,i|\
    \ x if i.odd? && x.even?}.compact.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm3nin_2e

    Started

    .

    Finished in 0.000529335 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1889.16 tests/s, 7556.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |e,\
    \ i| i.odd? ? e : e + e }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwhdtcpwt\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpwhdtcpwt.rb:10:in `test_add'\n     \
    \ 7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_add\n   \
    \   9:     candidate = method(:add)\n  => 10:     assert_equal(88, candidate.call([4,\
    \ 88]))\n     11:     assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n\
    \     12:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n     13:     assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n<88> expected but was\n<96>\n===============================================================================\n\
    \nFinished in 0.005971934 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.45 tests/s, 167.45 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.inject(0)\
    \ { |sum, (num, index)| index.odd? && num.even? ? sum + num : sum }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpyomszg4m

    Started

    .

    Finished in 0.00050359 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1985.74 tests/s, 7942.97 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  # lst = [1,2,3,4,5,6,7,8,9,10]\n\
    \  # lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n  # lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n\
    \  # lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]\n\
    \  # lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n\
    \  # lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]\n\
    \  # lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmp688963hn.rb:12: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmp688963hn.rb:20: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |x,\
    \ i| i.odd? ? x : 0 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_bixzvre\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp_bixzvre.rb:11:in `test_add'\n     \
    \ 8:   def test_add\n      9:     candidate = method(:add)\n     10:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 11:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     12:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     13:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     14:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.007328073 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.46 tests/s, 272.92 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  # lst = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]\n  # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  # lst = [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]\n  # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  # lst = [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  #\
    \ lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10]\n  # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  # lst = [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]\n  # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  # lst = [1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10]\n  # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  # lst =\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\
    \  # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  # lst = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]\n  # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  # lst = [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmp_3o7vrjj.rb:24: class definition in method body

    class TestHumanEval < Test::Unit::TestCase

    ^~~~~~~~~~~~~~~~~~~

    /tmp/tmp_3o7vrjj.rb:32: syntax error, unexpected end-of-input, expecting `end''

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |x,\
    \ i| x if i.odd? && x.even? }.compact.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptx1n0xqm

    Started

    .

    Finished in 0.000608152 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1644.33 tests/s, 6577.30 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |e,\
    \ i| i.odd? ? e : e + e }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwhdtcpwt\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpwhdtcpwt.rb:10:in `test_add'\n     \
    \ 7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_add\n   \
    \   9:     candidate = method(:add)\n  => 10:     assert_equal(88, candidate.call([4,\
    \ 88]))\n     11:     assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n\
    \     12:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n     13:     assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n<88> expected but was\n<96>\n===============================================================================\n\
    \nFinished in 0.005971934 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.45 tests/s, 167.45 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, idx|\
    \ idx.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkf0d3eni

    Started

    .

    Finished in 0.000393995 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2538.10 tests/s, 10152.41 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpctuejnll

    Started

    .

    Finished in 0.000594107 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1683.20 tests/s, 6732.79 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if num.even? && index.odd?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdisw6sx

    Started

    .

    Finished in 0.000629473 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1588.63 tests/s, 6354.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |x,\
    \ i| x if i.odd? && x.even? }.compact.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptx1n0xqm

    Started

    .

    Finished in 0.000608152 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1644.33 tests/s, 6577.30 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if num.even? && index.odd?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdisw6sx

    Started

    .

    Finished in 0.000629473 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1588.63 tests/s, 6354.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |x,\
    \ i| x if i.odd? && x.even? }.compact.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptx1n0xqm

    Started

    .

    Finished in 0.000608152 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1644.33 tests/s, 6577.30 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if num.even? && index.odd?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdisw6sx

    Started

    .

    Finished in 0.000629473 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1588.63 tests/s, 6354.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map{|x,i|\
    \ i.odd? ? x : 0}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4hfjvyoq\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp4hfjvyoq.rb:11:in `test_add'\n     \
    \ 8:   def test_add\n      9:     candidate = method(:add)\n     10:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 11:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     12:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     13:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     14:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.007037547 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.09 tests/s, 284.19 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.inject(0)\
    \ { |sum, (item, index)| index.odd? && item.even? ? sum + item : sum }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n\
    \    candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n\
    \    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9wzki5kf

    Started

    .

    Finished in 0.000529347 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1889.12 tests/s, 7556.48 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if num.even? && index.odd?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdisw6sx

    Started

    .

    Finished in 0.000629473 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1588.63 tests/s, 6354.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |x,\
    \ i| x + lst[i + 1] if i.odd? }.compact\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpa6hdvrrs\nStarted\nE\n===============================================================================\n\
    Error: test_add(TestHumanEval): TypeError: nil can't be coerced into Integer\n\
    /tmp/tmpa6hdvrrs.rb:4:in `+'\n/tmp/tmpa6hdvrrs.rb:4:in `block in add'\n/tmp/tmpa6hdvrrs.rb:4:in\
    \ `each'\n/tmp/tmpa6hdvrrs.rb:4:in `each_with_index'\n/tmp/tmpa6hdvrrs.rb:4:in\
    \ `each'\n/tmp/tmpa6hdvrrs.rb:4:in `map'\n/tmp/tmpa6hdvrrs.rb:4:in `add'\n/tmp/tmpa6hdvrrs.rb:10:in\
    \ `call'\n/tmp/tmpa6hdvrrs.rb:10:in `test_add'\n      7: class TestHumanEval <\
    \ Test::Unit::TestCase\n      8:   def test_add\n      9:     candidate = method(:add)\n\
    \  => 10:     assert_equal(88, candidate.call([4, 88]))\n     11:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     12:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     13:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n===============================================================================\n\
    \nFinished in 0.001304106 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    766.81 tests/s, 0.00 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if index.odd? && num.even?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8bqhhkk

    Started

    .

    Finished in 0.00058697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1703.66 tests/s, 6814.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ { |num, index| sum += num if num.even? && index.odd? }\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3j99tpth

    Started

    .

    Finished in 0.000516222 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1937.15 tests/s, 7748.60 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  sum = 0\n  lst.each_with_index\
    \ do |num, index|\n    if num.even? && index.odd?\n      sum += num\n    end\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjdisw6sx

    Started

    .

    Finished in 0.000629473 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1588.63 tests/s, 6354.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo9lz73a4\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpo9lz73a4.rb:11:in `test_add'\n     \
    \ 8:   def test_add\n      9:     candidate = method(:add)\n     10:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 11:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     12:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     13:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     14:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.013708625 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.95 tests/s, 145.89 assertions/s\n"
  timestamp: 1659800089
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.each_with_index.map { |e,\
    \ i| e + i if i.odd? && e.even? }.compact.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpanqzbkcg\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpanqzbkcg.rb:10:in `test_add'\n     \
    \ 7: class TestHumanEval < Test::Unit::TestCase\n      8:   def test_add\n   \
    \   9:     candidate = method(:add)\n  => 10:     assert_equal(88, candidate.call([4,\
    \ 88]))\n     11:     assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n\
    \     12:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n     13:     assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n<88> expected but was\n<89>\n\ndiff:\n? 88\n\
    ?  9\n?  ?\n===============================================================================\n\
    \nFinished in 0.006283191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.15 tests/s, 159.15 assertions/s\n"
  timestamp: 1659800089
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\ndef add(lst)\n  lst.select.with_index { |_, i|\
    \ i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvdwvv_nc

    Started

    .

    Finished in 0.000622118 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1607.41 tests/s, 6429.65 assertions/s

    '
  stdout: ''
  timestamp: 1659800089
