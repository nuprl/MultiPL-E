name: HumanEval_151_double_the_difference
language: rb
prompt: "# Given a list of numbers, return the sum of squares of the numbers\n# in\
  \ the list that are odd. Ignore numbers that are negative or not integers.\n# If\
  \ the input list is empty, return 0.\ndef double_the_difference(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
  \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
  \    assert_equal(25, candidate.call([5.0, 4.0]))\n    assert_equal(0, candidate.call([0.1,\
  \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10.0, -20.0, -30.0]))\n    assert_equal(0,\
  \ candidate.call([-1.0, -2.0, 8.0]))\n    assert_equal(34, candidate.call([0.2,\
  \ 3.0, 5.0]))\n    assert_equal(165, candidate.call([-9.0, -7.0, -5.0, -3.0, -1.0,\
  \ 1.0, 3.0, 5.0, 7.0, 9.0]))\n  end\nend\n"
completions: ["  # Your code here\nend", "  # Your code here\nend", "  # Your code\
    \ here\nend", "  # Your code here\nend", "  # YOUR CODE HERE\nend", "  # Your\
    \ code here\nend", "  # YOUR CODE HERE\nend", "  # Your code here\nend", "  #\
    \ Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # YOUR CODE HERE\nend", "  # Your code here\nend", "  # your code here\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  sum = 0\n  lst.each do |n|\n    if n.is_a?(Integer) && n > 0\n      sum += n**2\n\
    \    end\n  end\n  sum\nend", "  # Your code here\nend", "  # your code here\n\
    end", "  # Your code here\nend", "  # your code here\nend", "  lst.map { |x| x.to_f\
    \ }.reduce(0) { |acc, x| acc + (x * x) }\nend", "  return 0 if lst.empty?\n  lst.map\
    \ { |x| x.is_a?(Integer) && x > 0 ? x**2 : 0 }.reduce(:+)\nend", "  # Your code\
    \ here\nend", "  # Your code here\nend", "  sum = 0\n  lst.each do |num|\n   \
    \ if num.is_a?(Integer) && num > 0\n      sum += num ** 2\n    end\n  end\n  sum\n\
    end", "  # your code here\nend", "  # Your code here\nend", "  sum = 0\n  lst.each\
    \ do |num|\n    if num.is_a?(Integer) && num > 0\n      sum += num**2\n    end\n\
    \  end\n  sum\nend", "  return 0 if lst.empty?\n  lst.map { |x| x.to_i }.select\
    \ { |x| x.odd? }.map { |x| x * x }.sum\nend", "  sum = 0\n  lst.each do |x|\n\
    \    if x.is_a? Integer and x > 0\n      sum += x**2\n    end\n  end\n  return\
    \ sum\nend", "  # Your code here\nend", "  # your code here\nend", "  # Your code\
    \ here\nend", "  # Your code here\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  # your code here\nend", "  if lst.empty?\n    return 0\n\
    \  else\n    lst.map! { |x| x.is_a?(Integer) && x > 0 ? x**2 : 0 }\n    lst.reduce(:+)\n\
    \  end\nend", "  # Your code here\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  if lst.empty?\n    return 0\n  end\n  sum = 0\n  lst.each\
    \ do |num|\n    if num.is_a? Integer and num > 0\n      if num % 2 == 1\n    \
    \    sum += num * num\n      end\n    end\n  end\n  return sum\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  # Your code here\nend", "  return\
    \ 0 if lst.empty?\n  lst.map! { |n| n.is_a?(Integer) && n > 0 ? n : 0 }\n  lst.map!\
    \ { |n| n * n }\n  lst.inject(:+)\nend", "  # Your code here\nend", "  lst.map\
    \ { |x| x * 2 }.reduce(:+) - lst.reduce(:+)\nend", "  sum = 0\n  lst.each do |x|\n\
    \    if x.is_a?(Integer) && x.odd?\n      sum += x**2\n    end\n  end\n  return\
    \ sum\nend", "  # YOUR CODE HERE\nend", "  # Your code here\nend", "  # Fill in\
    \ your code here\nend", "  lst.map { |x| x * 2 }.reduce(:+) - lst.reduce(:+)\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  lst.map { |x| x.to_f }.reduce(0) { |sum, x| sum + (x - x.to_i)**2 }\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  lst.map { |x| x.to_f }.reduce(0) { |sum, x|\
    \ sum + x**2 }\nend", "  # Your code here\nend", "  # Your code here\nend", " \
    \ # YOUR CODE HERE\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  # Your code here\nend", "  # YOUR CODE HERE\nend", "  #\
    \ Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # your code here\nend", "  if lst.empty?\n    return 0\n  end\n  sum = 0\n  lst.each\
    \ do |x|\n    if x.is_a?(Integer) && x > 0\n      sum += x**2\n    end\n  end\n\
    \  return sum\nend", "  # Your code here\nend", "  sum = 0\n  lst.each do |num|\n\
    \    if num.is_a?(Integer) && num > 0\n      sum += num ** 2\n    end\n  end\n\
    \  sum\nend", "  # Your code here\nend", "  # Your code here\nend", "  sum = 0\n\
    \  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum += num**2\n\
    \    end\n  end\n  sum\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  return 0 if lst.empty?\n  sum = 0\n  lst.each\
    \ do |x|\n    if x.is_a?(Integer) && x > 0\n      sum += x**2 if x.odd?\n    end\n\
    \  end\n  sum\nend", "  # YOUR CODE HERE\n  sum = 0\n  lst.each do |x|\n    if\
    \ x.is_a? Integer and x > 0\n      sum += x**2\n    end\n  end\n  return sum\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  sum = 0\n  lst.each\
    \ do |num|\n    if num.is_a?(Integer) && num > 0\n      sum += num ** 2\n    end\n\
    \  end\n  sum\nend", "  # Your code here\nend", "  # your code here\nend", " \
    \ # Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  sum = 0\n  lst.each do |x|\n    if x.is_a?(Integer)\
    \ && x > 0\n      sum += x ** 2\n    end\n  end\n  sum\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num > 0\n      sum += num**2\n    end\n  end\n  sum\nend", "  # your code\
    \ here\nend", "  # Your code here\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  return 0 if lst.empty?\n  lst.map { |x| x.is_a?(Integer)\
    \ && x > 0 ? x**2 : 0 }.reduce(:+)\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  # your code here\nend", "  return\
    \ 0 if lst.empty?\n  lst.map { |x| x.is_a?(Integer) && x.positive? ? x * x : 0\
    \ }.sum\nend", "  # your code here\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a? Integer\n\
    \      if num.odd?\n        sum += num ** 2\n      end\n    end\n  end\n  return\
    \ sum\nend", "  # Your code here\nend", "  sum = 0\n  lst.each do |num|\n    if\
    \ num.is_a?(Integer) && num > 0\n      sum += num ** 2\n    end\n  end\n  sum\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  sum = 0\n  lst.each do |x|\n    if x.is_a?(Integer) && x > 0\n      sum\
    \ += x ** 2\n    end\n  end\n  sum\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  lst.map { |x| x * 2 }.reduce(:+)\
    \ - lst.reduce(:+)\nend", "  # Your code here\nend", "  return 0 if lst.empty?\n\
    \  lst.map { |x| x.to_i }.select { |x| x.odd? }.map { |x| x**2 }.reduce(:+)\n\
    end", "  # your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  return 0 if lst.empty?\n\
    \  lst.map { |n| n.is_a?(Integer) && n > 0 ? n**2 : 0 }.reduce(:+)\nend", "  #\
    \ Your code here\nend", "  # YOUR CODE HERE\nend", "  sum = 0\n  lst.each do |num|\n\
    \    if num.is_a?(Integer) && num > 0\n      if num % 2 == 1\n        sum += num\
    \ ** 2\n      end\n    end\n  end\n  return sum\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  return 0 if lst.empty?\n\
    \  lst.map { |x| x.is_a?(Integer) && x > 0 ? x ** 2 : 0 }.reduce(:+)\nend", " \
    \ # Your code here\nend", "  # Your code here\nend", "  lst.map! { |x| x.to_f\
    \ }\n  lst.map! { |x| x * 2 }\n  lst.map! { |x| x - lst.max }\n  lst.map! { |x|\
    \ x.abs }\n  lst.inject(:+)\nend", "  # Your code here\nend", "  # YOUR CODE HERE\n\
    end", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n\
    \      sum += num * num\n    end\n  end\n  sum\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # TODO: Implement this method\nend", "  # your code\
    \ here\nend", "  # Your code here\nend", "  return 0 if lst.empty?\n  lst.map\
    \ { |num| num.to_i }.select { |num| num.odd? }.map { |num| num ** 2 }.reduce(:+)\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  return 0 if lst.empty?\n\
    \  lst.map { |num| num.is_a?(Integer) && num > 0 ? num * num : 0 }.reduce(:+)\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  sum = 0\n  lst.each\
    \ do |num|\n    if num.is_a?(Integer) && num > 0\n      sum += num ** 2\n    end\n\
    \  end\n  sum\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num > 0\n      sum += num ** 2\n    end\n  end\n  sum\nend", "  # Your code\
    \ here\nend", "  # Your code here\nend", "  # YOUR CODE HERE\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  # Your code here\nend", "  return\
    \ 0 if lst.empty?\n  lst.map { |x| x.is_a?(Integer) && x.positive? ? x**2 : 0\
    \ }.sum\nend", "  # your code here\nend", "  # Your code here\nend", "  return\
    \ 0 if lst.empty?\n  lst.map { |i| i.is_a?(Integer) && i.positive? ? i**2 : 0\
    \ }.sum\nend", "  # Your code here\nend", "  # Your code here\nend", "  sum =\
    \ 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum += num\
    \ ** 2\n    end\n  end\n  sum\nend", "  # Your code here\nend", "  # your code\
    \ here\nend", "  # Your code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
