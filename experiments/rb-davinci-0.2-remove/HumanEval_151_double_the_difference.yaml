name: HumanEval_151_double_the_difference
language: rb
prompt: "# Given a list of numbers, return the sum of squares of the numbers\n# in\
  \ the list that are odd. Ignore numbers that are negative or not integers.\n# If\
  \ the input list is empty, return 0.\ndef double_the_difference(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_double_the_difference\n\
  \    candidate = method(:double_the_difference)\n    assert_equal(0, candidate.call([]))\n\
  \    assert_equal(25, candidate.call([5, 4]))\n    assert_equal(0, candidate.call([0.1,\
  \ 0.2, 0.3]))\n    assert_equal(0, candidate.call([-10, -20, -30]))\n    assert_equal(0,\
  \ candidate.call([-1, -2, 8]))\n    assert_equal(34, candidate.call([0.2, 3, 5]))\n\
  \    assert_equal(165, candidate.call([-9, -7, -5, -3, -1, 1, 3, 5, 7, 9]))\n  end\n\
  end\n"
completions: ["  # Your code here\nend", "  # Your code here\nend", "  # your code\
    \ here\nend", "  # Your code here\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  # Your code here\nend", "  #\
    \ Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += (num * num)\n    end\n  end\n  return sum\nend", "  # Your code here\nend",
  "  return 0 if lst.empty?\n  lst.map { |x| x.is_a?(Integer) && x > 0 ? x**2 : 0\
    \ }.reduce(:+)\nend", "  # YOUR CODE HERE\nend", "  sum = 0\n  lst.each do |num|\n\
    \    if num.is_a?(Integer) && num > 0\n      sum += num ** 2\n    end\n  end\n\
    \  sum\nend", "  # YOUR CODE HERE\nend", "  # your code here\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  return 0 if lst.empty?\n  lst.map\
    \ { |x| x.is_a?(Integer) && x > 0 ? x * x : 0 }.reduce(:+)\nend", "  # Your code\
    \ here\nend", "  return 0 if lst.empty?\n  lst.map { |x| x.is_a?(Integer) && x.odd?\
    \ ? x**2 : 0 }.sum\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # Your code here\nend",
  "  if lst.empty?\n    return 0\n  end\n  sum = 0\n  lst.each do |num|\n    if num.is_a?\
    \ Integer and num > 0\n      if num % 2 == 1\n        sum += num ** 2\n      end\n\
    \    end\n  end\n  return sum\nend", "  # Your code here\nend", "  # your code\
    \ here\nend", "  # Your code here\nend", "  # your code here\nend", "  # YOUR\
    \ CODE HERE\nend", "  # Your code here\nend", "  # Your code here\nend", "  #\
    \ your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  # YOUR CODE HERE\nend",
  "  # your code here\nend", "  # Your code here\nend", "  return 0 if lst.empty?\n\
    \  lst.map { |x| x.is_a?(Integer) && x.positive? ? x**2 : 0 }.sum\nend", "  lst.map!\
    \ { |x| x.to_f }\n  lst.map! { |x| x * 2 }\n  lst.map! { |x| x - lst.min }\n \
    \ lst.inject(:+)\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  return 0 if lst.empty?\n\
    \  lst.map { |x| x.to_i }.select { |x| x.odd? }.map { |x| x**2 }.sum\nend", " \
    \ # Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # your code here\nend", "  # YOUR CODE HERE\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # your code here\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num > 0\n      sum += num ** 2\n    end\n  end\n  sum\nend", "  # YOUR CODE\
    \ HERE\nend", "  # Your code here\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  return 0 if lst.empty?\n  lst.map\
    \ { |num| num.is_a?(Integer) && num.positive? ? num ** 2 : 0 }.sum\nend", "  #\
    \ Your code here\nend", "  # Your code here\nend", "  sum = 0\n  lst.each do |x|\n\
    \    if x.is_a?(Integer) && x > 0\n      sum += x**2\n    end\n  end\n  return\
    \ sum\nend", "  # your code here\nend", "  # Your code here\nend", "  sum = 0\n\
    \  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum += num **\
    \ 2\n    end\n  end\n  sum\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  lst.map { |x| x * 2 }.reduce(:+) - lst.reduce(:+)\n\
    end", "  # your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  # Your code here\nend", "  sum = 0\n  lst.each\
    \ do |num|\n    if num.is_a?(Integer) && num > 0\n      sum += num**2\n    end\n\
    \  end\n  sum\nend", "  lst.map { |x| x * 2 }.reduce(:+) - lst.reduce(:+)\nend",
  "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend", "  return 0 if lst.empty?\n  lst.map\
    \ { |x| x.is_a?(Integer) && x > 0 ? x * x : 0 }.reduce(:+)\nend", "  lst.map {\
    \ |x| x * 2 }.reduce(:+) - lst.reduce(:+)\nend", "  # Your code here\nend", " \
    \ return 0 if lst.empty?\n  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num > 0\n      sum += num**2 if num.odd?\n    end\n  end\n  sum\nend", " \
    \ # Your code here\nend", "  return 0 if lst.empty?\n  lst.map { |x| x.is_a?(Integer)\
    \ && x > 0 ? x**2 : 0 }.reduce(:+)\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  return 0 if lst.empty?\n  lst.select\
    \ { |x| x.is_a?(Integer) && x > 0 }.map { |x| x * x }.reduce(:+)\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  # your code here\nend", "  #\
    \ Your code here\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num > 0\n      sum += num ** 2\n    end\n  end\n  sum\nend", "  sum = 0\n\
    \  lst.each do |x|\n    if x.is_a?(Integer) && x > 0\n      sum += x**2\n    end\n\
    \  end\n  return sum\nend", "  # YOUR CODE HERE\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  lst.map { |x| x * 2 }.reduce(:+) - lst.reduce(:+)\n\
    end", "  # Your code here\nend", "  lst.map { |x| x * 2 }.sum - lst.sum\nend",
  "  if lst.empty?\n    return 0\n  end\n  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num > 0\n      if num % 2 == 1\n        sum += num ** 2\n      end\n    end\n\
    \  end\n  return sum\nend", "  lst.map { |x| x.to_f }.reduce(0) { |sum, x| sum\
    \ + (x - x.to_i) * 2 }\nend", "  # Your code here\nend", "  return 0 if lst.empty?\n\
    \  lst.map { |x| x.is_a?(Integer) && x > 0 ? x**2 : 0 }.sum\nend", "  # Your code\
    \ here\nend", "  # Your code here\nend", "  return 0 if lst.empty?\n  lst.map\
    \ { |x| x.to_i }.select { |x| x.odd? }.map { |x| x**2 }.sum\nend", "  # Your code\
    \ here\nend", "  # Your code here\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  # Your code here\nend", "  #\
    \ Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num**2\n    end\n  end\n  sum\nend", "  # lst.map { |x| x * 2 }.reduce(:+)\n\
    \  lst.map { |x| x * 2 }.inject(:+)\nend", "  # Your code here\nend", "  # your\
    \ code here\nend", "  return 0 if lst.empty?\n  lst.map { |x| x.is_a?(Integer)\
    \ && x > 0 ? x * x : 0 }.reduce(:+)\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  lst.map { |x| x * 2 }.reduce(:+) - lst.reduce(:+)\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer) && num > 0\n      sum\
    \ += num ** 2\n    end\n  end\n  sum\nend", "  # your code here\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  sum = 0\n  lst.each do |num|\n\
    \    if num.is_a?(Integer) && num > 0\n      sum += num ** 2\n    end\n  end\n\
    \  sum\nend", "  # your code here\nend", "  # Your code here\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  # Your code here\nend", "  #\
    \ your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # TODO: Implement this function\nend", "  # Your code here\nend", "  # Your code\
    \ here\nend", "  # your code here\nend", "  lst.map { |x| x.to_f }.reduce(0) {\
    \ |x, y| x + (y * 2 - y * y) }\nend", "  # Your code here\nend", "  # Your code\
    \ here\nend", "  # Your code here\nend", "  return 0 if lst.empty?\n  lst.map\
    \ { |x| x.is_a?(Integer) && x > 0 ? x**2 : 0 }.reduce(:+)\nend", "  # Your code\
    \ here\nend", "  # Your code here\nend", "  # Your code here\nend", "  sum = 0\n\
    \  lst.each do |x|\n    if x.is_a?(Integer) && x > 0\n      sum += x**2\n    end\n\
    \  end\n  return sum\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  lst.map { |x| x.to_f }.reduce(:+)\nend", "  lst.map!\
    \ { |x| x.to_f }\n  lst.each_with_index do |x, i|\n    if x % 2 == 0\n      lst[i]\
    \ = x * 2\n    end\n  end\n  lst.reduce(:+)\nend", "  # Your code here\nend",
  "  # your code here\nend", "  # Your code here\nend", "  # your code here\nend",
  "  # Your code here\nend", "  # Your code here\nend", "  # Your code here\nend",
  "  # Your code here\nend", "  sum = 0\n  lst.each do |num|\n    if num.is_a?(Integer)\
    \ && num > 0\n      sum += num * num\n    end\n  end\n  sum\nend", "  return 0\
    \ if lst.empty?\n  lst.select { |x| x.is_a?(Integer) && x > 0 }.map { |x| x *\
    \ x }.reduce(:+)\nend", "  # Your code here\nend", "  sum = 0\n  lst.each do |num|\n\
    \    if num.is_a?(Integer) && num > 0\n      sum += num**2\n    end\n  end\n \
    \ sum\nend", "  lst.map { |x| x * 2 }.reduce(:+) - lst.reduce(:+)\nend", "  lst.map\
    \ { |num| num * 2 }.reduce(:+)\nend", "  return 0 if lst.empty?\n  lst.map { |num|\
    \ num.is_a?(Integer) && num.positive? ? num * num : 0 }.sum\nend", "  # Your code\
    \ here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
