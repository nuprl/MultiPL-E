name: HumanEval_5_intersperse
language: rb
prompt: "# Insert a number 'delimeter' between every two consecutive elements of input\
  \ list `numbers'\ndef intersperse(numbers, delimeter)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersperse\n\
  \    candidate = method(:intersperse)\n    assert_equal([], candidate.call([], 7))\n\
  \    assert_equal([5, 8, 6, 8, 3, 8, 2], candidate.call([5, 6, 3, 2], 8))\n    assert_equal([2,\
  \ 2, 2, 2, 2], candidate.call([2, 2, 2], 2))\n  end\nend\n"
completions: ["  numbers.each_with_index.map { |n, i| i == 0 ? n : [delimeter, n]\
    \ }.flatten\nend", "  numbers.each_with_index.map do |number, index|\n    if index\
    \ == numbers.length - 1\n      number\n    else\n      [number, delimeter]\n \
    \   end\n  end.flatten\nend", "  numbers.each_with_index.map { |n, i| i == 0 ?\
    \ n : [delimeter, n] }.flatten\nend", "  numbers.inject([]) do |result, number|\n\
    \    result << number\n    result << delimeter\n  end.pop\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.each_with_index.map do |n, i|\n    if i == numbers.length - 1\n\
    \      n\n    else\n      [n, delimeter]\n    end\n  end.flatten\nend", "  numbers.map.with_index\
    \ { |n, i| i.even? ? n : [n, delimeter] }.flatten.drop(1)\nend", "  numbers.each_with_index.map\
    \ { |num, i| i.even? ? num : \"#{delimeter}#{num}\" }.join\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.each_with_index.map do |number, index|\n    if index == 0\n \
    \     number\n    else\n      [delimeter, number]\n    end\n  end.flatten\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\n\
    \  end.pop\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter\n  end.pop\nend", "  numbers.each_with_index.map { |x,\
    \ i| i.even? ? x : \"#{delimeter}#{x}\" }.join\nend", "  numbers.inject([]) do\
    \ |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.each_with_index.map do |number, index|\n    if index == numbers.length\
    \ - 1\n      number\n    else\n      [number, delimeter]\n    end\n  end.flatten\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end.pop\nend", "  numbers.map.with_index { |number, index| index\
    \ == 0 ? number : [delimeter, number] }.flatten\nend", "  numbers.inject([]) do\
    \ |result, number|\n    result << number\n    result << delimeter\n  end[0..-2]\n\
    end", "  numbers.each_with_index.map { |n, i| i == 0 ? n : [delimeter, n] }.flatten\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end.pop\nend", "  numbers.inject([]) { |result, number| result\
    \ << number << delimeter }[0..-2]\nend", "  numbers.join(delimeter)\nend", " \
    \ numbers.each_with_index.map { |n, i| i.zero? ? n : \"#{delimeter}#{n}\" }.join\n\
    end", "  numbers.each_with_index.map { |x, i| i.even? ? x : \"#{delimeter}#{x}\"\
    \ }.join\nend", "  result = []\n  numbers.each_with_index do |number, index|\n\
    \    result << number\n    result << delimeter unless index == numbers.size -\
    \ 1\n  end\n  result\nend", "  numbers.map.with_index { |n, i| i == 0 ? n : [delimeter,\
    \ n] }.flatten\nend", "  numbers.inject([]) do |result, number|\n    result <<\
    \ number\n    result << delimeter\n  end.pop\nend", "  numbers.each_with_index.map\
    \ { |n, i| i == 0 ? n : [delimeter, n] }.flatten\nend", "  numbers.each_with_index.map\
    \ do |number, index|\n    if index == numbers.length - 1\n      number\n    else\n\
    \      [number, delimeter]\n    end\n  end.flatten\nend", "  numbers.each_with_index.map\
    \ { |n, i| i.even? ? n : delimeter }.join\nend", "  numbers.each_with_index.map\
    \ do |number, index|\n    if index == numbers.length - 1\n      number\n    else\n\
    \      [number, delimeter]\n    end\n  end.flatten\nend", "  numbers.each_with_index.map\
    \ { |n, i| i.even? ? n : \"#{delimeter}#{n}\" }.join\nend", "  numbers.each_with_index.map\
    \ { |num, i| i.even? ? num : \"#{delimeter}#{num}\" }.join\nend", "  result =\
    \ []\n  numbers.each_with_index do |number, index|\n    result << number\n   \
    \ result << delimeter unless index == numbers.length - 1\n  end\n  result\nend",
  "  numbers.each_with_index.map do |n, i|\n    if i == numbers.length - 1\n     \
    \ n\n    else\n      [n, delimeter]\n    end\n  end.flatten\nend", "  numbers.each_with_index.map\
    \ { |n, i| i.even? ? n : \"#{delimeter}#{n}\" }.join\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.each_with_index.map do |number, i|\n    if i == numbers.length\
    \ - 1\n      number\n    else\n      [number, delimeter]\n    end\n  end.flatten\n\
    end", "  numbers.inject([]) { |result, number| result + [number, delimeter] }[0..-2]\n\
    end", "  numbers.each_with_index.map { |n, i| i.even? ? n : \"#{delimeter}#{n}\"\
    \ }.join\nend", "  numbers.each_with_index.map do |number, index|\n    if index\
    \ == numbers.length - 1\n      number\n    else\n      [number, delimeter]\n \
    \   end\n  end.flatten\nend", "  numbers.each_with_index.map do |number, index|\n\
    \    index == numbers.length - 1 ? number : [number, delimeter]\n  end.flatten\n\
    end", "  numbers.inject([]) do |result, n|\n    result << n\n    result << delimeter\n\
    \  end.pop\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter\n  end.pop\nend", "  numbers.inject([]) { |result, n|\
    \ result << n << delimeter }[0..-2]\nend", "  numbers.each_with_index.map do |number,\
    \ index|\n    if index == numbers.length - 1\n      number\n    else\n      [number,\
    \ delimeter]\n    end\n  end.flatten\nend", "  numbers.each_with_index.map do\
    \ |n, i|\n    i == numbers.length - 1 ? n : [n, delimeter]\n  end.flatten\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\n\
    \  end.pop\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter\n  end.pop\nend", "  numbers.inject([]) do |result, number|\n\
    \    result << number\n    result << delimeter\n  end[0...-1]\nend", "  result\
    \ = []\n  numbers.each_with_index do |number, index|\n    result << number\n \
    \   result << delimeter unless index == numbers.length - 1\n  end\n  result\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end.pop\nend", "  numbers.map.with_index { |n, i| i.even? ?\
    \ n : \"#{delimeter}#{n}\" }.join\nend", "  result = []\n  numbers.each_with_index\
    \ do |number, index|\n    result << number\n    result << delimeter unless index\
    \ == numbers.length - 1\n  end\n  result\nend", "  numbers.each_with_index.map\
    \ do |n, i|\n    i == numbers.length - 1 ? n : [n, delimeter]\n  end.flatten\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end[0..-2]\nend", "  numbers.each_with_index.map { |n, i| i.even?\
    \ ? n : \"#{delimeter}#{n}\" }.join\nend", "  numbers.each_with_index.map do |number,\
    \ index|\n    if index == numbers.length - 1\n      number\n    else\n      [number,\
    \ delimeter]\n    end\n  end.flatten\nend", "  numbers.each_with_index.map do\
    \ |number, index|\n    if index == numbers.length - 1\n      number\n    else\n\
    \      [number, delimeter]\n    end\n  end.flatten\nend", "  numbers.inject([])\
    \ do |result, n|\n    result << n\n    result << delimeter\n  end.pop\nend", " \
    \ numbers.join(delimeter)\nend", "  numbers.each_with_index.map do |number, index|\n\
    \    if index == numbers.length - 1\n      number\n    else\n      [number, delimeter]\n\
    \    end\n  end.flatten\nend", "  numbers.each_with_index.map { |n, i| i.zero?\
    \ ? n : [delimeter, n] }.flatten\nend", "  numbers.join(delimeter)\nend", "  numbers.each_with_index.map\
    \ do |number, index|\n    if index == numbers.length - 1\n      number\n    else\n\
    \      [number, delimeter]\n    end\n  end.flatten\nend", "  numbers.each_with_index.map\
    \ { |n, i| i == 0 ? n : [delimeter, n] }.flatten\nend", "  numbers.each_with_index.map\
    \ { |n, i| i.even? ? n : delimeter }.join\nend", "  numbers.join(delimeter)\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end.pop\nend", "  numbers.each_with_index.map { |n, i| i ==\
    \ 0 ? n : [delimeter, n] }.flatten\nend", "  result = []\n  numbers.each_with_index\
    \ do |number, index|\n    result << number\n    result << delimeter unless index\
    \ == numbers.length - 1\n  end\n  result\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter\n  end[0..-2]\nend",
  "  numbers.each_with_index.map { |n, i| i == 0 ? n : [delimeter, n] }.flatten\n\
    end", "  result = []\n  numbers.each_with_index do |number, index|\n    result\
    \ << number\n    result << delimeter unless index == numbers.size - 1\n  end\n\
    \  result\nend", "  numbers.each_with_index.map { |n, i| i == 0 ? n : \"#{delimeter}#{n}\"\
    \ }.join\nend", "  numbers.inject([]) do |result, element|\n    result << element\n\
    \    result << delimeter\n  end.pop\nend", "  numbers.inject([]) do |result, number|\n\
    \    result << number\n    result << delimeter\n  end[0..-2]\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end[0..-2]\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end[0..-2]\nend", "  numbers.inject([]) do |result, number|\n\
    \    result << number\n    result << delimeter\n  end.pop\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.each_with_index.map { |n, i| i == 0 ? n : [delimeter, n] }.flatten\n\
    end", "  numbers.each_with_index.map do |number, index|\n    if index < numbers.length\
    \ - 1\n      number.to_s + delimeter\n    else\n      number.to_s\n    end\n \
    \ end.join\nend", "  numbers.each_with_index.map { |n, i| i.even? ? n : \"#{delimeter}#{n}\"\
    \ }.join\nend", "  numbers.each_with_index.map { |x, i| i.even? ? x : [x, delimeter]\
    \ }.flatten.drop(1)\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter\n  end[0..-2]\nend", "  numbers.join(delimeter)\n\
    end", "  numbers.each_with_index.map { |x, i| i == 0 ? x : [delimeter, x] }.flatten\n\
    end", "  numbers.each_with_index.map { |n, i| i == 0 ? n : [delimeter, n] }.flatten\n\
    end", "  numbers.map.with_index { |n, i| i.even? ? n : \"#{delimeter}#{n}\" }.join\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end.pop\nend", "  numbers.inject([]) do |result, number|\n \
    \   result << number\n    result << delimeter\n  end.pop\nend", "  numbers.each_with_index.map\
    \ do |n, i|\n    if i == numbers.length - 1\n      n\n    else\n      [n, delimeter]\n\
    \    end\n  end.flatten\nend", "  numbers.inject([]) do |result, number|\n   \
    \ result << number\n    result << delimeter\n  end[0...-1]\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.join(delimeter)\nend", "  result = []\n  numbers.each_with_index\
    \ do |number, index|\n    result << number\n    result << delimeter unless index\
    \ == numbers.length - 1\n  end\n  result\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter\n  end[0..-2]\nend",
  "  numbers.each_with_index.map do |number, index|\n    if index == numbers.length\
    \ - 1\n      number\n    else\n      [number, delimeter]\n    end\n  end.flatten\n\
    end", "  result = []\n  numbers.each_with_index do |number, index|\n    result\
    \ << number\n    result << delimeter unless index == numbers.length - 1\n  end\n\
    \  result\nend", "  numbers.each_with_index.map { |num, i| i.even? ? num : [num,\
    \ delimeter] }.flatten\nend", "  numbers.each_with_index.map { |number, index|\
    \ index.even? ? number : \"#{delimeter}#{number}\" }.join\nend", "  numbers.each_with_index.map\
    \ { |number, index| index.even? ? number : [number, delimeter] }.flatten[0..-2]\n\
    end", "  numbers.each_with_index.map do |number, index|\n    index == numbers.length\
    \ - 1 ? number : [number, delimeter]\n  end.flatten\nend", "  numbers.each_with_index.map\
    \ { |n, i| i.even? ? n : \"#{delimeter}#{n}\" }.join\nend", "  numbers.inject([])\
    \ { |result, number| result << number << delimeter }[0..-2]\nend", "  numbers.join(delimeter)\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end[0..-2]\nend", "  numbers.map.with_index { |n, i| i.even?\
    \ ? n : [n, delimeter] }.flatten\nend", "  numbers.inject([]) { |result, number|\
    \ result << number << delimeter }.pop\nend", "  numbers.inject([]) { |result,\
    \ number| result << number << delimeter }[0..-2]\nend", "  numbers.each_with_index.map\
    \ { |n, i| i.even? ? n : \"#{delimeter}#{n}\" }.join\nend", "  numbers.each_with_index.map\
    \ do |number, index|\n    if index == numbers.length - 1\n      number\n    else\n\
    \      [number, delimeter]\n    end\n  end.flatten\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.join(delimeter)\nend", "  numbers.inject([]) do |result, number|\n\
    \    result << number\n    result << delimeter\n  end[0...-1]\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.inject([]) { |result, number| result << number << delimeter }.pop\n\
    end", "  result = []\n  numbers.each_with_index do |n, i|\n    result << n\n \
    \   result << delimeter unless i == numbers.length - 1\n  end\n  result\nend",
  "  result = []\n  numbers.each_with_index do |number, index|\n    result << number\n\
    \    result << delimeter unless index == numbers.length - 1\n  end\n  result\n\
    end", "  numbers.each_with_index.map do |number, index|\n    if index == numbers.length\
    \ - 1\n      number\n    else\n      [number, delimeter]\n    end\n  end.flatten\n\
    end", "  numbers.inject([]) { |result, number| result << number << delimeter }.pop\n\
    end", "  numbers.each_with_index.map { |x, i| i.even? ? x : [x, delimeter] }.flatten[0..-2]\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end.pop\nend", "  numbers.each_with_index.map { |x, i| i.even?\
    \ ? x : [x, delimeter] }.flatten.drop(1)\nend", "  numbers.each_with_index.map\
    \ { |n, i| i.even? ? n : \"#{delimeter}#{n}\" }.join\nend", "  numbers.each_with_index.map\
    \ do |number, index|\n    if index == numbers.length - 1\n      number\n    else\n\
    \      [number, delimeter]\n    end\n  end.flatten\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end[0..-2]\nend", "  numbers.each_with_index.map { |n, i| i.even?\
    \ ? n : \"#{delimeter}#{n}\" }.join\nend", "  numbers.each_with_index.map do |num,\
    \ i|\n    if i < numbers.length - 1\n      num.to_s + delimeter\n    else\n  \
    \    num.to_s\n    end\n  end.join\nend", "  numbers.inject([]) do |result, n|\n\
    \    result << n\n    result << delimeter\n  end.pop\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end[0..-2]\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end[0..-2]\nend", "  numbers.inject([]) { |result, number| result\
    \ << number << delimeter }.pop\nend", "  numbers.inject([]) do |result, n|\n \
    \   result << n\n    result << delimeter\n  end.pop\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end[0..-2]\n\
    end", "  numbers.inject([]) { |result, n| result << n << delimeter }[0..-2]\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end.pop\nend", "  numbers.each_with_index.map { |n, i| i.even?\
    \ ? n : delimeter }.join\nend", "  numbers.each_with_index.map { |n, i| i.even?\
    \ ? n : \"#{delimeter}#{n}\" }.join\nend", "  numbers.each_with_index.map do |number,\
    \ index|\n    if index == numbers.length - 1\n      number\n    else\n      [number,\
    \ delimeter]\n    end\n  end.flatten\nend", "  numbers.inject([]) { |result, number|\n\
    \    result << number\n    result << delimeter\n  }.pop # remove last delimeter\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end.pop\nend", "  numbers.each_with_index.map { |x, i| i.even?\
    \ ? x : [x, delimeter] }.flatten[0..-2]\nend", "  numbers.join(delimeter)\nend",
  "  numbers.join(delimeter)\nend", "  numbers.each_with_index.map { |n, i| i.even?\
    \ ? n : \"#{delimeter}#{n}\" }.join\nend", "  numbers.each_with_index.map { |n,\
    \ i| i.even? ? n : delimeter }.join\nend", "  numbers.inject([]) do |result, number|\n\
    \    result << number\n    result << delimeter\n  end.pop\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.inject([]) { |result, number| result << number << delimeter }.pop\n\
    end", "  numbers.each_with_index.map do |number, index|\n    if index < numbers.length\
    \ - 1\n      number.to_s + delimeter\n    else\n      number.to_s\n    end\n \
    \ end.join\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter\n  end.pop\nend", "  result = []\n  numbers.each_with_index\
    \ do |number, index|\n    result << number\n    result << delimeter unless index\
    \ == numbers.length - 1\n  end\n  result\nend", "  numbers.each_with_index.map\
    \ { |n, i| i.even? ? n : \"#{delimeter}#{n}\" }.join\nend", "  numbers.each_with_index.map\
    \ { |n, i| i.even? ? n : \"#{delimeter}#{n}\" }.join\nend", "  numbers.each_with_index.map\
    \ do |number, index|\n    if index == numbers.length - 1\n      number\n    else\n\
    \      [number, delimeter]\n    end\n  end.flatten\nend", "  result = []\n  numbers.each_with_index\
    \ do |n, i|\n    result << n\n    result << delimeter unless i == numbers.length\
    \ - 1\n  end\n  result\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter\n  end[0..-2]\nend", "  result = []\n  numbers.each_with_index\
    \ do |n, i|\n    result << n\n    result << delimeter unless i == numbers.length\
    \ - 1\n  end\n  result\nend", "  numbers.each_with_index.map do |number, index|\n\
    \    if index == numbers.length - 1\n      number\n    else\n      [number, delimeter]\n\
    \    end\n  end.flatten\nend", "  numbers.map.with_index { |n, i| i == 0 ? n :\
    \ [delimeter, n] }.flatten\nend", "  numbers.inject([]) do |result, number|\n\
    \    result << number\n    result << delimeter\n  end[0...-1]\nend", "  numbers.each_with_index.map\
    \ do |number, index|\n    if index == numbers.length - 1\n      number\n    else\n\
    \      [number, delimeter]\n    end\n  end.flatten\nend", "  result = []\n  numbers.each_with_index\
    \ do |number, index|\n    result << number\n    result << delimeter unless index\
    \ == numbers.length - 1\n  end\n  result\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter\n  end.pop\nend", " \
    \ numbers.each_with_index.map { |x, i| i.even? ? x : [x, delimeter] }.flatten.drop(1)\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end.pop\nend", "  numbers.inject([]) do |result, number|\n \
    \   result << number\n    result << delimeter\n  end.pop\nend", "  numbers.each_with_index.map\
    \ { |number, index| index.even? ? number : delimeter }.join\nend", "  numbers.each_with_index.map\
    \ do |num, index|\n    index == numbers.length - 1 ? num : [num, delimeter]\n\
    \  end.flatten\nend", "  numbers.inject([]) do |result, number|\n    result <<\
    \ number\n    result << delimeter\n  end.pop\nend", "  result = []\n  numbers.each_with_index\
    \ do |number, index|\n    result << number\n    result << delimeter unless index\
    \ == numbers.size - 1\n  end\n  result\nend", "  numbers.each_with_index.map do\
    \ |n, i|\n    if i == numbers.length - 1\n      n\n    else\n      [n, delimeter]\n\
    \    end\n  end.flatten\nend", "  numbers.each_cons(2).map { |a, b| [a, delimeter,\
    \ b] }.flatten(1)\nend", "  numbers.each_with_index.map do |number, index|\n \
    \   if index == numbers.length - 1\n      number\n    else\n      [number, delimeter]\n\
    \    end\n  end.flatten\nend", "  numbers.each_with_index.map { |num, i| i.even?\
    \ ? num : delimeter }.join\nend", "  numbers.inject([]) do |result, n|\n    result\
    \ << n\n    result << delimeter\n  end.pop\nend", "  numbers.join(delimeter)\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end.pop\nend", "  numbers.inject([]) do |result, number|\n \
    \   result << number\n    result << delimeter\n  end.pop\nend", "  numbers.each_with_index.map\
    \ { |n, i| i.even? ? n : \"#{delimeter}#{n}\" }.join\nend", "  numbers.join(delimeter)\n\
    end", "  numbers.each_with_index.map { |n, i| i.even? ? n : delimeter }.join\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end.pop\nend", "  numbers.inject([]) do |result, number|\n \
    \   result << number\n    result << delimeter\n  end[0..-2]\nend", "  numbers.each_with_index.map\
    \ do |number, index|\n    if index == numbers.length - 1\n      number\n    else\n\
    \      [number, delimeter]\n    end\n  end.flatten\nend", "  numbers.each_with_index.map\
    \ { |n, i| i.even? ? n : \"#{delimeter}#{n}\" }.join\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end[0..-2]\n\
    end", "  numbers.each_with_index.map { |n, i| i.even? ? n : delimeter }.join\n\
    end", "  result = []\n  numbers.each_with_index do |number, index|\n    result\
    \ << number\n    result << delimeter unless index == numbers.size - 1\n  end\n\
    \  result\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter\n  end.pop\nend", "  numbers.join(delimeter)\nend", " \
    \ numbers.inject([]) { |result, number| result << number << delimeter }.pop\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end.pop\nend", "  numbers.each_with_index.map do |number, index|\n\
    \    if index == numbers.length - 1\n      number\n    else\n      [number, delimeter]\n\
    \    end\n  end.flatten\nend", "  numbers.each_with_index.map { |n, i| i.even?\
    \ ? n : \"#{delimeter}#{n}\" }.join\nend", "  numbers.each_with_index.map { |n,\
    \ i| i.even? ? n : \"#{delimeter}#{n}\" }.join\nend", "  numbers.each_with_index.map\
    \ { |n, i| i == 0 ? n : [delimeter, n] }.flatten\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
