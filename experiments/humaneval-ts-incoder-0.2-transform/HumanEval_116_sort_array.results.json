{
  "language": "ts",
  "name": "HumanEval_116_sort_array",
  "results": [
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpk9vadqqj.js:18:12)\n    at Object.<anonymous> (/tmp/tmpk9vadqqj.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((v) => v.toString(2).split('').reduce((a, b) => a + +b, 0));\n  const maxOnes = Math.max(...ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnes.toString(2);\n  const maxOnesBinIndex = maxOnesBin.indexOf('1');\n  const maxOnesBinLen = maxOnesBin.length;\n  const maxOnesBinIndex = maxOnesBinIndex === -1 ? maxOnesBinLen : maxOnesBinIndex;\n  const maxOnesBin = maxOnesBin.substr(0, maxOnesBinIndex);\n  const maxOnesBinNum = maxOnesBin.split('').length;\n  const maxOnesBinNumIndex = maxOnesBinNum === 1 ? 0 : maxOnesBinNum - 1;\n  const maxOnesBinNum = maxOnesBinNum.substr(0, maxOnesBinNumIndex);\n  const maxOnesBinNumNum = maxOnesBinNum.split('').reduce((a, b) => a + +b, 0);\n  const maxOnesBinNumNumIndex = maxOnesBinNumNum === 1 ? 0 : maxOnesBinNumNum - 1;\n  const maxOnesBinNumNum = maxOnesBinNumNum.substr(0, maxOnesBinNumNumIndex);\n  const maxOnesBinNumNumNum = maxOnesBinNumNumNum.toString(2);\n  const maxOnesBinNumNumNumIndex = maxOnesBinNumNumNum === 1 ? 0 : maxOnesBinNumNumNum - 1;\n  const maxOnesBinNumNumNum = maxOnesBinNumNumNum.substr(0, maxOnesBinNumNumNumIndex);\n  const maxOnesBinNumNumNumNum = maxOnesBinNumNumNumNum.substr(0, maxOnesBinNumNumNumNumIndex + 1);\n  const maxOnesBinNumNumNumNumIndex = maxOnesBinNumNumNumNum === 1 ? 0 : maxOnesBinNumNumNum - 1;\n  const maxOnesBinNumNumNumNum = maxOnesBinNumNumNumNum.substr(0, maxOnesBinNumNumNumNumIndex);\n  const maxOnesBinNumNumNumNumNum = maxOnesBinNumNumNumNumNum.substr(0, maxOnesBinNumNumNumNumNumIndex + 1);\n  const maxOnesBinNumNumNumNumNumIndex = maxOnesBinNumNumNumNumNum === 1 ? 0 : maxOne\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp585o2ly.ts(54,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334362
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((x) => x === 1 ? 1 : 0);\n  const sortedOnes = ones\n    .map((x) => [x, ones.indexOf(x)])\n    .sort((a, b) => a[1] - b[1]);\n  const sortedArr = arr.map((x) => x);\n  for (let i = 0; i < sortedOnes.length; i++) {\n    sortedArr.splice(sortedArr.indexOf(sortedOnes[i][0]), 1);\n  }\n  return sortedArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpcka5b0ks.js:29:12)\n    at Object.<anonymous> (/tmp/tmpcka5b0ks.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334363
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const maxOnes = Math.max(...ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin = bin(maxOnes);\n  const maxOnesBinIndex = maxOnesBin.indexOf(maxOnesBin[0]);\n  const maxOnesBinCount = maxOnesBin.length;\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCountIndex = maxOnesBin.indexOf(maxOnesBinCount);\n  const maxOnesBinCount\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkjlar_wk.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334362
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((x) => x === 1);\n  const dec = ones.length ? Math.log10(ones.length) : 0;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10) * 10;\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx0qof9he.ts(68,9): error TS1005: ',' expected.\n../../../../tmp/tmpx0qof9he.ts(84,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334362
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(a => a.length));\n  const maxLenDiff = Math.abs(maxLen - len);\n  if (maxOnes === maxLen) {\n    return arr;\n  }\n  const maxOnesDiff = Math.abs(maxOnes - len);\n  if (maxOnesDiff < maxLenDiff) {\n    return arr;\n  }\n  const maxOnesDiff = Math.abs(maxOnes - len);\n  const maxOnesDiffIndex = arr.findIndex(a => a === maxOnes);\n  const maxOnesDiffIndex = Math.max(...arr.map(a => a.length));\n  const maxOnesDiffIndexDiff = Math.abs(maxOnesDiffIndex - len);\n  if (maxOnesDiffIndexDiff < maxLenDiff) {\n    return arr;\n  }\n  const maxOnesDiffIndexDiff = Math.abs(maxOnesDiffIndex - len);\n  const maxOnesDiffIndexDiffIndex = arr.findIndex(a => a === maxOnesDiffIndex);\n  const maxOnesDiffIndexDiffIndex = Math.max(...arr.map(a => a.length));\n  const maxOnesDiffIndexDiffIndexDiff = Math.abs(maxOnesDiffIndexDiffIndex - len);\n  if (maxOnesDiffIndexDiffIndexDiff < maxLenDiff) {\n    return arr;\n  }\n  const maxOnesDiffIndexDiffIndexDiff = Math.abs(maxOnesDiffIndexDiffIndex - len);\n  const maxOnesDiffIndexDiffIndexDiffIndex = arr.findIndex(a => a === maxOnesDiffIndexDiffIndex);\n  const maxOnesDiffIndexDiffIndexDiffIndex = Math.max(...arr.map(a => a.length));\n  const maxOnesDiffIndexDiffIndexDiffIndexDiff = Math.abs(maxOnesDiffIndexDiffIndexDiffIndex - len);\n  if (maxOnesDiffIndexDiffIndexDiffIndexDiff < maxLenDiff) {\n    return arr;\n  }\n  const maxOnesDiffIndexDiffIndexDiffIndexDiff = Math.abs(maxOnesDiffIndexDiffIndexDiffIndex - len);\n  const maxOnesDiffIndexDiffIndexDiffIndexDiffIndex = arr.findIndex(a => a === maxOnesDiffIndexDiffIndexDiffIndex);\n  const maxOnesDiffIndexDiffIndexDiffIndexDiffIndex = Math.max(...arr.map(a => a.length));\n  const maxOnesDiffIndexDiffIndexDiffIndexDiffIndexDiff = Math.abs(maxOnesDiffIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphjpyh267.ts(56,1): error TS1005: ',' expected.\n../../../../tmp/tmphjpyh267.ts(56,9): error TS1005: ',' expected.\n../../../../tmp/tmphjpyh267.ts(72,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334362
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === 0) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === 0) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n      return 0;\n    }\n    if (a === 0 && b === 1) {\n      return -1;\n    }\n    if (a === -1 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n      return -1;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n      return 1;\n    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n      return -1;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n      return -1;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n      return 1;\n    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a === 1 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n      return -1;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n      return -1;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n      return -1;\n    }\n    if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprsltoytt.ts(128,9): error TS1005: ')' expected.\n../../../../tmp/tmprsltoytt.ts(144,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334363
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr\n    .map((val) => val.toString(2).padStart(len, '0'))\n    .map((val) => parseInt(val, 2))\n    .sort((a, b) => a - b);\n  const decs = arr\n    .map((val) => val.toString(10).padStart(len, '0'))\n    .map((val) => parseInt(val, 10))\n    .sort((a, b) => a - b);\n  return [...ones, ...decs];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp3le8zk4g.js:29:12)\n    at Object.<anonymous> (/tmp/tmp3le8zk4g.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 3, 4, 5,\n    1, 2, 3, 4, 5\n  ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334363
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes = Math.ceil(Math.log2(ones));\n  const maxDec = Math.pow(10, maxOnes);\n  const maxDecStr = maxDec.toString();\n  const maxDecArr = maxDecStr.split('');\n  const maxDecArrLen = maxDecArr.length;\n  const maxDecArrMap = new Array(maxDecArrLen).fill(0);\n  for (let i = 0; i < maxDecArrLen; i++) {\n    maxDecArrMap[i] = maxDecArr[i].length;\n  }\n  const maxDecArrMapLen = maxDecArrMap.length;\n  const maxDecArrMapMap = new Array(maxDecArrMapLen).fill(0);\n  for (let i = 0; i < maxDecArrMapLen; i++) {\n    maxDecArrMapMap[i] = new Array(maxDecArrLen).fill(0);\n  }\n  for (let i = 0; i < len; i++) {\n    const onesStr = arr[i].toString();\n    const onesArr = onesStr.split('');\n    const onesArrLen = onesArr.length;\n    for (let j = 0; j < onesArrLen; j++) {\n      const one = onesArr[j];\n      if (one === '1') {\n        maxDecArrMapMap[maxDecArrMap[j]][0]++;\n      } else {\n        maxDecArrMapMap[maxDecArrMap[j]][1]++;\n      }\n    }\n  }\n  const maxDecArrMapMapLen = maxDecArrMapMap.length;\n  const maxDecArrMapMapMap = new Array(maxDecArrMapMapLen).fill(0);\n  for (let i = 0; i < maxDecArrMapMapLen; i++) {\n    maxDecArrMapMap[i] = new Array(maxDecArrMapLen).fill(0);\n  }\n  for (let i = 0; i < len; i++) {\n    const onesStr = arr[i].toString();\n    const onesArr = onesStr.split('');\n    const onesArrLen = onesArr.length;\n    for (let j = 0; j < onesArrLen; j++) {\n      const one = onesArr[j];\n      if (one === '1') {\n        maxDecArrMapMap[j][0]++;\n      } else {\n        maxDecArrMapMap[j][1]++;\n      }\n    }\n  }\n  const maxDecArrMapMapLen = maxDecArrMapMap.length;\n  const maxDecArrMapMapMap = new Array(maxDecArrMapMapLen).fill(0);\n  for (let i = 0; i < maxDecArrMapMapLen; i++) {\n    maxDecArrMapMap[i] = new Array(maxDecArrMapLen).fill(0);\n  }\n  for (let i = 0; i < len; i++) {\n    const onesStr = arr[i].toString();\n    const onesArr = onesStr.split('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpns8671jm.ts(69,36): error TS1002: Unterminated string literal.\n../../../../tmp/tmpns8671jm.ts(70,1): error TS1005: ',' expected.\n../../../../tmp/tmpns8671jm.ts(70,9): error TS1005: ',' expected.\n../../../../tmp/tmpns8671jm.ts(86,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334362
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === 0) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === 0) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n      return 0;\n    }\n    if (a === -1 && b === 1) {\n      return -1;\n    }\n    if (a === 1 && b === -1) {\n      return 1;\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp3ntb1166.js:45:12)\n    at Object.<anonymous> (/tmp/tmp3ntb1166.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2, 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334363
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes = Math.pow(2, Math.ceil(Math.log2(ones)));\n  const maxDec = Math.pow(2, Math.ceil(Math.log2(maxOnes)));\n  const decs = arr.map(val => val / maxDec);\n  const decSum = decs.reduce((acc, val) => acc + val, 0);\n  const decSumArr = decs.map(val => val.toFixed(decSum));\n  const decSumArr = decSumArr.map(val => parseInt(val));\n  const decSumArr = decSumArr.sort((a, b) => a - b);\n  const decSumArr = decSumArr.map(val => val * maxDec);\n  const decSumArr = decSumArr.map(val => val.toFixed(decSum));\n  const decSumArr = decSumArr.map(val => parseInt(val));\n  const decSumArr = decSumArr.sort((a, b) => a - b);\n  const decSumArr = decSumArr.map(val => val / maxDec);\n  const decSumArr = decSumArr.map(val => val.toFixed(decSum));\n  const decSumArr = decSumArr.map(val => parseInt(val));\n  const decSumArr = decSumArr.sort((a, b) => a - b);\n  const decSumArr = decSumArr.map(val => val * maxDec);\n  const decSumArr = decSumArr.map(val => val.toFixed(decSum));\n  const decSumArr = decSumArr.map(val => parseInt(val));\n  const decSumArr = decSumArr.sort((a, b) => a - b);\n  const decSumArr = decSumArr.map(val => val / maxDec);\n  const decSumArr = decSumArr.map(val => val.toFixed(decSum));\n  const decSumArr = decSumArr.map(val => parseInt(val));\n  const decSumArr = decSumArr.sort((a, b) => a - b);\n  const decSumArr = decSumArr.map(val => val * maxDec);\n  const decSumArr = decSumArr.map(val => val.toFixed(decSum));\n  const decSumArr = decSumArr.map(val => parseInt(val));\n  const decSumArr = decSumArr.sort((a, b) => a - b);\n  const decSumArr = decSumArr.map(val => val / maxDec);\n  const dec\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp76svjqp5.ts(62,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334362
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const mid = Math.floor(len / 2);\n  const left = arr.slice(0, mid);\n  const right = arr.slice(mid);\n  return sort_array(left).concat(sort_array(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmprd8rh8f8.js:27:12)\n    at Object.<anonymous> (/tmp/tmprd8rh8f8.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2, 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334363
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const aBits = binToInt(a);\n    const bBits = binToInt(b);\n    return aBits - bBits;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm3i2nvjz.ts(13,19): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmpm3i2nvjz.ts(14,19): error TS2304: Cannot find name 'binToInt'.\n",
      "timestamp": 1660334233
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes = Math.pow(2, Math.ceil(Math.log(ones) / Math.LN2));\n  const maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes) / Math.LN10));\n  const decs = maxDec / maxOnes;\n  const decRound = Math.pow(10, Math.ceil(Math.log(decs) / Math.LN10));\n  const decRounds = Math.ceil(Math.log(decs / Math.LN2));\n  const decs = decRounds * decRound;\n  const decRoundsLen = Math.ceil(Math.log(decs / Math.LN10));\n  const decRoundsLenLen = Math.ceil(Math.log(decRoundsLen / Math.LN2));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen / Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen / Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen / Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen / Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen / Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen / Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen / Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen / Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen / Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen / Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen / Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen / Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen / Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen / Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen / Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen / Math.LN10));\n  const decRoundsLenLenLen = Math.ceil(Math.log(decRoundsLen / Math.LN10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprcu_xybi.ts(59,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334362
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((x) => x === 1);\n  const decs = arr.map((x) => Math.abs(x));\n  const decSum = decs.reduce((acc, x) => acc + x, 0);\n  const decSumArr = decs.map((x) => x / decSum);\n  const decSumArr = decSumArr.map((x) => Math.round(x));\n  const decSumArr = decSumArr.map((x) => x * decSum);\n  const decSumArr = decSumArr.map((x) => Math.round(x));\n  const decSumArr = decSumArr.map((x) => x * decSum);\n  const decSumArr = decSumArr.map((x) => Math.round(x));\n  const decSumArr = decSumArr.map((x) => x * decSum);\n  const decSumArr = decSumArr.map((x) => Math.round(x));\n  const decSumArr = decSumArr.map((x) => x * decSum);\n  const decSumArr = decSumArr.map((x) => Math.round(x));\n  const decSumArr = decSumArr.map((x) => x * decSum);\n  const decSumArr = decSumArr.map((x) => Math.round(x));\n  const decSumArr = decSumArr.map((x) => x * decSum);\n  const decSumArr = decSumArr.map((x) => Math.round(x));\n  const decSumArr = decSumArr.map((x) => x * decSum);\n  const decSumArr = decSumArr.map((x) => Math.round(x));\n  const decSumArr = decSumArr.map((x) => x * decSum);\n  const decSumArr = decSumArr.map((x) => Math.round(x));\n  const decSumArr = decSumArr.map((x) => x * decSum);\n  const decSumArr = decSumArr.map((x) => Math.round(x));\n  const decSumArr = decSumArr.map((x) => x * decSum);\n  const decSumArr = decSumArr.map((x) => Math.round(x));\n  const decSumArr = decSumArr.map((x) => x * decSum);\n  const decSumArr = decSumArr.map((x) => Math.round(x));\n  const decSumArr = decSumArr.map((x) => x * decSum);\n  const decSumArr = decSumArr.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpggpjould.ts(44,31): error TS1003: Identifier expected.\n../../../../tmp/tmpggpjould.ts(61,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334362
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const twos = arr.reduce((acc, val) => acc + val, 0);\n  const tens = arr.reduce((acc, val) => acc + val, 0);\n  const hundreds = arr.reduce((acc, val) => acc + val, 0);\n  const tenths = arr.reduce((acc, val) => acc + val, 0);\n  const hundredths = arr.reduce((acc, val) => acc + val, 0);\n  const tenthhundredths = arr.reduce((acc, val) => acc + val, 0);\n  const hundredthhundredths = arr.reduce((acc, val) => acc + val, 0);\n  const tenthhundredthhundredths = arr.reduce((acc, val) => acc + val, 0);\n  const hundredthhundredthhundredths = arr.reduce((acc, val) => acc + val, 0);\n  const tenthhundredthhundredthhundredths = arr.reduce((acc, val) => acc + val, 0);\n  const hundredthhundredthhundredthhundredths = arr.reduce((acc, val) => acc + val, 0);\n  const tenthhundredthhundredthhundredthhundredths = arr.reduce((acc, val) => acc + val, 0);\n  const hundredthhundredthhundredthhundredthhundredths = arr.reduce((acc, val) => acc + val, 0);\n  const tenthhundredthhundredthhundredthhundredthhundredths = arr.reduce((acc, val) => acc + val, 0);\n  const hundredthhundredthhundredthhundredthhundredthhundredths = arr.reduce((acc, val) => acc + val, 0);\n  const tenthhundredthhundredthhundredthhundredthhundredthhundredths = arr.reduce((acc, val) => acc + val, 0);\n  const hundredthhundredthhundredthhundredthhundredthhundredthhundredths = arr.reduce((acc, val) => acc + val, 0);\n  const tenthhundredthhundredthhundredthhundredthhundredthhundredthhundredths = arr.reduce((acc, val) => acc + val, 0);\n  const hundredthhundredthhundredthhundredthhundredthhundredthhundredthhundredths = arr.reduce((acc, val) => acc + val, 0);\n  const tenthhund\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfbvp69ky.ts(53,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334363
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const aNum = count_ones(a);\n    const bNum = count_ones(b);\n    return aNum - bNum;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpeoymcf2u.ts(13,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpeoymcf2u.ts(14,18): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334362
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp0bqv_thd.js:25:12)\n    at Object.<anonymous> (/tmp/tmp0bqv_thd.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334226
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.filter(x => x === 1);\n  if (ones.length === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max.apply(null, ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnesIndex.toString(2);\n  const maxOnesBinLen = maxOnesBin.length;\n  const maxOnesBinLenLen = maxOnesBinLen + 1;\n  const maxOnesBinStr = maxOnesBin.substr(0, maxOnesBinLenLen);\n  const maxOnesBinStrLen = maxOnesBinStr.length;\n  const maxOnesBinStrArr = maxOnesBinStr.split('');\n  const maxOnesBinStrArrLen = maxOnesBinStrArr.length;\n  const maxOnesBinStrArrMax = maxOnesBinStrArr.reduce((a, b) => Math.max(a, b), 0);\n  const maxOnesBinStrArrMaxLen = maxOnesBinStrArrMax.toString().length;\n  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArr.indexOf(maxOnesBinStrArrMax);\n  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArrMaxIndex + maxOnesBinStrArrMaxLen;\n  const maxOnesBinStrArrMaxIndexLen = maxOnesBinStrArrMaxIndex.toString().length;\n  const maxOnesBinStrArrMaxIndexLenLen = maxOnesBinStrArrMaxIndexLen + 1;\n  const maxOnesBinStrArrMaxIndexStr = maxOnesBinStrArrMaxIndex.substr(0, maxOnesBinStrArrMaxIndexLenLen);\n  const maxOnesBinStrArrMaxIndexStrLen = maxOnesBinStrArrMaxIndexStr.length;\n  const maxOnesBinStrArrMaxIndexStrArr = maxOnesBinStrArrMaxIndexStr.split('');\n  const maxOnesBinStrArrMaxIndexStrArrLen = maxOnesBinStrArrMaxIndexStrArr.length;\n  const maxOnesBinStrArrMaxIndexStrArrMax = maxOnesBinStrArrMaxIndexStrArr.reduce((a, b) => Math.max(a, b), 0);\n  const maxOnesBinStrArrMaxIndexStrArrMaxLen = maxOnesBinStrArrMaxIndexStrArrMax.toString().length;\n  const maxOnesBinStrArrMaxIndexStrArrMaxIndex = maxOnesBinStrArrMaxIndexStrArrMax\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp71dc2zya.ts(58,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334362
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpk9vadqqj.js:18:12)\n    at Object.<anonymous> (/tmp/tmpk9vadqqj.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const aNum = count_ones(a);\n    const bNum = count_ones(b);\n    if (aNum === bNum) {\n      return a.localeCompare(b);\n    }\n    return aNum - bNum;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpup4yo1rv.ts(13,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpup4yo1rv.ts(14,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpup4yo1rv.ts(16,16): error TS2339: Property 'localeCompare' does not exist on type 'number'.\n",
      "timestamp": 1660334362
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpd5u_mfui.js:17:12)\n    at Object.<anonymous> (/tmp/tmpd5u_mfui.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr\n    .map((x) => parseInt(x.toString(2), 10))\n    .filter((x) => x > 0);\n  if (ones.length === 0) {\n    return arr;\n  }\n  const len = ones.length;\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n  const maxOnesLen = Math.min(maxOnes, len);\n  const maxOnesPow2 = maxOnesLen - 1;\n  const maxOnesPow2Len = Math.pow(maxOnesPow2, 2);\n  const maxOnesPow2LenLen = Math.pow(maxOnesPow2Len, 2);\n  const maxOnesPow2LenPow2 = maxOnesPow2Len - 1;\n  const maxOnesPow2LenPow2Len = Math.pow(maxOnesPow2LenPow2, 2);\n  const maxOnesPow2LenPow2LenPow2 = maxOnesPow2LenPow2 - 1;\n  const maxOnesPow2LenPow2LenPow2Len = Math.pow(maxOnesPow2LenPow2LenPow2, 2);\n  const maxOnesPow2LenPow2LenPow2LenPow2 = maxOnesPow2LenPow2LenPow2 - 1;\n  const maxOnesPow2LenPow2LenPow2LenPow2Len = Math.pow(maxOnesPow2LenPow2LenPow2LenPow2, 2);\n  const maxOnesPow2LenPow2LenPow2LenPow2LenPow2 = maxOnesPow2LenPow2LenPow2LenPow2 - 1;\n  const maxOnesPow2LenPow2LenPow2LenPow2LenPow2Len = Math.pow(maxOnesPow2LenPow2LenPow2LenPow2LenPow2LenPow2, 2);\n  const maxOnesPow2LenPow2LenPow2LenPow2LenPow2LenPow2 = maxOnesPow2LenPow2LenPow2LenPow2LenPow2LenPow2 - 1;\n  const maxOnesPow2LenPow2LenPow2LenPow2LenPow2LenPow2Len = Math.pow(maxOnesPow2LenPow2LenPow2LenPow2LenPow2LenPow2LenPow2, 2);\n  const maxOnesPow2LenPow2LenPow2LenPow2LenPow2LenPow2LenPow2 = maxOnesPow2LenPow2LenPow2LenPow2LenPow2LenPow2LenPow2 - 1;\n  const maxOnesPow2LenPow2LenPow2Len\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprr5icdsj.ts(56,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334362
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    const a1 = count_ones(a);\n    const b1 = count_ones(b);\n    if (a1 === b1) {\n      return a1 - b1;\n    }\n    return a1 - b1 > 0 ? 1 : -1;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpge3_ia_t.ts(11,21): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmpge3_ia_t.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpge3_ia_t.ts(16,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpge3_ia_t.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpge3_ia_t.ts(21,9): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmpge3_ia_t.ts(23,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpge3_ia_t.ts(24,16): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334240
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.filter((x) => x > 0);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const max = Math.max(...ones);\n  const min = Math.min(...ones);\n  const maxDecimal = max % Math.pow(10, len) - Math.pow(10, len - 1);\n  const minDecimal = min % Math.pow(10, len) - Math.pow(10, len - 1);\n  const maxDecimalString = maxDecimal.toString();\n  const minDecimalString = minDecimal.toString();\n  const maxDecimalArray = maxDecimalString.split('');\n  const minDecimalArray = minDecimalString.split('');\n  const maxDecimalArrayLen = maxDecimalArray.length;\n  const minDecimalArrayLen = minDecimalArray.length;\n  const maxDecimalArrayMax = maxDecimalArray[maxDecimalArrayLen - 1];\n  const minDecimalArrayMin = minDecimalArray[minDecimalArrayLen - 1];\n  const maxDecimalArrayMin = maxDecimalArray[maxDecimalArrayLen - 2];\n  const minDecimalArrayMax = minDecimalArray[minDecimalArrayLen - 2];\n  const maxDecimalArrayMaxDecimal = maxDecimalArrayMax * Math.pow(10, len - 1);\n  const minDecimalArrayMinDecimal = minDecimalArrayMin * Math.pow(10, len - 1);\n  const maxDecimalArrayMinDecimal = maxDecimalArrayMin * Math.pow(10, len - 1);\n  const maxDecimalArrayMinDecimalString = maxDecimalArrayMinDecimal.toString();\n  const minDecimalArrayMinDecimalString = minDecimalArrayMinDecimal.toString();\n  const maxDecimalArrayMinDecimalArray = maxDecimalArrayMinDecimalString.split('');\n  const minDecimalArrayMinDecimalArray = minDecimalArrayMinDecimalString.split('');\n  const maxDecimalArrayMinDecimalArrayLen = maxDecimalArrayMinDecimalArray.length;\n  const minDecimalArrayMinDecimalArrayLen = minDecimalArrayMinDecimalArray.length;\n  const maxDecimalArrayMinDecimalArrayMax = maxDecimalArrayMinDecimalArray[maxDecimalArrayMinDecimalArrayLen - 1];\n  const minDecimalArrayMinDecimalArrayMin = minDecimalArrayMinDecimalArray[minDecimalArrayMinDecimalArrayLen - 1];\n  const maxDecimalArrayMinDecimalArrayMin = maxDecimalArrayMinDecimalArray[maxDecimalArrayMinDecimalArrayLen - 2];\n  const minDecimalArrayMinDecimalArrayMax = minDecimalArrayMinDecimalArray[minDecimalArrayMinDecimalArrayLen - 2];\n  const maxDecimalArrayMinDecimalArrayMaxDecimal = maxDecimalArrayMinDecimalArrayMax * Math.pow(10, len - 1);\n  const minDecimalArrayMinDecimalArrayMinDecimal = minDecimal\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuh16i_pe.ts(66,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334363
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === 0) return 1\n    if (b === 0) return -1\n    return a > b ? 1 : -1\n  })\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpfq4rnbhr.js:23:12)\n    at Object.<anonymous> (/tmp/tmpfq4rnbhr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334236
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const ones = arr.filter((val) => val === 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const dec = Math.log10(Math.max(...ones));\n  const arr2 = arr.map((val) => {\n    const bin = val.toString(2);\n    const len = bin.length;\n    let binNum = 0;\n    for (let i = 0; i < len; i++) {\n      binNum += parseInt(bin.charAt(i), 2);\n    }\n    return binNum / Math.pow(10, dec);\n  });\n  return arr2.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplo3avuwa.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmplo3avuwa.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n",
      "timestamp": 1660334362
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpk9vadqqj.js:18:12)\n    at Object.<anonymous> (/tmp/tmpk9vadqqj.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    const ones = count_ones(b);\n    const ones_b = count_ones(a);\n    if (ones_b < ones) {\n      return -1;\n    }\n    if (ones_b > ones) {\n      return 1;\n    }\n    return a - b;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi4t196b8.ts(13,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpi4t196b8.ts(14,20): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334363
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    const aOnes = count_ones(a);\n    const bOnes = count_ones(b);\n    if (aOnes < bOnes) {\n      return -1;\n    }\n    if (aOnes > bOnes) {\n      return 1;\n    }\n    return count_ones(a) - count_ones(b);\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp47dooqq6.ts(11,21): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmp47dooqq6.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmp47dooqq6.ts(16,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp47dooqq6.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmp47dooqq6.ts(21,9): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmp47dooqq6.ts(23,19): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp47dooqq6.ts(24,19): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp47dooqq6.ts(31,12): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp47dooqq6.ts(31,28): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334362
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map(n => n & 1);\n  const decs = arr.map(n => n - ones);\n  const decLen = decs.length;\n  const decArr = new Array(decLen);\n  for (let i = 0; i < decLen; i++) {\n    decArr[i] = decs[i];\n  }\n  const decArr_sorted = decArr.sort((a, b) => {\n    const aLen = a.length;\n    const bLen = b.length;\n    if (aLen > bLen) {\n      return 1;\n    }\n    if (aLen < bLen) {\n      return -1;\n    }\n    for (let i = 0; i < aLen; i++) {\n      if (a[i] !== b[i]) {\n        return a[i] - b[i];\n      }\n    }\n    return 0;\n  });\n  const decArr_sorted_len = decArr_sorted.length;\n  const decArr_sorted_arr = new Array(decArr_sorted_len);\n  for (let i = 0; i < decArr_sorted_len; i++) {\n    decArr_sorted_arr[i] = decArr_sorted[i];\n  }\n  const decArr_sorted_arr_sorted = decArr_sorted_arr.sort((a, b) => {\n    const aLen = a.length;\n    const bLen = b.length;\n    if (aLen > bLen) {\n      return 1;\n    }\n    if (aLen < bLen) {\n      return -1;\n    }\n    for (let i = 0; i < aLen; i++) {\n      if (a[i] !== b[i]) {\n        return a[i] - b[i];\n      }\n    }\n    return 0;\n  });\n  const decArr_sorted_arr_sorted_len = decArr_sorted_arr_sorted.length;\n  const decArr_sorted_arr_sorted_arr = new Array(decArr_sorted_arr_sorted_len);\n  for (let i = 0; i < decArr_sorted_arr_sorted_len; i++) {\n    decArr_sorted_arr_sorted_arr[i] = decArr_sorted_arr_sorted[i];\n  }\n  const decArr_sorted_arr_sorted_arr_sorted = decArr_sorted_arr_sorted_arr.sort((a, b) => {\n    const aLen = a.length;\n    const bLen = b.length;\n    if (aLen > bLen) {\n      return 1;\n    }\n    if (aLen < bLen) {\n      return -1;\n    }\n    for (let i = 0; i < aLen; i++) {\n      if (a[i] !== b[i]) {\n        return a[i] - b[i];\n      }\n    }\n    return 0;\n  });\n  const decArr_sorted_arr_sorted_arr_sorted_len = decArr_sorted_arr_sorted_arr_sorted.length;\n  const decArr_sorted_arr_sorted_arr_sorted_arr = new Array(decArr_sorted_arr_sorted_arr_sorted_len);\n  for (let i = 0; i < decArr_sorted_arr_sorted_arr_sorted_len; i++) {\n    decArr_sorted_arr_sorted_arr_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphsrgc3o5.ts(101,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334363
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a: number, b: number) => {\n    if (a === 0 && b === 0) {\n      return 0;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === 0) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b === 1) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 1;\n    }\n    if (a === 0 && b === 0) {\n      return 1;\n    }\n    if (a === 1 && b === 0) {\n      return -1;\n    }\n    if (a === 0 && b === 1) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp8uo4pfsc.js:49:12)\n    at Object.<anonymous> (/tmp/tmp8uo4pfsc.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2, 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334366
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === 0) return 1;\n    if (b === 0) return -1;\n    const aBin = a.toString(2);\n    const bBin = b.toString(2);\n    const aLen = aBin.length;\n    const bLen = bBin.length;\n    const aOnes = aLen * Math.pow(2, aLen);\n    const bOnes = bLen * Math.pow(2, bLen);\n    return aOnes - bOnes;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  5,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpvr7t2phi.js:29:12)\n    at Object.<anonymous> (/tmp/tmpvr7t2phi.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 5, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334366
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(v => Math.log2(v + 1)));\n  const maxLen = Math.max(maxLen, len);\n  const newArr = new Array(maxLen);\n  for (let i = 0; i < maxLen; i++) {\n    newArr[i] = 0;\n  }\n  for (let i = 0; i < len; i++) {\n    const one = ones[i];\n    const index = Math.log2(one + 1);\n    newArr[index] += 1;\n  }\n  for (let i = 0; i < len; i++) {\n    const one = ones[i];\n    const index = Math.log2(one + 1);\n    newArr[index] -= 1;\n  }\n  return newArr.map(v => v / maxOnes);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwu51gdea.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpwu51gdea.ts(16,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpwu51gdea.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpwu51gdea.ts(22,9): error TS2451: Cannot redeclare block-scoped variable 'maxLen'.\n../../../../tmp/tmpwu51gdea.ts(23,9): error TS2451: Cannot redeclare block-scoped variable 'maxLen'.\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpmr2r9mdt.js:25:12)\n    at Object.<anonymous> (/tmp/tmpmr2r9mdt.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334237
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr\n    .map((x) => parseInt(x.toString(2), 10))\n    .filter((x) => x > 0);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x) => x.length));\n  const maxLenDiff = Math.abs(maxLen - len);\n  if (maxLenDiff > 0) {\n    console.error(\n      `sort_array: ${len} elements are too long for binary representation`\n    );\n  }\n  const maxOnesDiff = Math.abs(maxOnes - Math.max(...ones));\n  if (maxOnesDiff > 0) {\n    console.error(\n      `sort_array: ${maxOnes} is too large for number of ones`\n    );\n  }\n  const maxDiff = Math.max(maxOnesDiff, maxLenDiff);\n  const maxDiffDiff = Math.abs(maxDiff - len);\n  if (maxDiffDiff > 0) {\n    console.error(\n      `sort_array: ${maxDiff} elements are too long for decimal representation`\n    );\n  }\n  const maxDiffDiff = Math.abs(maxDiffDiff - Math.max(...ones));\n  if (maxDiffDiff > 0) {\n    console.error(\n      `sort_array: ${maxDiff} is too large for number of ones`\n    );\n  }\n  const maxDiffDiff = Math.abs(maxDiffDiff - Math.max(...arr.map((x) => x.length)));\n  if (maxDiffDiff > 0) {\n    console.error(\n      `sort_array: ${maxDiff} elements are too long for decimal representation`\n    );\n  }\n  const maxDiffDiff = Math.abs(maxDiffDiff - Math.max(...arr.map((x) => x.length)));\n  if (maxDiffDiff > 0) {\n    console.error(\n      `sort_array: ${maxDiff} is too large for number of ones`\n    );\n  }\n  const maxDiffDiff = Math.abs(maxDiffDiff - Math.max(...arr.map((x) => x.length)));\n  if (maxDiffDiff > 0) {\n    console.error(\n      `sort_array: ${maxDiff} is too large for number of ones`\n    );\n  }\n  const maxDiffDiff = Math.abs(maxDiffDiff - Math.max(...arr.map((x) => x.length)));\n  if (maxDiffDiff > 0) {\n    console.error(\n      `sort_array: ${maxDiff} is too large for number of ones`\n    );\n  }\n  const maxDiffDiff = Math.abs(maxDiffDiff - Math.max(...arr.map\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdwgejk0a.ts(75,1): error TS1005: ',' expected.\n../../../../tmp/tmpdwgejk0a.ts(75,9): error TS1005: ',' expected.\n../../../../tmp/tmpdwgejk0a.ts(91,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === 0) return 1;\n    if (b === 0) return -1;\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpkcv9mqwy.js:27:12)\n    at Object.<anonymous> (/tmp/tmpkcv9mqwy.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334366
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.filter((val) => val === 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((val) => val.length));\n  const onesLen = ones.length;\n  const arrLen = arr.length;\n  const maxLen = Math.max(...arr.map((val) => val.length));\n  const maxOnesLen = Math.max(...ones);\n  const maxLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLenLen = Math.max(...arr.map((val) => val\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpftym7649.ts(51,1): error TS1005: ',' expected.\n../../../../tmp/tmpftym7649.ts(51,9): error TS1005: ',' expected.\n../../../../tmp/tmpftym7649.ts(67,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.filter(x => x === 1);\n  if (ones.length === 0) {\n    return arr;\n  }\n  const len = ones.length;\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n  const maxDec = Math.pow(10, maxOnes);\n  const decs = ones\n    .map(x => Math.round(x * maxDec) / maxDec)\n    .sort((a, b) => a - b);\n  const decLen = decs.length;\n  const decsLen = Math.ceil(Math.log(decLen) / Math.LN2);\n  const decsMax = Math.pow(10, decsLen);\n  const decs = decs\n    .map(x => Math.round(x * decsMax) / decsMax)\n    .sort((a, b) => a - b);\n  const decs = decs.map(x => Math.round(x * maxDec) / maxDec);\n  const decs = decs.map(x => Math.round(x * maxDec) / maxDec);\n  const decs = decs.map(x => Math.round(x * maxDec) / maxDec);\n  const decs = decs.map(x => Math.round(x * maxDec) / maxDec);\n  const decs = decs.map(x => Math.round(x * maxDec) / maxDec);\n  const decs = decs.map(x => Math.round(x * maxDec) / maxDec);\n  const decs = decs.map(x => Math.round(x * maxDec) / maxDec);\n  const decs = decs.map(x => Math.round(x * maxDec) / maxDec);\n  const decs = decs.map(x => Math.round(x * maxDec) / maxDec);\n  const decs = decs.map(x => Math.round(x * maxDec) / maxDec);\n  const decs = decs.map(x => Math.round(x * maxDec) / maxDec);\n  const decs = decs.map(x => Math.round(x * maxDec) / maxDec);\n  const decs = decs.map(x => Math.round(x * maxDec) / maxDec);\n  const decs = decs.map(x => Math.round(x * maxDec) / maxDec);\n  const decs = decs.map(x => Math.round(x * maxDec) / maxDec);\n  const decs = decs.map(x => Math.round(x * maxDec) / maxDec);\n  const decs = decs.map(x => Math.round(x * maxDec) / maxDec);\n  const decs = decs.map(x => Math.round(x * maxDec) / maxDec);\n  const decs = decs.map(x => Math.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp91yyyia3.ts(50,35): error TS1003: Identifier expected.\n../../../../tmp/tmp91yyyia3.ts(51,1): error TS1005: ',' expected.\n../../../../tmp/tmp91yyyia3.ts(51,9): error TS1005: ',' expected.\n../../../../tmp/tmp91yyyia3.ts(67,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp0bqv_thd.js:25:12)\n    at Object.<anonymous> (/tmp/tmp0bqv_thd.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334226
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.filter((val) => val === 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((val) => val.length));\n  const maxLenLen = Math.max(...arr.map((val) => val.length * 2));\n  const maxLenLenLen = Math.max(...arr.map((val) => val.length * 4));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 8));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 16));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 32));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 64));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 128));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 256));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 512));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 1024));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 2048));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 4096));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 81921));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 163841));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 327681));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 655361));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 1310721));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 2621441));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 5242881));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 10485761));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => val.length * 20971531));\n  const maxLenLenLenLen = Math.max(...arr.map((val) => \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa9j90zyu.ts(45,9): error TS1005: ',' expected.\n../../../../tmp/tmpa9j90zyu.ts(61,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((x) => x > 0 ? 1 : 0);\n  const sortedArr = arr.map((x) => x);\n  ones\n    .map((x, i) => sortedArr[len - 1 - i])\n    .sort((a, b) => a - b);\n  return sortedArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpai9yf5ux.js:26:12)\n    at Object.<anonymous> (/tmp/tmpai9yf5ux.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2, 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334366
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const ones = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x) => Math.log2(x)));\n  const maxLen = Math.max(maxLen, maxOnes);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.min(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4odavt8x.ts(74,9): error TS1005: ',' expected.\n../../../../tmp/tmp4odavt8x.ts(90,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp0bqv_thd.js:25:12)\n    at Object.<anonymous> (/tmp/tmp0bqv_thd.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334226
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr.sort((a, b) => a - b);\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...len);\n  const maxLenDiff = Math.abs(maxLen - len);\n  const maxOnesDiff = Math.abs(maxOnes - ones);\n  if (maxLenDiff < maxOnesDiff) {\n    return arr.sort((a, b) => a - b);\n  }\n  const maxOnesDiff = Math.abs(maxOnes - ones);\n  const maxOnesDiff2 = Math.abs(maxOnes - ones);\n  const maxOnesDiff3 = Math.abs(maxOnes - ones);\n  const maxOnesDiff4 = Math.abs(maxOnes - ones);\n  const maxOnesDiff5 = Math.abs(maxOnes - ones);\n  const maxOnesDiff6 = Math.abs(maxOnes - ones);\n  const maxOnesDiff7 = Math.abs(maxOnes - ones);\n  const maxOnesDiff8 = Math.abs(maxOnes - ones);\n  const maxOnesDiff9 = Math.abs(maxOnes - ones);\n  const maxOnesDiff10 = Math.abs(maxOnes - ones);\n  const maxOnesDiff11 = Math.abs(maxOnes - ones);\n  const maxOnesDiff12 = Math.abs(maxOnes - ones);\n  const maxOnesDiff13 = Math.abs(maxOnes - ones);\n  const maxOnesDiff14 = Math.abs(maxOnes - ones);\n  const maxOnesDiff15 = Math.abs(maxOnes - ones);\n  const maxOnesDiff16 = Math.abs(maxOnes - ones);\n  const maxOnesDiff17 = Math.abs(maxOnes - ones);\n  const maxOnesDiff18 = Math.abs(maxOnes - ones);\n  const maxOnesDiff19 = Math.abs(maxOnes - ones);\n  const maxOnesDiff20 = Math.abs(maxOnes - ones);\n  const maxOnesDiff21 = Math.abs(maxOnes - ones);\n  const maxOnesDiff22 = Math.abs(maxOnes - ones);\n  const maxOnesDiff23 = Math.abs(maxOnes - ones);\n  const maxOnesDiff24 = Math.abs(maxOnes - ones);\n  const maxOnesDiff25 = Math.abs(maxOnes - ones);\n  const maxOnesDiff26 = Math.abs(maxOnes - ones);\n  const maxOnesDiff27 = Math.abs(maxOnes - ones);\n  const maxOnesDiff28 = Math.abs(maxOnes - ones);\n  const maxOnesDiff29 = Math.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6qt6q3er.ts(59,30): error TS1003: Identifier expected.\n../../../../tmp/tmp6qt6q3er.ts(76,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpk9vadqqj.js:18:12)\n    at Object.<anonymous> (/tmp/tmpk9vadqqj.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const ones = arr.filter((val) => val === 1);\n  if (ones.length === 0) {\n    return arr;\n  }\n  const dec = ones[0] * 2;\n  const dec1 = 0;\n  const dec2 = 0;\n  for (let i = 1; i < len; i++) {\n    const cur = arr[i];\n    const cur1 = arr[i];\n    const cur2 = arr[i];\n    if (cur === 1) {\n      dec1++;\n    }\n    if (cur === -1) {\n      dec2++;\n    }\n    if (dec1 < dec) {\n      dec = dec1;\n    }\n    if (dec2 < dec) {\n      dec = dec2;\n    }\n    if (cur1 > cur2) {\n      dec = dec1;\n    }\n    if (cur1 < cur2) {\n      dec = dec2;\n    }\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const cur = arr[i];\n    if (cur === 1) {\n      res.push(dec);\n    }\n    if (cur === -1) {\n      res.push(dec);\n    }\n  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmponla39eg.ts(31,7): error TS2588: Cannot assign to 'dec1' because it is a constant.\n../../../../tmp/tmponla39eg.ts(34,7): error TS2588: Cannot assign to 'dec2' because it is a constant.\n../../../../tmp/tmponla39eg.ts(37,7): error TS2588: Cannot assign to 'dec' because it is a constant.\n../../../../tmp/tmponla39eg.ts(40,7): error TS2588: Cannot assign to 'dec' because it is a constant.\n../../../../tmp/tmponla39eg.ts(43,7): error TS2588: Cannot assign to 'dec' because it is a constant.\n../../../../tmp/tmponla39eg.ts(46,7): error TS2588: Cannot assign to 'dec' because it is a constant.\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const ones = arr\n    .map(x => parseInt(x.toString(2), 2))\n    .filter(x => x > 0);\n  const maxOne = ones[ones.length - 1];\n  const maxIndex = arr.length - 1;\n  const maxOneIndex = arr.findIndex(x => x > maxOne);\n  const maxOneIndexInt = parseInt(maxOneIndex.toString(2), 2);\n  const maxOneIndexDecimal = maxOneIndexInt % 1;\n  const maxOneIndexDecimalInt = maxOneIndexDecimal ? maxOneIndexDecimal : maxOneIndex;\n  const maxOneIndexDecimalIntInt = maxOneIndexDecimalInt ? maxOneIndexDecimalInt : maxOneIndex;\n  const maxOneIndexDecimalIntIntInt = maxOneIndexDecimalIntInt ? maxOneIndexDecimalIntInt : maxOneIndex;\n  const maxOneIndexDecimalIntIntIntInt = maxOneIndexDecimalIntIntInt ? maxOneIndexDecimalIntIntInt : maxOneIndex;\n  const maxOneIndexDecimalIntIntIntIntInt = maxOneIndexDecimalIntIntIntInt ? maxOneIndexDecimalIntIntIntInt : maxOneIndex;\n  const maxOneIndexDecimalIntIntIntIntIntInt = maxOneIndexDecimalIntIntIntIntInt ? maxOneIndexDecimalIntIntIntIntInt : maxOneIndex;\n  const maxOneIndexDecimalIntIntIntIntIntIntInt = maxOneIndexDecimalIntIntIntIntIntInt ? maxOneIndexDecimalIntIntIntIntIntInt : maxOneIndex;\n  const maxOneIndexDecimalIntIntIntIntIntIntIntInt = maxOneIndexDecimalIntIntIntIntIntIntIntInt ? maxOneIndexDecimalIntIntIntIntIntIntIntInt : maxOneIndex;\n  const maxOneIndexDecimalIntIntIntIntIntIntIntIntIntInt = maxOneIndexDecimalIntIntIntIntIntIntIntIntIntInt ? maxOneIndexDecimalIntIntIntIntIntIntIntIntIntInt : maxOneIndex;\n  const maxOneIndexDecimalIntIntIntIntIntIntIntIntIntIntInt = maxOneIndexDecimalIntIntIntIntIntIntIntIntIntIntInt ? maxOneIndexDecimalIntIntIntIntIntIntIntIntIntIntInt : maxOneIndex;\n  const maxOneIndexDecimalIntIntIntIntIntIntIntIntIntIntIntIntInt = maxOneIndexDecimalIntIntIntIntIntIntIntIntIntIntIntIntInt ? maxOneIndexDecimal\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpl8mn56d2.ts(38,1): error TS1005: ':' expected.\n../../../../tmp/tmpl8mn56d2.ts(54,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes = Math.pow(2, Math.ceil(Math.log(ones) / Math.LN2));\n  const maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes) / Math.LN10));\n  const decs = maxDec / maxOnes;\n  const decLen = Math.ceil(Math.log(decs) / Math.LN10);\n  const decsLen = Math.ceil(Math.log(len) / Math.LN10);\n  const decPos = decLen - decsLen;\n  const decVal = Math.pow(10, decPos);\n  const decArr = [];\n  for (let i = 0; i < len; i++) {\n    decArr.push(Math.floor(decVal * arr[i]) / decVal);\n  }\n  return decArr.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpju50qbd2.js:33:12)\n    at Object.<anonymous> (/tmp/tmpju50qbd2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0, 0 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334366
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map(n => n & 1);\n  const decs = arr.map(n => n & 1 ? Math.pow(10, arr.length - n - 1) : 0);\n  const decsLen = decs.length;\n  if (decsLen === 0) {\n    return ones;\n  }\n  const decsMin = Math.min(...decs);\n  const decsMax = Math.max(...decs);\n  const decsDiff = decsMax - decsMin;\n  const decsDiffLen = decsDiff / Math.pow(10, decsLen);\n  const decsDiffLenMin = Math.min(...decsDiff);\n  const decsDiffLenMax = Math.max(...decsDiff);\n  const decsDiffLenDiff = decsDiffLenMax - decsDiffLenMin;\n  const decsDiffLenDiffLen = decsDiffLen / Math.pow(10, decsLen - 1);\n  const decsDiffLenDiffLenMin = Math.min(...decsDiffLenDiff);\n  const decsDiffLenDiffLenMax = Math.max(...decsDiffLenDiff);\n  const decsDiffLenDiffLenDiff = decsDiffLenDiffLenMax - decsDiffLenDiffLenMin;\n  const decsDiffLenDiffLenDiffLen = decsDiffLenDiffLen / Math.pow(10, decsLen - 2);\n  const decsDiffLenDiffLenDiffLenMin = Math.min(...decsDiffLenDiffLenDiff);\n  const decsDiffLenDiffLenDiffLenMax = Math.max(...decsDiffLenDiffLenDiff);\n  const decsDiffLenDiffLenDiffLenDiff = decsDiffLenDiffLenDiffLenMax - decsDiffLenDiffLenDiffLenMin;\n  const decsDiffLenDiffLenDiffLenDiffLen = decsDiffLenDiffLenDiffLenDiff / Math.pow(10, decsLen - 3);\n  const decsDiffLenDiffLenDiffLenDiffLenMin = Math.min(...decsDiffLenDiffLenDiffLenDiff);\n  const decsDiffLenDiffLenDiffLenDiffLenMax = Math.max(...decsDiffLenDiffLenDiffLenDiff);\n  const decsDiffLenDiffLenDiffLenDiffLenDiff = decsDiffLenDiffLenDiffLenDiffLenMax - decsDiffLenDiffLenDiffLenDiffLenMin;\n  const decsDiffLenDiffLenDiffLenDiffLenDiffLen = decsDiffLenDiffLenDiffLenDiffLenDiffLen / Math.pow(10, decsLen - 4);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbcijqufq.ts(58,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  for (let i = 0; i < len; i++) {\n    const one = ones[i];\n    const index = arr.indexOf(one);\n    if (index >= 0) {\n      arr.splice(index, 1);\n    }\n  }\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptp_07kzn.ts(11,21): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmptp_07kzn.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmptp_07kzn.ts(16,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmptp_07kzn.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmptp_07kzn.ts(21,9): error TS2300: Duplicate identifier 'arr'.\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((val) => val === 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((val) => val.toString().length));\n  const maxLenStr = maxLen.toString();\n  const maxLenNum = parseInt(maxLenStr, 10);\n  const maxLenNumStr = maxLenNum.toString();\n  const maxLenNumStrLen = maxLenNumStr.length;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + 1;\n  const maxLenNumStrLenLen = maxLenNumStrLen + \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5z6f81nu.ts(52,9): error TS1005: ',' expected.\n../../../../tmp/tmp5z6f81nu.ts(68,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter(x => x === 1);\n  const zeros = arr.filter(x => x === 0);\n  const len = ones.length;\n  if (len === 0) {\n    return zeros;\n  }\n  if (len < 2) {\n    return ones;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxZeros = Math.max(...zeros);\n  const maxLen = Math.max(maxOnes, maxZeros);\n  const maxOnesLen = Math.ceil(maxOnes / Math.pow(2, len));\n  const maxZerosLen = Math.ceil(maxZeros / Math.pow(2, len));\n  const maxLenLen = Math.max(maxOnesLen, maxZerosLen);\n  const maxLen = Math.max(maxLen, maxLenLen);\n  const maxOnesLenLen = Math.ceil(maxOnesLen / Math.pow(2, len));\n  const maxZerosLenLen = Math.ceil(maxZerosLen / Math.pow(2, len));\n  const maxLenLen = Math.max(maxOnesLenLen, maxZerosLenLen);\n  const maxLen = Math.max(maxLen, maxLenLen);\n  const maxOnesLenLenLen = Math.ceil(maxOnesLen / Math.pow(2, len));\n  const maxZerosLenLen = Math.ceil(maxZerosLen / Math.pow(2, len));\n  const maxLenLen = Math.max(maxOnesLenLen, maxZerosLenLen);\n  const maxLen = Math.max(maxLen, maxLenLen);\n  const maxOnesLenLenLen = Math.ceil(maxOnesLen / Math.pow(2, len));\n  const maxZerosLenLen = Math.ceil(maxZerosLen / Math.pow(2, len));\n  const maxLenLen = Math.max(maxOnesLenLen, maxZerosLenLen);\n  const maxLen = Math.max(maxLen, maxLenLen);\n  const maxOnesLenLenLen = Math.ceil(maxOnesLen / Math.pow(2, len));\n  const maxZerosLenLen = Math.ceil(maxZerosLen / Math.pow(2, len));\n  const maxLenLen = Math.max(maxOnesLenLen, maxZerosLenLen);\n  const maxLen = Math.max(maxLen, maxLenLen);\n  const maxOnesLenLenLen = Math.ceil(maxOnesLen / Math.pow(2, len));\n  const maxZerosLenLen = Math.ceil(maxZerosLen / Math.pow(2, len));\n  const maxLenLen = Math.max(maxOnesLenLen, maxZ\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_u8g70sj.ts(51,1): error TS1005: ',' expected.\n../../../../tmp/tmp_u8g70sj.ts(51,9): error TS1005: ',' expected.\n../../../../tmp/tmp_u8g70sj.ts(67,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const aBin = bin(a);\n    const bBin = bin(b);\n    const aLen = aBin.length;\n    const bLen = bBin.length;\n    if (aLen !== bLen) {\n      return aLen - bLen;\n    }\n    return aBin.slice(0, aLen).localeCompare(bBin.slice(0, aLen));\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqazm8csz.ts(13,18): error TS2552: Cannot find name 'bin'. Did you mean 'bBin'?\n../../../../tmp/tmpqazm8csz.ts(14,18): error TS2552: Cannot find name 'bin'. Did you mean 'bBin'?\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr\n    .map((val) => parseInt(val.toString(2), 10))\n    .filter((val) => val > 0);\n  if (ones.length === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max.apply(null, ones);\n  const maxDecimal = Math.max.apply(null, ones.map((val) => val.toString().split('.')[1].length));\n  const decimals = maxDecimal - maxOnes;\n  const decimalsMap = new Map();\n  for (let i = 0; i < decimals; i++) {\n    decimalsMap.set(maxOnes, i);\n  }\n  const decimalsArr = Array.from(decimalsMap);\n  const decimalsArrLen = decimalsArr.length;\n  const decimalsArrSort = decimalsArr.sort((a, b) => a - b);\n  const decimalsArrSortLen = decimalsArrSort.length;\n  const decimalsArrSortArr = decimalsArrSort.map((val) => decimalsArr[val]);\n  const decimalsArrSortArrLen = decimalsArrSortArr.length;\n  const decimalsArrSortArrSort = decimalsArrSortArr.sort((a, b) => a - b);\n  const decimalsArrSortArrSortLen = decimalsArrSortArrSort.length;\n  const decimalsArrSortArrSortArr = decimalsArrSortArrSort.map((val) => decimalsArrSort[val]);\n  const decimalsArrSortArrSortArrLen = decimalsArrSortArrSortArr.length;\n  const decimalsArrSortArrSortArrSort = decimalsArrSortArrSortArr.sort((a, b) => a - b);\n  const decimalsArrSortArrSortArrSortLen = decimalsArrSortArrSortArrSort.length;\n  const decimalsArrSortArrSortArrSortArr = decimalsArrSortArrSortArrSort.map((val) => decimalsArrSortArrSort[val]);\n  const decimalsArrSortArrSortArrSortArrLen = decimalsArrSortArrSortArrSortArr.length;\n  const decimalsArrSortArrSortArrSortArrSort = decimalsArrSortArrSortArrSortArr.sort((a, b) => a - b);\n  const decimalsArrSortArrSortArrSortArrSortLen = decimalsArrSortArrSortArrSortArrSort.length;\n  const decimalsArrSortArrSortArrSortArrSortArr = decimalsArrSortArrSortArrSortArrSort.map((val) => decimalsArrSortArrSortArrSort[val]);\n  const decimalsArrSortArrSortArrSortArr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8bqko9ba.ts(63,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  for (let i = 0; i < len; i++) {\n    arr[i] = arr[i] / ones[i];\n  }\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3k9l3s9a.ts(11,21): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmp3k9l3s9a.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmp3k9l3s9a.ts(16,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp3k9l3s9a.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmp3k9l3s9a.ts(21,9): error TS2300: Duplicate identifier 'arr'.\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((val) => val.toString(2).split('').reduce((prev, cur) => prev + cur));\n  const sortedOnes = ones\n    .map((val) => val.split('')\n      .map((val) => +val)\n      .sort((a, b) => a - b)\n      .join(''))\n    .map((val) => +val);\n  const sortedArr = arr.map((val) => +val);\n  const sortedArr = sortedArr.map((val) => val.toString(2).split('').reduce((prev, cur) => prev + cur));\n  const sortedArr = sortedArr.map((val) => val.split('')\n    .map((val) => +val)\n    .sort((a, b) => a - b)\n    .join(''));\n  const sortedArr = sortedArr.map((val) => +val);\n  const sortedArr = sortedArr.map((val) => val.toString(2).split('').reduce((prev, cur) => prev + cur));\n  const sortedArr = sortedArr.map((val) => val.split('')\n    .map((val) => +val)\n    .sort((a, b) => a - b)\n    .join(''));\n  const sortedArr = sortedArr.map((val) => +val);\n  const sortedArr = sortedArr.map((val) => val.toString(2).split('').reduce((prev, cur) => prev + cur));\n  const sortedArr = sortedArr.map((val) => val.split('')\n    .map((val) => +val)\n    .sort((a, b) => a - b)\n    .join(''));\n  const sortedArr = sortedArr.map((val) => +val);\n  const sortedArr = sortedArr.map((val) => val.toString(2).split('').reduce((prev, cur) => prev + cur));\n  const sortedArr = sortedArr.map((val) => val.split('')\n    .map((val) => +val)\n    .sort((a, b) => a - b)\n    .join(''));\n  const sortedArr = sortedArr.map((val) => +val);\n  const sortedArr = sortedArr.map((val) => val.toString(2).split('').reduce((prev, cur) => prev + cur));\n  const sortedArr = sortedArr.map((val) => val.split('')\n    .map((val) => +val)\n    .sort((a, b) => a - b)\n    .join(''));\n  const sortedArr = sortedArr.map((val) => +val);\n  const sortedArr = sortedArr.map((val) => val.toString(2).split('').reduce((prev, cur) => prev + cur));\n  const \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj8b1avqi.ts(56,9): error TS1005: ',' expected.\n../../../../tmp/tmpj8b1avqi.ts(72,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpk9vadqqj.js:18:12)\n    at Object.<anonymous> (/tmp/tmpk9vadqqj.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const sorted = new Array(len);\n  for (let i = 0; i < len; i++) {\n    sorted[i] = arr[i];\n  }\n  sorted.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  for (let i = 0; i < len; i++) {\n    sorted[i] = arr[i];\n  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv0v20jr5.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpv0v20jr5.ts(19,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpv0v20jr5.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter(n => n & 1);\n  const zeros = arr.filter(n => !(n&1));\n  const len = ones.length;\n  const maxLen = Math.max(len, zeros.length);\n  const maxLen2 = Math.max(maxLen, len);\n  const onesArr = new Array(maxLen2);\n  const zerosArr = new Array(maxLen2);\n  for (let i = 0; i < maxLen2; i++) {\n    onesArr[i] = ones[i];\n    zerosArr[i] = zeros[i];\n  }\n  onesArr.sort((a, b) => a - b);\n  zerosArr.sort((a, b) => a - b);\n  for (let i = 0; i < len; i++) {\n    onesArr[len + i] = ones[i];\n    zerosArr[len + i] = zeros[i];\n  }\n  return onesArr.concat(zerosArr);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqeonnxw2.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpqeonnxw2.ts(18,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n",
      "timestamp": 1660334369
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const dec = Math.log(ones) / Math.LN2;\n  const bin = dec / Math.LN10;\n  const arr2 = arr.sort((a, b) => {\n    const aBin = parseInt(a.toString(2), 2);\n    const bBin = parseInt(b.toString(2), 2);\n    return aBin - bBin;\n  });\n  return arr2.map(val => parseInt(val.toString(2), 10));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  10,\n  11,\n  100,\n  101\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp0yxtl5gd.js:29:12)\n    at Object.<anonymous> (/tmp/tmp0yxtl5gd.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 10, 11, 100, 101 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334369
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    const aNum = count_ones(a);\n    const bNum = count_ones(b);\n    if (aNum === bNum) {\n      return a.localeCompare(b);\n    }\n    return aNum - bNum;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu356qybk.ts(13,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpu356qybk.ts(14,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpu356qybk.ts(16,16): error TS2339: Property 'localeCompare' does not exist on type 'number'.\n",
      "timestamp": 1660334369
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((val) => val.toString(2).split('').reduce((prev, curr) => prev + curr, 0));\n  const sortedArr = ones.sort((a, b) => a - b);\n  return sortedArr.map((val) => parseInt(val, 2));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd53ehq7h.ts(16,33): error TS2769: No overload matches this call.\n  Overload 1 of 3, '(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string', gave the following error.\n    Argument of type '(prev: number, curr: string) => string' is not assignable to parameter of type '(previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string'.\n      Types of parameters 'prev' and 'previousValue' are incompatible.\n        Type 'string' is not assignable to type 'number'.\n  Overload 2 of 3, '(callbackfn: (previousValue: number, currentValue: string, currentIndex: number, array: string[]) => number, initialValue: number): number', gave the following error.\n    Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpd53ehq7h.ts(17,41): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpd53ehq7",
      "timestamp": 1660334369
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    const ones = count_ones(b);\n    const decA = count_ones(a);\n    const decB = count_ones(b);\n    if (decA === decB) {\n      return decA - decB;\n    }\n    return decA - decB || decB - decA;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdqqwfjq7.ts(13,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpdqqwfjq7.ts(14,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpdqqwfjq7.ts(15,18): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334240
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const ones = count_ones(a);\n    const ones_b = count_ones(b);\n    if (ones === ones_b) {\n      return a - b;\n    }\n    return ones - ones_b;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprxd7b5e9.ts(13,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmprxd7b5e9.ts(14,20): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334369
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter(x => x === 1);\n  const dec = ones.length * 10;\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n  const dec = Math.ceil(dec / 10);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6w6qcu92.ts(83,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334370
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === 0) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    return a - b;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpma32jn6w.js:31:12)\n    at Object.<anonymous> (/tmp/tmpma32jn6w.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334370
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map(n => n & 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(n => n.toString(2)));\n  const maxLenLen = Math.max(maxLen, len.toString(2));\n  const maxLenLenLen = Math.max(maxLenLen, len);\n  const maxLenLenLenLen = Math.max(maxLenLenLen, maxLen);\n  const maxLenLenLenLenLen = Math.max(maxLenLenLenLen, maxLenLen);\n  const maxLenLenLenLenLen = Math.max(maxLenLenLenLen, maxLenLenLen);\n  const maxLenLenLenLenLen = Math.max(maxLenLenLenLen, maxLenLenLenLen);\n  const maxLenLenLenLenLen = Math.max(maxLenLenLenLenLen, maxLenLenLenLenLen);\n  const maxLenLenLenLenLen = Math.max(maxLenLenLenLenLen, maxLenLenLenLenLen);\n  const maxLenLenLenLenLen = Math.max(maxLenLenLenLenLen, maxLenLenLenLenLen);\n  const maxLenLenLenLenLen = Math.max(maxLenLenLenLenLen, maxLenLenLenLenLen);\n  const maxLenLenLenLenLen = Math.max(maxLenLenLenLenLen, maxLenLenLenLenLen);\n  const maxLenLenLenLenLen = Math.max(maxLenLenLenLenLen, maxLenLenLenLenLen);\n  const maxLenLenLenLenLen = Math.max(maxLenLenLenLenLen, maxLenLenLenLenLen);\n  const maxLenLenLenLenLen = Math.max(maxLenLenLenLenLen, maxLenLenLenLenLen);\n  const maxLenLenLenLenLen = Math.max(maxLenLenLenLenLen, maxLenLenLenLenLen);\n  const maxLenLenLenLenLen = Math.max(maxLenLenLenLenLen, maxLenLenLenLenLen);\n  const maxLenLenLenLenLen = Math.max(maxLenLenLenLenLen, maxLenLenLenLenLen);\n  const maxLenLenLenLenLen = Math.max(maxLenLenLenLenLen, maxLenLenLenLenLen);\n  const maxLenLenLenLenLen = Math.max(maxLenLenLenLenLen, maxLenLenLenLenLen);\n  const maxLenLenLenLenLen = Math.max(maxLenLenLenLenLen, maxLenLenLenLenLen);\n  const maxLen\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxv9n58qq.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334370
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === 0) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === 0) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n      return 0;\n    }\n    if (a === 0 && b === 1) {\n      return -1;\n    }\n    if (a === -1 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n      return 1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === -1 && b === 1) {\n      return 0;\n    }\n    if (a === 1 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === -1 && b === 1) {\n      return 0;\n    }\n    if (a === 1 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === -1 && b === 1) {\n      return 0;\n    }\n    if (a === 1 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === -1 && b === 1) {\n      return 0;\n    }\n    if (a === 1 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === -1 && b === 1) {\n      return 0;\n    }\n    if (a === 1 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === -1 && b === 1) {\n      return 0;\n    }\n    if (a === 1 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === -1 && b === 1) {\n      return 0;\n    }\n    if (a === 1 && b === -1) {\n      return 1;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkxghtayv.ts(142,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334370
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(v => v.length));\n  const arr2 = [];\n  for (let i = 0; i < len; i++) {\n    const onesCount = ones[i];\n    const len = arr[i].length;\n    for (let j = 0; j < len; j++) {\n      if (arr[i][j] === 1) {\n        arr2.push(arr[i][j]);\n      }\n    }\n    for (let j = 0; j < onesCount; j++) {\n      arr2.push(0);\n    }\n  }\n  return arr2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmtz2ts_o.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpmtz2ts_o.ts(16,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpmtz2ts_o.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpmtz2ts_o.ts(22,45): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmpmtz2ts_o.ts(26,24): error TS2339: Property 'length' does not exist on type 'number'.\n",
      "timestamp": 1660334370
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  for (let i = 0; i < len; i++) {\n    arr[i] = arr[i] / ones[i];\n  }\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3k9l3s9a.ts(11,21): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmp3k9l3s9a.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmp3k9l3s9a.ts(16,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp3k9l3s9a.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmp3k9l3s9a.ts(21,9): error TS2300: Duplicate identifier 'arr'.\n",
      "timestamp": 1660334366
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.filter(x => x === 1);\n  if (ones.length === 0) {\n    return arr;\n  }\n  const dec = ones[0] * 10 + ones[1];\n  const arr = arr.map(x => x * 10 + x);\n  arr.sort((a, b) => a - b);\n  for (let i = 0; i < len; i++) {\n    if (arr[i] !== dec) {\n      arr[i] = dec;\n    }\n  }\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvpnboe5d.ts(11,21): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmpvpnboe5d.ts(21,9): error TS2300: Duplicate identifier 'arr'.\n",
      "timestamp": 1660334369
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter(x => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(x => x.length));\n  const maxLenDiff = Math.abs(maxLen - len);\n  const maxOnesDiff = Math.abs(maxOnes - len);\n  if (maxLenDiff > maxOnesDiff) {\n    return arr;\n  }\n  const arr = new Array(len);\n  for (let i = 0; i < len; i++) {\n    arr[i] = new Array(maxLen + 1).fill(0);\n  }\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < maxLen + 1; j++) {\n      arr[i][j] = arr[i][j - 1] + ones[i];\n    }\n  }\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqpclr2pa.ts(11,21): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmpqpclr2pa.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpqpclr2pa.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpqpclr2pa.ts(22,45): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmpqpclr2pa.ts(28,9): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmpqpclr2pa.ts(30,5): error TS2322: Type 'any[]' is not assignable to type 'number'.\n",
      "timestamp": 1660334369
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((val) => val === 1);\n  const dec = ones.length ? Math.log10(ones.length) : Infinity;\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.pow(10, dec);\n  const \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbwgcft9r.ts(73,9): error TS1005: ',' expected.\n../../../../tmp/tmpbwgcft9r.ts(89,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334370
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((val) => val.toString(2).split('').reduce((prev, curr) => prev + curr, 0));\n  const sortedArr = arr.map((val) => {\n    const onesIndex = ones.findIndex((one) => one === val);\n    if (onesIndex === -1) {\n      return val;\n    }\n    const onesCount = ones[onesIndex];\n    const decimalVal = val - onesCount;\n    return decimalVal;\n  });\n  return sortedArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdsgkv53m.ts(16,33): error TS2769: No overload matches this call.\n  Overload 1 of 3, '(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string', gave the following error.\n    Argument of type '(prev: number, curr: string) => string' is not assignable to parameter of type '(previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string'.\n      Types of parameters 'prev' and 'previousValue' are incompatible.\n        Type 'string' is not assignable to type 'number'.\n  Overload 2 of 3, '(callbackfn: (previousValue: number, currentValue: string, currentIndex: number, array: string[]) => number, initialValue: number): number', gave the following error.\n    Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpdsgkv53m.ts(18,47): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.\n../../../../tmp/tmpdsgkv53m.ts(23,",
      "timestamp": 1660334370
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    const aOnes = count_ones(a);\n    const bOnes = count_ones(b);\n    if (aOnes < bOnes) {\n      return -1;\n    }\n    if (aOnes > bOnes) {\n      return 1;\n    }\n    const aDecimal = count_decimals(a);\n    const bDecimal = count_decimals(b);\n    if (aDecimal < bDecimal) {\n      return -1;\n    }\n    if (aDecimal > bDecimal) {\n      return 1;\n    }\n    return 0;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpft401i1u.ts(11,21): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmpft401i1u.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpft401i1u.ts(16,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpft401i1u.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpft401i1u.ts(21,9): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmpft401i1u.ts(23,19): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpft401i1u.ts(24,19): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpft401i1u.ts(31,22): error TS2304: Cannot find name 'count_decimals'.\n../../../../tmp/tmpft401i1u.ts(32,22): error TS2304: Cannot find name 'count_decimals'.\n",
      "timestamp": 1660334369
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const aNum = parseInt(a.toString(), 2);\n    const bNum = parseInt(b.toString(), 2);\n    return aNum - bNum;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpzy4r6iy8.js:21:12)\n    at Object.<anonymous> (/tmp/tmpzy4r6iy8.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2, 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334226
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr\n    .map((val) => val.toString(2).split('').reduce((acc, cur) => acc + cur))\n    .filter((val) => val === '1')\n    .length;\n  const maxOnes = arr\n    .map((val) => val.toString(2).split('').reduce((acc, cur) => acc + cur))\n    .filter((val) => val === '1')\n    .reduce((acc, cur) => Math.max(acc, cur), 0);\n  const maxDecimal = arr\n    .map((val) => val.toString(2).split('').reduce((acc, cur) => acc + cur))\n    .filter((val) => val === '1')\n    .reduce((acc, cur) => Math.max(acc, cur), 0);\n  const maxDecimalNum = Math.pow(10, maxDecimal);\n  const maxDecimalNumNum = Math.pow(10, maxDecimalNum);\n  const maxDecimalNumNumNum = Math.pow(10, maxDecimalNumNum);\n  const maxDecimalNumNumNumNum = Math.pow(10, maxDecimalNumNumNumNum);\n  const maxDecimalNumNumNumNumNum = Math.pow(10, maxDecimalNumNumNumNumNum);\n  const maxDecimalNumNumNumNumNumNum = Math.pow(10, maxDecimalNumNumNumNumNumNum);\n  const maxDecimalNumNumNumNumNumNumNum = Math.pow(10, maxDecimalNumNumNumNumNumNumNumNum);\n  const maxDecimalNumNumNumNumNumNumNumNum = Math.pow(10, maxDecimalNumNumNumNumNumNumNumNumNum);\n  const maxDecimalNumNumNumNumNumNumNumNumNum = Math.pow(10, maxDecimalNumNumNumNumNumNumNumNumNumNumNum);\n  const maxDecimalNumNumNumNumNumNumNumNumNumNumNum = Math.pow(10, maxDecimalNumNumNumNumNumNumNumNumNumNumNumNum);\n  const maxDecimalNumNumNumNumNumNumNumNumNumNumNumNumNum = Math.pow(10, maxDecimalNumNumNumNumNumNumNumNumNumNumNumNumNumNum);\n  const maxDecimalNumNumNumNumNumNumNumNumNumNumNumNumNumNum = Math.pow(10, maxDecimalNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum);\n  const maxDecimalNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum = Math.pow(10, maxDecimalNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum);\n  const maxDecimalNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNumNum = Math.pow(10, \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprt6dpnz4.ts(42,9): error TS1005: ',' expected.\n../../../../tmp/tmprt6dpnz4.ts(58,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334370
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => a - b);\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp66q71kek.js:18:12)\n    at Object.<anonymous> (/tmp/tmp66q71kek.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((val) => val.toString(2).split('').reduce((prev, curr, index) => {\n    return prev + Number(curr);\n  }, 0));\n  const decimals = arr.map((val) => val.toString(10).split('').reduce((prev, curr, index) => {\n    return prev + Number(curr);\n  }, 0));\n  const maxOnes = Math.max(...ones);\n  const maxDecimal = Math.max(...decimals);\n  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n  const maxDecimalOnes = ones[maxDecimalIndex];\n  const maxDecimalIndex = ones.length - maxDecimalOnes;\n  const maxDecimalOnesIndex = ones.length - maxDecimalIndex;\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesOnes = ones[maxOnesIndex];\n  const maxOnesIndex = ones.length - maxOnesOnes;\n  const maxOnesOnesIndex = ones.length - maxOnesIndex;\n  const maxDecimalOnesIndex = decimals.indexOf(maxDecimalOnes);\n  const maxDecimalOnesOnes = ones[maxDecimalOnesIndex];\n  const maxDecimalOnesIndex = decimals.length - maxDecimalOnesOnes;\n  const maxDecimalOnesOnesIndex = decimals.length - maxDecimalOnesIndex;\n  const maxOnesOnesIndex = ones.length - maxOnesOnesIndex;\n  const maxOnesOnesOnesIndex = ones.length - maxOnesOnesIndex;\n  const maxOnesOnesIndex = ones.length - maxOnesOnesOnesIndex;\n  const maxOnesOnesOnesIndex = ones.length - maxOnesOnesOnesIndex;\n  const maxOnesOnesOnesIndex = ones.length - maxOnesOnesOnesIndex;\n  const maxOnesOnesOnesOnesIndex = ones.length - maxOnesOnesOnesOnesIndex;\n  const maxOnesOnesOnesOnesIndex = ones.length - maxOnesOnesOnesOnesIndex;\n  const maxOnesOnesOnesOnesIndex = ones.length - maxOnesOnesOnesOnesIndex;\n  const maxOnesOnesOnesOnesIndex = ones.length - maxOnesOnesOnesOnesIndex;\n  const maxOnesOnesOnesOnesIndex = ones.length - maxOnesOnesOnesOnesIndex;\n  const maxOnesOnesOnesOnesIndex = ones.length - maxOnesOnesOnes\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd6vlrc48.ts(63,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334370
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => a - b);\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp66q71kek.js:18:12)\n    at Object.<anonymous> (/tmp/tmp66q71kek.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes = Math.pow(2, Math.ceil(Math.log(ones) / Math.LN2));\n  const maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes) / Math.LN10));\n  const dec = Math.ceil(Math.log(maxDec) / Math.LN10);\n  const dec = Math.max(dec, 10);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(Math.log(dec) / Math.LN2);\n  const dec = Math.max(dec, 2);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(Math.log(dec) / Math.LN10);\n  const dec = Math.max(dec, 10);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(Math.log(dec) / Math.LN2);\n  const dec = Math.max(dec, 2);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(Math.log(dec) / Math.LN10);\n  const dec = Math.max(dec, 10);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(Math.log(dec) / Math.LN2);\n  const dec = Math.max(dec, 2);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(Math.log(dec) / Math.LN10);\n  const dec = Math.max(dec, 10);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(Math.log(dec) / Math.LN2);\n  const dec = Math.max(dec, 2);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(Math.log(dec) / Math.LN10);\n  const dec = Math.max(dec, 10);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(Math.log(dec) / Math.LN2);\n  const dec = Math.max(dec, 2);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(Math.log(dec) / Math.LN10);\n  const dec = Math.max(dec, 10);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(Math.log(dec) / Math.LN2);\n  const dec = Math.max(dec, 2);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(Math.log(dec) / Math.LN10);\n  const dec = Math.max(dec, 10);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(Math.log(dec) / Math.LN2);\n  const dec = Math.max(dec, 2);\n  const dec = Math.pow(10, dec);\n  const dec = Math.ceil(Math.log(dec) / \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1g1ufr4k.ts(62,9): error TS1005: ',' expected.\n../../../../tmp/tmp1g1ufr4k.ts(78,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334370
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  const sorted = new Array(len);\n  for (let i = 0; i < len; i++) {\n    sorted[i] = arr[ones[i]];\n  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp160g_5l6.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmp160g_5l6.ts(16,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp160g_5l6.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n",
      "timestamp": 1660334370
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpk9vadqqj.js:18:12)\n    at Object.<anonymous> (/tmp/tmpk9vadqqj.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter(x => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(x => Math.log2(x)));\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.min(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen, len);\n  const maxLen = Math.ceil(maxLen);\n  const maxLen = Math.max(maxLen\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6fqmzdye.ts(70,1): error TS1005: ',' expected.\n../../../../tmp/tmp6fqmzdye.ts(70,9): error TS1005: ',' expected.\n../../../../tmp/tmp6fqmzdye.ts(86,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334370
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const ones = count_ones(b);\n    const decA = count_ones(a);\n    const decB = count_ones(b);\n    if (decA === decB) {\n      return decA - decB;\n    }\n    return decA - decB || decB - decA;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnv1ksvpf.ts(13,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpnv1ksvpf.ts(14,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpnv1ksvpf.ts(15,18): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334240
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((val) => val.toString(2).length);\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...ones.map(val => val.length));\n  const maxLenStr = maxLen.toString();\n  const maxLenArr = Array.from({ length: maxLen }, (_, i) => maxLenStr);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + maxOnes[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.map((val, i) => val + ones[i]);\n  const maxLenArr = maxLenArr.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjra7oliz.ts(43,31): error TS1003: Identifier expected.\n../../../../tmp/tmpjra7oliz.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334370
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((v) => v.toString(2).split('').reduce((acc, cur) => acc + cur === '1' ? 1 : 0, 0));\n  ones = ones.sort(function (a, b) {\n    return a - b;\n  });\n  const decimals = arr.map((v) => v.toString(2).split('').reduce((acc, cur) => acc + cur === '1' ? 10 : 0, 0));\n  decimals = decimals.sort(function (a, b) {\n    return a - b;\n  });\n  const maxOnes = Math.max(...ones);\n  const maxDecimal = Math.max(...decimals);\n  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxIndex = Math.max(maxOnesIndex, maxDecimalIndex);\n  const maxOnesArr = ones.slice(0, maxIndex);\n  const maxDecimalArr = decimals.slice(0, maxIndex);\n  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxIndex = Math.max(maxOnesIndex, maxDecimalIndex);\n  const maxOnesArr = ones.slice(0, maxIndex);\n  const maxDecimalArr = decimals.slice(0, maxIndex);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxIndex = Math.max(maxOnesIndex, maxDecimalIndex);\n  const maxOnesArr = ones.slice(0, maxIndex);\n  const maxDecimalArr = decimals.slice(0, maxIndex);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxIndex = Math.max(maxOnesIndex, maxDecimalIndex);\n  const maxOnesArr = ones.slice(0, maxIndex);\n  const maxDecimalArr = decimals.slice(0, maxIndex);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxIndex = Math.max(maxOnesIndex, maxDecimalIndex);\n  const maxOnesArr = ones.slice(0, maxIndex);\n  const maxDecimalArr = decimals.slice(0, maxIndex);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxIndex = Math.max(maxOnesIndex, maxDecimalIndex);\n  const maxOnesArr = ones.slice(0, maxIndex);\n  const maxDecimalArr = decimals.slice(0, maxIndex);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxIndex = Math.max(maxOnesIndex, maxDecimalIndex);\n  const maxOnesArr = ones.slice(0, maxIndex);\n  const maxDecimalArr = decimals.slice(0, maxIndex);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxIndex = Math.max(maxOnesIndex, maxDecimalIndex);\n  const maxOnesArr = ones.slice(0, maxIndex);\n  const maxDecimalArr = decimals.slice(0, \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_6h14l5d.ts(60,9): error TS1005: ',' expected.\n../../../../tmp/tmp_6h14l5d.ts(76,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334370
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.filter((val) => val === 1);\n  if (ones.length === 0) {\n    return arr;\n  }\n  const sorted = ones\n    .map((val) => [val, val.toString().length - 1])\n    .sort((a, b) => a[1] - b[1]);\n  return sorted.map((val) => val[0]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp16g453q5.js:28:12)\n    at Object.<anonymous> (/tmp/tmp16g453q5.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334370
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    const ones = count_ones(b);\n    const decA = count_ones(a);\n    const decB = count_ones(b);\n    if (decA === decB) {\n      return decA - decB;\n    }\n    return decA - decB || decB - decA;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdqqwfjq7.ts(13,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpdqqwfjq7.ts(14,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpdqqwfjq7.ts(15,18): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334240
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  const sortedOnes = ones\n    .map((val) => val > 0 ? val : -val)\n    .sort((a, b) => a - b);\n  const decimals = arr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  const sortedDecimals = decimals\n    .map((val) => val > 0 ? val : -val)\n    .sort((a, b) => a - b);\n  const sortedArr = arr.map((val) => val > 0 ? val : -val);\n  const sortedArr = sortedArr.concat(sortedOnes, sortedDecimals);\n  return sortedArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_c5a12x0.ts(24,9): error TS2451: Cannot redeclare block-scoped variable 'sortedArr'.\n../../../../tmp/tmp_c5a12x0.ts(25,9): error TS2451: Cannot redeclare block-scoped variable 'sortedArr'.\n",
      "timestamp": 1660334372
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((x) => x > 0);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n  const maxLen = Math.max(maxOnes, len);\n  const maxLen2 = Math.ceil(Math.log(maxLen) / Math.LN2);\n  const maxLen3 = Math.ceil(Math.log(maxLen2) / Math.LN2);\n  const maxLen4 = Math.ceil(Math.log(maxLen3) / Math.LN2);\n  const maxLen5 = Math.ceil(Math.log(maxLen4) / Math.LN2);\n  const maxLen6 = Math.ceil(Math.log(maxLen5) / Math.LN2);\n  const maxLen7 = Math.ceil(Math.log(maxLen6) / Math.LN2);\n  const maxLen8 = Math.ceil(Math.log(maxLen7) / Math.LN2);\n  const maxLen9 = Math.ceil(Math.log(maxLen8) / Math.LN2);\n  const maxLen10 = Math.ceil(Math.log(maxLen9) / Math.LN2);\n  const maxLen11 = Math.ceil(Math.log(maxLen10) / Math.LN2);\n  const maxLen12 = Math.ceil(Math.log(maxLen11) / Math.LN2);\n  const maxLen13 = Math.ceil(Math.log(maxLen12) / Math.LN2);\n  const maxLen14 = Math.ceil(Math.log(maxLen13) / Math.LN2);\n  const maxLen15 = Math.ceil(Math.log(maxLen14) / Math.LN2);\n  const maxLen16 = Math.ceil(Math.log(maxLen15) / Math.LN2);\n  const maxLen17 = Math.ceil(Math.log(maxLen16) / Math.LN2);\n  const maxLen18 = Math.ceil(Math.log(maxLen17) / Math.LN2);\n  const maxLen19 = Math.ceil(Math.log(maxLen18) / Math.LN2);\n  const maxLen20 = Math.ceil(Math.log(maxLen19) / Math.LN2);\n  const maxLen21 = Math.ceil(Math.log(maxLen20) / Math.LN2);\n  const maxLen22 = Math.ceil(Math.log(maxLen21) / Math.LN2);\n  const maxLen23 = Math.ceil(Math.log(maxLen22) / Math.LN2);\n  const maxLen24 = Math.ceil(Math.log(maxLen23) / Math.LN2);\n  const maxLen25 = Math.ceil(Math.log(maxLen24) / Math.LN2);\n  const maxLen26 = Math.ceil(Math.log(maxLen25) / Math.LN2);\n  const maxLen27 = Math.ceil(Math.log(maxLen26) / Math.LN2);\n  const maxLen28 = Math.ceil(Math.log(maxLen27) / Math.LN2);\n  const maxLen29 = Math.ceil(Math.log(maxLen28) / Math.LN2);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1m9h1xb0.ts(67,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334372
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const ones = arr\n    .map(x => parseInt(x.toString(2), 10))\n    .filter(x => x > 0);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const maxOne = ones[0];\n  const minOne = ones[0];\n  for (let i = 1; i < len; i++) {\n    const one = ones[i];\n    if (one > maxOne) {\n      maxOne = one;\n    } else if (one < minOne) {\n      minOne = one;\n    }\n  }\n  const maxOneDecimal = maxOne / Math.pow(10, len * 2);\n  const minOneDecimal = minOne / Math.pow(10, len * 2);\n  const maxOneDecimalString = maxOneDecimal.toString(10);\n  const minOneDecimalString = minOneDecimal.toString(10);\n  const maxOneDecimalStringLen = maxOneDecimalString.length;\n  const minOneDecimalStringLen = minOneDecimalString.length;\n  const maxOneDecimalStringLenDiff = maxOneDecimalStringLen - minOneDecimalStringLen;\n  const minOneDecimalStringLenDiff = minOneDecimalStringLen - maxOneDecimalStringLen;\n  const maxOneDecimalStringDiff = maxOneDecimalStringLen - minOneDecimalStringLen;\n  const minOneDecimalStringDiff = minOneDecimalStringLen - maxOneDecimalStringLen;\n  const maxOneDecimalStringDiff = maxOneDecimalStringLen - minOneDecimalStringLen;\n  const maxOneDecimalStringDiff = maxOneDecimalStringLen - minOneDecimalStringLen;\n  const maxOneDecimalStringDiff = maxOneDecimalStringLen - minOneDecimalStringLen;\n  const maxOneDecimalStringDiff = maxOneDecimalStringLen - minOneDecimalStringLen;\n  const maxOneDecimalStringDiff = maxOneDecimalStringLen - minOneDecimalStringLen;\n  const maxOneDecimalStringDiff = maxOneDecimalStringLen - minOneDecimalStringLen;\n  const maxOneDecimalStringDiff = maxOneDecimalStringLen - minOneDecimalStringLen;\n  const maxOneDecimalStringDiff = maxOneDecimalStringLen - minOneDecimalStringLen;\n  const maxOneDecimalStringDiff = maxOneDecimalStringLen - minOneDecimalStringLen;\n  const maxOneDecimalStringDiff = maxOneDecimalStringLen - minOneDecimalStringLen;\n  const maxOneDecimalStringDiff = maxOneDecimalStringLen - minOneDecimalString\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_h481eie.ts(76,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334373
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter(v => v === 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.ceil(len / 2);\n  const maxOnesLen = Math.floor(maxOnes);\n  const maxOnesLenLen = Math.floor(maxOnesLen);\n  const maxOnesLenLenLen = Math.floor(maxOnesLenLen);\n  const maxOnesLenLenLenLen = Math.floor(maxOnesLenLenLen);\n  const maxOnesLenLenLenLen = Math.floor(maxOnesLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.floor(maxOnesLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.floor(maxOnesLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.floor(maxOnesLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.floor(maxOnesLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.floor(maxOnesLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.floor(maxOnesLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.floor(maxOnesLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.floor(maxOnesLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.floor(maxOnesLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.floor(maxOnesLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.floor(maxOnesLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.floor(maxOnesLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.floor(maxOnesLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.floor(maxOnesLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.floor(maxOnesLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.floor(maxOnesLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.floor(maxOnesLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.floor(maxOnesLenLenLenLenLen);\n  const maxOnes\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjp4mdfm0.ts(62,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334372
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const ones = count_ones(b);\n    const decA = count_ones(a);\n    const decB = count_ones(b);\n    if (decA === decB) {\n      return decA - decB;\n    }\n    return decA - decB || decB - decA;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnv1ksvpf.ts(13,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpnv1ksvpf.ts(14,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpnv1ksvpf.ts(15,18): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334240
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr\n    .map(n => parseInt(n.toString(2), 10))\n    .filter(n => n >= 0);\n  if (ones.length === 0) {\n    return arr;\n  }\n  const sorted = [];\n  let maxOnes = 0;\n  let minOnes = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < len; i++) {\n    const one = ones[i];\n    if (one > maxOnes) {\n      maxOnes = one;\n    }\n    if (one < minOnes) {\n      minOnes = one;\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    const one = ones[i];\n    if (one === maxOnes) {\n      sorted.push(maxOnes);\n      maxOnes = 0;\n    } else if (one === minOnes) {\n      sorted.push(minOnes);\n      minOnes = Number.MAX_SAFE_INTEGER;\n    } else {\n      sorted.push(one);\n    }\n  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  101,\n  10,\n  11,\n  100\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpvozq8vqg.js:53:12)\n    at Object.<anonymous> (/tmp/tmpvozq8vqg.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 101, 10, 11, 100 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334373
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const aNum = parseInt(a.toString(2), 10);\n    const bNum = parseInt(b.toString(2), 10);\n    return aNum - bNum;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpiqqe655k.js:21:12)\n    at Object.<anonymous> (/tmp/tmpiqqe655k.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334243
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const aNum = parseInt(a.toString(), 2);\n    const bNum = parseInt(b.toString(), 2);\n    return aNum - bNum;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpzy4r6iy8.js:21:12)\n    at Object.<anonymous> (/tmp/tmpzy4r6iy8.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2, 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334226
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    const aBits = binToInt(a);\n    const bBits = binToInt(b);\n    return aBits - bBits;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqe14nfg8.ts(13,19): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmpqe14nfg8.ts(14,19): error TS2304: Cannot find name 'binToInt'.\n",
      "timestamp": 1660334373
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    const aOnes = count_ones(a);\n    const bOnes = count_ones(b);\n    if (aOnes > bOnes) {\n      return -1;\n    }\n    if (aOnes < bOnes) {\n      return 1;\n    }\n    const aVal = count_ones(a);\n    const bVal = count_ones(b);\n    if (aVal > bVal) {\n      return -1;\n    }\n    if (aVal < bVal) {\n      return 1;\n    }\n    return a.localeCompare(b);\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt8wdbplv.ts(11,21): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmpt8wdbplv.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpt8wdbplv.ts(16,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpt8wdbplv.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpt8wdbplv.ts(21,9): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmpt8wdbplv.ts(23,19): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpt8wdbplv.ts(24,19): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpt8wdbplv.ts(31,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpt8wdbplv.ts(32,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpt8wdbplv.ts(39,14): error TS2339: Property 'localeCompare' does not exist on type 'number'.\n",
      "timestamp": 1660334373
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const ones = arr\n    .map((v) => v.toString(2).split('').reduce((p, c) => p + +c, 0))\n    .sort((a, b) => a - b);\n  const decimals = arr\n    .map((v) => v.toString(2).split('').reduce((p, c) => p + +c, 0))\n    .sort((a, b) => a - b);\n  const maxDecimals = Math.max.apply(null, decimals);\n  const maxOnes = Math.max.apply(null, ones);\n  const maxDecimalsIndex = decimals.indexOf(maxDecimals);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxDecimalsOnes = maxDecimalsIndex - maxOnesIndex;\n  const maxDecimalsOnesIndex = decimals.indexOf(maxDecimalsOnes);\n  const maxOnesOnesIndex = ones.indexOf(maxOnesOnes);\n  const maxOnesOnesOnesIndex = ones.indexOf(maxOnesOnesOnesIndex);\n  const maxOnesOnesOnesOnesIndex = ones.indexOf(maxOnesOnesOnesOnesIndex);\n  const maxOnesOnesOnesOnesOnesIndex = ones.indexOf(maxOnesOnesOnesOnesOnesIndex);\n  const maxOnesOnesOnesOnesOnesOnesIndex = ones.indexOf(maxOnesOnesOnesOnesOnesOnesOnesIndex);\n  const maxOnesOnesOnesOnesOnesOnesOnesIndex = ones.indexOf(maxOnesOnesOnesOnesOnesOnesOnesIndex);\n  const maxOnesOnesOnesOnesOnesOnesOnesIndex = ones.indexOf(maxOnesOnesOnesOnesOnesOnesOnesOnesIndex);\n  const maxOnesOnesOnesOnesOnesOnesOnesOnesIndex = ones.indexOf(maxOnesOnesOnesOnesOnesOnesOnesOnesOnesIndex);\n  const maxOnesOnesOnesOnesOnesOnesOnesOnesOnesIndex = ones.indexOf(maxOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesIndex);\n  const maxOnesOnesOnesOnesOnesOnesOnesOnesOnesIndex = ones.indexOf(maxOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesIndex);\n  const maxOnesOnesOnesOnes\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphw4thmcz.ts(58,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334373
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes = Math.pow(2, Math.ceil(Math.log(ones) / Math.LN2));\n  const maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes) / Math.LN10));\n  const decs = maxDec / maxOnes;\n  const decToOnes = Math.pow(10, decs);\n  const oneToDecs = Math.pow(10, maxDec);\n  const decToOne = decToOnes / oneToDecs;\n  const oneToDec = oneToDecs / decs;\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const decs = Math.ceil(Math.log(ones) / Math.LN10);\n  const oneToDec = oneToDec / decs;\n  const oneToDecs = Math.pow(10, decs);\n  const decToOne = decToOne / oneToDec;\n  const oneToOnes = Math.pow(10, maxOnes);\n  const oneToOne = oneToOnes / ones;\n  const oneToOneToDecs = Math.pow(10, maxOnes * decToOne);\n  const oneToOneToDec = oneToOneToDecs / oneToOnes;\n  const oneToOneToDecToOnes = Math.pow(10, maxOnes * decToOne * oneToOnes);\n  const oneToOneToDecToOne = oneToOneToDecToOne / oneToOne;\n  const oneToOneToDecToOneToOnes = Math.pow(10, maxOnes * decToOne * oneToOne * ones);\n  const oneToOneToDecToOneToOne = oneToOneToDecToOneToOne / oneToOne;\n  const oneToOneToDecToOneToOneToOnes = Math.pow(10, maxOnes * decToOne * oneToOne * ones * ones);\n  const oneToOneToDecToOneToOneToOne = oneToOneToDecToOneToOneToOnes / oneToOne;\n  const oneToOneToDecToOneToOneToOneToOnes = Math.pow(10, maxOnes * decToOne * oneToOne * ones * ones * ones);\n  const oneToOneToDecToOneToOneToOneToOnes = Math.pow(10, maxOnes * decToOne * oneToOne * ones * ones * ones * ones);\n  const oneToOneToDecToOneToOneToOneToOneToOnes = Math.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpml12xk31.ts(41,56): error TS1003: Identifier expected.\n../../../../tmp/tmpml12xk31.ts(58,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334373
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log2(len));\n  const maxOnesLen = Math.pow(2, maxOnes);\n  const maxOnesLenLen = Math.pow(2, maxOnesLen);\n  const maxOnesLenLenLen = Math.pow(2, maxOnesLenLen);\n  const maxOnesLenLenLenLen = Math.pow(2, maxOnesLenLenLen);\n  const maxOnesLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLen);\n  const maxOnesLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLenLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLenLenLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLenLenLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLenLenLenLenLenLenLenLenLenLen = Math.pow(2, maxOnesLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen);\n  const maxOnesLenLenLenLenLen\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplxx85sif.ts(55,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334373
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpk9vadqqj.js:18:12)\n    at Object.<anonymous> (/tmp/tmpk9vadqqj.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === 0) return 1;\n    if (b === 0) return -1;\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpkcv9mqwy.js:27:12)\n    at Object.<anonymous> (/tmp/tmpkcv9mqwy.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334366
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((val) => val.toString(2).split('').reduce((prev, curr, i) => {\n    return prev + parseInt(curr, 2);\n  }, 0));\n  const sortedOnes = ones\n    .map((val) => val > 0 ? val : -val)\n    .sort((a, b) => a - b);\n  const decimals = sortedOnes.map((val) => val.toString(10).split('.')[1].length);\n  const sortedDecimals = decimals\n    .map((val) => val > 0 ? val : -val)\n    .sort((a, b) => a - b);\n  const sortedArr = sortedDecimals.map((val, i) => {\n    return sortedOnes[i] * Math.pow(10, decimals[i]);\n  });\n  return sortedArr.map((val) => val.toString(2).split('').reduce((prev, curr, i) => {\n    return prev + parseInt(curr, 2);\n  }, 0));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpfxllwk6z.js:22\n    const decimals = sortedOnes.map((val) => val.toString(10).split('.')[1].length);\n                                                                           ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n    at /tmp/tmpfxllwk6z.js:22:76\n    at Array.map (<anonymous>)\n    at sort_array (/tmp/tmpfxllwk6z.js:22:33)\n    at test (/tmp/tmpfxllwk6z.js:36:22)\n    at Object.<anonymous> (/tmp/tmpfxllwk6z.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334373
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(x => Math.log2(x)));\n  const maxLen = Math.max(maxLen, maxOnes);\n  const maxLen = Math.max(maxLen, len);\n  const newArr = new Array(len);\n  for (let i = 0; i < len; i++) {\n    const one = ones[i];\n    const len = Math.log2(one);\n    const newLen = Math.max(len, maxLen);\n    newArr[i] = Math.pow(2, newLen - maxLen);\n  }\n  return newArr.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbp9302y0.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpbp9302y0.ts(16,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpbp9302y0.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpbp9302y0.ts(22,9): error TS2451: Cannot redeclare block-scoped variable 'maxLen'.\n../../../../tmp/tmpbp9302y0.ts(23,9): error TS2451: Cannot redeclare block-scoped variable 'maxLen'.\n../../../../tmp/tmpbp9302y0.ts(24,9): error TS2451: Cannot redeclare block-scoped variable 'maxLen'.\n",
      "timestamp": 1660334373
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((val) => val === 1);\n  const dec = ones.length ? Math.log10(ones.length) : 0;\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const dec = Math.ceil(dec);\n  const dec = Math.max(dec, 0);\n  const de\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqb7pbsvw.ts(90,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334373
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpk9vadqqj.js:18:12)\n    at Object.<anonymous> (/tmp/tmpk9vadqqj.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  for (let i = 0; i < len; i++) {\n    if (ones[i] === 0) {\n      arr.splice(i, 1);\n      i--;\n      len--;\n    }\n  }\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa21fp702.ts(11,21): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmpa21fp702.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpa21fp702.ts(16,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpa21fp702.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpa21fp702.ts(21,9): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmpa21fp702.ts(35,7): error TS2588: Cannot assign to 'len' because it is a constant.\n",
      "timestamp": 1660334373
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpk9vadqqj.js:18:12)\n    at Object.<anonymous> (/tmp/tmpk9vadqqj.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map(x => x === 1 ? 1 : 0);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map(x => x.toString(10).length));\n  const maxLenStr = maxLen.toString();\n  const maxLenNum = parseInt(maxLenStr, 10);\n  const maxLenNumStr = maxLenNum.toString();\n  const maxLenNumStrLen = maxLenNumStr.length;\n  const maxLenNumStrLenLen = maxLenNumStrLen - 1;\n  const maxLenNumStrLenNum = maxLenNumStrLen - 1;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 2;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 3;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 4;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 5;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 6;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 7;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 8;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 9;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 10;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 11;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 12;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 13;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 14;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 15;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 16;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 17;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 18;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 19;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 20;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 21;\n  const maxLenNumStrLenNumNum = maxLenNumStrLen - 22;\n  const maxLenNum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpia7pyw_j.ts(67,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334373
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter(x => x === 1);\n  const zeros = arr.filter(x => x === 0);\n  const len = ones.length;\n  if (len === 0) {\n    return zeros;\n  }\n  if (len === 1) {\n    return ones;\n  }\n  const sorted = [];\n  for (let i = 0; i < len; i++) {\n    const one = ones[i];\n    const zero = zeros[i];\n    if (one > zero) {\n      sorted.push(zero);\n    } else if (one < zero) {\n      sorted.push(one);\n    } else {\n      sorted.push(zero);\n      sorted.push(one);\n    }\n  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpype7bcgs.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpype7bcgs.ts(18,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n",
      "timestamp": 1660334373
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  const maxOnes = Math.max(...ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const decimals = maxOnesIndex + 1;\n  const decimalsArr = new Array(decimals).fill(0);\n  for (let i = 0; i < decimalsArr.length; i++) {\n    decimalsArr[i] = Math.pow(10, i);\n  }\n  const decimalsSum = decimalsArr.reduce((acc, val) => acc + val, 0);\n  const decimalsSumArr = new Array(decimalsSum).fill(0);\n  for (let i = 0; i < decimalsSumArr.length; i++) {\n    decimalsSumArr[i] = Math.pow(10, i);\n  }\n  const decimalsSumArr = decimalsSumArr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  const decimalsSumArr = decimalsSumArr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  const decimalsSumArr = decimalsSumArr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  const decimalsSumArr = decimalsSumArr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  const decimalsSumArr = decimalsSumArr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  const decimalsSumArr = decimalsSumArr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  const decimalsSumArr = decimalsSumArr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  const decimalsSumArr = decimalsSumArr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  const decimalsSumArr = decimalsSumArr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  const decimalsSumArr = decimalsSumArr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  const decimalsSumArr = decimalsSumArr.map((val) => val.toString(2).split('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp729xzb45.ts(39,77): error TS1002: Unterminated string literal.\n../../../../tmp/tmp729xzb45.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmp729xzb45.ts(40,9): error TS1005: ',' expected.\n../../../../tmp/tmp729xzb45.ts(56,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334373
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes = Math.pow(2, len) - ones;\n  const maxOnesIndex = Math.floor(maxOnes / 2);\n  const maxOnesValue = maxOnes % 2;\n  const maxOnesBin = maxOnesIndex.toString(2);\n  const maxOnesBinLen = maxOnesBin.length;\n  const maxOnesBinStr = maxOnesBin.substr(0, maxOnesBinLen - 1);\n  const maxOnesBinStr = maxOnesBinStr + maxOnesBin.substr(maxOnesBinLen - 1);\n  const maxOnesBinNum = parseInt(maxOnesBinStr, 2);\n  const maxOnesBinNumLen = maxOnesBinNum.toString().length;\n  const maxOnesBinNumStr = maxOnesBinNum.toString(2);\n  const maxOnesBinNumStrLen = maxOnesBinNumStr.length;\n  const maxOnesBinNumStrPad = maxOnesBinNumStrLen - maxOnesBinNumStrLen;\n  const maxOnesBinNumStrPadZero = maxOnesBinNumStrPad < 0 ? maxOnesBinNumStrPad : 0;\n  const maxOnesBinNumStrPadZeroLen = maxOnesBinNumStrPad < 0 ? maxOnesBinNumStrPad : 0;\n  const maxOnesBinNumStrPadOne = maxOnesBinNumStrPad > 0 ? maxOnesBinNumStrPad : 0;\n  const maxOnesBinNumStrPadOneLen = maxOnesBinNumStrPad > 0 ? maxOnesBinNumStrPad : 0;\n  const maxOnesBinNumStrPadTwo = maxOnesBinNumStrPad > 1 ? maxOnesBinNumStrPad : 0;\n  const maxOnesBinNumStrPadTwoLen = maxOnesBinNumStrPad > 1 ? maxOnesBinNumStrPad : 0;\n  const maxOnesBinNumStrPadThree = maxOnesBinNumStrPad > 2 ? maxOnesBinNumStrPad : 0;\n  const maxOnesBinNumStrPadThreeLen = maxOnesBinNumStrPad > 2 ? maxOnesBinNumStrPad : 0;\n  const maxOnesBinNumStrPadFour = maxOnesBinNumStrPad > 3 ? maxOnesBinNumStrPad : 0;\n  const maxOnesBinNum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpoypg_mt_.ts(55,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334373
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr\n    .map((x) => parseInt(x.toString(2), 2))\n    .filter((x) => x > 0);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x) => x.length));\n  const maxLenDiff = Math.abs(maxLen - len);\n  if (maxLenDiff === 0) {\n    return arr;\n  }\n  const maxOnesDiff = Math.abs(maxOnes - Math.max(...ones));\n  if (maxOnesDiff === 0) {\n    return arr;\n  }\n  const maxDiff = Math.max(maxOnesDiff, maxLenDiff);\n  const onesDiff = maxDiff / len;\n  const onesDiffArr = new Array(len).fill(0);\n  for (let i = 0; i < len; i++) {\n    onesDiffArr[i] = onesDiff;\n  }\n  const sortedArr = arr.map((x, i) => {\n    const onesDiff = onesDiffArr[i];\n    const len = x.length;\n    const onesDiffDiff = Math.abs(onesDiff - onesDiffArr[i - 1]);\n    if (onesDiffDiff === 0) {\n      return x;\n    }\n    const onesDiffDiffArr = new Array(len).fill(0);\n    for (let j = 0; j < len; j++) {\n      onesDiffDiffArr[j] = onesDiffDiff / x[j];\n    }\n    const onesDiffDiffMax = Math.max(...onesDiffDiffArr);\n    const onesDiffDiffMaxArr = new Array(len).fill(0);\n    for (let j = 0; j < len; j++) {\n      onesDiffDiffMaxArr[j] = onesDiffDiffMax / x[j];\n    }\n    const onesDiffDiffMaxMax = Math.max(...onesDiffDiffMaxArr);\n    const onesDiffDiffMaxMaxArr = new Array(len).fill(0);\n    for (let j = 0; j < len; j++) {\n      onesDiffDiffMaxMaxArr[j] = onesDiffDiffMaxMax / x[j];\n    }\n    const onesDiffDiffMaxMaxMax = Math.max(...onesDiffDiffMaxMaxArr);\n    const onesDiffDiffMaxMaxMaxArr = new Array(len).fill(0);\n    for (let j = 0; j < len; j++) {\n      onesDiffDiffMaxMaxMaxArr[j] = onesDiffDiffMaxMaxMax / x[j];\n    }\n    const onesDiffDiffMaxMaxMaxMax = Math.max(...onesDiffDiffMaxMaxMaxArr);\n    const onesDiffDiffMaxMaxMaxArr = new Array(len).fill(0);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp37ftcreq.ts(84,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334373
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    const ones = count_ones(b);\n    const decA = count_ones(a);\n    const decB = count_ones(b);\n    if (decA === decB) {\n      return decA - decB;\n    }\n    return decA - decB || decB - decA;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdqqwfjq7.ts(13,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpdqqwfjq7.ts(14,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpdqqwfjq7.ts(15,18): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334240
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return ones;\n  }\n  const twos = arr.filter((x) => x === 2);\n  const len = twos.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return twos;\n  }\n  const threes = arr.filter((x) => x === 3);\n  const len = threes.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return threes;\n  }\n  const fours = arr.filter((x) => x === 4);\n  const len = fours.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return fours;\n  }\n  const fives = arr.filter((x) => x === 5);\n  const len = fives.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return fives;\n  }\n  const sixes = arr.filter((x) => x === 6);\n  const len = sixes.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return sixes;\n  }\n  const sevens = arr.filter((x) => x === 7);\n  const len = sevens.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return sevens;\n  }\n  const eights = arr.filter((x) => x === 8);\n  const len = eights.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return eights;\n  }\n  const nines = arr.filter((x) => x === 9);\n  const len = nines.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return nines;\n  }\n  const tens = arr.filter((x) => x === 10);\n  const len = tens.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return tens;\n  }\n  const hundreds = arr.filter((x) => x === 100);\n  const len = hundreds.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return hundreds;\n  }\n  const thousands = arr.filter((x) => x === 1000);\n  const len = thousands.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return thousands;\n  }\n  const millions = arr.filter((x) => x === 1000000);\n  const len = millions.length;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbrp_o72i.ts(131,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334373
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    if (a === 0) return 1;\n    if (b === 0) return -1;\n    const aBits = count_bits(a);\n    const bBits = count_bits(b);\n    if (aBits === bBits) return 0;\n    if (aBits > bBits) return -1;\n    return 1;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3rrrf4nd.ts(15,19): error TS2304: Cannot find name 'count_bits'.\n../../../../tmp/tmp3rrrf4nd.ts(16,19): error TS2304: Cannot find name 'count_bits'.\n",
      "timestamp": 1660334373
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpmr2r9mdt.js:25:12)\n    at Object.<anonymous> (/tmp/tmpmr2r9mdt.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334237
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr\n    .map((val) => parseInt(val.toString(2), 10))\n    .filter((val) => val > 0);\n  if (ones.length === 0) {\n    return arr;\n  }\n  const sorted = [];\n  for (let i = 0; i < len; i++) {\n    sorted.push(arr[i]);\n  }\n  sorted.sort((a, b) => {\n    const aOnes = parseInt(a.toString(2), 10);\n    const bOnes = parseInt(b.toString(2), 10);\n    return aOnes - bOnes;\n  });\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp0i0bynwp.js:36:12)\n    at Object.<anonymous> (/tmp/tmp0i0bynwp.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334374
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr\n    .map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0))\n    .sort((a, b) => a - b);\n  const decimals = arr\n    .map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0))\n    .sort((a, b) => a - b);\n  const decimalsLen = decimals.length;\n  const onesLen = ones.length;\n  const decimalsDiff = decimalsLen - onesLen;\n  const onesDiff = onesLen - decimalsLen;\n  const decimalsDiffIndex = decimalsDiff > 0 ? decimalsLen - 1 : 0;\n  const onesDiffIndex = onesDiff > 0 ? onesLen - 1 : 0;\n  const decimalsDiffVal = decimals[decimalsDiffIndex];\n  const onesDiffVal = ones[onesDiffIndex];\n  const decimalsDiffValIndex = decimalsDiff > 0 ? decimalsDiffIndex : decimalsLen - 1;\n  const onesDiffValIndex = onesDiff > 0 ? onesDiffIndex : onesLen - 1;\n  const decimalsDiffValIndex = decimalsDiff > 0 ? decimalsDiffIndex : decimalsLen - 1;\n  const onesDiffValIndex = onesDiff > 0 ? onesDiffIndex : onesLen - 1;\n  const decimalsDiffValVal = decimals[decimalsDiffValIndex];\n  const onesDiffValVal = ones[onesDiffValIndex];\n  const decimalsDiffValValIndex = decimalsDiff > 0 ? decimalsDiffValIndex : decimalsLen - 1;\n  const onesDiffValValIndex = onesDiff > 0 ? onesDiffValIndex : onesLen - 1;\n  const decimalsDiffValValIndex = decimalsDiff > 0 ? decimalsDiffValIndex : decimalsLen - 1;\n  const onesDiffValValIndex = onesDiff > 0 ? onesDiffValIndex : onesLen - 1;\n  const decimalsDiffValValVal = decimals[decimalsDiffValValIndex];\n  const onesDiffValValVal = ones[onesDiffValValIndex];\n  const decimalsDiffValValIndex = decimalsDiff > 0 ? decimalsDiffValValIndex : decimalsLen - 1;\n  const onesDiffValValIndex = onesDiff > 0 ? onesDiffValValIndex : onesLen - 1;\n  const decimalsDiffValValIndex = decimalsDiff > 0 ? decimalsDiffValValIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr4nrehj_.ts(45,1): error TS1005: ':' expected.\n../../../../tmp/tmpr4nrehj_.ts(61,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334374
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr\n    .map((x) => parseInt(x.toString(2), 10))\n    .filter((x) => x > 0);\n  if (ones.length === 0) {\n    return arr;\n  }\n  const sorted = ones\n    .map((x) => [x, x])\n    .sort((a, b) => a[1] - b[1]);\n  return sorted.map((x) => x[0]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  10,\n  11,\n  100,\n  101\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpylmembku.js:30:12)\n    at Object.<anonymous> (/tmp/tmpylmembku.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 10, 11, 100, 101 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334376
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === 0) return 1\n    if (b === 0) return -1\n    const aBits = binToInt(a)\n    const bBits = binToInt(b)\n    if (aBits === bBits) return 0\n    if (aBits > bBits) return 1\n    return -1\n  })\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe6p6j185.ts(15,19): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmpe6p6j185.ts(16,19): error TS2304: Cannot find name 'binToInt'.\n",
      "timestamp": 1660334376
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpd5u_mfui.js:17:12)\n    at Object.<anonymous> (/tmp/tmpd5u_mfui.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    if (a === 0) return 1;\n    if (b === 0) return -1;\n    const aBin = bin(a);\n    const bBin = bin(b);\n    if (aBin.length < bBin.length) return 1;\n    if (aBin.length > bBin.length) return -1;\n    return aBin.localeCompare(bBin);\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz1e88xy7.ts(15,18): error TS2552: Cannot find name 'bin'. Did you mean 'bBin'?\n../../../../tmp/tmpz1e88xy7.ts(16,18): error TS2552: Cannot find name 'bin'. Did you mean 'bBin'?\n",
      "timestamp": 1660334376
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp0bqv_thd.js:25:12)\n    at Object.<anonymous> (/tmp/tmp0bqv_thd.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334226
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const ones = arr\n    .map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0))\n    .filter((val) => val > 0);\n  const decimals = arr.map((val) => val.toString(10).split('').reduce((acc, val) => acc + +val, 0));\n  const maxDecimal = Math.max(...decimals);\n  const maxOnes = Math.max(...ones);\n  const maxDecimalIndex = decimals.indexOf(maxDecimal);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxDecimalOnesIndex = maxDecimalIndex + maxOnesIndex;\n  const onesArr = ones.map((val, index) => [val, index]);\n  const decimalsArr = decimals.map((val, index) => [val, index]);\n  const maxDecimalOnesArr = onesArr[maxDecimalOnesIndex];\n  const maxDecimalOnesIndex = onesArr.indexOf(maxDecimalOnesArr);\n  const maxOnesArr = onesArr.map((val, index) => [val, index]);\n  const maxOnesIndex = onesArr.indexOf(maxOnesArr);\n  const maxOnesDecimalsArr = decimalsArr[maxOnesIndex];\n  const maxOnesDecimalsIndex = decimalsArr.indexOf(maxOnesDecimalsArr);\n  const maxDecimalOnesArr = onesArr[maxDecimalOnesIndex];\n  const maxDecimalOnesIndex = onesArr.indexOf(maxDecimalOnesArr);\n  const maxOnesDecimalsArr = decimalsArr[maxOnesIndex];\n  const maxOnesDecimalsIndex = decimalsArr.indexOf(maxOnesDecimalsArr);\n  const maxDecimalOnesArr = onesArr[maxDecimalOnesIndex];\n  const maxDecimalOnesIndex = onesArr.indexOf(maxDecimalOnesArr);\n  const maxOnesDecimalsArr = decimalsArr[maxOnesIndex];\n  const maxOnesDecimalsIndex = decimalsArr.indexOf(maxOnesDecimalsArr);\n  const maxDecimalOnesArr = onesArr[maxDecimalOnesIndex];\n  const maxDecimalOnesIndex = onesArr.indexOf(maxDecimalOnesArr);\n  const maxOnesDecimalsArr = decimalsArr[maxOnesIndex];\n  const maxOnesDecimalsIndex = decimalsArr.indexOf(maxOnesDecimalsArr);\n  const \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcdey8gmf.ts(49,9): error TS1005: ',' expected.\n../../../../tmp/tmpcdey8gmf.ts(65,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334376
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr\n    .map((x) => parseInt(x.toString(2), 2))\n    .filter((x) => x > 0);\n  const decs = arr\n    .map((x) => parseInt(x.toString(10), 10))\n    .filter((x) => x > 0);\n  const len = ones.length;\n  if (len > decs.length) {\n    return decs.sort((a, b) => a - b);\n  }\n  return ones.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp413wvime.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmp413wvime.ts(22,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n",
      "timestamp": 1660334376
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n  const maxDec = Math.pow(10, maxOnes);\n  const decs = ones\n    .map((x) => Math.round(x * maxDec) / maxDec)\n    .sort();\n  const decLen = decs.length;\n  const decArr = new Array(decLen);\n  for (let i = 0; i < decLen; i++) {\n    decArr[i] = decs[i];\n  }\n  const decs = decArr.map((x) => Math.round(x * maxDec) / maxDec);\n  const decLen2 = decs.length;\n  const decArr2 = new Array(decLen2);\n  for (let i = 0; i < decLen2; i++) {\n    decArr2[i] = decs[i];\n  }\n  const decs = decArr2.map((x) => Math.round(x * maxDec) / maxDec);\n  const decLen3 = decs.length;\n  const decArr3 = new Array(decLen3);\n  for (let i = 0; i < decLen3; i++) {\n    decArr3[i] = decs[i];\n  }\n  const decs = decArr3.map((x) => Math.round(x * maxDec) / maxDec);\n  const decLen4 = decs.length;\n  const decArr4 = new Array(decLen4);\n  for (let i = 0; i < decLen4; i++) {\n    decArr4[i] = decs[i];\n  }\n  const decs = decArr4.map((x) => Math.round(x * maxDec) / maxDec);\n  const decLen5 = decs.length;\n  const decArr5 = new Array(decLen5);\n  for (let i = 0; i < decLen5; i++) {\n    decArr5[i] = decs[i];\n  }\n  const decs = decArr5.map((x) => Math.round(x * maxDec) / maxDec);\n  const decLen6 = decs.length;\n  const decArr6 = new Array(decLen6);\n  for (let i = 0; i < decLen6; i++) {\n    decArr6[i] = decs[i];\n  }\n  const decs = decArr6.map((x) => Math.round(x * maxDec) / maxDec);\n  const decLen7 = decs.length;\n  const decArr7 = new Array(decLen7);\n  for (let i = 0; i < decLen7; i++) {\n    decArr7[i] = decs[i];\n  }\n  const decs = decArr7.map((x) => Math.round(x * maxDec) / maxDec);\n  const decLen8 = decs.length;\n  const decArr8 = new Array(decLen8);\n  for (let i = 0; i < decLen8; i++) {\n    decArr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdz4r78di.ts(88,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => {\n    return acc + val;\n  }, 0);\n  const twos = arr.reduce((acc, val) => {\n    return acc + val;\n  }, 0);\n  const tens = arr.reduce((acc, val) => {\n    return acc + val;\n  }, 0);\n  const tensOnes = tens - ones;\n  const tensTwos = tens - twos;\n  const tensOnesTwos = tensOnes - twos;\n  const tensOnesTwosOnes = tensOnesTwos - ones;\n  const tensOnesTwosOnesTwos = tensOnesTwosOnes - twos;\n  const tensOnesTwosOnesTwosOnes = tensOnesTwosOnesTwos - ones;\n  const tensOnesTwosOnesTwosOnesTwos = tensOnesTwosOnesTwosOnes - twos;\n  const tensOnesTwosOnesTwosOnesTwosOnes = tensOnesTwosOnesTwosOnesTwos - ones;\n  const tensOnesTwosOnesTwosOnesTwosOnesTwos = tensOnesTwosOnesTwosOnesTwosOnes - twos;\n  const tensOnesTwosOnesTwosOnesTwosOnesTwosOnes = tensOnesTwosOnesTwosOnesTwosOnesTwos - ones;\n  const tensOnesTwosOnesTwosOnesTwosOnesTwosOnesTwos = tensOnesTwosOnesTwosOnesTwosOnesTwosOnes - twos;\n  const tensOnesTwosOnesTwosOnesTwosOnesTwosOnesTwosOnes = tensOnesTwosOnesTwosOnesTwosOnesTwosOnesTwos - ones;\n  const tensOnesTwosOnesTwosOnesTwosOnesTwosOnesTwosOnesTwos = tensOnesTwosOnesTwosOnesTwosOnesTwosOnesTwosOnes - twos;\n  const tensOnesTwosOnesTwosOnesTwosOnesTwosOnesTwosOnesTwosOnes = tensOne\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvnjrhldk.ts(58,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334376
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp0bqv_thd.js:25:12)\n    at Object.<anonymous> (/tmp/tmp0bqv_thd.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334226
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    const aOnes = count_ones(a);\n    const bOnes = count_ones(b);\n    if (aOnes > bOnes) {\n      return 1;\n    }\n    if (aOnes < bOnes) {\n      return -1;\n    }\n    return count_ones(a) - count_ones(b);\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkq_mi1lk.ts(11,21): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmpkq_mi1lk.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpkq_mi1lk.ts(16,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpkq_mi1lk.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpkq_mi1lk.ts(21,9): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmpkq_mi1lk.ts(23,19): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpkq_mi1lk.ts(24,19): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpkq_mi1lk.ts(31,12): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpkq_mi1lk.ts(31,28): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    if (a === 0) return 1\n    if (b === 0) return -1\n    return a > b ? 1 : -1\n  })\n  return arr\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpxe5g42sr.js:24:12)\n    at Object.<anonymous> (/tmp/tmpxe5g42sr.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a: number, b: number) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpnsmatv6m.js:26:12)\n    at Object.<anonymous> (/tmp/tmpnsmatv6m.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map(n => n & 1);\n  const maxOnes = Math.max(...ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnesIndex.toString(2);\n  const maxOnesBinLen = maxOnesBin.length;\n  const maxOnesBinLenLen = maxOnesBinLen + 1;\n  const maxOnesBinStr = Array(maxOnesBinLenLen).fill('0').join('');\n  const maxOnesBinStrLen = maxOnesBinStr.length;\n  const maxOnesBinStrArr = [...maxOnesBinStr];\n  const maxOnesBinStrArrLen = maxOnesBinStrArr.length;\n  const maxOnesBinStrArrReverse = maxOnesBinStrArr.reverse();\n  const maxOnesBinStrArrReverseLen = maxOnesBinStrArrReverse.length;\n  const maxOnesBinStrArrReverseStr = maxOnesBinStrArrReverse.join('');\n  const maxOnesBinStrArrReverseStrLen = maxOnesBinStrArrReverseStr.length;\n  const maxOnesBinStrArrReverseStrArr = maxOnesBinStrArrReverseStr.split('');\n  const maxOnesBinStrArrReverseStrArrLen = maxOnesBinStrArrReverseStrArr.length;\n  const maxOnesBinStrArrReverseStrArrReverse = maxOnesBinStrArrReverseStrArr.reverse();\n  const maxOnesBinStrArrReverseStrArrReverseLen = maxOnesBinStrArrReverseStrArrReverse.length;\n  const maxOnesBinStrArrReverseStrArrReverseStr = maxOnesBinStrArrReverseStrArrReverse.join('');\n  const maxOnesBinStrArrReverseStrArrReverseStrLen = maxOnesBinStrArrReverseStrArrReverseStr.length;\n  const maxOnesBinStrArrReverseStrArrReverseStrArr = maxOnesBinStrArrReverseStrArrReverseStr.split('');\n  const maxOnesBinStrArrReverseStrArrReverseStrArrLen = maxOnesBinStrArrReverseStrArrReverseStrArr.length;\n  const maxOnesBinStrArrReverseStrArrReverseStrArrReverse = maxOnesBinStrArrReverseStrArrReverseStrArr.reverse();\n  const maxOnesBinStrArrReverseStrArrReverseStrArrReverseLen = maxOnesBinStrArrReverseStrArrReverseStrArrReverse.length;\n  const maxOnesBinStrArr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo1bwr56x.ts(57,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334376
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpd5u_mfui.js:17:12)\n    at Object.<anonymous> (/tmp/tmpd5u_mfui.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((val) => val === 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n  const maxDec = Math.pow(10, maxOnes);\n  const decs = ones\n    .map((val) => val.toString(10))\n    .map((val) => parseInt(val, 10));\n  const decLen = decs.length;\n  const decsLen = Math.ceil(Math.log(decLen) / Math.LN2);\n  const decsMax = Math.pow(10, decsLen);\n  const decMax = Math.pow(10, decsMax);\n  const decs = decs.map((val) => val.toString(10));\n  const decs = decs.map((val) => parseInt(val, 10));\n  const decs = decs.sort((a, b) => a - b);\n  const decs = decs.map((val) => val.toFixed(decMax));\n  const decs = decs.map((val) => parseInt(val, 10));\n  const decs = decs.sort((a, b) => a - b);\n  const decs = decs.map((val) => val.toFixed(decMax));\n  const decs = decs.map((val) => parseInt(val, 10));\n  const decs = decs.sort((a, b) => a - b);\n  const decs = decs.map((val) => val.toFixed(decMax));\n  const decs = decs.map((val) => parseInt(val, 10));\n  const decs = decs.sort((a, b) => a - b);\n  const decs = decs.map((val) => val.toFixed(decMax));\n  const decs = decs.map((val) => parseInt(val, 10));\n  const decs = decs.sort((a, b) => a - b);\n  const decs = decs.map((val) => val.toFixed(decMax));\n  const decs = decs.map((val) => parseInt(val, 10));\n  const decs = decs.sort((a, b) => a - b);\n  const decs = decs.map((val) => val.toFixed(decMax));\n  const decs = decs.map((val) => parseInt(val, 10));\n  const decs = decs.sort((a, b) => a - b);\n  const decs = decs.map((val) => val.toFixed(decMax));\n  const decs = decs.map((val) => parseInt(val, 10));\n  const decs = decs.sort((a, b) => a - b);\n  const decs = decs.map((val) => val.toFixed(decMax));\n  const decs = decs.map((val) => parseInt(val, 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7pzc7se9.ts(73,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((val) => val.toString(2).length);\n  const maxOnes = Math.max(...ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnesIndex.toString(2);\n  const maxOnesBinLen = maxOnesBin.length;\n  const maxOnesBinLenLen = maxOnesBinLen + 1;\n  const maxOnesBinStr = maxOnesBin.substr(0, maxOnesBinLenLen);\n  const maxOnesBinStrLen = maxOnesBinStr.length;\n  const maxOnesBinStrArr = maxOnesBinStr.split('');\n  const maxOnesBinStrArrLen = maxOnesBinStrArr.length;\n  const maxOnesBinStrArrMax = maxOnesBinStrArrLen - 1;\n  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArr.indexOf(maxOnesBinStrArrMax);\n  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArrMaxIndex + 1;\n  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArrMaxIndex - 1;\n  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArrMaxIndex - 1;\n  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArrMaxIndex - 1;\n  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArrMaxIndex - 1;\n  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArrMaxIndex - 1;\n  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArrMaxIndex - 1;\n  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArrMaxIndex - 1;\n  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArrMaxIndex - 1;\n  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArrMaxIndex - 1;\n  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArrMaxIndex - 1;\n  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArrMaxIndex - 1;\n  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArrMaxIndex - 1;\n  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArrMaxIndex - 1;\n  const maxOnesBinStrArrMaxIndex = maxOnesBinStrArrMaxIndex - 1;\n  const maxOnes\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppo1b0jb7.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmphk_6sr3z.js:26:12)\n    at Object.<anonymous> (/tmp/tmphk_6sr3z.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((val) => val === 1);\n  const zeros = arr.filter((val) => val === 0);\n  const maxOnes = Math.max(...ones);\n  const maxZeros = Math.max(...zeros);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxZerosIndex = zeros.indexOf(maxZeros);\n  const maxOnesBin = ones[maxOnesIndex];\n  const maxZerosBin = zeros[maxZerosIndex];\n  const maxOnesDecimal = maxOnesBin * Math.pow(10, maxOnesIndex + 1);\n  const maxZerosDecimal = maxZerosBin * Math.pow(10, maxZerosIndex + 1);\n  const maxOnesDecimalString = maxOnesDecimal.toString();\n  const maxZerosDecimalString = maxZerosDecimal.toString();\n  const maxOnesDecimalString = maxOnesDecimalString.split('');\n  const maxZerosDecimalString = maxZerosDecimalString.split('');\n  const maxOnesDecimalStringLength = maxOnesDecimalString.length;\n  const maxZerosDecimalStringLength = maxZerosDecimalString.length;\n  const maxOnesDecimalStringArray = maxOnesDecimalString.map((val) => parseInt(val));\n  const maxZerosDecimalStringArray = maxZerosDecimalString.map((val) => parseInt(val));\n  const maxOnesDecimalStringArrayLength = maxOnesDecimalStringArray.length;\n  const maxZerosDecimalStringArrayLength = maxZerosDecimalStringArray.length;\n  const maxOnesDecimalStringArrayMaxIndex = maxOnesDecimalStringArray.indexOf(Math.max(...maxOnesDecimalStringArray));\n  const maxZerosDecimalStringArrayMaxIndex = maxZerosDecimalStringArray.indexOf(Math.max(...maxZerosDecimalStringArray));\n  const maxOnesDecimalStringArrayMaxIndexLength = maxOnesDecimalStringArrayMaxIndex + 1;\n  const maxZerosDecimalStringArrayMaxIndexLength = maxZerosDecimalStringArrayMaxIndex + 1;\n  const maxOnesDecimalStringArrayMaxIndexMaxIndex = maxOnesDecimalStringArrayMaxIndex + maxOnesDecimalStringArrayLength;\n  const maxZerosDecimalStringArrayMaxIndexMaxIndex = maxZerosDecimalStringArrayMaxIndex + maxZerosDecimalStringArrayLength;\n  const maxOnesDecimalStringArrayMaxIndexMaxIndexLength = maxOnesDecimalStringArrayMaxIndexMaxIndex + 1;\n  const \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgjsu4jkc.ts(44,9): error TS1005: ',' expected.\n../../../../tmp/tmpgjsu4jkc.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => {\n    return acc + val;\n  }, 0);\n  const twos = arr.reduce((acc, val) => {\n    return acc + val * 2;\n  }, 0);\n  const tens = arr.reduce((acc, val) => {\n    return acc + val * 10;\n  }, 0);\n  const tens10 = arr.reduce((acc, val) => {\n    return acc + val * 10;\n  }, 0);\n  const tens100 = arr.reduce((acc, val) => {\n    return acc + val * 100;\n  }, 0);\n  const tens1000 = arr.reduce((acc, val) => {\n    return acc + val * 1000;\n  }, 0);\n  const tens10000 = arr.reduce((acc, val) => {\n    return acc + val * 10000;\n  }, 0);\n  const tens100000 = arr.reduce((acc, val) => {\n    return acc + val * 100000;\n  }, 0);\n  const tens1000000 = arr.reduce((acc, val) => {\n    return acc + val * 1000000;\n  }, 0);\n  const tens10000000 = arr.reduce((acc, val) => {\n    return acc + val * 10000000;\n  }, 0);\n  const tens100000000 = arr.reduce((acc, val) => {\n    return acc + val * 1000000000;\n  }, 0);\n  const tens1000000000 = arr.reduce((acc, val) => {\n    return acc + val * 10000000000;\n  }, 0);\n  const tens10000000000 = arr.reduce((acc, val) => {\n    return acc + val * 100000000000;\n  }, 0);\n  const tens100000000000 = arr.reduce((acc, val) => {\n    return acc + val * 1000000000000;\n  }, 0);\n  const tens1000000000000 = arr.reduce((acc, val) => {\n    return acc + val * 10000000000000;\n  }, 0);\n  const tens10000000000000 = arr.reduce((acc, val) => {\n    return acc + val * 100000000000000;\n  }, 0);\n  const tens100000000000000 = arr.reduce((acc, val) => {\n    return acc + val * 1000000000000000;\n  }, 0);\n  const tens1000000000000000 = arr.reduce((acc, val) => {\n    return acc + val * 100000000000000000;\n  }, 0);\n  const tens10000000000000000 = arr.reduce((acc, val) => {\n    return acc + val * 100000000000000000;\n  }, 0);\n  const tens100000000000000000 = \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp50gvxtko.ts(74,9): error TS1005: ',' expected.\n../../../../tmp/tmp50gvxtko.ts(90,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpk9vadqqj.js:18:12)\n    at Object.<anonymous> (/tmp/tmpk9vadqqj.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === 0) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === 0) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n      return 0;\n    }\n    if (a === -1 && b === 1) {\n      return 1;\n    }\n    if (b === -1 && a === 1) {\n      return -1;\n    }\n    if (b === 1 && a === -1) {\n      return 1;\n    }\n    if (b === 1 && a === 0) {\n      return 0;\n    }\n    if (b === -1 && a === 0) {\n      return -1;\n    }\n    if (b === -1 && a === -1) {\n      return 0;\n    }\n    if (b === 1 && a === 1) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === 1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === -1 && b === -1) {\n      return 1;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n      return 0;\n    }\n    if (a === 1 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === 1) {\n      return 0;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b === -1) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n      return 0;\n    }\n    if (a === 1 && b === 1) {\n      return 0;\n    }\n    if (a === 0 && b === 1) {\n      return 1;\n    }\n    if (a === -1 && b === 1) {\n      return -1;\n    }\n    if (a === -1 && b === -1) {\n      return 0;\n    }\n    if (a === 1 && b === -1) {\n      return -1;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5vcsaog8.ts(143,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => {\n    return acc + val;\n  }, 0);\n  const maxOnes = Math.pow(2, len) - ones;\n  const maxDec = Math.pow(2, len) - ones * Math.pow(2, len - 1);\n  const maxDec2 = Math.pow(2, len) - ones * Math.pow(2, len - 1) * Math.pow(2, len - 2);\n  const maxDec3 = Math.pow(2, len) - ones * Math.pow(2, len - 1) * Math.pow(2, len - 2) * Math.pow(2, len - 3);\n  const maxDec4 = Math.pow(2, len) - ones * Math.pow(2, len - 1) * Math.pow(2, len - 2) * Math.pow(2, len - 3) * Math.pow(2, len - 4);\n  const maxDec5 = Math.pow(2, len) - ones * Math.pow(2, len - 1) * Math.pow(2, len - 2) * Math.pow(2, len - 3) * Math.pow(2, len - 4) * Math.pow(2, len - 5);\n  const maxDec6 = Math.pow(2, len) - ones * Math.pow(2, len - 1) * Math.pow(2, len - 2) * Math.pow(2, len - 3) * Math.pow(2, len - 4) * Math.pow(2, len - 5) * Math.pow(2, len - 6);\n  const maxDec7 = Math.pow(2, len) - ones * Math.pow(2, len - 1) * Math.pow(2, len - 2) * Math.pow(2, len - 3) * Math.pow(2, len - 4) * Math.pow(2, len - 5) * Math.pow(2, len - 6) * Math.pow(2, len - 7);\n  const maxDec8 = Math.pow(2, len) - ones * Math.pow(2, len - 1) * Math.pow(2, len - 2) * Math.pow(2, len - 3) * Math.pow(2, len - 4) * Math.pow(2, len - 5) * Math.pow(2, len - 6) * Math.pow(2, len - 7) * Math.pow(2, len - 8);\n  const maxDec9 = Math.pow(2, len) - ones * Math.pow(2, len - 1) * Math.pow(2, len - 2) * Math.pow(2, len - 3) * Math.pow(2, len - 4) * Math.pow(2, len - 5) * Math.pow(2, len - 6) * Math.pow(2, len - 7) * Math.pow(2, len - 8) * Math.pow(2, len - 9);\n  const maxDec10 = Math.pow(2, len) - ones * Math.pow(2, len - 1) * Math.pow(2, len - 2) * Math.pow(2, len - 3) * Math.pow(2, len - 4) * Math.pow(2, len - 5) * Math.pow(2, len - 6) * Math.pow(2, len - 7) * Math.pow(2, len - 8) * Math.pow(2, len - 9) * Math.pow(2, len - 10);\n  const maxDec11 = Math.pow(2, len) - ones * Math.pow(2, len - 1) * Math.pow(2, len - 2) * Math.pow(2, len - 3) * Math.pow(2, len - \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpodgb__pb.ts(34,9): error TS1005: ',' expected.\n../../../../tmp/tmpodgb__pb.ts(50,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpk9vadqqj.js:18:12)\n    at Object.<anonymous> (/tmp/tmpk9vadqqj.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  const maxOnes = Math.max(...ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnes.toString(2).split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndex = maxOnesBin.toString(2).split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndex = maxOnesBinIndex.split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndex = maxOnesBinIndex.toString(2).split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndex = maxOnesBinIndex.toString(2).split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndex = maxOnesBinIndex.toString(2).split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndex = maxOnesBinIndex.toString(2).split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndex = maxOnesBinIndex.toString(2).split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndex = maxOnesBinIndex.toString(2).split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndex = maxOnesBinIndex.toString(2).split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndex = maxOnesBinIndex.toString(2).split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndex = maxOnesBinIndex.toString(2).split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndex = maxOnesBinIndex.toString(2).split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndex = maxOnesBinIndex.toString(2).split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndex = maxOnesBinIndex.toString(2).split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndex = maxOnesBinIndex.toString(2).split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndex = maxOne\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0q4f5_hc.ts(52,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const aNum = parseInt(a.toString(2), 2);\n    const bNum = parseInt(b.toString(2), 2);\n    return aNum - bNum;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmppw144nmp.js:21:12)\n    at Object.<anonymous> (/tmp/tmppw144nmp.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr\n    .map((v) => v.toString(2).replace(/1/g, '0'))\n    .map((v) => parseInt(v, 2));\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...ones.map((v) => v.length));\n  const maxLenLen = Math.max(...ones.map((v) => v.length + v));\n  const maxLenLenLen = Math.max(...ones.map((v) => v.length + v + v));\n  const maxLenLenLen = Math.max(...ones.map((v) => v.length + v + v + v));\n  const maxLenLenLen = Math.max(...ones.map((v) => v.length + v + v + v + v));\n  const maxLenLenLen = Math.max(...ones.map((v) => v.length + v + v + v + v + v));\n  const maxLenLenLen = Math.max(...ones.map((v) => v.length + v + v + v + v + v + v));\n  const maxLenLenLen = Math.max(...ones.map((v) => v.length + v + v + v + v + v + v + v));\n  const maxLenLenLen = Math.max(...ones.map((v) => v.length + v + v + v + v + v + v + v + v));\n  const maxLenLenLen = Math.max(...ones.map((v) => v.length + v + v + v + v + v + v + v + v + v));\n  const maxLenLenLen = Math.max(...ones.map((v) => v.length + v + v + v + v + v + v + v + v + v + v));\n  const maxLenLenLen = Math.max(...ones.map((v) => v.length + v + v + v + v + v + v + v + v + v + v + v));\n  const maxLenLenLen = Math.max(...ones.map((v) => v.length + v + v + v + v + v + v + v + v + v + v + v + v));\n  const maxLenLenLen = Math.max(...ones.map((v) => v.length + v + v + v + v + v + v + v + v + v + v + v + v + v));\n  const maxLenLenLen = Math.max(...ones.map((v) => v.length + v + v + v + v + v + v + v + v + v + v + v + v\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdxmsn2n_.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmpdxmsn2n_.ts(35,9): error TS1005: ',' expected.\n../../../../tmp/tmpdxmsn2n_.ts(51,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((x) => x > 0);\n  const maxOnes = Math.max.apply(null, ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnesIndex.toString(2);\n  const maxOnesBinLen = maxOnesBin.length;\n  const maxOnesBinLenLen = maxOnesBinLen + 1;\n  const maxOnesBinLenStr = Array(maxOnesBinLenLen).fill('0').join('');\n  const maxOnesBinStr = maxOnesBinLen + maxOnesBin;\n  const maxOnesBinStrLen = maxOnesBinStr.length;\n  const maxOnesBinStrLenLen = maxOnesBinStrLen + 1;\n  const maxOnesBinStrStr = Array(maxOnesBinStrLenLen).fill('0').join('');\n  const maxOnesBinStrArr = [maxOnesBinStr, maxOnesBinStrStr];\n  const maxOnesBinStrArrLen = maxOnesBinStrArr.length;\n  const maxOnesBinStrArrLenLen = maxOnesBinStrArrLen + 1;\n  const maxOnesBinStrArrStr = Array(maxOnesBinStrArrLenLen).fill('0').join('');\n  const maxOnesBinStrArrStr = [maxOnesBinStrArr, maxOnesBinStrArrStr];\n  const maxOnesBinStrArrStrLen = maxOnesBinStrArrStr.length;\n  const maxOnesBinStrArrStrLenLen = maxOnesBinStrArrStrLen + 1;\n  const maxOnesBinStrArrStrStr = Array(maxOnesBinStrArrStrLenLen).fill('0').join('');\n  const maxOnesBinStrArrStrStr = [maxOnesBinStrArrStr, maxOnesBinStrArrStrStr];\n  const maxOnesBinStrArrStrStrLen = maxOnesBinStrArrStrStr.length;\n  const maxOnesBinStrArrStrStrLenLen = maxOnesBinStrArrStrStrLen + 1;\n  const maxOnesBinStrArrStrStrStr = Array(maxOnesBinStrArrStrStrLenLen).fill('0').join('');\n  const maxOnesBinStrArrStrStrStr = [maxOnesBinStrArrStrStr, maxOnesBinStrArrStrStrStr];\n  const maxOnesBinStrArrStrStrStrLen = maxOnesBinStr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt48fo_rh.ts(57,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const aNum = count_ones(a);\n    const bNum = count_ones(b);\n    if (aNum === bNum) {\n      return a.localeCompare(b);\n    }\n    return aNum - bNum;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpup4yo1rv.ts(13,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpup4yo1rv.ts(14,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpup4yo1rv.ts(16,16): error TS2339: Property 'localeCompare' does not exist on type 'number'.\n",
      "timestamp": 1660334362
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((v) => v.toString(2).split('').reduce((acc, v) => acc + +v, 0));\n  const maxOnes = Math.max(...ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnes.toString(2).split('').reduce((acc, v) => acc + +v, 0);\n  const maxOnesBinIndex = ones.indexOf(maxOnesBin);\n  const maxOnesBinIndex = Math.max(maxOnesIndex, maxOnesBinIndex);\n  const maxOnesBin = maxOnesBin.toString(2);\n  const maxOnesBinIndex = ones.indexOf(maxOnesBin);\n  const maxOnesBinIndex = Math.max(maxOnesIndex, maxOnesBinIndex);\n  const maxOnesBin = maxOnesBin.toString(2);\n  const maxOnesBinIndex = ones.indexOf(maxOnesBin);\n  const maxOnesBinIndex = Math.max(maxOnesIndex, maxOnesBinIndex);\n  const maxOnesBin = maxOnesBin.toString(2);\n  const maxOnesBinIndex = ones.indexOf(maxOnesBin);\n  const maxOnesBinIndex = Math.max(maxOnesIndex, maxOnesBinIndex);\n  const maxOnesBin = maxOnesBin.toString(2);\n  const maxOnesBinIndex = ones.indexOf(maxOnesBin);\n  const maxOnesBinIndex = Math.max(maxOnesIndex, maxOnesBinIndex);\n  const maxOnesBin = maxOnesBin.toString(2);\n  const maxOnesBinIndex = ones.indexOf(maxOnesBin);\n  const maxOnesBinIndex = Math.max(maxOnesIndex, maxOnesBinIndex);\n  const maxOnesBin = maxOnesBin.toString(2);\n  const maxOnesBinIndex = ones.indexOf(maxOnesBin);\n  const maxOnesBinIndex = Math.max(maxOnesIndex, maxOnesBinIndex);\n  const maxOnesBin = maxOnesBin.toString(2);\n  const maxOnesBinIndex = ones.indexOf(maxOnesBin);\n  const maxOnesBinIndex = Math.max(maxOnesIndex, maxOnesBinIndex);\n  const maxOnesBin = maxOnesBin.toString(2);\n  const maxOnesBinIndex = ones.indexOf(maxOnesBin);\n  const maxOnesBinIndex = Math.max(maxOnesIndex, maxOnesBinIndex);\n  const maxOnesBin = maxOnesBin.toString(2);\n  const maxOnesBinIndex = ones.indexOf(maxOne\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgv_nmo5s.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpgv_nmo5s.ts(48,9): error TS1005: ',' expected.\n../../../../tmp/tmpgv_nmo5s.ts(64,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    const aNum = count_ones(a);\n    const bNum = count_ones(b);\n    return aNum - bNum;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3tpu5n4w.ts(13,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp3tpu5n4w.ts(14,18): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const maxOnes = Math.max(...ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const sortedArray = arr.slice();\n  sortedArray.sort((a, b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n    }\n    if (a === 0 && b === maxOnes) {\n      return -1;\n    }\n    if (b === 0 && a === maxOnes) {\n      return 1;\n    }\n    if (a === maxOnes) {\n      return -1;\n    }\n    if (b === maxOnes) {\n      return 1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return maxOnesIndex - count_ones(sortedArray);\n  });\n  return sortedArray;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp81amie8m.ts(16,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp81amie8m.ts(42,27): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    if (a === 0) return 1\n    if (b === 0) return -1\n    return a > b ? 1 : -1\n  })\n  return arr\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpxe5g42sr.js:24:12)\n    at Object.<anonymous> (/tmp/tmpxe5g42sr.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(len, maxOnes);\n  const newArr = new Array(maxLen);\n  for (let i = 0; i < maxLen; i++) {\n    newArr[i] = arr[i];\n  }\n  for (let i = 0; i < len; i++) {\n    const index = ones[i] - 1;\n    newArr[index] = arr[i];\n  }\n  return newArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgrhotg0q.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpgrhotg0q.ts(16,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpgrhotg0q.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n",
      "timestamp": 1660334379
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpmr2r9mdt.js:25:12)\n    at Object.<anonymous> (/tmp/tmpmr2r9mdt.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334237
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpmr2r9mdt.js:25:12)\n    at Object.<anonymous> (/tmp/tmpmr2r9mdt.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334237
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const tens = Math.floor(Math.log10(ones));\n  const tensLen = Math.floor(Math.log10(len));\n  const tensDigit = Math.pow(10, tensLen);\n  const onesDigit = Math.pow(10, tensLen - 1);\n  const tensDigits = Math.floor(ones / tensDigit);\n  const onesDigits = Math.floor(ones / onesDigit);\n  const tensDigitPos = Math.floor(ones / tensDigit * tensLen);\n  const onesDigitPos = Math.floor(ones / onesDigit * onesLen);\n  const tensDigitPos1 = Math.floor(ones / tensDigit * tensLen);\n  const onesDigitPos1 = Math.floor(ones / onesDigit * onesLen);\n  const tensDigitPos2 = Math.floor(ones / tensDigit * tensLen);\n  const onesDigitPos2 = Math.floor(ones / onesDigit * onesLen);\n  const tensDigitPos3 = Math.floor(ones / tensDigit * tensLen);\n  const onesDigitPos3 = Math.floor(ones / onesDigit * onesLen);\n  const tensDigitPos4 = Math.floor(ones / tensDigit * tensLen);\n  const onesDigitPos4 = Math.floor(ones / onesDigit * onesLen);\n  const tensDigitPos5 = Math.floor(ones / tensDigit * tensLen);\n  const onesDigitPos5 = Math.floor(ones / onesDigit * onesLen);\n  const tensDigitPos6 = Math.floor(ones / tensDigit * tensLen);\n  const onesDigitPos6 = Math.floor(ones / onesDigit * onesLen);\n  const tensDigitPos7 = Math.floor(ones / tensDigit * tensLen);\n  const onesDigitPos7 = Math.floor(ones / onesDigit * onesLen);\n  const tensDigitPos8 = Math.floor(ones / tensDigit * tensLen);\n  const onesDigitPos8 = Math.floor(ones / onesDigit * onesLen);\n  const tensDigitPos9 = Math.floor(ones / tensDigit * tensLen);\n  const onesDigitPos9 = Math.floor(ones / onesDigit * onesLen);\n  const tensDigitPos10 = Math.floor(ones / tensDigit * tensLen);\n  const onesDigitPos\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4bgw3_1z.ts(61,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334379
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const ones = count_ones(a);\n    const twos = count_ones(b);\n    if (ones > twos) {\n      return 1;\n    }\n    if (ones < twos) {\n      return -1;\n    }\n    return count_ones(a) - count_ones(b);\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2n1o989j.ts(13,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp2n1o989j.ts(14,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp2n1o989j.ts(21,12): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmp2n1o989j.ts(21,28): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334379
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpd5u_mfui.js:17:12)\n    at Object.<anonymous> (/tmp/tmpd5u_mfui.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    const aBits = binToInt(a);\n    const bBits = binToInt(b);\n    if (aBits === bBits) {\n      return 0;\n    }\n    return aBits - bBits;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsvw99id_.ts(13,19): error TS2304: Cannot find name 'binToInt'.\n../../../../tmp/tmpsvw99id_.ts(14,19): error TS2304: Cannot find name 'binToInt'.\n",
      "timestamp": 1660334379
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((val) => val.toString(2).split('').reduce((prev, curr) => prev + curr, 0));\n  const dec = ones\n    .map((val) => val * 10)\n    .map((val) => val % 10)\n    .map((val) => val / 10)\n    .map((val) => val * 10)\n    .map((val) => val % 10)\n    .map((val) => val / 10)\n    .map((val) => val * 10)\n    .map((val) => val % 10)\n    .map((val) => val / 10)\n    .map((val) => val * 10)\n    .map((val) => val % 10)\n    .map((val) => val / 10)\n    .map((val) => val * 10)\n    .map((val) => val % 10)\n    .map((val) => val / 10)\n    .map((val) => val * 10)\n    .map((val) => val % 10)\n    .map((val) => val / 10)\n    .map((val) => val * 10)\n    .map((val) => val % 10)\n    .map((val) => val / 10)\n    .map((val) => val * 10)\n    .map((val) => val % 10)\n    .map((val) => val / 10)\n    .map((val) => val * 10)\n    .map((val) => val % 10)\n    .map((val) => val / 10)\n    .map((val) => val * 10)\n    .map((val) => val % 10)\n    .map((val) => val / 10)\n    .map((val) => val * 10)\n    .map((val) => val % 10)\n    .map((val) => val / 10)\n    .map((val) => val * 10)\n    .map((val) => val % 10)\n    .map((val) => val / 10)\n    .map((val) => val * 10)\n    .map((val) => val % 10)\n    .map((val) => val / 10)\n    .map((val) => val * 10)\n    .map((val) => val % 10)\n    .map((val) => val / 10)\n    .map((val) => val * 10)\n    .map((val) => val % 10)\n    .map((val) => val / 10)\n    .map((val) => val * 10)\n    .map((val) => val % 10)\n    .map((val) => val / 10)\n    .map((val) => val * 10)\n    .map((val) => val % 10)\n    .map((val) => val / 10)\n    .map((val) => \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxx_dl3ot.ts(70,9): error TS1005: ',' expected.\n../../../../tmp/tmpxx_dl3ot.ts(86,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334380
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  for (let i = 0; i < len; i++) {\n    const one = ones[i];\n    for (let j = i + 1; j < len; j++) {\n      if (arr[j] < one) {\n        arr.splice(j, 0, arr[j]);\n        break;\n      }\n    }\n  }\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpja_nrdzr.ts(11,21): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmpja_nrdzr.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpja_nrdzr.ts(16,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpja_nrdzr.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpja_nrdzr.ts(21,9): error TS2300: Duplicate identifier 'arr'.\n",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const mid = Math.floor(len / 2);\n  const left = arr.slice(0, mid);\n  const right = arr.slice(mid);\n  return sort_array(left).concat(sort_array(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmprd8rh8f8.js:27:12)\n    at Object.<anonymous> (/tmp/tmprd8rh8f8.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2, 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334363
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((v) => v === 1);\n  if (ones.length === 0) {\n    return arr;\n  }\n  const sorted = ones\n    .map((v) => v.toString(2).padStart(len, '0'))\n    .sort();\n  return sorted\n    .map((v) => parseInt(v, 2))\n    .map((v) => v < 0 ? -v : v)\n    .concat(arr.filter((v) => v !== 1))\n    .sort();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpq70cbew1.js:32:12)\n    at Object.<anonymous> (/tmp/tmpq70cbew1.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334380
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = count_ones(arr);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  for (let i = 0; i < len; i++) {\n    arr[i] = arr[i] / ones[i];\n  }\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa5z3oml9.ts(11,21): error TS2300: Duplicate identifier 'arr'.\n../../../../tmp/tmpa5z3oml9.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpa5z3oml9.ts(16,16): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpa5z3oml9.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpa5z3oml9.ts(21,9): error TS2300: Duplicate identifier 'arr'.\n",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmphv9teo0p.js:17:12)\n    at Object.<anonymous> (/tmp/tmphv9teo0p.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334226
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const aNum = count_ones(a);\n    const bNum = count_ones(b);\n    if (aNum === bNum) {\n      return a.localeCompare(b);\n    }\n    return aNum - bNum;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpup4yo1rv.ts(13,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpup4yo1rv.ts(14,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpup4yo1rv.ts(16,16): error TS2339: Property 'localeCompare' does not exist on type 'number'.\n",
      "timestamp": 1660334362
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  let len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  let ones = arr\n    .map((val) => val.toString(2).length)\n    .sort((a, b) => a - b);\n  let decimals = arr\n    .map((val) => val.toString(2).split('').length)\n    .sort((a, b) => a - b);\n  let maxOnes = Math.max(...ones);\n  let maxDecimal = Math.max(...decimals);\n  let maxDecimalIndex = decimals.indexOf(maxDecimal);\n  let maxDecimalOnes = ones[maxDecimalIndex];\n  let maxDecimalIndex = ones\n    .map((val) => val.toString(2).split('').length)\n    .indexOf(maxDecimalOnes);\n  let maxDecimalOnesIndex = ones\n    .map((val) => val.toString(2).split('').length)\n    .indexOf(maxDecimalOnes);\n  let maxDecimalOnesIndex = ones\n    .map((val) => val.toString(2).split('').length)\n    .indexOf(maxDecimalOnes);\n  let maxDecimalOnesIndex = ones\n    .map((val) => val.toString(2).split('').length)\n    .indexOf(maxDecimalOnes);\n  let maxDecimalOnesIndex = ones\n    .map((val) => val.toString(2).split('').length)\n    .indexOf(maxDecimalOnes);\n  let maxDecimalOnesIndex = ones\n    .map((val) => val.toString(2).split('').length)\n    .indexOf(maxDecimalOnes);\n  let maxDecimalOnesIndex = ones\n    .map((val) => val.toString(2).split('').length)\n    .indexOf(maxDecimalOnes);\n  let maxDecimalOnesIndex = ones\n    .map((val) => val.toString(2).split('').length)\n    .indexOf(maxDecimalOnes);\n  let maxDecimalOnesIndex = ones\n    .map((val) => val.toString(2).split('').length)\n    .indexOf(maxDecimalOnes);\n  let maxDecimalOnesIndex = ones\n    .map((val) => val.toString(2).split('').length)\n    .indexOf(maxDecimalOnes);\n  let maxDecimalOnesIndex = ones\n    .map((val) => val.toString(2).split('').length)\n    .indexOf(maxDecimalOnes);\n  let maxDecimalOnesIndex = ones\n    .map((val) => val.toString(2).split('').length)\n    .indexOf(maxDecimalOnes);\n  let maxDecimalOnesIndex = ones\n    .map((val) => val.toString(2).split('').length)\n    .indexOf(maxDecimalOnes);\n  let maxDecimalOnesIndex = ones\n    .map((val) => val.toString(2).split('').length)\n    .indexOf(maxDecimalOnes);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwq3z1zrc.ts(85,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp0bqv_thd.js:25:12)\n    at Object.<anonymous> (/tmp/tmp0bqv_thd.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334226
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr\n    .map((val) => val.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n    .sort((a, b) => a - b);\n  const decimals = arr\n    .map((val) => val.toString(2).split('').reduce((acc, cur) => acc + cur, 0))\n    .sort((a, b) => a - b);\n  const decimalsLen = decimals.length;\n  const decimalsLen2 = decimalsLen / 2;\n  const decimalsLen3 = decimalsLen / 3;\n  const decimalsLen4 = decimalsLen / 4;\n  const decimalsLen5 = decimalsLen / 5;\n  const decimalsLen6 = decimalsLen / 6;\n  const decimalsLen7 = decimalsLen / 7;\n  const decimalsLen8 = decimalsLen / 8;\n  const decimalsLen9 = decimalsLen / 9;\n  const decimalsLen10 = decimalsLen / 10;\n  const decimalsLen11 = decimalsLen / 11;\n  const decimalsLen12 = decimalsLen / 12;\n  const decimalsLen13 = decimalsLen / 13;\n  const decimalsLen14 = decimalsLen / 14;\n  const decimalsLen15 = decimalsLen / 15;\n  const decimalsLen16 = decimalsLen / 16;\n  const decimalsLen17 = decimalsLen / 17;\n  const decimalsLen18 = decimalsLen / 18;\n  const decimalsLen19 = decimalsLen / 19;\n  const decimalsLen20 = decimalsLen / 20;\n  const decimalsLen21 = decimalsLen / 21;\n  const decimalsLen22 = decimalsLen / 22;\n  const decimalsLen23 = decimalsLen / 23;\n  const decimalsLen24 = decimalsLen / 24;\n  const decimalsLen25 = decimalsLen / 25;\n  const decimalsLen26 = decimalsLen / 26;\n  const decimalsLen27 = decimalsLen / 27;\n  const decimalsLen28 = decimalsLen / 28;\n  const decimalsLen29 = decimalsLen / 29;\n  const decimalsLen30 = decimalsLen / 30;\n  const decimalsLen31 = decimalsLen / 31;\n  const decimalsLen32 = decimalsLen / 32;\n  const decimalsLen33 = decimalsLen / 33;\n  const decimalsLen34 = decimalsLen / 34;\n  const decimalsLen35 = decimalsLen / 35;\n  const decimal\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc1wekvwz.ts(74,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    if (a === 0) return 1;\n    if (b === 0) return -1;\n    const aStr = a.toString(2);\n    const bStr = b.toString(2);\n    const aLen = aStr.length;\n    const bLen = bStr.length;\n    if (aLen === bLen) {\n      return aLen - bLen;\n    }\n    return aLen < bLen ? -1 : 1;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  5,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp8sowtawh.js:31:12)\n    at Object.<anonymous> (/tmp/tmp8sowtawh.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 5, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334380
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr\n    .map((x) => parseInt(x.toString(2), 2))\n    .filter((x) => x > 0);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return ones;\n  }\n  const max = Math.max(...ones);\n  const min = Math.min(...ones);\n  const diff = max - min;\n  const arr2 = arr.slice();\n  arr2.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  let i = 0;\n  while (i < len) {\n    const cur = arr2[i];\n    let j = 0;\n    while (j < len) {\n      if (arr2[j] === cur) {\n        arr2[j] = arr2[j + 1];\n        arr2.splice(j + 1, 1);\n        j--;\n      }\n      j++;\n    }\n    i++;\n  }\n  return arr2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmwwhxncq.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpmwwhxncq.ts(19,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n",
      "timestamp": 1660334380
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((val) => val === 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.ceil(Math.log(len) / Math.LN2);\n  const maxDec = Math.pow(10, maxOnes);\n  const decs = ones\n    .map((val) => val.toString(10))\n    .map((val) => parseInt(val, 10))\n    .map((val) => Math.trunc(val * maxDec) / maxDec);\n  const decLen = decs.length;\n  const decsLen = Math.min(decLen, len);\n  const decsArr = new Array(decsLen).fill(0);\n  for (let i = 0; i < decLen; i++) {\n    decsArr[i] = decs[i];\n  }\n  const decsLenArr = new Array(len).fill(0);\n  for (let i = 0; i < len; i++) {\n    decsLenArr[decs[i]] = 1;\n  }\n  const decsLenArr = decsLenArr.map((val) => val.toString(10));\n  const decsLenArr = decsLenArr.map((val) => parseInt(val, 10));\n  const decsLenArr = decsLenArr.map((val) => Math.trunc(val * maxDec) / maxDec);\n  const decsLenArr = decsLenArr.map((val) => val.toString(10));\n  const decsLenArr = decsLenArr.map((val) => parseInt(val, 10));\n  const decsLenArr = decsLenArr.map((val) => Math.trunc(val * maxDec) / maxDec);\n  const decsLenArr = decsLenArr.map((val) => val.toString(10));\n  const decsLenArr = decsLenArr.map((val) => parseInt(val, 10));\n  const decsLenArr = decsLenArr.map((val) => Math.trunc(val * maxDec) / maxDec);\n  const decsLenArr = decsLenArr.map((val) => val.toString(10));\n  const decsLenArr = decsLenArr.map((val) => parseInt(val, 10));\n  const decsLenArr = decsLenArr.map((val) => Math.trunc(val * maxDec) / maxDec);\n  const decsLenArr = decsLenArr.map((val) => val.toString(10));\n  const decsLenArr = decsLenArr.map((val) => parseInt(val, 10));\n  const decsLenArr = decsLenArr.map\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpeb0rhcz3.ts(68,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334380
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  ones = ones.sort(function (a, b) {\n    return a - b;\n  });\n  let max = 0;\n  for (let i = 0; i < len; i++) {\n    if (ones[i] > max) {\n      max = ones[i];\n    }\n  }\n  ones = arr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  ones = ones.sort(function (a, b) {\n    return a - b;\n  });\n  for (let i = 0; i < len; i++) {\n    if (ones[i] > max) {\n      max = ones[i];\n    }\n  }\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz5gweme9.ts(17,3): error TS2588: Cannot assign to 'ones' because it is a constant.\n../../../../tmp/tmpz5gweme9.ts(26,3): error TS2588: Cannot assign to 'ones' because it is a constant.\n../../../../tmp/tmpz5gweme9.ts(27,3): error TS2588: Cannot assign to 'ones' because it is a constant.\n",
      "timestamp": 1660334380
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes = Math.pow(2, Math.ceil(Math.log(ones) / Math.LN2));\n  const maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes) / Math.LN10));\n  const decs = maxDec / maxOnes;\n  const decScale = Math.pow(10, decs);\n  const decScaleStr = decScale.toFixed(decs.length - 1);\n  const decScaleArr = decScaleStr.split('.');\n  const decScaleArrLen = decScaleArr.length;\n  const decScaleArrMax = decScaleArr[decScaleArrLen - 1];\n  const decScaleArrMin = decScaleArr[0];\n  const decScaleArrMaxInt = parseInt(decScaleArrMax, 10);\n  const decScaleArrMinInt = parseInt(decScaleArrMin, 10);\n  const decScaleArrMaxFloat = parseFloat(decScaleArrMax);\n  const decScaleArrMinFloat = parseFloat(decScaleArrMin);\n  const decScaleArrMaxInt = Math.max(decScaleArrMaxInt, decScaleArrMinInt);\n  const decScaleArrMinInt = Math.min(decScaleArrMaxInt, decScaleArrMinInt);\n  const decScaleArrMaxFloat = Math.max(decScaleArrMaxFloat, decScaleArrMinFloat);\n  const decScaleArrMinFloat = Math.min(decScaleArrMaxFloat, decScaleArrMinFloat);\n  const decScaleArrMaxStr = decScaleArrMaxInt.toString();\n  const decScaleArrMinStr = decScaleArrMinInt.toString();\n  const decScaleArrMaxStrArr = decScaleArrMaxStr.split('');\n  const decScaleArrMinStrArr = decScaleArrMinStr.split('');\n  const decScaleArrMaxStrArrLen = decScaleArrMaxStrArr.length;\n  const decScaleArrMinStrArrLen = decScaleArrMinStrArr.length;\n  const decScaleArrMaxStrArrMax = decScaleArrMaxStrArr[decScaleArrMaxStrArrLen - 1];\n  const decScaleArrMinStrArrMax = decScaleArrMaxStrArr[0];\n  const decScaleArrMaxStrArrMin = decScaleArrMaxStrArr[decScaleArrMaxStrArrLen - 2];\n  const decScaleArrMinStrArrMin = decScaleArrMaxStrArr[decScaleArrMaxStrArrLen - 1];\n  const decScaleArrMaxStrArrMaxInt = parseInt(decScaleArrMaxStrArrMax, 10);\n  const \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpaj56qurr.ts(46,9): error TS1005: ',' expected.\n../../../../tmp/tmpaj56qurr.ts(62,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp0bqv_thd.js:25:12)\n    at Object.<anonymous> (/tmp/tmp0bqv_thd.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334226
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a: number, b: number) => {\n    const ones = a ^ b;\n    if (ones === 0) {\n      return 0;\n    }\n    return ones > 0 ? 1 : -1;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp5kp9zltr.js:24:12)\n    at Object.<anonymous> (/tmp/tmp5kp9zltr.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2, 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334381
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpd5u_mfui.js:17:12)\n    at Object.<anonymous> (/tmp/tmpd5u_mfui.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334230
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const ones = arr.filter(x => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return arr;\n  }\n  const biggest = ones[0];\n  const smallest = ones[len - 1];\n  const mid = len / 2;\n  const left = arr.slice(0, mid);\n  const right = arr.slice(mid);\n  return sort_array(left).concat([biggest], sort_array(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyox482gq.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpyox482gq.ts(20,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n",
      "timestamp": 1660334380
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes = Math.pow(2, Math.ceil(Math.log(ones) / Math.LN2));\n  const maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes) / Math.LN10));\n  const decs = arr.map(val => Math.trunc(val * maxDec) / maxDec);\n  const decLen = decs.length;\n  const decArr = new Array(decLen);\n  for (let i = 0; i < decLen; i++) {\n    decArr[i] = decs[i];\n  }\n  const decArr_sorted = decArr.sort((a, b) => a - b);\n  const decArr_sorted_len = decArr_sorted.length;\n  const decArr_sorted_arr = new Array(decArr_sorted_len);\n  for (let i = 0; i < decArr_sorted_len; i++) {\n    decArr_sorted_arr[i] = decArr_sorted[i];\n  }\n  const decArr_sorted_arr_sorted = decArr_sorted_arr.sort((a, b) => a - b);\n  const decArr_sorted_arr_sorted_len = decArr_sorted_arr_sorted.length;\n  const decArr_sorted_arr_sorted_arr = new Array(decArr_sorted_arr_sorted_len);\n  for (let i = 0; i < decArr_sorted_arr_sorted_len; i++) {\n    decArr_sorted_arr_sorted_arr[i] = decArr_sorted_arr_sorted[i];\n  }\n  const decArr_sorted_arr_sorted_arr_sorted = decArr_sorted_arr_sorted_arr.sort((a, b) => a - b);\n  const decArr_sorted_arr_sorted_arr_sorted_len = decArr_sorted_arr_sorted_arr_sorted.length;\n  const decArr_sorted_arr_sorted_arr_sorted_arr = new Array(decArr_sorted_arr_sorted_arr_sorted_len);\n  for (let i = 0; i < decArr_sorted_arr_sorted_arr_sorted_len; i++) {\n    decArr_sorted_arr_sorted_arr_sorted_arr[i] = decArr_sorted_arr_sorted_arr_sorted[i];\n  }\n  const decArr_sorted_arr_sorted_arr_sorted_arr_sorted = decArr_sorted_arr_sorted_arr_sorted_arr.sort((a, b) => a - b);\n  const decArr_sorted_arr_sorted_arr_sorted_arr_sorted_len = decArr_sorted_arr_sorted_arr_sorted_arr_sorted.length;\n  const decArr_sorted_arr_sorted_arr_sorted_arr_sorted_arr = new Array(decArr_sorted_arr_sorted_arr_sorted_arr_sorted_len);\n  for (let i = 0; i < decArr_sorted_arr_sorted_arr_sorted_arr_sorted_len; i++) {\n    decArr_sorted_arr_sorted_arr_sorted_arr_sorted_arr[i] = decArr_sorted_arr_sorted_arr_sorted_arr_sorted_arr_sorted[i];\n  }\n  const decArr_sorted_arr_sorted_arr_sorted_arr_sorted_arr_sorted = \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphx1tu4jg.ts(50,9): error TS1005: ',' expected.\n../../../../tmp/tmphx1tu4jg.ts(66,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334381
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const maxOnes = Math.pow(2, Math.ceil(Math.log(ones) / Math.LN2));\n  const maxDec = Math.pow(2, Math.ceil(Math.log(maxOnes) / Math.LN10));\n  const dec = Math.ceil(Math.log(maxDec) / Math.LN10);\n  const dec = Math.max(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.min(dec, 0);\n  const dec = Math.max(dec, 0);\n  const dec = Math.max(dec, len - 1);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(dec, 0);\n  const dec = Math.min(dec, len - 1);\n  const dec = Math.max(de\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmposit4q9_.ts(68,1): error TS1005: ',' expected.\n../../../../tmp/tmposit4q9_.ts(68,9): error TS1005: ',' expected.\n../../../../tmp/tmposit4q9_.ts(84,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334380
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a: number, b: number) => {\n    const ones = ~~(a / 2);\n    const zeros = a % 2;\n    const ones_b = ~~(b / 2);\n    const zeros_b = b % 2;\n    if (ones === ones_b) {\n      return zeros_b - zeros;\n    }\n    return ones_b - ones;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp47soo2ct.js:27:12)\n    at Object.<anonymous> (/tmp/tmp47soo2ct.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3, 2, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334381
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((val) => val.toString(2).split('').reduce((acc, val) => acc + +val, 0));\n  const maxOnes = Math.max(...ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnes.toString(2).split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndex = maxOnesBin.toString(2).split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndex = maxOnesBinIndex.split('').reduce((acc, val) => acc + +val, 0);\n  const maxOnesBinIndexArr = maxOnesBinIndex.split('').map((val) => +val);\n  const maxOnesBinIndexArrLen = maxOnesBinIndexArr.length;\n  const maxOnesBinIndexArrMax = Math.max(...maxOnesBinIndexArr);\n  const maxOnesBinIndexArrMin = Math.min(...maxOnesBinIndexArr);\n  const maxOnesBinIndexArrMaxIndex = maxOnesBinIndexArr.indexOf(maxOnesBinIndexArrMax);\n  const maxOnesBinIndexArrMinIndex = maxOnesBinIndexArr.indexOf(maxOnesBinIndexArrMin);\n  const maxOnesBinIndexArrMaxIndex = maxOnesBinIndexArr.indexOf(maxOnesBinIndexArrMaxIndex);\n  const maxOnesBinIndexArrMinIndex = maxOnesBinIndexArr.indexOf(maxOnesBinIndexArrMinIndex);\n  const maxOnesBinIndexArrMaxIndex = maxOnesBinIndexArr.indexOf(maxOnesBinIndexArrMaxIndex);\n  const maxOnesBinIndexArrMinIndex = maxOnesBinIndexArr.indexOf(maxOnesBinIndexArrMinIndex);\n  const maxOnesBinIndexArrMaxIndex = maxOnesBinIndexArr.indexOf(maxOnesBinIndexArrMaxIndex);\n  const maxOnesBinIndexArrMinIndex = maxOnesBinIndexArr.indexOf(maxOnesBinIndexArrMinIndex);\n  const maxOnesBinIndexArrMaxIndex = maxOnesBinIndexArr.indexOf(maxOnesBinIndexArrMaxIndex);\n  const maxOnesBinIndexArrMinIndex = maxOnesBinIndexArr.indexOf(maxOnesBinIndexArrMinIndex);\n  const maxOnesBinIndexArrMaxIndex = maxOnesBinIndexArr.indexOf(maxOnesBinIndexArrMaxIndex);\n  const maxOnesBinIndexArrMinIndex = \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpes6k2ses.ts(38,9): error TS1005: ',' expected.\n../../../../tmp/tmpes6k2ses.ts(54,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334380
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((x) => x === 1);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return ones;\n  }\n  const half = len / 2;\n  const left = arr.slice(0, half);\n  const right = arr.slice(half);\n  return merge(sort_array(left), sort_array(right));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpli1h5rv2.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpli1h5rv2.ts(17,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmpli1h5rv2.ts(27,10): error TS2304: Cannot find name 'merge'.\n",
      "timestamp": 1660334380
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    const ones = count_ones(b);\n    const decA = count_ones(a);\n    const decB = count_ones(b);\n    if (decA === decB) {\n      return decA - decB;\n    }\n    return decA - decB || decB - decA;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdqqwfjq7.ts(13,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpdqqwfjq7.ts(14,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmpdqqwfjq7.ts(15,18): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334240
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp0bqv_thd.js:25:12)\n    at Object.<anonymous> (/tmp/tmp0bqv_thd.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334226
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const aBits = count_bits(a)\n    const bBits = count_bits(b)\n    if (aBits === bBits) {\n      return a - b\n    }\n    return aBits - bBits\n  })\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpplfo0uf9.ts(13,19): error TS2304: Cannot find name 'count_bits'.\n../../../../tmp/tmpplfo0uf9.ts(14,19): error TS2304: Cannot find name 'count_bits'.\n",
      "timestamp": 1660334233
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  let result: number[] = [];\n  let map: Map<number, number> = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  for (let i = 0; i < map.size; i++) {\n    let num = map.get(i);\n    let ones = num - 1;\n    let decimal = ones * Math.pow(10, map.size - i - 1);\n    result.push(decimal);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpxyyn71d6.js:34:12)\n    at Object.<anonymous> (/tmp/tmpxyyn71d6.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, 0, 0, 0, 0 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334381
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.map((x) => x === 1 ? 1 : 0);\n  const maxOnes = Math.max(...ones);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxOnesBin = maxOnesIndex.toString(2);\n  const maxOnesBinLen = maxOnesBin.length;\n  const maxOnesBinLenLen = maxOnesBinLen + 1;\n  const maxOnesBinLenStr = Array(maxOnesBinLenLen).fill('0').join('');\n  const maxOnesBinStr = maxOnesBin.slice(0, maxOnesBinLen);\n  const maxOnesBinStrLen = maxOnesBinStr.length;\n  const maxOnesBinStrLenLen = maxOnesBinStrLen + 1;\n  const maxOnesBinStrStr = Array(maxOnesBinStrLenLen).fill('0').join('');\n  const maxOnesBinStrArr = [maxOnesBinStr];\n  for (let i = maxOnesBinStrLenLen; i >= 0; i--) {\n    maxOnesBinStrStr[i] = maxOnesBinStrStr[maxOnesBinStrLen - i];\n  }\n  const maxOnesBinStrArrLen = maxOnesBinStrArr.length;\n  const maxOnesBinStrArrLenLen = maxOnesBinStrArrLen + 1;\n  const maxOnesBinStrArrStr = Array(maxOnesBinStrArrLenLen).fill('0').join('');\n  const maxOnesBinStrArrStrLen = maxOnesBinStrArrStr.length;\n  const maxOnesBinStrArrStrLen = maxOnesBinStrArrStrLen + 1;\n  const maxOnesBinStrArrStrStr = Array(maxOnesBinStrArrStrLen).fill('0').join('');\n  const maxOnesBinStrArrStrArr = [maxOnesBinStrArrStr];\n  for (let i = maxOnesBinStrArrStrLen; i >= 0; i--) {\n    maxOnesBinStrArrStrStr[i] = maxOnesBinStrArrStr[maxOnesBinStrArrLen - i];\n  }\n  const maxOnesBinStrArrStrArrLen = maxOnesBinStrArrStrArr.length;\n  const maxOnesBinStrArrStrArrLen = maxOnesBinStrArrStrArrLen + 1;\n  const maxOnesBinStrArrStrArrStr = Array(maxOnesBinStrArrStrArrLen).fill('0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp76e6xnmh.ts(43,77): error TS1002: Unterminated string literal.\n../../../../tmp/tmp76e6xnmh.ts(44,1): error TS1005: ',' expected.\n../../../../tmp/tmp76e6xnmh.ts(44,9): error TS1005: ',' expected.\n../../../../tmp/tmp76e6xnmh.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334381
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((val) => val & 1);\n  const dec = arr.map((val) => val.toString().split('').reverse().join(''));\n  const decLen = dec.length;\n  const decOnes = dec.map((val) => val & 1);\n  const decOnesLen = decOnes.length;\n  const decOnesSum = decOnes.reduce((sum, val) => sum + val, 0);\n  const decOnesSumLen = decOnesSum.toString().length;\n  const decOnesSumLen2 = decOnesSumLen + decOnesSumLen + decOnesSumLen;\n  const decOnesSumLen3 = decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen;\n  const decOnesSumLen4 = decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen;\n  const decOnesSumLen5 = decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen;\n  const decOnesSumLen6 = decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen;\n  const decOnesSumLen7 = decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen;\n  const decOnesSumLen8 = decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen;\n  const decOnesSumLen9 = decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen + decOnesSumLen;\n  const decOnesSumLen10 = decOnesSumLen + decOnesSumLen + decOnesSumLen \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp31l3xrzt.ts(48,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334381
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmphk_6sr3z.js:26:12)\n    at Object.<anonymous> (/tmp/tmphk_6sr3z.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334377
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpmr2r9mdt.js:25:12)\n    at Object.<anonymous> (/tmp/tmpmr2r9mdt.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334237
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((x) => x === 1);\n  const decs = arr.map((x) => x - ones);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const decLen = decs.length;\n  if (decLen === 0) {\n    return arr;\n  }\n  const maxDec = Math.max.apply(null, decs);\n  const maxOnes = Math.max.apply(null, ones);\n  const maxLen = Math.max(maxDec, maxOnes);\n  const newArr = new Array(len);\n  for (let i = 0; i < len; i++) {\n    newArr[i] = 0;\n  }\n  for (let i = 0; i < len; i++) {\n    newArr[ones[i]] = i;\n  }\n  for (let i = 0; i < decLen; i++) {\n    newArr[decs[i]] = i;\n  }\n  return newArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprlxblju4.ts(12,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmprlxblju4.ts(17,35): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmprlxblju4.ts(18,9): error TS2451: Cannot redeclare block-scoped variable 'len'.\n../../../../tmp/tmprlxblju4.ts(34,12): error TS2538: Type 'boolean' cannot be used as an index type.\n",
      "timestamp": 1660334382
    },
    {
      "exit_code": 1,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp0bqv_thd.js:25:12)\n    at Object.<anonymous> (/tmp/tmp0bqv_thd.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334226
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.map((x) => x > 0 ? 1 : 0);\n  const zeros = arr.map((x) => x > 0 ? 0 : 0);\n  const maxOnes = Math.max(...ones);\n  const maxZeros = Math.max(...zeros);\n  const maxOnesIndex = ones.indexOf(maxOnes);\n  const maxZerosIndex = zeros.indexOf(maxZeros);\n  const maxOnesZeros = maxOnes - maxZeros;\n  const maxOnesOnes = maxZeros - maxOnes;\n  const maxOnesOnesIndex = ones.indexOf(maxOnesOnes);\n  const maxOnesOnesZeros = maxOnesOnes - maxOnesZeros;\n  const maxOnesZeros = maxOnes - maxZeros;\n  const maxOnesZerosIndex = ones.indexOf(maxOnesZeros);\n  const maxOnesZerosOnes = maxOnesZeros - maxOnesOnes;\n  const maxOnesOnesZerosIndex = ones.indexOf(maxOnesOnesZeros);\n  const maxOnesOnesZerosZeros = maxOnesOnesZeros - maxOnesZerosIndex;\n  const maxOnesZerosIndex = zeros.indexOf(maxOnesZerosIndex);\n  const maxOnesZerosOnesIndex = zeros.indexOf(maxOnesZerosOnes);\n  const maxOnesZerosOnesZeros = maxOnesZerosIndex - maxOnesOnesIndex;\n  const maxOnesOnesZerosIndex = ones.indexOf(maxOnesOnesZerosIndex);\n  const maxOnesOnesZerosOnesIndex = ones.indexOf(maxOnesOnesZerosOnes);\n  const maxOnesOnesZerosOnesZeros = maxOnesOnesZerosOnesIndex - maxOnesZerosIndex;\n  const maxOnesZerosOnesIndex = zeros.indexOf(maxOnesZerosOnesIndex);\n  const maxOnesZerosOnesOnesIndex = zeros.indexOf(maxOnesZerosOnesOnesIndex);\n  const maxOnesZerosOnesOnesIndex = zeros.indexOf(maxOnesZerosOnesOnesIndex);\n  const maxOnesOnesZerosOnesIndex = ones.indexOf(maxOnesOnesZerosOnesIndex);\n  const maxOnesOnesZerosOne\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3xfl7cn8.ts(58,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334382
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a, b) => {\n    const ones = count_ones(a);\n    const bOnes = count_ones(b);\n    if (ones < bOnes) {\n      return -1;\n    }\n    if (ones > bOnes) {\n      return 1;\n    }\n    return a - b;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprgs6bctk.ts(13,18): error TS2304: Cannot find name 'count_ones'.\n../../../../tmp/tmprgs6bctk.ts(14,19): error TS2304: Cannot find name 'count_ones'.\n",
      "timestamp": 1660334382
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  const ones = arr\n    .map((x) => parseInt(x.toString(2), 2))\n    .filter((x) => x > 0);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n    return ones;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLenLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLenLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLenLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLenLenLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLenLenLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLenLenLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLenLenLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLenLenLenLenLenLenLen = Math.max(...arr.map((x) => x.length));\n  const maxLenLenLenLenLenLenLenLenLenLenLenLen = Math.max(...arr.map((x\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnn4l5xbq.ts(48,1): error TS1005: ')' expected.\n../../../../tmp/tmpnn4l5xbq.ts(48,9): error TS1005: ',' expected.\n../../../../tmp/tmpnn4l5xbq.ts(64,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334382
    },
    {
      "exit_code": 2,
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const ones = arr\n    .map((x) => parseInt(x.toString(2), 2))\n    .filter((x) => x > 0);\n  const len = ones.length;\n  if (len === 0) {\n    return arr;\n  }\n  const maxOnes = Math.max(...ones);\n  const maxLen = Math.max(...arr.map((x) => x.length));\n  const maxLenDiff = Math.abs(maxLen - len);\n  if (maxLenDiff > 1) {\n    return arr;\n  }\n  const maxOnesDiff = Math.abs(maxOnes - Math.max(...ones));\n  if (maxOnesDiff > 1) {\n    return arr;\n  }\n  const maxDiff = Math.max(...arr.map((x) => x.length - len));\n  const maxDiffDiff = Math.abs(maxDiff - len);\n  if (maxDiffDiff > 1) {\n    return arr;\n  }\n  const maxDiffDiff2 = Math.abs(maxDiff - maxLen);\n  if (maxDiffDiff2 > 1) {\n    return arr;\n  }\n  const maxDiffDiff3 = Math.abs(maxDiff - maxOnes);\n  if (maxDiffDiff3 > 1) {\n    return arr;\n  }\n  const maxDiffDiff4 = Math.abs(maxDiff - maxOnes);\n  if (maxDiffDiff4 > 1) {\n    return arr;\n  }\n  const maxDiffDiff5 = Math.abs(maxDiff - maxOnes);\n  if (maxDiffDiff5 > 1) {\n    return arr;\n  }\n  const maxDiffDiff6 = Math.abs(maxDiff - maxOnes);\n  if (maxDiffDiff6 > 1) {\n    return arr;\n  }\n  const maxDiffDiff7 = Math.abs(maxDiff - maxOnes);\n  if (maxDiffDiff7 > 1) {\n    return arr;\n  }\n  const maxDiffDiff8 = Math.abs(maxDiff - maxOnes);\n  if (maxDiffDiff8 > 1) {\n    return arr;\n  }\n  const maxDiffDiff9 = Math.abs(maxDiff - maxOnes);\n  if (maxDiffDiff9 > 1) {\n    return arr;\n  }\n  const maxDiffDiff10 = Math.abs(maxDiff - maxOnes);\n  if (maxDiffDiff10 > 1) {\n    return arr;\n  }\n  const maxDiffDiff11 = Math.abs(maxDiff - maxOnes);\n  if (maxDiffDiff11 > 1) {\n    return arr;\n  }\n  const maxDiffDiff12 = Math.abs(maxDiff - maxOnes);\n  if (maxDiffDiff12 > 1) {\n    return arr;\n  }\n  const maxDiffDiff13 = Math.abs(maxDiff - maxOnes);\n  if (maxDiffDiff13 > 1) {\n    return arr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8xz28c0y.ts(101,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334382
    }
  ]
}