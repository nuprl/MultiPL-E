{
  "language": "ts",
  "name": "HumanEval_6_parse_nested_parens",
  "results": [
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_count_index = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(char);\n      paren_level_max_count = Math.max(paren_level_max_count, paren_level_count);\n      paren_level_count = 0;\n      paren_level_max_count_index++;\n    } else if (char === ')') {\n      paren_level_count++;\n      paren_level_max_count_index--;\n      if (paren_level_max_count_index < 0) {\n        paren_level_max_count_index = paren_level_max_count - 1;\n      }\n      paren_level[paren_level_max_count_index] = paren_level_count;\n      paren_stack.splice(paren_level_max_count_index, 1);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp1h_j46ep.js:35:12)\n    at Object.<anonymous> (/tmp/tmp1h_j46ep.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n      if (paren_level_count === 0) {\n        paren_level_max--;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpg3cmdohv.js:31:12)\n    at Object.<anonymous> (/tmp/tmpg3cmdohv.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334903
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpew79coj6.js:29:12)\n    at Object.<anonymous> (/tmp/tmpew79coj6.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_value: number = 0;\n  let paren_level_max_value_length: number = 0;\n  let paren_level_max_value_char: number = 0;\n  let paren_level_max_value_char_count: number = 0;\n  let paren_level_max_value_char_length: number = 0;\n  let paren_level_max_value_char_index: number = 0;\n  let paren_level_max_value_char_value: number = 0;\n  let paren_level_max_value_char_value_index: number = 0;\n  let paren_level_max_value_char_value_value: number = 0;\n  let paren_level_max_value_char_value_value_index: number = 0;\n  let paren_level_max_value_char_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_index: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3qekapxb.ts(57,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334903
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_index: number[] = [];\n  let paren_level_max_value: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjuiypo5h.ts(66,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level.length - 1]++;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n  3,\n  0,\n  1,\n  5,\n  1,\n  0,\n  1,\n  4,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp0s4rh6ys.js:27:12)\n    at Object.<anonymous> (/tmp/tmp0s4rh6ys.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 2, 3, 0, 1,\n    5, 1, 0, 1, 4,\n    2, 3\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334781
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level_max = Math.max(paren_level_max, paren_stack[paren_level_max_index]);\n        paren_level_max_index = paren_level_max_index + 1;\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpibt92pom.js:31:12)\n    at Object.<anonymous> (/tmp/tmpibt92pom.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334903
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp2spjcv6x.js:30:12)\n    at Object.<anonymous> (/tmp/tmp2spjcv6x.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334801
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_max: number[] = [];\n  const paren_level_max_index = 0;\n  let paren_level_max_depth = 0;\n  let paren_level_max_depth_index = 0;\n  let paren_level_max_depth_index2 = 0;\n  let paren_level_max_depth_index3 = 0;\n  let paren_level_max_depth_index4 = 0;\n  let paren_level_max_depth_index5 = 0;\n  let paren_level_max_depth_index6 = 0;\n  let paren_level_max_depth_index7 = 0;\n  let paren_level_max_depth_index8 = 0;\n  let paren_level_max_depth_index9 = 0;\n  let paren_level_max_depth_index10 = 0;\n  let paren_level_max_depth_index11 = 0;\n  let paren_level_max_depth_index12 = 0;\n  let paren_level_max_depth_index13 = 0;\n  let paren_level_max_depth_index14 = 0;\n  let paren_level_max_depth_index15 = 0;\n  let paren_level_max_depth_index16 = 0;\n  let paren_level_max_depth_index17 = 0;\n  let paren_level_max_depth_index18 = 0;\n  let paren_level_max_depth_index19 = 0;\n  let paren_level_max_depth_index20 = 0;\n  let paren_level_max_depth_index21 = 0;\n  let paren_level_max_depth_index22 = 0;\n  let paren_level_max_depth_index23 = 0;\n  let paren_level_max_depth_index24 = 0;\n  let paren_level_max_depth_index25 = 0;\n  let paren_level_max_depth_index26 = 0;\n  let paren_level_max_depth_index27 = 0;\n  let paren_level_max_depth_index28 = 0;\n  let paren_level_max_depth_index29 = 0;\n  let paren_level_max_depth_index30 = 0;\n  let paren_level_max_depth_index31 = 0;\n  let paren_level_max_depth_index32 = 0;\n  let paren_level_max_depth_index33 = 0;\n  let paren_level_max_depth_index34 = 0;\n  let paren_level_max_depth_index35 = 0;\n  let paren_level_max_depth_index36 = 0;\n  let paren_level_max_depth_index37 = 0;\n  let paren_level_max_depth_index38 = 0;\n  let paren_level_max_depth_index39 = 0;\n  let paren_level_max_depth_index40 = 0;\n  let paren_level_max_depth_index41 = 1;\n  let paren_level_max_depth_index42 = 1;\n  let paren_level_max_depth_index43 = 1;\n  let paren_level_max_depth_index44 = 1;\n  let paren_level_max_depth_index45 = 1;\n  let paren_level_max_depth_index46 = 1;\n  let paren_level_max_depth_index47 = 1;\n  let paren\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp29oe9sqp.ts(71,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[] = [];\n    let paren_level_count: number = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(paren_string[i]);\n            paren_level.push(paren_level_count);\n            paren_level_count++;\n        } else if (char === ')') {\n            paren_level_count--;\n            paren_level.pop();\n            paren_level.push(paren_level_count);\n        }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  1,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpszp9rd6h.js:28:12)\n    at Object.<anonymous> (/tmp/tmpszp9rd6h.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 0, 0, 1,\n    0, 0, 0, 1, 1,\n    1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334903
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n    } else if (paren_string[i] === \")\") {\n      const paren_level_index = paren_stack.pop();\n      const paren_level = paren_level[paren_level_index];\n      paren_level.push(paren_level + 1);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpknp4t_7q.ts(15,27): error TS2448: Block-scoped variable 'paren_level' used before its declaration.\n",
      "timestamp": 1660334903
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpagarxrsg.js:28:12)\n    at Object.<anonymous> (/tmp/tmpagarxrsg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpy7aicl3i.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy7aicl3i.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334788
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      const last_paren_level = paren_level.pop();\n      if (paren_stack.length > 0) {\n        const last_paren_level_char = paren_stack.pop();\n        if (last_paren_level_char === '(') {\n          paren_level[last_paren_level] = paren_level[last_paren_level - 1];\n        }\n      }\n      paren_level_count--;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  undefined: undefined\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwqwbxgg2.js:33:12)\n    at Object.<anonymous> (/tmp/tmpwqwbxgg2.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, undefined: undefined ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334903
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_level_count = 0;\n  let paren_level = 0;\n  let paren_stack_count = 0;\n  let paren_stack = [];\n  let paren_stack_string = \"\";\n  let paren_stack_string_count = 0;\n  let paren_stack_string = \"\";\n  let paren_stack_string_count = 0;\n  let paren_level_string = \"\";\n  let paren_level_string_count = 0;\n  let paren_level_string = \"\";\n  let paren_level_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\n  let paren_level_count_string_count = 0;\n  let paren_level_count_string = \"\";\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxsjjtfuz.ts(80,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n      paren_level_count = 0;\n    } else if (paren_string[i] === ')') {\n      paren_level_count++;\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max = 0;\n    } else {\n      paren_level_count = 0;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty item>,\n  1,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpdkkty77k.js:31:12)\n    at Object.<anonymous> (/tmp/tmpdkkty77k.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty item>, 1, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334903
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_yp2k394.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_yp2k394.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334781
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_depth: number[] = [];\n  let paren_level_max_level: number[] = [];\n  let paren_level_max_level_length: number[] = [];\n  let paren_level_max_level_length_count: number[] = [];\n  let paren_level_max_level_length_depth: number[] = [];\n  let paren_level_max_level_length_depth_count: number[] = [];\n  let paren_level_max_level_length_level: number[] = [];\n  let paren_level_max_level_length_level_count: number[] = [];\n  let paren_level_max_level_length_level_length: number[] = [];\n  let paren_level_max_level_length_level_length_count: number[] = [];\n  let paren_level_max_level_length_level_length_depth: number[] = [];\n  let paren_level_max_level_length_level_length_depth_count: number[] = [];\n  let paren_level_max_level_length_level_level_length: number[] = [];\n  let paren_level_max_level_length_level_length_depth: number[] = [];\n  let paren_level_max_level_length_level_length_depth_count: number[] = [];\n  let paren_level_max_level_length_level_length_level: number[] = [];\n  let paren_level_max_level_length_level_length_depth: number[] = [];\n  let paren_level_max_level_length_level_length_depth_count: number[] = [];\n  let paren_level_max_level_length_level_length_level_length: number[] = [];\n  let paren_level_max_level_length_level_length_depth: number[] = [];\n  let paren_level_max_level_length_level_length_depth_count: number[] = [];\n  let paren_level_max_level_length_level_length_level_length: number[] = [];\n  let paren_level_max_level_length_level_length_depth: number[] = [];\n  let paren_level_max_level_length_level_length_depth_count: number[] = [];\n  let paren_level_max_level_length_level_length_level_length: number[] = [];\n  let paren_level_max_level_length_level_length_depth: number[] = [];\n  let paren_level_max_level_length_level_length_depth_count: number[] = [];\n  let paren_level_max_level_length_level_length_level_length: number[] = [];\n  let paren_level_max_level_length_level_length_depth: number[] = [];\n  let paren_level_max_level_length_level_length_depth_count: number[] = [];\n  let paren_level_max_level_length_level_length_level_length: number[] = [];\n  let paren_level_max_level_length_level_length_depth: number[] = [];\n  let paren\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprdv_l_5q.ts(55,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334903
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max_count = Math.max(paren_level_max_count, paren_stack.length);\n      paren_level_count = 0;\n    } else if (char === ')') {\n      paren_level_count = Math.max(paren_level_count, paren_stack.pop());\n    }\n    paren_level_count += 1;\n  }\n  return paren_level_max_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpke0heu1s.ts(22,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n      paren_level.push(paren_level_count);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  1,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6kdqbdpb.js:28:12)\n    at Object.<anonymous> (/tmp/tmp6kdqbdpb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 0, 0, 1,\n    0, 0, 0, 1, 1,\n    1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334903
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  let paren_level = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_level);\n      paren_level++;\n    } else if (paren_string[i] === \")\") {\n      paren_level--;\n      if (paren_level === 0) {\n        paren_stack.push(paren_level);\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6e3wzpu8.ts(11,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmp6e3wzpu8.ts(16,26): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmp6e3wzpu8.ts(20,3): error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334902
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp3m05yqpf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp3m05yqpf.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334903
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_level_index = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count_index2 = 0;\n  let paren_level_max_count_index3 = 0;\n  let paren_level_max_count_index4 = 0;\n  let paren_level_max_count_index5 = 0;\n  let paren_level_max_count_index6 = 0;\n  let paren_level_max_count_index7 = 0;\n  let paren_level_max_count_index8 = 0;\n  let paren_level_max_count_index9 = 0;\n  let paren_level_max_count_index10 = 0;\n  let paren_level_max_count_index11 = 0;\n  let paren_level_max_count_index12 = 0;\n  let paren_level_max_count_index13 = 0;\n  let paren_level_max_count_index14 = 0;\n  let paren_level_max_count_index15 = 0;\n  let paren_level_max_count_index16 = 0;\n  let paren_level_max_count_index17 = 0;\n  let paren_level_max_count_index18 = 0;\n  let paren_level_max_count_index19 = 0;\n  let paren_level_max_count_index20 = 0;\n  let paren_level_max_count_index21 = 0;\n  let paren_level_max_count_index22 = 0;\n  let paren_level_max_count_index23 = 0;\n  let paren_level_max_count_index24 = 0;\n  let paren_level_max_count_index25 = 0;\n  let paren_level_max_count_index26 = 0;\n  let paren_level_max_count_index27 = 0;\n  let paren_level_max_count_index28 = 0;\n  let paren_level_max_count_index29 = 0;\n  let paren_level_max_count_index30 = 0;\n  let paren_level_max_count_index31 = 0;\n  let paren_level_max_count_index32 = 0;\n  let paren_level_max_count_index33 = 0;\n  let paren_level_max_count_index34 = 0;\n  let paren_level_max_count_index35 = 0;\n  let paren_level_max_count_index36 = 0;\n  let paren_level_max_count_index37 = 0;\n  let paren_level_max_count_index38 = 0;\n  let paren_level_max_count_index39 = 0;\n  let paren_level_max_count_index40 = 0;\n  let paren_level_max_count_index41 = 0;\n  let paren_level_max_count_index42 = 0;\n  let paren_level_max_count_index43 = 0;\n  let paren_level_max_count_index44 = 0;\n  let paren_level_max_count_index45 = 0;\n  let paren_level_max_count_index46 = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp63qlw40q.ts(72,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334903
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphb2yo3zt.ts(18,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334903
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_depth = groups.length - 1;\n  const max_nesting = 0;\n  for (let i = 0; i < max_depth; i++) {\n    const group = groups[i];\n    const nesting = group.match(/\\(/g).length;\n    if (nesting > max_nesting) {\n      max_nesting = nesting;\n    }\n  }\n  return max_nesting;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsj8dk985.ts(14,7): error TS2588: Cannot assign to 'max_nesting' because it is a constant.\n../../../../tmp/tmpsj8dk985.ts(17,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334903
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpzbunejcf.js:28:12)\n    at Object.<anonymous> (/tmp/tmpzbunejcf.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334791
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_stack: number[] = [];\n  let paren_level_stack_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level_count);\n      paren_level_stack.push(paren_level\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmnamo8f7.ts(53,1): error TS1005: ',' expected.\n../../../../tmp/tmpmnamo8f7.ts(53,9): error TS1005: ',' expected.\n../../../../tmp/tmpmnamo8f7.ts(64,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334903
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = (paren_level_count > paren_level_max) ? paren_level_count : paren_level_max;\n      paren_level_count = 0;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level_max = (paren_level_count > paren_level_max) ? paren_level_count : paren_level_max;\n    }\n    paren_level_count += 1;\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsbjefdem.js:29:12)\n    at Object.<anonymous> (/tmp/tmpsbjefdem.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334903
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n    } else if (paren_string[i] === ')') {\n      paren_level--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpdhkb2m5x.js:23:12)\n    at Object.<anonymous> (/tmp/tmpdhkb2m5x.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334903
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.shift();\n        paren_level.shift();\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsi6h4mfq.js:29:12)\n    at Object.<anonymous> (/tmp/tmpsi6h4mfq.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 0, 0,\n    1, 2, 1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334801
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_count -= 1;\n      paren_level[paren_level_count] += 1;\n      if (paren_count === 0) {\n        paren_level_count -= 1;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <2 empty items>,\n  NaN,\n  NaN,\n  <2 empty items>,\n  NaN,\n  NaN,\n  <2 empty items>,\n  NaN,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp3abqzgpb.js:30:12)\n    at Object.<anonymous> (/tmp/tmp3abqzgpb.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    <2 empty items>, NaN,\n    NaN,             <2 empty items>,\n    NaN,             NaN,\n    <2 empty items>, NaN,\n    NaN,             NaN\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  o",
      "stdout": "",
      "timestamp": 1660334903
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: number[] = [];\n    const paren_level: number[] = [];\n    let paren_level_count: number = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === \"(\") {\n            paren_stack.push(paren_level_count);\n            paren_level_count += 1;\n        } else if (paren_string[i] === \")\") {\n            paren_level_count -= 1;\n            if (paren_level_count === 0) {\n                paren_level.push(paren_stack.pop());\n            }\n        }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp2i1ebk_r.js:27:12)\n    at Object.<anonymous> (/tmp/tmp2i1ebk_r.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334905
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_level_index = 0;\n  let paren_level_length = 0;\n  let paren_level_char_count = 0;\n  let paren_level_char_index = 0;\n  let paren_level_char_length = 0;\n  let paren_level_char_char_count = 0;\n  let paren_level_char_char_index = 0;\n  let paren_level_char_char_length = 0;\n  let paren_level_char_char_char_count = 0;\n  let paren_level_char_char_char_index = 0;\n  let paren_level_char_char_char_length = 0;\n  let paren_level_char_char_char_char_count = 0;\n  let paren_level_char_char_char_char_index = 0;\n  let paren_level_char_char_char_char_length = 0;\n  let paren_level_char_char_char_char_char_count = 0;\n  let paren_level_char_char_char_char_char_index = 0;\n  let paren_level_char_char_char_char_char_length = 0;\n  let paren_level_char_char_char_char_char_char_count = 0;\n  let paren_level_char_char_char_char_char_char_index = 0;\n  let paren_level_char_char_char_char_char_char_length = 0;\n  let paren_level_char_char_char_char_char_char_count = 0;\n  let paren_level_char_char_char_char_char_char_index = 0;\n  let paren_level_char_char_char_char_char_char_length = 0;\n  let paren_level_char_char_char_char_char_char_char_count = 0;\n  let paren_level_char_char_char_char_char_char_char_index = 0;\n  let paren_level_char_char_char_char_char_char_char_length = 0;\n  let paren_level_char_char_char_char_char_char_char_char_count = 0;\n  let paren_level_char_char_char_char_char_char_char_char_index = 0;\n  let paren_level_char_char_char_char_char_char_char_char_length = 0;\n  let paren_level_char_char_char_char_char_char_char_char_char_count = 0;\n  let paren_level_char_char_char_char_char_char_char_char_char_index = 0;\n  let paren_level_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let paren_level_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let paren_level_char_char_char_char_char_char_char_char_char_char_index = 0;\n  let paren_level_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let paren_level_char_char_char_char_char_char_char_char_char_char_char_count = 0;\n  let paren_level_char_char_char_char_char_char_char_char_char_char_char_index = 0;\n  let paren_level_char_char_char_char_char_char_char_char_char_char_char_length = 0;\n  let \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph4ie1s67.ts(49,9): error TS1005: ',' expected.\n../../../../tmp/tmph4ie1s67.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334905
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n    } else if (paren_string[i] === \")\") {\n      const current_level = paren_stack.pop();\n      if (current_level === undefined) {\n        throw new Error(\n          `Unbalanced parenthesis encountered. Parenthesis level: ${paren_level}`\n        );\n      }\n      paren_level[current_level] = paren_level[current_level] - 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6__ue03e.js:27:12)\n    at Object.<anonymous> (/tmp/tmp6__ue03e.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1, -1, -1, -1, -1,\n    -1, -1, -1, -1, -1,\n    -1, -1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_level_index: number[] = [];\n  let paren_level_length: number[] = [];\n  let paren_level_length_count: number[] = [];\n  let paren_level_length_max: number[] = [];\n  let paren_level_length_max_index: number[] = [];\n  let paren_level_length_max_length: number[] = [];\n  let paren_level_length_max_length_count: number[] = [];\n  let paren_level_length_max_length_max: number[] = [];\n  let paren_level_length_max_length_max_index: number[] = [];\n  let paren_level_length_max_length_max_length: number[] = [];\n  let paren_level_length_max_length_max_length_count: number[] = [];\n  let paren_level_length_max_length_max_length_max: number[] = [];\n  let paren_level_length_max_length_max_length_max_index: number[] = [];\n  let paren_level_length_max_length_max_length_max_length: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_count: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_index: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_index: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_count: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max_index: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max_index: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max_length: number[] = [];\n  let paren_level_length_max_length_max_length_max_length_max_length_max_length_count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgmxpy15b.ts(52,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n    } else if (char === ')') {\n      paren_level.pop();\n      paren_stack.pop();\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpmfzr1fao.js:25:12)\n    at Object.<anonymous> (/tmp/tmpmfzr1fao.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  const paren_level_max_count: number[] = [];\n  const paren_level_max_count_index: number[] = [];\n  const paren_level_max_count_index2: number[] = [];\n  const paren_level_max_count_index3: number[] = [];\n  const paren_level_max_count_index4: number[] = [];\n  const paren_level_max_count_index5: number[] = [];\n  const paren_level_max_count_index6: number[] = [];\n  const paren_level_max_count_index7: number[] = [];\n  const paren_level_max_count_index8: number[] = [];\n  const paren_level_max_count_index9: number[] = [];\n  const paren_level_max_count_index10: number[] = [];\n  const paren_level_max_count_index11: number[] = [];\n  const paren_level_max_count_index12: number[] = [];\n  const paren_level_max_count_index13: number[] = [];\n  const paren_level_max_count_index14: number[] = [];\n  const paren_level_max_count_index15: number[] = [];\n  const paren_level_max_count_index16: number[] = [];\n  const paren_level_max_count_index17: number[] = [];\n  const paren_level_max_count_index18: number[] = [];\n  const paren_level_max_count_index19: number[] = [];\n  const paren_level_max_count_index20: number[] = [];\n  const paren_level_max_count_index21: number[] = [];\n  const paren_level_max_count_index22: number[] = [];\n  const paren_level_max_count_index23: number[] = [];\n  const paren_level_max_count_index24: number[] = [];\n  const paren_level_max_count_index25: number[] = [];\n  const paren_level_max_count_index26: number[] = [];\n  const paren_level_max_count_index27: number[] = [];\n  const paren_level_max_count_index28: number[] = [];\n  const paren_level_max_count_index29: number[] = [];\n  const paren_level_max_count_index30: number[] = [];\n  const paren_level_max_count_index31: number[] = [];\n  const paren_level_max_count_index32: number[] = [];\n  const paren_level_max_count_index33: number[] = [];\n  const paren_level_max_count_index34: number[] = [];\n  const paren_level_max_count_index35: number[] = [];\n  const paren_level_max_count_index36: number[] = [];\n  const paren_level_max_count_index37: number[] = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv7oj2nzs.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpew79coj6.js:29:12)\n    at Object.<anonymous> (/tmp/tmpew79coj6.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  const paren_level_stack: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_count_stack: number[] = [];\n  let paren_level_count_stack_index: number[] = [];\n  let paren_level_count_stack_index2: number[] = [];\n  let paren_level_count_stack_index3: number[] = [];\n  let paren_level_count_stack_index4: number[] = [];\n  let paren_level_count_stack_index5: number[] = [];\n  let paren_level_count_stack_index6: number[] = [];\n  let paren_level_count_stack_index7: number[] = [];\n  let paren_level_count_stack_index8: number[] = [];\n  let paren_level_count_stack_index9: number[] = [];\n  let paren_level_count_stack_index10: number[] = [];\n  let paren_level_count_stack_index11: number[] = [];\n  let paren_level_count_stack_index12: number[] = [];\n  let paren_level_count_stack_index13: number[] = [];\n  let paren_level_count_stack_index14: number[] = [];\n  let paren_level_count_stack_index15: number[] = [];\n  let paren_level_count_stack_index16: number[] = [];\n  let paren_level_count_stack_index17: number[] = [];\n  let paren_level_count_stack_index18: number[] = [];\n  let paren_level_count_stack_index19: number[] = [];\n  let paren_level_count_stack_index20: number[] = [];\n  let paren_level_count_stack_index21: number[] = [];\n  let paren_level_count_stack_index22: number[] = [];\n  let paren_level_count_stack_index23: number[] = [];\n  let paren_level_count_stack_index24: number[] = [];\n  let paren_level_count_stack_index25: number[] = [];\n  let paren_level_count_stack_index26: number[] = [];\n  let paren_level_count_stack_index27: number[] = [];\n  let paren_level_count_stack_index28: number[] = [];\n  let paren_level_count_stack_index29: number[] = [];\n  let paren_level_count_stack_index30: number[] = [];\n  let paren_level_count_stack_index31: number[] = [];\n  let paren_level_count_stack_index32: number[] = [];\n  let paren_level_count_stack_index33: number[] = [];\n  let paren_level_count_stack_index34: number[] = [];\n  let paren_level_count_stack_index35: number[] = [];\n  let paren_level_count_stack_index36: number[] = [];\n  let paren_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6m52mp_c.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level_max++;\n      }\n      paren_level[paren_level_max] = paren_level_count;\n      paren_stack.push(paren_string[i]);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  0,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmptmkf_pm9.js:30:12)\n    at Object.<anonymous> (/tmp/tmptmkf_pm9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 0, 1, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (paren_string[i] === \")\") {\n      const paren_level_index = paren_stack.length - 1;\n      const paren_level_length = paren_level[paren_level_index];\n      if (paren_level_length === 0) {\n        paren_level.splice(paren_level_index, 1);\n      } else {\n        paren_level[paren_level_index] = paren_level[paren_level_index] - 1;\n      }\n      if (paren_level[paren_level_index] === 0) {\n        paren_stack.splice(paren_level_index, 1);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  NaN,\n  0,\n  0,\n  NaN,\n  0,\n  0,\n  0,\n  NaN,\n  0,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmprszxlf_l.js:33:12)\n    at Object.<anonymous> (/tmp/tmprszxlf_l.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n      0,   0, NaN, 0,   0,\n    NaN,   0,   0, 0, NaN,\n      0, NaN\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334907
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: number[] = [];\n    const paren_level: number[] = [];\n    let paren_level_count = 0;\n    let paren_level_max = 0;\n    let paren_level_max_index = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_paren_level = 0;\n    let paren_level_max_paren_level_index = 0;\n    let paren_level_max_paren_level_count = 0;\n    let paren_level_max_paren_level_max = 0;\n    let paren_level_max_paren_level_max_index = 0;\n    let paren_level_max_paren_level_max_count = 0;\n    let paren_level_max_paren_level_max_paren_level = 0;\n    let paren_level_max_paren_level_max_paren_level_index = 0;\n    let paren_level_max_paren_level_max_paren_level_count = 0;\n    let paren_level_max_paren_level_max_paren_level_max = 0;\n    let paren_level_max_paren_level_max_paren_level_max_index = 0;\n    let paren_level_max_paren_level_max_paren_level_max_count = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_index = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_count = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_index = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_count = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_index = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_count = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_index = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_count = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level = 0;\n    let paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_max_paren_level_index = 0;\n    let paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwx_h_mpq.ts(51,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level[paren_count] = paren_stack.length;\n      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n      paren_level_count[paren_level[paren_count]] =\n        paren_level_count[paren_level[paren_count]] || 0;\n      paren_level_count[paren_level[paren_count]] =\n        paren_level_count[paren_level[paren_count]] - 1;\n      if (paren_level_count[paren_level[paren_count]] == 0) {\n        paren_level[paren_count] = paren_stack.length;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpclxa7wd9.js:34:12)\n    at Object.<anonymous> (/tmp/tmpclxa7wd9.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_yp2k394.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_yp2k394.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334781
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      paren_level[paren_level.length - 1]++;\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n  3,\n  0,\n  1,\n  5,\n  1,\n  0,\n  1,\n  4,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpbc1b52ez.js:29:12)\n    at Object.<anonymous> (/tmp/tmpbc1b52ez.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 2, 3, 0, 1,\n    5, 1, 0, 1, 4,\n    2, 3\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_stack.push(paren_level_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n      paren_level_count = paren_level_stack.pop();\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr82ic0di.ts(15,7): error TS2304: Cannot find name 'paren_level_stack'.\n../../../../tmp/tmpr82ic0di.ts(19,27): error TS2304: Cannot find name 'paren_level_stack'.\n",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpce4a841m.js:30:12)\n    at Object.<anonymous> (/tmp/tmpce4a841m.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')') {\n      const current_level = paren_stack.pop();\n      const last_level = paren_level.pop();\n      if (current_level > last_level) {\n        paren_level.push(current_level);\n      }\n      paren_count--;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjwra3xfb.ts(13,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpjwra3xfb.ts(19,11): error TS2365: Operator '>' cannot be applied to types 'string' and 'number'.\n../../../../tmp/tmpjwra3xfb.ts(20,26): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n        paren_level_max_count = Math.max(paren_level_max_count, paren_level.length);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpocudyoww.js:29:12)\n    at Object.<anonymous> (/tmp/tmpocudyoww.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      paren_level[paren_level.length - 1]++;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n  3,\n  0,\n  1,\n  5,\n  1,\n  0,\n  1,\n  4,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_tcrufxd.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_tcrufxd.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 2, 3, 0, 1,\n    5, 1, 0, 1, 4,\n    2, 3\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_count);\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpgw1k37e3.js:27:12)\n    at Object.<anonymous> (/tmp/tmpgw1k37e3.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334795
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_count += 1;\n      paren_count += 1;\n    } else if (char === ')') {\n      paren_count -= 1;\n      paren_level_count -= 1;\n      if (paren_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    } else if (char === ' ') {\n      if (paren_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpska9k3h1.ts(14,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n",
      "timestamp": 1660334906
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n      paren_level_count -= 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhxqc041.ts(14,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length);\n      paren_level_count = 1;\n    } else if (char === ')') {\n      paren_level_count = Math.max(paren_level_count, paren_stack.pop());\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwozi_n06.js:27:12)\n    at Object.<anonymous> (/tmp/tmpwozi_n06.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqlu8g459.js:29:12)\n    at Object.<anonymous> (/tmp/tmpqlu8g459.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334907
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpy7aicl3i.js:28:12)\n    at Object.<anonymous> (/tmp/tmpy7aicl3i.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334788
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsol3icm4.ts(70,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334906
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const levels: number[] = [];\n    const paren_stack: string[] = [];\n    let paren_level = 0;\n    let paren_level_count = 0;\n    let paren_level_max = 0;\n    let paren_level_max_count = 0;\n    let paren_level_max_max = 0;\n    let paren_level_max_max_count = 0;\n    let paren_level_max_max_max = 0;\n    let paren_level_max_max_max_count = 0;\n    let paren_level_max_max_max_max = 0;\n    let paren_level_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_count = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_level_max_max_max_max_max_max_max_max_max_max_max_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7qu9ffoj.ts(56,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (paren_string[i] === ')') {\n      paren_level[paren_stack.length - 1]++;\n      paren_stack.pop();\n    } else {\n      paren_level[paren_stack.length - 1]++;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  6,\n  2,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  '-1': NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpjkgo0s5d.js:27:12)\n    at Object.<anonymous> (/tmp/tmpjkgo0s5d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, '-1': NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const level: number = paren_stack.pop();\n      if (level > paren_level[paren_level.length - 1]) {\n        paren_level[paren_level.length - 1] = level;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  0,\n  0,\n  5,\n  6,\n  0,\n  0,\n  9,\n  10,\n  11\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpahjg2dn5.js:27:12)\n    at Object.<anonymous> (/tmp/tmpahjg2dn5.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     0,  1, 2, 0, 0,\n     5,  6, 0, 0, 9,\n    10, 11\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_yp2k394.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_yp2k394.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334781
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphj9lqok9.js:28:12)\n    at Object.<anonymous> (/tmp/tmphj9lqok9.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334909
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_count);\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpu0fwrlb0.js:26:12)\n    at Object.<anonymous> (/tmp/tmpu0fwrlb0.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334910
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  let paren_level = 0;\n  let paren_nesting = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n    } else if (char === ')') {\n      paren_level--;\n      paren_nesting++;\n      if (paren_nesting > paren_stack[paren_stack.length - 1]) {\n        paren_nesting = 0;\n      }\n    } else if (char === ' ') {\n      paren_nesting = 0;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxx3047_w.ts(13,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpxx3047_w.ts(18,11): error TS2365: Operator '>' cannot be applied to types 'number' and 'string'.\n../../../../tmp/tmpxx3047_w.ts(25,3): error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334910
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_yp2k394.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_yp2k394.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334781
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level_max++;\n      }\n      if (paren_level_count > paren_level_max) {\n        paren_level.push(paren_level_max);\n        paren_level_max = paren_level_count;\n      }\n      paren_stack.push(paren_string[i]);\n    } else if (paren_string[i] === \" \") {\n      if (paren_stack.length > 0) {\n        paren_level_count--;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpu474_t8x.js:38:12)\n    at Object.<anonymous> (/tmp/tmpu474_t8x.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334910
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_max: number[] = [];\n  let paren_level_current: number[] = [];\n  let paren_level_current_max: number[] = [];\n  let paren_level_current_max_index: number[] = [];\n  let paren_level_current_index: number[] = [];\n  let paren_level_current_index2: number[] = [];\n  let paren_level_current_index3: number[] = [];\n  let paren_level_current_index4: number[] = [];\n  let paren_level_current_index5: number[] = [];\n  let paren_level_current_index6: number[] = [];\n  let paren_level_current_index7: number[] = [];\n  let paren_level_current_index8: number[] = [];\n  let paren_level_current_index9: number[] = [];\n  let paren_level_current_index10: number[] = [];\n  let paren_level_current_index11: number[] = [];\n  let paren_level_current_index12: number[] = [];\n  let paren_level_current_index13: number[] = [];\n  let paren_level_current_index14: number[] = [];\n  let paren_level_current_index15: number[] = [];\n  let paren_level_current_index16: number[] = [];\n  let paren_level_current_index17: number[] = [];\n  let paren_level_current_index18: number[] = [];\n  let paren_level_current_index19: number[] = [];\n  let paren_level_current_index20: number[] = [];\n  let paren_level_current_index21: number[] = [];\n  let paren_level_current_index22: number[] = [];\n  let paren_level_current_index23: number[] = [];\n  let paren_level_current_index24: number[] = [];\n  let paren_level_current_index25: number[] = [];\n  let paren_level_current_index26: number[] = [];\n  let paren_level_current_index27: number[] = [];\n  let paren_level_current_index28: number[] = [];\n  let paren_level_current_index29: number[] = [];\n  let paren_level_current_index30: number[] = [];\n  let paren_level_current_index31: number[] = [];\n  let paren_level_current_index32: number[] = [];\n  let paren_level_current_index33: number[] = [];\n  let paren_level_current_index34: number[] = [];\n  let paren_level_current_index35: number[] = [];\n  let paren_level_current_index36: number[] = [];\n  let paren_level_current_index37: number[] = [];\n  let paren_level_current_index38: number[] = [];\n  let paren\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpclhtptvg.ts(63,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334910
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_yp2k394.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_yp2k394.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334781
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp2xngem7q.js:24:12)\n    at Object.<anonymous> (/tmp/tmp2xngem7q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpce4a841m.js:30:12)\n    at Object.<anonymous> (/tmp/tmpce4a841m.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334906
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (paren_string[i] === ')') {\n      const current_level = paren_level.pop();\n      if (current_level > 0) {\n        paren_level.push(current_level + 1);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpuaw6sl_b.js:26:12)\n    at Object.<anonymous> (/tmp/tmpuaw6sl_b.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334910
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5l88gjhe.js:30:12)\n    at Object.<anonymous> (/tmp/tmp5l88gjhe.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334787
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[] = [];\n    let paren_level_count: number = 0;\n    let paren_level_max: number = 0;\n    let paren_level_max_index: number = 0;\n    let paren_level_max_count: number;\n    let paren_level_max_string: string;\n    let paren_level_max_string_index: number;\n    let paren_level_max_string_count: number;\n    let paren_level_max_string_value: string;\n    let paren_level_max_string_value_index: number;\n    let paren_level_max_string_value_count: number;\n    let paren_level_max_string_value_length: number;\n    let paren_level_max_string_value_length_index: number;\n    let paren_level_max_string_value_length_count: number;\n    let paren_level_max_string_value_length_max: number;\n    let paren_level_max_string_value_length_max_index: number;\n    let paren_level_max_string_value_length_max_count: number;\n    let paren_level_max_string_value_length_max_string: string;\n    let paren_level_max_string_value_length_max_string_index: number;\n    let paren_level_max_string_value_length_max_string_count: number;\n    let paren_level_max_string_value_length_max_string_value: string;\n    let paren_level_max_string_value_length_max_string_value_index: number;\n    let paren_level_max_string_value_length_max_string_value_count: number;\n    let paren_level_max_string_value_length_max_string_value_length: number;\n    let paren_level_max_string_value_length_max_string_value_length_index: number;\n    let paren_level_max_string_value_length_max_string_value_length_count: number;\n    let paren_level_max_string_value_length_max_string_value_length_max: number;\n    let paren_level_max_string_value_length_max_string_value_length_max_index: number;\n    let paren_level_max_string_value_length_max_string_value_length_max_count: number;\n    let paren_level_max_string_value_length_max_string_value_length_max_string: string;\n    let paren_level_max_string_value_length_max_string_value_length_max_string_index: number;\n    let paren_level_max_string_value_length_max_string_value_length_max_string_count: number;\n    let paren_level_max_string_value_length_max_string_value_length_max_string_value: string;\n    let paren_level_max_string_value_length_max_string_value_length_max_string_value_index: number;\n    let paren_level_max_string_value_length_max_string_value_length_max_string_value_count: number;\n    let paren_level_max_string_value_length_max_string_value_length_max_string_value_length: number;\n    let paren_level_max_string_value_length_max_string_value_length_max_string_value_length_index: number;\n    let paren_level_max_string_value_length_max_string_value_length_max_string_value_length_count: number;\n    let paren_level_max_string_value_length_max_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz00dfznw.ts(58,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334910
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp22hcptwc.js:25:12)\n    at Object.<anonymous> (/tmp/tmp22hcptwc.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334910
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpv24_unpk.js:30:12)\n    at Object.<anonymous> (/tmp/tmpv24_unpk.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334910
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level_max = Math.max(paren_level_max, paren_stack.pop());\n      paren_level_max_index = paren_stack.indexOf(paren_level_max);\n      paren_level_max_count = paren_stack[paren_level_max_index];\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpfue8phfy.js:31:12)\n    at Object.<anonymous> (/tmp/tmpfue8phfy.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334910
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpew79coj6.js:29:12)\n    at Object.<anonymous> (/tmp/tmpew79coj6.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_value: number = 0;\n  let paren_level_max_value_length: number = 0;\n  let paren_level_max_value_length_index: number = 0;\n  let paren_level_max_value_length_value: number = 0;\n  let paren_level_max_value_length_value_index: number = 0;\n  let paren_level_max_value_length_value_length: number = 0;\n  let paren_level_max_value_length_value_length_index: number = 0;\n  let paren_level_max_value_length_value_length_value: number = 0;\n  let paren_level_max_value_length_value_length_value_index: number = 0;\n  let paren_level_max_value_length_value_length_value_length: number = 0;\n  let paren_level_max_value_length_value_length_value_length_index: number = 0;\n  let paren_level_max_value_length_value_length_value_length_value: number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_index: number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length: number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_index: number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value: number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_index: number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length: number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length_index: number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length_value: number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_index: number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length: number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_index: number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value: number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_index: number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length: number = 0;\n  let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length_index: number = 0;\n  let paren_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbudp64t6.ts(51,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334910
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array<number>(max_level);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      levels[j] = Math.max(levels[j], group.length);\n    }\n  }\n  return levels.map(l => l - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnryql24v.js:21:12)\n    at Object.<anonymous> (/tmp/tmpnryql24v.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    NaN, NaN, NaN, NaN,\n    NaN, NaN, NaN, NaN,\n    NaN, NaN\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334910
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level_max = Math.max(paren_level_max, paren_stack.pop());\n      if (paren_level_count === 0) {\n        paren_level_max_index = paren_level_max_index + 1;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyxz165nj.ts(15,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpyxz165nj.ts(19,51): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "timestamp": 1660334910
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const level = paren_stack.pop();\n      paren_level[level] = paren_level[level] - 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  '(': NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpbfd4idmj.js:25:12)\n    at Object.<anonymous> (/tmp/tmpbfd4idmj.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '(': NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334910
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_count: number;\n  let paren_level_max_string: string;\n  let paren_level_max_string_index: number;\n  let paren_level_max_string_count: number;\n  let paren_level_max_string_value: string;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_max_string_value_index: number;\n  let paren_level_max_string_value_count: number;\n  let paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9aw7z9dg.ts(71,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334910
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: number[] = [];\n    const paren_level: number[] = [];\n    for (let i = 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(paren_level.length);\n            paren_level.push(0);\n        } else if (char === ')') {\n            const level_count = paren_stack.pop();\n            if (level_count === undefined) {\n                throw new Error(`Unmatched closing parenthesis at index ${i}`);\n            }\n            paren_level[level_count] = paren_level[level_count] - 1;\n        }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpgu4ucdgk.js:28:12)\n    at Object.<anonymous> (/tmp/tmpgu4ucdgk.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1, -1, -1, -1, -1,\n    -1, -1, -1, -1, -1,\n    -1, -1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334910
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n    } else if (char === ')') {\n      paren_level--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmps8l_lkpf.js:24:12)\n    at Object.<anonymous> (/tmp/tmps8l_lkpf.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334910
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  const paren_level_max_count: number[] = [];\n  const paren_level_max_count_index: number[] = [];\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count = 1;\n  let paren_level_max_count_index = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(char);\n      paren_level.push(paren_level.length);\n      paren_level_count.push(0);\n      paren_level_max_count.push(0);\n      paren_level_max_count_index.push(0);\n    } else if (char === ')') {\n      paren_level_count[paren_level_max_count_index] =\n        paren_level_count[paren_level_max_count_index] + 1;\n      if (paren_level_count[paren_level_max_count_index] >\n          paren_level_max_count) {\n        paren_level_max_count = paren_level_count[paren_level_max_count_index];\n        paren_level_max_count_index = paren_level_max_count_index;\n      }\n      paren_level.pop();\n      paren_level_max_count_index--;\n      paren_level_max_count--;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuflys3wl.ts(10,9): error TS2451: Cannot redeclare block-scoped variable 'paren_level_max_count'.\n../../../../tmp/tmpuflys3wl.ts(11,9): error TS2451: Cannot redeclare block-scoped variable 'paren_level_max_count_index'.\n../../../../tmp/tmpuflys3wl.ts(12,7): error TS2451: Cannot redeclare block-scoped variable 'paren_level_max_count_index'.\n../../../../tmp/tmpuflys3wl.ts(13,7): error TS2451: Cannot redeclare block-scoped variable 'paren_level_max_count'.\n../../../../tmp/tmpuflys3wl.ts(14,7): error TS2451: Cannot redeclare block-scoped variable 'paren_level_max_count_index'.\n../../../../tmp/tmpuflys3wl.ts(24,25): error TS2538: Type 'number[]' cannot be used as an index type.\n../../../../tmp/tmpuflys3wl.ts(25,27): error TS2538: Type 'number[]' cannot be used as an index type.\n../../../../tmp/tmpuflys3wl.ts(26,29): error TS2538: Type 'number[]' cannot be used as an index type.\n../../../../tmp/tmpuflys3wl.ts(28,9): error TS2588: Cannot assign to 'paren_level_max_count' because it is a constant.\n.",
      "timestamp": 1660334910
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count2: number[] = [];\n  let paren_level_max_count3: number[] = [];\n  let paren_level_max_count4: number[] = [];\n  let paren_level_max_count5: number[] = [];\n  let paren_level_max_count6: number[] = [];\n  let paren_level_max_count7: number[] = [];\n  let paren_level_max_count8: number[] = [];\n  let paren_level_max_count9: number[] = [];\n  let paren_level_max_count10: number[] = [];\n  let paren_level_max_count11: number[] = [];\n  let paren_level_max_count12: number[] = [];\n  let paren_level_max_count13: number[] = [];\n  let paren_level_max_count14: number[] = [];\n  let paren_level_max_count15: number[] = [];\n  let paren_level_max_count16: number[] = [];\n  let paren_level_max_count17: number[] = [];\n  let paren_level_max_count18: number[] = [];\n  let paren_level_max_count19: number[] = [];\n  let paren_level_max_count20: number[] = [];\n  let paren_level_max_count21: number[] = [];\n  let paren_level_max_count22: number[] = [];\n  let paren_level_max_count23: number[] = [];\n  let paren_level_max_count24: number[] = [];\n  let paren_level_max_count25: number[] = [];\n  let paren_level_max_count26: number[] = [];\n  let paren_level_max_count27: number[] = [];\n  let paren_level_max_count28: number[] = [];\n  let paren_level_max_count29: number[] = [];\n  let paren_level_max_count30: number[] = [];\n  let paren_level_max_count31: number[] = [];\n  let paren_level_max_count32: number[] = [];\n  let paren_level_max_count33: number[] = [];\n  let paren_level_max_count34: number[] = [];\n  let paren_level_max_count35: number[] = [];\n  let paren_level_max_count36: number[] = [];\n  let paren_level_max_count37: number[] = [];\n  let paren_level_max_count38: number[] = [];\n  let paren_level_max_count39: number[] = [];\n  let paren_level_max_count40: number[] = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbuwl81yw.ts(63,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334794
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count_index2 = 0;\n  let paren_level_max_count_index3 = 0;\n  let paren_level_max_count_index4 = 0;\n  let paren_level_max_count_index5 = 0;\n  let paren_level_max_count_index6 = 0;\n  let paren_level_max_count_index7 = 0;\n  let paren_level_max_count_index8 = 0;\n  let paren_level_max_count_index9 = 0;\n  let paren_level_max_count_index10 = 0;\n  let paren_level_max_count_index11 = 0;\n  let paren_level_max_count_index12 = 0;\n  let paren_level_max_count_index13 = 0;\n  let paren_level_max_count_index14 = 0;\n  let paren_level_max_count_index15 = 0;\n  let paren_level_max_count_index16 = 0;\n  let paren_level_max_count_index17 = 0;\n  let paren_level_max_count_index18 = 0;\n  let paren_level_max_count_index19 = 0;\n  let paren_level_max_count_index20 = 0;\n  let paren_level_max_count_index21 = 0;\n  let paren_level_max_count_index22 = 0;\n  let paren_level_max_count_index23 = 0;\n  let paren_level_max_count_index24 = 0;\n  let paren_level_max_count_index25 = 0;\n  let paren_level_max_count_index26 = 0;\n  let paren_level_max_count_index27 = 0;\n  let paren_level_max_count_index28 = 0;\n  let paren_level_max_count_index29 = 0;\n  let paren_level_max_count_index30 = 0;\n  let paren_level_max_count_index31 = 0;\n  let paren_level_max_count_index32 = 0;\n  let paren_level_max_count_index33 = 0;\n  let paren_level_max_count_index34 = 0;\n  let paren_level_max_count_index35 = 0;\n  let paren_level_max_count_index36 = 0;\n  let paren_level_max_count_index37 = 0;\n  let paren_level_max_count_index38 = 0;\n  let paren_level_max_count_index39 = 0;\n  let paren_level_max_count_index40 = 0;\n  let paren_level_max_count_index41 = 0;\n  let paren_level_max_count_index42 = 0;\n  let paren_level_max_count_index43 = 0;\n  let paren_level_max_count_index44 = 0;\n  let paren_level_max_count_index45 = 0;\n  let paren_level_max_count_index46 = 0;\n  let paren_level_max_count_index47 = 0;\n  let paren_level_max_count_index48 = 0;\n  let paren_level_max_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwczm0y07.ts(71,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334910
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_max: number[] = [];\n  const paren_level_max_index = 0;\n  const paren_level_max_index2 = 0;\n  const paren_level_max_index3 = 0;\n  const paren_level_max_index4 = 0;\n  const paren_level_max_index5 = 0;\n  const paren_level_max_index6 = 0;\n  const paren_level_max_index7 = 0;\n  const paren_level_max_index8 = 0;\n  const paren_level_max_index9 = 0;\n  const paren_level_max_index10 = 0;\n  const paren_level_max_index11 = 0;\n  const paren_level_max_index12 = 0;\n  const paren_level_max_index13 = 0;\n  const paren_level_max_index14 = 0;\n  const paren_level_max_index15 = 0;\n  const paren_level_max_index16 = 0;\n  const paren_level_max_index17 = 0;\n  const paren_level_max_index18 = 0;\n  const paren_level_max_index19 = 0;\n  const paren_level_max_index20 = 0;\n  const paren_level_max_index21 = 0;\n  const paren_level_max_index22 = 0;\n  const paren_level_max_index23 = 0;\n  const paren_level_max_index24 = 0;\n  const paren_level_max_index25 = 0;\n  const paren_level_max_index26 = 0;\n  const paren_level_max_index27 = 0;\n  const paren_level_max_index28 = 0;\n  const paren_level_max_index29 = 0;\n  const paren_level_max_index30 = 0;\n  const paren_level_max_index31 = 0;\n  const paren_level_max_index32 = 0;\n  const paren_level_max_index33 = 0;\n  const paren_level_max_index34 = 0;\n  const paren_level_max_index35 = 0;\n  const paren_level_max_index36 = 0;\n  const paren_level_max_index37 = 0;\n  const paren_level_max_index38 = 0;\n  const paren_level_max_index39 = 0;\n  const paren_level_max_index40 = 0;\n  const paren_level_max_index41 = 0;\n  const paren_level_max_index42 = 0;\n  const paren_level_max_index43 = 0;\n  const paren_level_max_index44 = 0;\n  const paren_level_max_index45 = 0;\n  const paren_level_max_index46 = 0;\n  const paren_level_max_index47 = 0;\n  const paren_level_max_index48 = 0;\n  const paren_level_max_index49 = 0;\n  const paren_level_max_index50 = 0;\n  const paren_level_max_index51 = 0;\n  const paren_level_max_index52 = 0;\n  const paren_level_max_index53 = 0;\n  const paren_level_max_index54 = 0;\n  const paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3utbm0l8.ts(76,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334910
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n    } else {\n      paren_level_count = paren_stack[paren_stack.length - 1];\n    }\n    paren_level.push(paren_level_count);\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  1,\n  2,\n  1,\n  0,\n  undefined,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  undefined,\n  undefined,\n  NaN,\n  undefined,\n  undefined,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpygpf7e59.js:29:12)\n    at Object.<anonymous> (/tmp/tmpygpf7e59.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,         2,         1,\n    2,         1,         0,\n    undefine",
      "stdout": "",
      "timestamp": 1660334910
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (paren_string[i] === \")\") {\n      const paren_level_count = paren_stack.pop();\n      if (paren_level_count > 0) {\n        paren_level.push(paren_level_count);\n      } else {\n        paren_level.push(0);\n      }\n    } else {\n      paren_level[paren_stack.length - 1]++;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnuw5ex4c.ts(15,11): error TS2365: Operator '>' cannot be applied to types 'string' and 'number'.\n../../../../tmp/tmpnuw5ex4c.ts(16,26): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "timestamp": 1660334912
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: number[] = [];\n    const paren_level: number[] = [];\n    let paren_level_count = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(paren_level_count);\n            paren_level_count += 1;\n        } else if (char === ')') {\n            paren_level_count -= 1;\n            paren_level[paren_stack.pop()] = paren_level_count;\n        }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpieb60ag5.js:26:12)\n    at Object.<anonymous> (/tmp/tmpieb60ag5.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334913
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpdmxwf_ro.js:28:12)\n    at Object.<anonymous> (/tmp/tmpdmxwf_ro.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const levels: number[] = [];\n    let level = 0;\n    let paren_count = 0;\n    let paren_level = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const c = paren_string[i];\n        if (c == '(') {\n            paren_level++;\n        } else if (c == ')') {\n            paren_level--;\n        } else if (c == ' ') {\n            if (paren_level == 0 && paren_count > 0) {\n                levels.push(level);\n                level = 0;\n                paren_count = 0;\n            }\n        } else {\n            paren_count++;\n        }\n        level++;\n    }\n    if (paren_count > 0) {\n        levels.push(level);\n    }\n    return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp9xarxm_x.js:39:12)\n    at Object.<anonymous> (/tmp/tmp9xarxm_x.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334913
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level_count.push(paren_level_count);\n    } else if (paren_string[i] === \")\") {\n      paren_level_count = paren_level[paren_level.length - 1];\n      paren_level.pop();\n      if (paren_level_count === 0) paren_level.push(0);\n    } else {\n      paren_level_count = paren_level[paren_level.length - 1];\n      paren_level[paren_level.length - 1] += 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4levx6s2.ts(13,25): error TS2339: Property 'push' does not exist on type 'number'.\n",
      "timestamp": 1660334913
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphl61jp2u.js:26:12)\n    at Object.<anonymous> (/tmp/tmphl61jp2u.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level_max = Math.max(paren_level_max, paren_stack.pop());\n      paren_level_max_index = paren_stack.length - 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbj84tri2.ts(15,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpbj84tri2.ts(19,51): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "timestamp": 1660334913
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level = paren_stack.pop();\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpeqongkhr.js:28:12)\n    at Object.<anonymous> (/tmp/tmpeqongkhr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 0, 0, 0,\n    0, 0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334794
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqlu8g459.js:29:12)\n    at Object.<anonymous> (/tmp/tmpqlu8g459.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334907
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpxg3fvtxc.js:27:12)\n    at Object.<anonymous> (/tmp/tmpxg3fvtxc.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334913
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.match(/\\(([^()]+)\\)/gi);\n  const max_level = Math.max(...groups.map(g => g.length));\n  return groups.map(g => g.match(/\\(([^()]+)\\)/)[1].length).map(l => max_level - l);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp53hskcw9.js:8\n    const max_level = Math.max(...groups.map(g => g.length));\n                                         ^\n\nTypeError: Cannot read properties of null (reading 'map')\n    at parse_nested_parens (/tmp/tmp53hskcw9.js:8:42)\n    at test (/tmp/tmp53hskcw9.js:14:22)\n    at Object.<anonymous> (/tmp/tmp53hskcw9.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334914
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level_max = Math.max(...paren_level);\n      }\n      paren_level.splice(paren_level.indexOf(paren_level_count), 1);\n    }\n  }\n  return paren_level_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwcme320g.ts(25,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334791
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_level_index = 0;\n  let paren_level_length = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_length = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count_length = 0;\n  let paren_level_max_count_count = 0;\n  let paren_level_max_count_count_index = 0;\n  let paren_level_max_count_count_length = 0;\n  let paren_level_max_count_count_count = 0;\n  let paren_level_max_count_count_count_index = 0;\n  let paren_level_max_count_count_count_length = 0;\n  let paren_level_max_count_count_count_count = 0;\n  let paren_level_max_count_count_count_count_index = 0;\n  let paren_level_max_count_count_count_count_length = 0;\n  let paren_level_max_count_count_count_count_count = 0;\n  let paren_level_max_count_count_count_count_count_index = 0;\n  let paren_level_max_count_count_count_count_count_length = 0;\n  let paren_level_max_count_count_count_count_count_count = 0;\n  let paren_level_max_count_count_count_count_count_count_index = 0;\n  let paren_level_max_count_count_count_count_count_count_length = 0;\n  let paren_level_max_count_count_count_count_count_count_count = 0;\n  let paren_level_max_count_count_count_count_count_count_count_index = 0;\n  let paren_level_max_count_count_count_count_count_count_count_length = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count = 0;\n  let paren_level_max_count_count_count_count_count_count_count_index = 0;\n  let paren_level_max_count_count_count_count_count_count_count_length = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_count = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_index = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_length = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_count_count = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_count_index = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_count_length = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_count_count = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_count_index = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_count_count_length = 0;\n  let paren_level_max_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let paren_level_max_count_count_count_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2c00hgaf.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334913
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_count = 0;\n  let paren_level_index = 0;\n  let paren_level_char: string;\n  let paren_level_length: number;\n  let paren_level_char_index: number;\n  let paren_level_char_length: number;\n  let paren_level_char_length_index: number;\n  let paren_level_char_length_char: string;\n  let paren_level_char_length_char_index: number;\n  let paren_level_char_length_char_length: number;\n  let paren_level_char_length_char_length_index: number;\n  let paren_level_char_length_char_length_char: string;\n  let paren_level_char_length_char_length_char_index: number;\n  let paren_level_char_length_char_length_char_length: number;\n  let paren_level_char_length_char_length_char_length_index: number;\n  let paren_level_char_length_char_length_char_length_char: string;\n  let paren_level_char_length_char_length_char_length_index: number;\n  let paren_level_char_length_char_length_char_length_char_length: number;\n  let paren_level_char_length_char_length_char_length_char_length_index: number;\n  let paren_level_char_length_char_length_char_length_char_length_char: string;\n  let paren_level_char_length_char_length_char_length_char_length_index: number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length: number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_index: number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char: string;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_index: number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length: number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_index: number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char: string;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_index: number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length: number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_index: number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length: number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length_index: number;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length: number;\n  let paren_level_char_length_char_length_char_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplt2yxva_.ts(56,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334913
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphl61jp2u.js:26:12)\n    at Object.<anonymous> (/tmp/tmphl61jp2u.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp030yq2gm.js:28:12)\n    at Object.<anonymous> (/tmp/tmp030yq2gm.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334781
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const paren_level = paren_level.pop();\n      if (paren_level === 0) {\n        paren_stack.push(paren_string[i]);\n      }\n    } else {\n      paren_level.push(paren_level[paren_level.length - 1] + 1);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph50yz7wk.ts(15,27): error TS2448: Block-scoped variable 'paren_level' used before its declaration.\n",
      "timestamp": 1660334913
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n        paren_level_max_count = Math.max(paren_level_max_count, paren_level.length);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpy3g7tcq6.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy3g7tcq6.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334914
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  let paren_nesting = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n      paren_nesting++;\n    } else if (char === ')') {\n      paren_level--;\n      paren_nesting--;\n      if (paren_nesting < 0) {\n        throw new Error(`Invalid parentheses string: ${paren_string}`);\n      }\n    } else if (char === ' ') {\n      if (paren_stack.length > 0) {\n        paren_level = Math.max(paren_stack[paren_stack.length - 1], paren_level);\n        paren_nesting = Math.max(paren_nesting, paren_stack[paren_stack.length - 1]);\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  1,\n  2,\n  3,\n  3,\n  3,\n  4,\n  5,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_p68ygvy.js:36:12)\n    at Object.<anonymous> (/tmp/tmp_p68ygvy.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 1, 2,\n    3, 3, 3, 4, 5,\n    4, 4\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334914
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n        paren_level_max = Math.max(paren_level_max, paren_level[paren_level.length - 1]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpl8hw_gn7.js:30:12)\n    at Object.<anonymous> (/tmp/tmpl8hw_gn7.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334914
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpt86xwm10.js:27:12)\n    at Object.<anonymous> (/tmp/tmpt86xwm10.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334914
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphl61jp2u.js:26:12)\n    at Object.<anonymous> (/tmp/tmphl61jp2u.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n      paren_level_count = 0;\n    } else if (paren_string[i] === ')') {\n      paren_level_count++;\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n      paren_stack.push(paren_string[i]);\n    } else if (paren_string[i] === ' ') {\n      if (paren_stack.length > 0) {\n        paren_level_count++;\n      }\n      paren_stack.push(paren_string[i]);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpo7qd0bvl.js:37:12)\n    at Object.<anonymous> (/tmp/tmpo7qd0bvl.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334914
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.split(\" \");\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === \"(\") {\n        levels[groups.length - 1 - i] += 1;\n      } else if (group[j] === \")\") {\n        levels[groups.length - 1 - i] -= 1;\n      }\n    }\n  }\n  return levels.filter(l => l > 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpdajw3b3x.js:26:12)\n    at Object.<anonymous> (/tmp/tmpdajw3b3x.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334914
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.pop();\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpg9fs6y18.js:26:12)\n    at Object.<anonymous> (/tmp/tmpg9fs6y18.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 0, 1,\n    0, 1, 2, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334914
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = groups.reduce((max_level, group) => {\n    const level = group.length;\n    if (level > max_level) {\n      return level;\n    }\n    return max_level;\n  }, 0);\n  return max_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphcdk8ayj.ts(15,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334913
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n    } else if (char === ')') {\n      paren_level--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmps8l_lkpf.js:24:12)\n    at Object.<anonymous> (/tmp/tmps8l_lkpf.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334910
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number;\n  let paren_level_max_index: number;\n  let paren_level_max_value: number;\n  let paren_level_max_value_count: number;\n  let paren_level_max_value_position: number;\n  let paren_level_max_value_position_count: number;\n  let paren_level_max_value_position: number;\n  let paren_level_max_value_position_index: number;\n  let paren_level_max_value_position_value: number;\n  let paren_level_max_value_position_value_count: number;\n  let paren_level_max_value_position_value_index: number;\n  let paren_level_max_value_position_value_value: number;\n  let paren_level_max_value_position_value_value_count: number;\n  let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value: number;\n  let paren_level_max_value_position_value_value_count: number;\n  let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value: number;\n  let paren_level_max_value_position_value_value_count: number;\n  let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value: number;\n  let paren_level_max_value_position_value_value_count: number;\n  let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value: number;\n  let paren_level_max_value_position_value_value_count: number;\n  let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value: number;\n  let paren_level_max_value_position_value_value_count: number;\n  let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value: number;\n  let paren_level_max_value_position_value_value_count: number;\n  let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value: number;\n  let paren_level_max_value_position_value_value_count: number;\n  let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value: number;\n  let paren_level_max_value_position_value_value_count: number;\n  let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value: number;\n  let paren_level_max_value_position_value_value_count: number;\n  let paren_level_max_value_position_value_value_index: number;\n  let paren_level_max_value_position_value_value_value: number;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnxiqvwpk.ts(65,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334914
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max_count = Math.max(paren_level_max_count, paren_stack.length);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_level_count);\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpr86szt25.js:30:12)\n    at Object.<anonymous> (/tmp/tmpr86szt25.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334914
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_level.push(paren_stack.pop());\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfcg3ducb.ts(13,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpfcg3ducb.ts(19,26): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "timestamp": 1660334914
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_depth = Math.max.apply(null, groups.map(g => g.length));\n  const max_level = Math.ceil(Math.log(max_depth) / Math.LN2);\n  const levels = new Array(max_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === \"(\") {\n        levels[levels.length - 1]++;\n      } else if (group[j] === \")\") {\n        levels[levels.length - 1]--;\n      }\n    }\n  }\n  return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpm79pt02j.js:27:12)\n    at Object.<anonymous> (/tmp/tmpm79pt02j.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334914
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n    } else if (paren_string[i] === \")\") {\n      const level = paren_stack.pop();\n      if (level === undefined) {\n        throw new Error(\"Unbalanced parenthesis\");\n      }\n      paren_level[level] = paren_level[level] - 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpn7klvuuf.js:27:12)\n    at Object.<anonymous> (/tmp/tmpn7klvuuf.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1, -1, -1, -1, -1,\n    -1, -1, -1, -1, -1,\n    -1, -1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334914
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length);\n      paren_level_count = 0;\n    } else if (char === ')') {\n      paren_level_count = Math.max(paren_level_count, paren_stack.pop());\n    }\n    paren_level_count += 1;\n  }\n  return paren_level_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpw4z1m5h8.ts(22,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334915
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.pop();\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpg9fs6y18.js:26:12)\n    at Object.<anonymous> (/tmp/tmpg9fs6y18.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 0, 1,\n    0, 1, 2, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334914
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level_max--;\n    }\n    paren_level.push(paren_level_count);\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp43uvckqg.js:28:12)\n    at Object.<anonymous> (/tmp/tmp43uvckqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEq",
      "stdout": "",
      "timestamp": 1660334916
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      const paren_level_index = paren_level.pop();\n      const paren_level_diff = paren_level_index - paren_level[paren_level.length - 1];\n      if (paren_level_diff > 0) {\n        paren_level_count--;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_kqkrtvk.js:30:12)\n    at Object.<anonymous> (/tmp/tmp_kqkrtvk.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334916
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5az5n4je.js:29:12)\n    at Object.<anonymous> (/tmp/tmp5az5n4je.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334796
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.split(\" \");\n  const max_nesting_level = Math.max.apply(null, groups.map(g => g.length));\n  const nesting_levels = Array(max_nesting_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === \"(\") {\n        nesting_levels[groups.length - 1 - i] += 1;\n      } else if (group[j] === \")\") {\n        nesting_levels[groups.length - 1 - i] -= 1;\n      }\n    }\n  }\n  return nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsuw1k70a.js:26:12)\n    at Object.<anonymous> (/tmp/tmpsuw1k70a.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334917
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp2xngem7q.js:24:12)\n    at Object.<anonymous> (/tmp/tmp2xngem7q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n    } else if (char === ')') {\n      paren_level.pop();\n      paren_stack.push(paren_level.length);\n    } else {\n      paren_level[paren_stack.pop()] = paren_level[paren_stack.pop()] + 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphplrb1hc.js:28:12)\n    at Object.<anonymous> (/tmp/tmphplrb1hc.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN, NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334917
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level_count += 1;\n    } else if (paren_string[i] === \")\") {\n      paren_level[paren_level_count] += 1;\n      if (paren_level[paren_level_count] === 0) {\n        paren_level.pop();\n        paren_level_count -= 1;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <2 empty items>,\n  NaN,\n  NaN,\n  <2 empty items>,\n  NaN,\n  NaN,\n  <2 empty items>,\n  NaN,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp0lufv7k7.js:28:12)\n    at Object.<anonymous> (/tmp/tmp0lufv7k7.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    <2 empty items>, NaN,\n    NaN,             <2 empty items>,\n    NaN,             NaN,\n    <2 empty items>, NaN,\n    NaN,             NaN\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  o",
      "stdout": "",
      "timestamp": 1660334917
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n    } else if (paren_string[i] === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level[paren_level_count] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_tmsa26v.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_tmsa26v.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334917
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n    } else if (char === ')') {\n      paren_level--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmps8l_lkpf.js:24:12)\n    at Object.<anonymous> (/tmp/tmps8l_lkpf.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334910
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n    } else if (char === ')') {\n      paren_level.pop();\n      paren_stack.push(paren_stack[paren_stack.length - 1]);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp4etitai5.js:25:12)\n    at Object.<anonymous> (/tmp/tmp4etitai5.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334917
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = (paren_level_count > paren_level_max) ? paren_level_count : paren_level_max;\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level_count = (paren_level_count === undefined) ? 0 : paren_level_count;\n      paren_level[paren_stack.length - 1] += paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphwl_wdn6.ts(14,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmphwl_wdn6.ts(18,7): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334917
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp2xngem7q.js:24:12)\n    at Object.<anonymous> (/tmp/tmp2xngem7q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_stack.push(paren_level_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n      paren_level_count = paren_level_stack.pop();\n    } else if (char === ' ') {\n      paren_count--;\n      paren_level_count = paren_level_stack.pop();\n    } else {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm3gbx9n8.ts(15,7): error TS2304: Cannot find name 'paren_level_stack'.\n../../../../tmp/tmpm3gbx9n8.ts(19,27): error TS2304: Cannot find name 'paren_level_stack'.\n../../../../tmp/tmpm3gbx9n8.ts(22,27): error TS2304: Cannot find name 'paren_level_stack'.\n",
      "timestamp": 1660334916
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp62u873yk.js:28:12)\n    at Object.<anonymous> (/tmp/tmp62u873yk.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334917
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.split(\" \");\n  const max_level = 0;\n  for (const group of groups) {\n    const level = getMaxLevel(group);\n    if (level > max_level) {\n      max_level = level;\n    }\n  }\n  return max_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptssberrv.ts(10,19): error TS2552: Cannot find name 'getMaxLevel'. Did you mean 'max_level'?\n../../../../tmp/tmptssberrv.ts(12,7): error TS2588: Cannot assign to 'max_level' because it is a constant.\n../../../../tmp/tmptssberrv.ts(15,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334917
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = (paren_level_count < paren_level_max) ? paren_level_count : paren_level_max;\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count = Math.max(paren_stack.pop(), paren_level_count);\n      paren_level_count = Math.max(paren_level_count, paren_level_max);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmptkuxk3xp.js:28:12)\n    at Object.<anonymous> (/tmp/tmptkuxk3xp.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334917
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpdmxwf_ro.js:28:12)\n    at Object.<anonymous> (/tmp/tmpdmxwf_ro.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334780
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count = 1;\n    } else if (paren_string[i] === ')') {\n      paren_level_count = Math.max(paren_level_count, paren_stack.pop());\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpbnnwfuae.js:26:12)\n    at Object.<anonymous> (/tmp/tmpbnnwfuae.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334917
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5l88gjhe.js:30:12)\n    at Object.<anonymous> (/tmp/tmp5l88gjhe.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334787
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5l88gjhe.js:30:12)\n    at Object.<anonymous> (/tmp/tmp5l88gjhe.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334787
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count_index: number[] = [];\n  let paren_level_max_count_index2: number[] = [];\n  let paren_level_max_count_index3: number[] = [];\n  let paren_level_max_count_index4: number[] = [];\n  let paren_level_max_count_index5: number[] = [];\n  let paren_level_max_count_index6: number[] = [];\n  let paren_level_max_count_index7: number[] = [];\n  let paren_level_max_count_index8: number[] = [];\n  let paren_level_max_count_index9: number[] = [];\n  let paren_level_max_count_index10: number[] = [];\n  let paren_level_max_count_index11: number[] = [];\n  let paren_level_max_count_index12: number[] = [];\n  let paren_level_max_count_index13: number[] = [];\n  let paren_level_max_count_index14: number[] = [];\n  let paren_level_max_count_index15: number[] = [];\n  let paren_level_max_count_index16: number[] = [];\n  let paren_level_max_count_index17: number[] = [];\n  let paren_level_max_count_index18: number[] = [];\n  let paren_level_max_count_index19: number[] = [];\n  let paren_level_max_count_index20: number[] = [];\n  let paren_level_max_count_index21: number[] = [];\n  let paren_level_max_count_index22: number[] = [];\n  let paren_level_max_count_index23: number[] = [];\n  let paren_level_max_count_index24: number[] = [];\n  let paren_level_max_count_index25: number[] = [];\n  let paren_level_max_count_index26: number[] = [];\n  let paren_level_max_count_index27: number[] = [];\n  let paren_level_max_count_index28: number[] = [];\n  let paren_level_max_count_index29: number[] = [];\n  let paren_level_max_count_index30: number[] = [];\n  let paren_level_max_count_index31: number[] = [];\n  let paren_level_max_count_index32: number[] = [];\n  let paren_level_max_count_index33: number[] = [];\n  let paren_level_max_count_index34: number[] = [];\n  let paren_level_max_count_index35: number[] = [];\n  let paren_level_max_count_index36: number[] = [];\n  let paren_level_max_count_index37: number[] = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp14b3vz51.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334783
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (paren_string[i] === ')') {\n      paren_level.pop();\n      if (paren_stack.length > 0) {\n        paren_level.push(paren_stack.length);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n  3,\n  0,\n  0,\n  6,\n  7,\n  0,\n  0,\n  10,\n  11,\n  12\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpvb7whinl.js:26:12)\n    at Object.<anonymous> (/tmp/tmpvb7whinl.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     0,  2, 3, 0,  0,\n     6,  7, 0, 0, 10,\n    11, 12\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334917
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.split(\" \");\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(-1);\n  const stack: number[] = [];\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    const level = group.length;\n    while (levels[level] >= 0) {\n      levels[level]--;\n      stack.push(level);\n    }\n    levels[level]++;\n  }\n  return stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpm1ten6b6.js:25:12)\n    at Object.<anonymous> (/tmp/tmpm1ten6b6.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334918
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_paren_level = 0;\n  let paren_level_max_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnfnd0yt5.ts(43,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334917
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      levels[group[j]] += 1;\n    }\n  }\n  return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  '(': NaN,\n  ')': NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphwfy5do_.js:21:12)\n    at Object.<anonymous> (/tmp/tmphwfy5do_.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '(': NaN, ')': NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_level_count = 0;\n  let paren_level = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n      paren_level.push(paren_level_count);\n    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      paren_level.push(paren_level_count);\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbzcs6nvw.ts(8,9): error TS2451: Cannot redeclare block-scoped variable 'paren_level'.\n../../../../tmp/tmpbzcs6nvw.ts(9,9): error TS2451: Cannot redeclare block-scoped variable 'paren_level_count'.\n../../../../tmp/tmpbzcs6nvw.ts(10,7): error TS2451: Cannot redeclare block-scoped variable 'paren_level_count'.\n../../../../tmp/tmpbzcs6nvw.ts(11,7): error TS2451: Cannot redeclare block-scoped variable 'paren_level'.\n../../../../tmp/tmpbzcs6nvw.ts(15,7): error TS2588: Cannot assign to 'paren_level_count' because it is a constant.\n../../../../tmp/tmpbzcs6nvw.ts(16,24): error TS2345: Argument of type 'number[]' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpbzcs6nvw.ts(18,7): error TS2588: Cannot assign to 'paren_level_count' because it is a constant.\n../../../../tmp/tmpbzcs6nvw.ts(19,24): error TS2345: Argument of type 'number[]' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpbzcs6nvw.ts(20,11): error TS2367: This condition will always return 'false' since the types 'number[]' and 'number' have no overlap.\n",
      "timestamp": 1660334917
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count_index: number[] = [];\n  let paren_level_max_count_index2: number[] = [];\n  let paren_level_max_count_index3: number[] = [];\n  let paren_level_max_count_index4: number[] = [];\n  let paren_level_max_count_index5: number[] = [];\n  let paren_level_max_count_index6: number[] = [];\n  let paren_level_max_count_index7: number[] = [];\n  let paren_level_max_count_index8: number[] = [];\n  let paren_level_max_count_index9: number[] = [];\n  let paren_level_max_count_index10: number[] = [];\n  let paren_level_max_count_index11: number[] = [];\n  let paren_level_max_count_index12: number[] = [];\n  let paren_level_max_count_index13: number[] = [];\n  let paren_level_max_count_index14: number[] = [];\n  let paren_level_max_count_index15: number[] = [];\n  let paren_level_max_count_index16: number[] = [];\n  let paren_level_max_count_index17: number[] = [];\n  let paren_level_max_count_index18: number[] = [];\n  let paren_level_max_count_index19: number[] = [];\n  let paren_level_max_count_index20: number[] = [];\n  let paren_level_max_count_index21: number[] = [];\n  let paren_level_max_count_index22: number[] = [];\n  let paren_level_max_count_index23: number[] = [];\n  let paren_level_max_count_index24: number[] = [];\n  let paren_level_max_count_index25: number[] = [];\n  let paren_level_max_count_index26: number[] = [];\n  let paren_level_max_count_index27: number[] = [];\n  let paren_level_max_count_index28: number[] = [];\n  let paren_level_max_count_index29: number[] = [];\n  let paren_level_max_count_index30: number[] = [];\n  let paren_level_max_count_index31: number[] = [];\n  let paren_level_max_count_index32: number[] = [];\n  let paren_level_max_count_index33: number[] = [];\n  let paren_level_max_count_index34: number[] = [];\n  let paren_level_max_count_index35: number[] = [];\n  let paren_level_max_count_index36: number[] = [];\n  let paren_level_max_count_index37: number[] = [];\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp45pqbsby.ts(59,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334798
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: string[] = [];\n    const paren_level: number[] = [];\n    let paren_level_count = 0;\n    let paren_level_max = 0;\n    let paren_level_max_index = 0;\n    let paren_level_max_index2 = 0;\n    let paren_level_max_index3 = 0;\n    let paren_level_max_index4 = 0;\n    let paren_level_max_index5 = 0;\n    let paren_level_max_index6 = 0;\n    let paren_level_max_index7 = 0;\n    let paren_level_max_index8 = 0;\n    let paren_level_max_index9 = 0;\n    let paren_level_max_index10 = 0;\n    let paren_level_max_index11 = 0;\n    let paren_level_max_index12 = 0;\n    let paren_level_max_index13 = 0;\n    let paren_level_max_index14 = 0;\n    let paren_level_max_index15 = 0;\n    let paren_level_max_index16 = 0;\n    let paren_level_max_index17 = 0;\n    let paren_level_max_index18 = 0;\n    let paren_level_max_index19 = 0;\n    let paren_level_max_index20 = 0;\n    let paren_level_max_index21 = 0;\n    let paren_level_max_index22 = 0;\n    let paren_level_max_index23 = 0;\n    let paren_level_max_index24 = 0;\n    let paren_level_max_index25 = 0;\n    let paren_level_max_index26 = 0;\n    let paren_level_max_index27 = 0;\n    let paren_level_max_index28 = 0;\n    let paren_level_max_index29 = 0;\n    let paren_level_max_index30 = 0;\n    let paren_level_max_index31 = 0;\n    let paren_level_max_index32 = 0;\n    let paren_level_max_index33 = 0;\n    let paren_level_max_index34 = 0;\n    let paren_level_max_index35 = 0;\n    let paren_level_max_index36 = 0;\n    let paren_level_max_index37 = 0;\n    let paren_level_max_index38 = 0;\n    let paren_level_max_index39 = 0;\n    let paren_level_max_index40 = 0;\n    let paren_level_max_index41 = 0;\n    let paren_level_max_index42 = 0;\n    let paren_level_max_index43 = 0;\n    let paren_level_max_index44 = 0;\n    let paren_level_max_index45 = 0;\n    let paren_level_max_index46 = 0;\n    let paren_level_max_index47 = 0;\n    let paren_level_max_index48 = 0;\n    let paren_level_max_index49 = 0;\n    let paren_level_max_index50 = 0;\n    let paren_level_max_index51 = 0;\n    let paren_level_max_index52 = 0;\n    let paren_level_max_index53 = 0;\n    let paren_level_max_index54 = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp77x38my.ts(77,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334917
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_yp2k394.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_yp2k394.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334781
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      levels[group[j]] += 1;\n    }\n  }\n  return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  '(': NaN,\n  ')': NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphwfy5do_.js:21:12)\n    at Object.<anonymous> (/tmp/tmphwfy5do_.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '(': NaN, ')': NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  const paren_level_max_count: number[] = [];\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count_index2 = 0;\n  let paren_level_max_count_index3 = 0;\n  let paren_level_max_count_index4 = 0;\n  let paren_level_max_count_index5 = 0;\n  let paren_level_max_count_index6 = 0;\n  let paren_level_max_count_index7 = 0;\n  let paren_level_max_count_index8 = 0;\n  let paren_level_max_count_index9 = 0;\n  let paren_level_max_count_index10 = 0;\n  let paren_level_max_count_index11 = 0;\n  let paren_level_max_count_index12 = 0;\n  let paren_level_max_count_index13 = 0;\n  let paren_level_max_count_index14 = 0;\n  let paren_level_max_count_index15 = 0;\n  let paren_level_max_count_index16 = 0;\n  let paren_level_max_count_index17 = 0;\n  let paren_level_max_count_index18 = 0;\n  let paren_level_max_count_index19 = 0;\n  let paren_level_max_count_index20 = 0;\n  let paren_level_max_count_index21 = 0;\n  let paren_level_max_count_index22 = 0;\n  let paren_level_max_count_index23 = 0;\n  let paren_level_max_count_index24 = 0;\n  let paren_level_max_count_index25 = 0;\n  let paren_level_max_count_index26 = 0;\n  let paren_level_max_count_index27 = 0;\n  let paren_level_max_count_index28 = 0;\n  let paren_level_max_count_index29 = 0;\n  let paren_level_max_count_index30 = 0;\n  let paren_level_max_count_index31 = 0;\n  let paren_level_max_count_index32 = 0;\n  let paren_level_max_count_index33 = 0;\n  let paren_level_max_count_index34 = 0;\n  let paren_level_max_count_index35 = 0;\n  let paren_level_max_count_index36 = 0;\n  let paren_level_max_count_index37 = 0;\n  let paren_level_max_count_index38 = 0;\n  let paren_level_max_count_index39 = 0;\n  let paren_level_max_count_index40 = 0;\n  let paren_level_max_count_index41 = 0;\n  let paren_level_max_count_index42 = 0;\n  let paren_level_max_count_index43 = 0;\n  let paren_level_max_count_index44 = 0;\n  let paren_level_max_count_index45 = 0;\n  let paren_level_max_count_index46 = 0;\n  let paren_level_max_count_index47 = 0;\n  let paren_level_max_count_index48 = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp_0anm5b.ts(71,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334917
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = groups.length - 1;\n  const levels = new Array<number>(max_level);\n  for (let i = 0; i < max_level; i++) {\n    levels[i] = 0;\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    const level = levels[i];\n    if (group === '(') {\n      levels[level]++;\n    } else if (group === ')') {\n      levels[level]--;\n    }\n  }\n  return levels.slice(0, max_level);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpupms7ksg.js:28:12)\n    at Object.<anonymous> (/tmp/tmpupms7ksg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334918
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (paren_string[i] === ')') {\n      if (paren_level_count < paren_level_max) {\n        paren_level_count++;\n        paren_level.push(paren_level_count);\n      }\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7sxrjjwf.js:29:12)\n    at Object.<anonymous> (/tmp/tmp7sxrjjwf.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334917
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1yw06gn9.ts(17,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334917
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level_max = Math.max(paren_level_max, paren_stack.pop());\n      if (paren_level_count === 0) {\n        paren_level_max_index = paren_level_max_index + 1;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpn9nwzmnn.js:31:12)\n    at Object.<anonymous> (/tmp/tmpn9nwzmnn.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334919
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_paren_level = 0;\n  let paren_level_max_paren_index = 0;\n  let paren_level_max_paren_level_paren_index = 0;\n  let paren_level_max_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_index = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkvmbims7.ts(46,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334920
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n      paren_level_count = 0;\n      paren_level.push(paren_level_max);\n      paren_stack.splice(paren_stack.length - 1, 1);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  3,\n  6,\n  6,\n  6,\n  7,\n  10,\n  10,\n  11,\n  12,\n  12\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp4vrwcktv.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4vrwcktv.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     2,  3,  3,  6,  6,\n     6,  7, 10, 10, 11,\n    12, 12\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334920
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_depth = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_depth);\n      paren_depth++;\n    } else if (paren_string[i] === ')') {\n      paren_depth = Math.max(paren_stack.pop(), paren_depth);\n    }\n  }\n  return paren_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5kbewuai.ts(17,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334920
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        levels[groups.length - 1 - i] += 1;\n      } else if (group[j] === ')') {\n        levels[groups.length - 1 - i] -= 1;\n      }\n    }\n  }\n  return levels.filter(l => l > 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_0_avycq.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_0_avycq.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334920
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_value: number = 0;\n  let paren_level_max_value_count: number = 0;\n  let paren_level_max_value_max: number = 0;\n  let paren_level_max_value_max_index: number = 0;\n  let paren_level_max_value_max_value: number = 0;\n  let paren_level_max_value_max_value_count: number = 0;\n  let paren_level_max_value_max_value_max: number = 0;\n  let paren_level_max_value_max_value_max_index: number = 0;\n  let paren_level_max_value_max_value_max_value: number = 0;\n  let paren_level_max_value_max_value_max_value_count: number = 0;\n  let paren_level_max_value_max_value_max_value_max: number = 0;\n  let paren_level_max_value_max_value_max_value_max_index: number = 0;\n  let paren_level_max_value_max_value_max_value_max_value: number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_count: number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max: number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_index: number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value: number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_count: number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max: number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max_index: number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max_value: number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max_value_count: number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max_value_max: number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max_value_max_index: number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max_value_max_value: number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max_value_max_value_count: number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max_value_max_value_max: number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_max_value_max_value_max_value_max_index: number = 0;\n  let paren_level_max_value_max_value_max_value_max_value_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp5vcjtgm.ts(52,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334920
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max_count: number = 0;\n  let paren_level_max_level: number = 0;\n  let paren_level_max_level_length: number = 0;\n  let paren_level_max_level_length_count: number = 0;\n  let paren_level_max_level_length_count2: number = 0;\n  let paren_level_max_level_length_count3: number = 0;\n  let paren_level_max_level_length_count4: number = 0;\n  let paren_level_max_level_length_count5: number = 0;\n  let paren_level_max_level_length_count6: number = 0;\n  let paren_level_max_level_length_count7: number = 0;\n  let paren_level_max_level_length_count8: number = 0;\n  let paren_level_max_level_length_count9: number = 0;\n  let paren_level_max_level_length_count10: number = 0;\n  let paren_level_max_level_length_count11: number = 0;\n  let paren_level_max_level_length_count12: number = 0;\n  let paren_level_max_level_length_count13: number = 0;\n  let paren_level_max_level_length_count14: number = 0;\n  let paren_level_max_level_length_count15: number = 0;\n  let paren_level_max_level_length_count16: number = 0;\n  let paren_level_max_level_length_count17: number = 0;\n  let paren_level_max_level_length_count18: number = 0;\n  let paren_level_max_level_length_count19: number = 0;\n  let paren_level_max_level_length_count20: number = 0;\n  let paren_level_max_level_length_count21: number = 0;\n  let paren_level_max_level_length_count22: number = 0;\n  let paren_level_max_level_length_count23: number = 0;\n  let paren_level_max_level_length_count24: number = 0;\n  let paren_level_max_level_length_count25: number = 0;\n  let paren_level_max_level_length_count26: number = 0;\n  let paren_level_max_level_length_count27: number = 0;\n  let paren_level_max_level_length_count28: number = 0;\n  let paren_level_max_level_length_count29: number = 0;\n  let paren_level_max_level_length_count30: number = 0;\n  let paren_level_max_level_length_count31: number = 0;\n  let paren_level_max_level_length_count32: number = 0;\n  let paren_level_max_level_length_count33: number = 0;\n  let paren_level_max_level_length_count34: number = 0;\n  let paren_level_max_level_length_count35: number = 0;\n  let paren_level_max_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsxwuayiw.ts(60,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsex96nys.js:25:12)\n    at Object.<anonymous> (/tmp/tmpsex96nys.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334798
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n    } else if (char === ')') {\n      paren_level_count--;\n      paren_level_count = Math.min(paren_level_count, paren_level_max);\n      paren_level[paren_level_count] = i;\n      paren_stack.splice(paren_level_count, 1);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  26,\n  25,\n  20\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7m5m648w.js:30:12)\n    at Object.<anonymous> (/tmp/tmp7m5m648w.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 26, 25, 20 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334920
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array<number>(max_level + 1);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        levels[levels.length - 1]++;\n      } else if (group[j] === ')') {\n        levels[levels.length - 1]--;\n      }\n    }\n  }\n  return levels.slice(0, levels.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <10 empty items>\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp16zo09l6.js:26:12)\n    at Object.<anonymous> (/tmp/tmp16zo09l6.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <10 empty items> ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334921
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level_max--;\n    }\n    paren_level.push(paren_level_count);\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp43uvckqg.js:28:12)\n    at Object.<anonymous> (/tmp/tmp43uvckqg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEq",
      "stdout": "",
      "timestamp": 1660334916
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level_max = Math.max(...paren_level);\n      }\n      paren_level.push(paren_level_count);\n    }\n  }\n  return paren_level_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9uzlnui1.ts(25,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334920
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const paren_level = paren_stack.pop();\n      const max_level = paren_level[paren_level.length - 1];\n      paren_level.push(max_level + 1);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgl0y4xjh.ts(17,19): error TS2339: Property 'push' does not exist on type 'string'.\n",
      "timestamp": 1660334920
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  let paren_count = 0;\n  let paren_level_index = 0;\n  let paren_level_string = \"\";\n  let paren_level_char: string = \"\";\n  let paren_level_char_length: number = 0;\n  let paren_level_char_length_index: number = 0;\n  let paren_level_char_length_string: string = \"\";\n  let paren_level_char_length_char_length: number = 0;\n  let paren_level_char_length_char_length_index: number = 0;\n  let paren_level_char_length_char_length_string: string = \"\";\n  let paren_level_char_length_char_length_char_length: number = 0;\n  let paren_level_char_length_char_length_char_length_index: number = 0;\n  let paren_level_char_length_char_length_char_length_string: string = \"\";\n  let paren_level_char_length_char_length_char_length_char_length: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_index: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_string: string = \"\";\n  let paren_level_char_length_char_length_char_length_char_length_char_length: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_index: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_string: string = \"\";\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_index: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_string: string = \"\";\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_index: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_string: string = \"\";\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length_index: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length_string: string = \"\";\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length_char_length: number = 0;\n  let paren_level_char_length_char_length_char_length_char_length_char_length_char_length_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa_66hco7.ts(51,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334920
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level_count.push(paren_level_count);\n    } else if (paren_string[i] === \")\") {\n      paren_level_count = paren_level_count[paren_level_count];\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n      paren_stack.push(paren_string[i]);\n    } else if (paren_string[i] === \" \") {\n      if (paren_stack.length > 0) {\n        const paren_level_count_to_add = paren_level_count;\n        paren_level_count = paren_level_count[paren_level_count];\n        paren_level_count++;\n        paren_level.push(paren_level_count_to_add);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpozmfw8f9.ts(13,25): error TS2339: Property 'push' does not exist on type 'number'.\n",
      "timestamp": 1660334921
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    const paren_stack: number[] = [];\n    const paren_level: number[] = [];\n    let paren_level_count: number = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        const char = paren_string[i];\n        if (char === '(') {\n            paren_stack.push(paren_level_count);\n            paren_level_count += 1;\n        } else if (char === ')') {\n            paren_level_count -= 1;\n            paren_level[paren_stack.pop()] = paren_level_count;\n        }\n    }\n    return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpltpo0zdl.js:26:12)\n    at Object.<anonymous> (/tmp/tmpltpo0zdl.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334921
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count.push(paren_level_count);\n    } else if (char === ')') {\n      paren_level_count = paren_level_count[paren_level_count];\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv4w24caw.ts(14,25): error TS2339: Property 'push' does not exist on type 'number'.\n",
      "timestamp": 1660334920
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_index: number[] = [];\n  let paren_level_max_index2: number[] = [];\n  let paren_level_max_index3: number[] = [];\n  let paren_level_max_index4: number[] = [];\n  let paren_level_max_index5: number[] = [];\n  let paren_level_max_index6: number[] = [];\n  let paren_level_max_index7: number[] = [];\n  let paren_level_max_index8: number[] = [];\n  let paren_level_max_index9: number[] = [];\n  let paren_level_max_index10: number[] = [];\n  let paren_level_max_index11: number[] = [];\n  let paren_level_max_index12: number[] = [];\n  let paren_level_max_index13: number[] = [];\n  let paren_level_max_index14: number[] = [];\n  let paren_level_max_index15: number[] = [];\n  let paren_level_max_index16: number[] = [];\n  let paren_level_max_index17: number[] = [];\n  let paren_level_max_index18: number[] = [];\n  let paren_level_max_index19: number[] = [];\n  let paren_level_max_index20: number[] = [];\n  let paren_level_max_index21: number[] = [];\n  let paren_level_max_index22: number[] = [];\n  let paren_level_max_index23: number[] = [];\n  let paren_level_max_index24: number[] = [];\n  let paren_level_max_index25: number[] = [];\n  let paren_level_max_index26: number[] = [];\n  let paren_level_max_index27: number[] = [];\n  let paren_level_max_index28: number[] = [];\n  let paren_level_max_index29: number[] = [];\n  let paren_level_max_index30: number[] = [];\n  let paren_level_max_index31: number[] = [];\n  let paren_level_max_index32: number[] = [];\n  let paren_level_max_index33: number[] = [];\n  let paren_level_max_index34: number[] = [];\n  let paren_level_max_index35: number[] = [];\n  let paren_level_max_index36: number[] = [];\n  let paren_level_max_index37: number[] = [];\n  let paren_level_max_index38: number[] = [];\n  let paren_level_max_index39: number[] = [];\n  let paren\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd5o0yu9u.ts(63,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334920
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp95l_x46f.js:29:12)\n    at Object.<anonymous> (/tmp/tmp95l_x46f.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n  let paren_level_max_count: number;\n  let paren_level_max_index: number[] = [];\n  let paren_level_max_index1: number[] = [];\n  let paren_level_max_index2: number[] = [];\n  let paren_level_max_index3: number[] = [];\n  let paren_level_max_index4: number[] = [];\n  let paren_level_max_index5: number[] = [];\n  let paren_level_max_index6: number[] = [];\n  let paren_level_max_index7: number[] = [];\n  let paren_level_max_index8: number[] = [];\n  let paren_level_max_index9: number[] = [];\n  let paren_level_max_index10: number[] = [];\n  let paren_level_max_index11: number[] = [];\n  let paren_level_max_index12: number[] = [];\n  let paren_level_max_index13: number[] = [];\n  let paren_level_max_index14: number[] = [];\n  let paren_level_max_index15: number[] = [];\n  let paren_level_max_index16: number[] = [];\n  let paren_level_max_index17: number[] = [];\n  let paren_level_max_index18: number[] = [];\n  let paren_level_max_index19: number[] = [];\n  let paren_level_max_index20: number[] = [];\n  let paren_level_max_index21: number[] = [];\n  let paren_level_max_index22: number[] = [];\n  let paren_level_max_index23: number[] = [];\n  let paren_level_max_index24: number[] = [];\n  let paren_level_max_index25: number[] = [];\n  let paren_level_max_index26: number[] = [];\n  let paren_level_max_index27: number[] = [];\n  let paren_level_max_index28: number[] = [];\n  let paren_level_max_index29: number[] = [];\n  let paren_level_max_index30: number[] = [];\n  let paren_level_max_index31: number[] = [];\n  let paren_level_max_index32: number[] = [];\n  let paren_level_max_index33: number[] = [];\n  let paren_level_max_index34: number[] = [];\n  let paren_level_max_index35: number[] = [];\n  let paren_level_max_index36: number[] = [];\n  let paren_level_max_index37: number[] = [];\n  let paren_level_max_index38: number[] = [];\n  let paren_level_max_index\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4491jhc3.ts(63,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334921
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_count: number;\n  let paren_level_max_string: string;\n  let paren_level_max_string_index: number;\n  let paren_level_max_string_length: number;\n  let paren_level_max_string_position: number;\n  let paren_level_max_string_position_index: number;\n  let paren_level_max_string_position_length: number;\n  let paren_level_max_string_position_position_length: number;\n  let paren_level_max_string_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_position_position_position_position_length: number;\n  let paren_level_max_string_position_position_position_position_position_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzsvxfjw2.ts(54,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334921
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpzbunejcf.js:28:12)\n    at Object.<anonymous> (/tmp/tmpzbunejcf.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334791
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.pop();\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwepbq_yw.js:27:12)\n    at Object.<anonymous> (/tmp/tmpwepbq_yw.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 0, 1,\n    0, 1, 2, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334921
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count = Math.max(paren_stack.pop(), paren_level_count);\n    }\n    paren_level.push(paren_level_count);\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  2,\n  3,\n  3,\n  3,\n  3,\n  4,\n  5,\n  6,\n  6,\n  6,\n  6,\n  6,\n  7,\n  7,\n  7,\n  8,\n  9,\n  10,\n  10,\n  10,\n  11,\n  11,\n  12,\n  12,\n  12\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp828pwzgf.js:26:12)\n    at Object.<anonymous> (/tmp/tmp828pwzgf.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,  2,  2,  3,  3,  3,  3,  4,\n     5,  6,  6,  6,  6,  6,  7,  7,\n     7,  8,  9, 10, 10, 10, 11, 11,\n    12, 12, 12\n  ],\n  expected: ",
      "stdout": "",
      "timestamp": 1660334921
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n        paren_level_max = Math.max(...paren_level);\n      }\n    }\n  }\n  return paren_level_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfc8p9lhl.ts(25,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "timestamp": 1660334921
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count++;\n      paren_level.push(paren_level_count);\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n      paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpv466iv6x.js:30:12)\n    at Object.<anonymous> (/tmp/tmpv466iv6x.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     1,  2, 3, 4,  5,\n     6,  7, 8, 9, 10,\n    11, 12\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334921
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')') {\n      const current_level = paren_stack.pop();\n      const current_paren_count = paren_stack[paren_stack.length - 1];\n      if (current_level > paren_level[paren_stack.length - 1]) {\n        paren_level[paren_stack.length - 1] = current_level;\n      }\n      paren_count = current_paren_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkrg1aq2_.ts(13,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpkrg1aq2_.ts(19,11): error TS2365: Operator '>' cannot be applied to types 'string' and 'number'.\n../../../../tmp/tmpkrg1aq2_.ts(20,9): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpkrg1aq2_.ts(22,7): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334921
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp95l_x46f.js:29:12)\n    at Object.<anonymous> (/tmp/tmp95l_x46f.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  const paren_level_count: number[] = [];\n  const paren_level_max_count: number[] = [];\n  const paren_level_max_count_index: number[] = [];\n  const paren_level_max_count_index2: number[] = [];\n  const paren_level_max_count_index3: number[] = [];\n  const paren_level_max_count_index4: number[] = [];\n  const paren_level_max_count_index5: number[] = [];\n  const paren_level_max_count_index6: number[] = [];\n  const paren_level_max_count_index7: number[] = [];\n  const paren_level_max_count_index8: number[] = [];\n  const paren_level_max_count_index9: number[] = [];\n  const paren_level_max_count_index10: number[] = [];\n  const paren_level_max_count_index11: number[] = [];\n  const paren_level_max_count_index12: number[] = [];\n  const paren_level_max_count_index13: number[] = [];\n  const paren_level_max_count_index14: number[] = [];\n  const paren_level_max_count_index15: number[] = [];\n  const paren_level_max_count_index16: number[] = [];\n  const paren_level_max_count_index17: number[] = [];\n  const paren_level_max_count_index18: number[] = [];\n  const paren_level_max_count_index19: number[] = [];\n  const paren_level_max_count_index20: number[] = [];\n  const paren_level_max_count_index21: number[] = [];\n  const paren_level_max_count_index22: number[] = [];\n  const paren_level_max_count_index23: number[] = [];\n  const paren_level_max_count_index24: number[] = [];\n  const paren_level_max_count_index25: number[] = [];\n  const paren_level_max_count_index26: number[] = [];\n  const paren_level_max_count_index27: number[] = [];\n  const paren_level_max_count_index28: number[] = [];\n  const paren_level_max_count_index29: number[] = [];\n  const paren_level_max_count_index30: number[] = [];\n  const paren_level_max_count_index31: number[] = [];\n  const paren_level_max_count_index32: number[] = [];\n  const paren_level_max_count_index33: number[] = [];\n  const paren_level_max_count_index34: number[] = [];\n  const paren_level_max_count_index35: number[] = [];\n  const paren_level_max_count_index36: number[] = [];\n  const paren_level_max_count_index37: number[] = [];\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1o2lxb5f.ts(59,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334801
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n    } else if (char === ' ') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else {\n      paren_count = paren_stack.pop();\n    }\n    paren_level.push(paren_count);\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpl95goqu2.ts(13,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpl95goqu2.ts(16,7): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpl95goqu2.ts(18,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpl95goqu2.ts(21,7): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334921
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max = (paren_level_count > paren_level_max) ? paren_level_count : paren_level_max;\n      paren_level_count = 0;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level_max = (paren_level_count > paren_level_max) ? paren_level_count : paren_level_max;\n    }\n    paren_level_count += 1;\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsbjefdem.js:29:12)\n    at Object.<anonymous> (/tmp/tmpsbjefdem.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334903
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5l88gjhe.js:30:12)\n    at Object.<anonymous> (/tmp/tmp5l88gjhe.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334787
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  let paren_depth = 0;\n  let paren_level = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level);\n      paren_depth++;\n    } else if (char === ')') {\n      paren_depth--;\n      if (paren_depth === 0) {\n        paren_stack.push(paren_level);\n      }\n    } else if (char === ' ') {\n      paren_level++;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8oajsabj.ts(13,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmp8oajsabj.ts(18,26): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n../../../../tmp/tmp8oajsabj.ts(24,3): error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334921
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count < 0) {\n        throw new Error(`Unbalanced parenthesis at ${i}`);\n      }\n      if (paren_level_count === 0) {\n        paren_level_max++;\n      }\n      paren_level[paren_level_max] = paren_level_count;\n      paren_stack.push(paren_string[i]);\n    } else {\n      if (paren_level_count === 0) {\n        throw new Error(`Unbalanced parenthesis at ${i}`);\n      }\n      paren_level[paren_level_max] = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpk9azplhq.js:30\n                throw new Error(`Unbalanced parenthesis at ${i}`);\n                ^\n\nError: Unbalanced parenthesis at 6\n    at parse_nested_parens (/tmp/tmpk9azplhq.js:30:23)\n    at test (/tmp/tmpk9azplhq.js:40:22)\n    at Object.<anonymous> (/tmp/tmpk9azplhq.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const level = paren_stack.pop();\n      paren_level[level] = paren_level[level] - 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnqtflil2.js:25:12)\n    at Object.<anonymous> (/tmp/tmpnqtflil2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1, -1, -1, -1, -1,\n    -1, -1, -1, -1, -1,\n    -1, -1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334783
    },
    {
      "exit_code": 2,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n    } else if (char === ')') {\n      const paren_level = paren_stack.pop();\n      const paren_level_diff = paren_level.length - paren_level[paren_level.length - 1];\n      paren_level.push(paren_level[paren_level.length - 1] + paren_level_diff);\n    } else {\n      paren_level.push(0);\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpymwkmf6t.ts(16,53): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpymwkmf6t.ts(17,19): error TS2339: Property 'push' does not exist on type 'string'.\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp95l_x46f.js:29:12)\n    at Object.<anonymous> (/tmp/tmp95l_x46f.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === \")\") {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.pop();\n      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpg9fs6y18.js:26:12)\n    at Object.<anonymous> (/tmp/tmpg9fs6y18.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 0, 1,\n    0, 1, 2, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334914
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n    } else if (char === ' ') {\n      paren_level_count = paren_stack.pop();\n      paren_level_count = paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp9k_xqjjm.js:29:12)\n    at Object.<anonymous> (/tmp/tmp9k_xqjjm.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.split(\" \");\n  const max_level = Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === \"(\") {\n        levels[j] += 1;\n      } else if (group[j] === \")\") {\n        levels[j] -= 1;\n      }\n    }\n  }\n  return levels.filter(l => l > 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp20lp71im.js:26:12)\n    at Object.<anonymous> (/tmp/tmp20lp71im.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 2, 1, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n      paren_level_count++;\n    } else if (char === ')') {\n      const current_level = paren_level.pop();\n      const current_level_length = paren_level.length - 1;\n      if (current_level_length >= 0) {\n        paren_level[current_level_length] = current_level;\n      }\n      paren_level_count--;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwag7_v_c.js:31:12)\n    at Object.<anonymous> (/tmp/tmpwag7_v_c.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max--;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwj4perp_.js:28:12)\n    at Object.<anonymous> (/tmp/tmpwj4perp_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334784
    },
    {
      "exit_code": 1,
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level = groups.length - 1;\n  const levels = new Array<number>(max_level);\n  for (let i = 0; i < max_level; i++) {\n    levels[i] = 0;\n  }\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (group[j] === \"(\") {\n        levels[i] += 1;\n      } else if (group[j] === \")\") {\n        levels[i] -= 1;\n      }\n    }\n  }\n  return levels.slice(0, max_level);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp72il44qy.js:29:12)\n    at Object.<anonymous> (/tmp/tmp72il44qy.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    }
  ]
}