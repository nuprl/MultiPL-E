name: HumanEval_34_unique
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique elements\
  \ in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L,\
  \ 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique(long[] l) \n"
tests: "unittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L,\
  \ 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}"
completions: ["{\n    SortedSet!(typeof(l[0])) s = new SortedSet!(typeof(l[0]));\n\
    \    foreach(x; l)\n        s.insert(x);\n    return s.array;\n}\n/*\n    Given\
    \ an array of indices of constant length, return an array \n    of sorted unique\
    \ elements in the indexed array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L], [0L, 3L, 7L])\n    [5L, 2L, 0L]\n*/\nlong[] unique(long[] l, long[] i)\
    \ \n{\n    SortedSet!(typeof(l[0])) s = new SortedSet!(typeof(l[0]));\n    foreach(x;\
    \ i)\n        s.insert(l[x]);\n    return s.array;\n}\n/*\n    Given an array\
    \ of indices and a sorted array, return a sorted array of \n    unique elements\
    \ of the indexed array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L],\
    \ [0L, 3L, 7L], sort=true)\n    [0L, 2L, 5L]\n*/\nlong[] unique(long[] l, long[]\
    \ i, bool sort = false) \n{\n    SortedSet!(typeof(l[0])) s = new SortedSet!(typeof(l[0]));\n\
    \    foreach(x; i)\n        s.insert(l[x]);\n    if(sort)\n        return s.array;\n\
    \    else\n        return s.byKey;\n}\n/*\n    Given a sorted array, return a\
    \ sorted array of unique elements\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L], sort=true)\n    [0L, 2L, 3L, 5L, 9L, 123L]\n*/\nlong[] unique(long[]\
    \ l, bool sort = false) \n{\n    SortedSet!(typeof(l[0])) s = new", "{\n    int\
    \ n = l.length;\n    n = n.pow(2);\n    long[n] tmp;\n    int i = 0;\n    int\
    \ j = 0;\n    for (i in 0..n-1) \n    {\n        if (l[i] != l[i+1]) \n      \
    \  {\n            tmp[j] = l[i];\n            j++;\n        }\n    }\n    return\
    \ tmp;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique(['a',\
    \ 'b', 'a', 'd', 'b', 'b', 'z', 'A', 'D'])\n    ['A', 'D', 'a', 'b', 'd', 'z']\n\
    \    \n*/\nchar[] unique(char[] l) \n{\n    int n = l.length;\n    n = n.pow(2);\n\
    \    char[n] tmp;\n    int i = 0;\n    int j = 0;\n    for (i in 0..n-1) \n  \
    \  {\n        if (l[i] != l[i+1]) \n        {\n            tmp[j] = l[i];\n  \
    \          j++;\n        }\n    }\n    return tmp;\n}\n/*\nReturn sorted unique\
    \ elements in an array\n    >>> unique([1.0, 2.0, 1.0, 9.0, 2.0, 9.0, 0.0, 123.0])\n\
    \    [0.0, 1.0, 2.0, 9.0, 123.0]\n    \n*/\ndouble[] unique(double[] l) \n{\n\
    \    int n = l.length;\n    n = n.pow(2);\n    double[n] tmp;\n    int i = 0;\n\
    \    int j = 0;\n    for (i in 0..n-1) \n    {\n        if (l[i] != l[i+1]) \n\
    \        {\n            tmp[j] = l[i];\n            j++;\n        }\n    }\n \
    \   return tmp;\n}\n/*\nReturn sorted unique elements in an array\n    >>> unique([1,\
    \ 2, 1, 9, 2, 9, 0, 123", "{\n    int[] idx = array(l.sort).uniqIndices;\n   \
    \ return l[idx];\n}", "{\n    // https://rosettacode.org/wiki/Unique_elements#D\n\
    \    long[] d = unique(sort(l));\n    return d;\n}", "{\n\tauto a = l[0 .. l.length].dup;\
    \ // This avoids overwriting data during sorting\n\ta.sort;\n\treturn a.uniq;\n\
    }", "{\n\tif (l.length == 0) \n\t{\n\t\treturn [];\n\t}\n\tauto elems = set(l);\n\
    \treturn elems.array;\n}\n/*\nReturn sorted unique elements in an array\n    >>>\
    \ unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n\
    \    \n*/\nstring[] unique(string[] l) \n{\n\tif (l.length == 0) \n\t{\n\t\treturn\
    \ [];\n\t}\n\tauto elems = set(l);\n\treturn elems.array;\n}\n/*\nReturn sorted\
    \ unique elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/", "{\n\tlong[] tmp = new long[l.length];\n\
    \ttmp[] = l;\n\tsort(tmp);\n\treturn std.algorithm.unique(tmp);\n}", "{\n    return\
    \ unique(l, (a, b) => a < b);\n}", "{\n    assert(l);\n    auto r = to!(long[])([]);\n\
    \    foreach(e; l) \n    {\n        if(r.count(e) == 0) \n        {\n        \
    \    r ~= e;\n        }\n    }\n    return r.sort();\n}\n/*\nReturn a random element\n\
    */\nlong choice(long[] l) \n{\n    assert(l);\n    return l[uniform(0, l.length)];\n\
    }\n/*\nReturn a random element from the population and remove it from the population\n\
    \    >>> population = [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]\n    >>> sample(population,\
    \ 1L)\n    [4L]\n    >>> population\n    [1L, 2L, 3L, 5L, 6L, 7L, 8L, 9L, 10L]\n\
    */\nlong[] sample(long[] l, long k) \n{\n    assert(l && k <= l.length);\n   \
    \ auto r = to!(long[])([]);\n    foreach(i; k.iota) \n    {\n        r ~= l.remove(uniform(0,\
    \ l.length));\n    }\n    return r;\n}\nlong[] range(long stop) \n{\n    return\
    \ range(0L, stop, 1L);\n}\nlong[] range(long start, long stop) \n{\n    return\
    \ range(start, stop, 1L);\n}\nlong[] range(long start, long stop, long step) \n\
    {\n    assert(start <= stop);\n    assert(step > 0L);\n    auto r = to!(long[])([]);\n\
    \    foreach(i; start.iota(stop-1L, step)) \n    {\n        r ~= i;\n    }\n \
    \   return r;\n}\n/*\nReturn the median of numeric data\n*/\nlong median(long[]\
    \ l) \n{\n    assert(l);\n    return l.sort()[cast(size_t)(l.length/2)];\n}\n\
    /*\nReturn the mean of numeric data\n*/\nlong mean(long", "{\n    long[] r;\n\
    \    int start = 0;\n    foreach(int i, long x; l) {\n        if (start == 0 ||\
    \ x != r[start - 1]) {\n            r ~= x;\n            start++;\n        }\n\
    \    }\n    return r;\n}\n \n \n/*\nReturn the number of unique elements in an\
    \ array\n    >>> unique_count([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    6L\n\
    */\nlong unique_count(long[] l) \n{\n    return unique(l).length;\n}", "{\n  \
    \  long[long] seen;\n    long[] res;\n    foreach (e; l)\n    {\n        if (e\
    \ in seen)\n            continue;\n        res ~= e;\n        seen[e] = 1;\n \
    \   }\n    res.sort;\n    return res;\n}\n/*\nReturn sorted unique elements in\
    \ an array\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9,\
    \ 123]\n    \n*/", "{\n    int[] idx = sort!((a, b) => l[a] < l[b])(iota(l.length));\n\
    \    return idx.map!(i => l[i]).dedup;\n}", "{\n    return std.typecons.unique(l);\n\
    }", "{\n    l.sort();\n    return l.uniq;\n}", "{\n    l.sort();\n    return l.removeDups();\n\
    }\n/*\nReturn sorted unique elements in an array\n    >>> unique([5L, 3L, 5L,\
    \ 2L, 3L, 3L, 9L, 0L, 123L])\n    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[]\
    \ unique2(long[] l)\n{\n    l.sort();\n    l.popFront();\n    for(int i = 0; i\
    \ < l.length; i++)\n    {\n        if(l[i] == l[i + 1])\n        {\n         \
    \   l.remove(i);\n        }\n    }\n    return l;\n}\n/*\nReturn sorted unique\
    \ elements in an array\n    >>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [0L, 2L, 3L, 5L, 9L, 123L]\n    \n*/\nlong[] unique3(long[] l)\n{\n    l.sort();\n\
    \    l.popFront();\n    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ == l[i + 1])\n        {\n            l.remove(i);\n        }\n    }\n    return\
    \ l;\n}", "{\n\tstd.sort(l);\n\treturn l.dup.uniq;\n}", "{\n    return unique(l,\
    \ (a, b) => a < b);\n}", "{\n    long[] res = [];\n    long n = l.length;\n  \
    \  bool[] was = new bool[n];\n    long idx = 0;\n    for (long i = 0; i < n; i++)\n\
    \    {\n        was[i] = false;\n    }\n    for (long i = 0; i < n; i++)\n   \
    \ {\n        if (!was[i])\n        {\n            res.append(l[i]);\n        \
    \    idx++;\n            for (long j = i + 1; j < n; j++)\n            {\n   \
    \             if (l[i] == l[j])\n                {\n                    was[j]\
    \ = true;\n                }\n            }\n        }\n    }\n    return res;\n\
    }", "{\n    version(all)\n    {\n        auto result = std.algorithm.sort.mergeSort(l).dup;\n\
    \        return result.length ? result.retain!(\"a == b[1]\")() : result;\n  \
    \  }\n    else\n    {\n        return std.algorithm.sort.mergeSort(l).uniq;\n\
    \    }\n}", "{\n    return sort(toSet(l));\n}\n/*\nGet duplicates in an array\n\
    \    >>> duplicate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [3L, 5L]\n*/\n\
    long[] duplicate(long[] l) \n{\n    long[] ret = [];\n    long[] u = unique(l);\n\
    \    for (l1; l1=u) \n    {\n        if (count(l, l1) > 1)\n            ret ~=\
    \ l1;\n    }\n    return ret;\n}\n/*\nFind unique elements in an array\n    >>>\
    \ findUnique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [2L, 0L, 9L, 123L]\n\
    */\nlong[] findUnique(long[] l) \n{\n    long[] ret = [];\n    long[] u = unique(l);\n\
    \    for (l1; l1=l) \n    {\n        if (!l1 in u)\n            ret ~= l1;\n \
    \   }\n    return ret;\n}\n/*\nReturn a list of the indicies of all values that\
    \ are equal to the given value\n    >>> indexOfAll(0L, [5L, 3L, 5L, 2L, 3L, 3L,\
    \ 9L, 0L, 123L])\n    [7L]\n*/\nlong[] indexOfAll(long l, long[] l1) \n{\n   \
    \ long[] ret = [];\n    foreach (i, l2; l1) \n    {\n        if (l2 == l)\n  \
    \          ret ~= i;\n    }\n    return ret;\n}\n/*\nGet the mean of an array\n\
    \    >>> mean([1.0, 2.0, 3.0, 4.0, 5.0])\n    3.0\n*/\nreal mean(real[] r) \n\
    {\n    return sum(r) / r.length;\n}\n/*\nGet the median of an array\n    >>> median([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    3"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
