name: HumanEval_91_is_bored
language: d
prompt: "import std.math;\n/*\n\n    You'll be given a string of words, and your task\
  \ is to count the number\n    of boredoms. A boredom is a sentence that starts with\
  \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
  \ example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky\
  \ is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string\
  \ S) \n"
tests: "unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
  \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
  I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
  I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
  You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
completions: ["{\n    long n = 0;\n    foreach(string word; split(S, \".\"))\n   \
    \ {\n        string first_word = split(word, \" \")[0];\n        if(first_word\
    \ == \"I\")\n            n++;\n    }\n    return n;\n}", "{\n    long boredoms\
    \ = 0;\n    string[] strList = S.split('.');\n    foreach(str; strList) {\n  \
    \      string[] wordList = str.split(' ');\n        if(wordList[0] == \"I\") {\n\
    \            boredoms++;\n        }\n    }\n    return boredoms;\n}", "{\n   \
    \ long boredoms = 0;\n    long start = 0;\n    long last = 0;\n    for (;;)\n\
    \    {\n        last = findFirstNotOf(S, \" \\t\\n.!?\", start);\n        if (last\
    \ == -1) \n            break;\n        last = findFirstOf(S, \" \\t\\n.!?\", last);\n\
    \        if (last == -1) \n            break;\n        string temp = S[last-1..last];\n\
    \        if (temp == \"I\")\n            boredoms++;\n        start = last;\n\
    \    }\n    return boredoms;\n}", "{\n    long n = 0;\n    foreach(it; (split(S,\
    \ \".\") ~= \" \").byChunk(2))\n    {\n        string s = it[0];\n        if (s[0]\
    \ == 'I')\n            n++;\n    }\n    return n;\n}", "{\n    S = \" \" + S;\n\
    \    long num = 0;\n    long slen = S.length;\n    long i = 0;\n    while (i <\
    \ slen)\n    {\n        i = S.find(\"I\", i);\n        if (i == -1)\n        \
    \    break;\n        if (i > 0 && (isalpha(S[i-1]) || S[i-1] == ' '))\n      \
    \  {\n            i++;\n            continue;\n        }\n        num++;\n   \
    \     i++;\n    }\n    return num;\n}", "{\n    long boredoms = 0;\n    string[]\
    \ sentences = split(strip(S), \".!?\");\n    for (string sentence : sentences)\n\
    \    {\n        if (startsWith(strip(sentence), \"I\"))\n        {\n         \
    \   boredoms++;\n        }\n    }\n    return boredoms;\n}", "{\n    long boredoms\
    \ = 0;\n    string[] sentences = split(S, \".!?\");\n    foreach(sentence; sentences)\n\
    \    {\n        if(sentence.front == 'I')\n            boredoms++;\n    }\n  \
    \  return boredoms;\n}", "{\n    long boredoms = 0;\n    string [] sentences =\
    \ split(S, \".\");\n    foreach(sentence; sentences) {\n        string [] words\
    \ = split(sentence, \" \");\n        foreach(string word; words) {\n         \
    \   if(word == \"I\") {\n                boredoms++;\n                break;\n\
    \            }\n        }\n    }\n    return boredoms;\n}", "{\n    long boredoms\
    \ = 0;\n    long i = 0;\n    string tempString = \"\";\n    while(i < S.length)\n\
    \    {\n        while(S[i] != '.' && S[i] != '?' && S[i] != '!')\n        {\n\
    \            tempString += S[i];\n            i++;\n        }\n        if(tempString.length\
    \ >= 2 && tempString[0..1] == \"I \")\n        {\n            boredoms++;\n  \
    \      }\n        tempString = \"\";\n        i++;\n    }\n    return boredoms;\n\
    }", "{\n    if (S.countChar('.') == 0)\n        return 0;\n    string[] sentences\
    \ = S.split(\"[.|!|?]\");\n    int count = 0;\n    foreach (string sent; sentences)\n\
    \    {\n        if (sent.countChar(' ') == 0)\n            continue;\n       \
    \ else if (sent.split(\" \")[0] == \"I\")\n            count++;\n    }\n    return\
    \ count;\n}", "{\n    string[] arr = split(S, \".?!\");\n    long count = 0;\n\
    \    foreach(item; arr) {\n        count += item.startsWith(\"I\");\n    }\n \
    \   return count;\n}", "{\n\tlong count = 0;\n\t\n\tS = S.split('.').concat('.');\n\
    \tS = S.split('?').concat('?');\n\tS = S.split('!').concat('!');\n\t\n\tforeach(string\
    \ s; S)\n\t{\n\t\tif(s[0..1] == \"I\") count++;\n\t}\n\t\n\treturn count;\n}",
  "{\n    string[] words = S.split(' ');\n    long boredoms = 0;\n    foreach(string\
    \ word; words)\n    {\n        if(word.length && word[0] == 'I')\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}", "{\n    // TODO: Write your code\
    \ here.\n    long count = 0;\n    foreach(line; split(S, \".\"))\n    {\n    \
    \    if(strip(line, \"\\n\\t ?!\").length > 0 && strip(line, \"\\n\\t ?!\")[0..1]\
    \ == \"I \")\n            count++;\n    }\n    return count;\n}", "{\n    long\
    \ total = 0;\n    foreach(c; S)\n    {\n        if(c == '.' || c == '?' || c ==\
    \ '!')\n        {\n            S = \"\";\n            break;\n        }\n    \
    \    if(c == 'I')\n        {\n            total++;\n            S = \"\";\n  \
    \          break;\n        }\n    }\n    if(S != \"\")\n    {\n        total +=\
    \ is_bored(S);\n    }\n    return total;\n}", "{\n    return count(split(S, \"\
    .!?\"));\n}", "{\n    long boredoms = 0;\n    long N = length(S);\n    for (long\
    \ i = 0; i < N; i++) {\n        if (S[i] == 'I') {\n            if (i == 0 ||\
    \ S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!')\n                boredoms++;\n\
    \        }\n    }\n    return boredoms;\n}", "{\n    long boredoms = 0;\n    auto\
    \ sentences = S.split(\".\");\n    sentences ~= \"\";\n    string longest_sentence\
    \ = \"\";\n    foreach(sentence; sentences)\n    {\n        auto words = sentence.split(\"\
    \ \");\n        if(words[0] == \"I\")\n        {\n            if(sentence.length\
    \ > longest_sentence.length)\n            {\n                longest_sentence\
    \ = sentence;\n            }\n            boredoms++;\n        }\n    }\n    return\
    \ longest_sentence.length;\n}", "{\n    long result = 0;\n    auto words = split(S,\
    \ \" .!?\", true);\n    foreach(word; words)\n    {\n        if(word == \"I\"\
    ) result++;\n    }\n    return result;\n}", "{\n    int bored = 0;\n    for (int\
    \ i = 0; i < S.length; i++)\n    {\n        if (S[i] == 'I')\n        {\n    \
    \        bored++;\n        }\n    }\n    return bored;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
