name: HumanEval_82_prime_length
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes a\
  \ string and returns true if the string\n    length is a prime number or false otherwise\n\
  \    Examples\n    >>> prime_length(\"Hello\")\n    true\n    >>> prime_length(\"\
  abcdcba\")\n    true\n    >>> prime_length(\"kittens\")\n    true\n    >>> prime_length(\"\
  orange\")\n    false\n    \n*/\nbool prime_length(string string) \n"
tests: "unittest\n{\n    alias candidate = prime_length;\n\n    assert(candidate(\"\
  Hello\") == true);\n    assert(candidate(\"abcdcba\") == true);\n    assert(candidate(\"\
  kittens\") == true);\n    assert(candidate(\"orange\") == false);\n    assert(candidate(\"\
  wow\") == true);\n    assert(candidate(\"world\") == true);\n    assert(candidate(\"\
  MadaM\") == true);\n    assert(candidate(\"Wow\") == true);\n    assert(candidate(\"\
  \") == false);\n    assert(candidate(\"HI\") == true);\n    assert(candidate(\"\
  go\") == true);\n    assert(candidate(\"gogo\") == false);\n    assert(candidate(\"\
  aaaaaaaaaaaaaaa\") == false);\n    assert(candidate(\"Madam\") == true);\n    assert(candidate(\"\
  M\") == false);\n    assert(candidate(\"0\") == false);\n}\nvoid main(){}"
completions: ["{\n    return isPrime(string.length);\n}", "{\n    int length = string.length;\n\
    \    if (length < 2)\n        return false;\n    foreach (int index; 0 .. length\
    \ / 2) \n    {\n        if (length % index == 0)\n            return false;\n\
    \    }\n    return true;\n}", "{\n     int length = string.length;\n     int factor\
    \ = 0;\n     int i = 2;\n     while ( i < length )\n     {\n        if(length\
    \ % i == 0)\n        {\n            factor++;\n        }\n        i++;\n     }\n\
    \     if(factor == 0)\n        return true;\n     else\n        return false;\n\
    }\n/*\nWrite a function that returns a pair containing two elements\n    The first\
    \ element of the pair should be a list of strings\n    The second element of the\
    \ pair should be a list of integers\n    The first element of the pair should\
    \ contain each of the string\n    elements in the input list.  The second element\
    \ of the pair should\n    contain the length of each of the string elements in\
    \ the first element\n    of the pair.\n    Examples\n    >>> string_and_lengths([\"\
    Hello\", \"abcdcba\", \"kittens\"])\n    ([\"Hello\", \"abcdcba\", \"kittens\"\
    ], [5, 7, 7])\n    >>> string_and_lengths([\"My\", \"name\", \"is\", \"joe\"])\n\
    \    ([\"My\", \"name\", \"is\", \"joe\"], [2, 4, 2, 3])\n    >>> string_and_lengths([\"\
    My\", \"name\", \"is\", \"joe\", \"\"])\n    ([\"My\", \"name\", \"is\", \"joe\"\
    , \"\"], [2, 4, 2, 3, 0])\n*/", "{\n    return is(typeof(std.math.isPrime(string.length)));\n\
    }", "{\n    import std.math : isPrime;\n    return isPrime(string.length);\n}",
  "{\n    return isPrime(string.length);\n}", "{\n    return is_prime(string.length);\n\
    }", "{\n    if(string.length == 1 || string.length == 2 || string.length == 3)\n\
    \        return true;\n    for(int i = 2; i < string.length; i++)\n    {\n   \
    \     if(string.length % i == 0)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    return !is(typeof(std.array.primeFactors(cast(size_t)string.length)[1]));\n\
    }", "{\n    int length = string.length;\n    foreach(int prime; Primes(100))\n\
    \    {\n        if(length == prime)\n        {\n            return true;\n   \
    \     }\n    }\n    return false;\n}", "{\n    return isPrime(string.length);\n\
    }", "{\n    int length = string.length;\n    if (length == 1 || length == 2)\n\
    \        return true;\n    for (int i = 2; i < length/2; i++)\n    {\n       \
    \ if (length % i == 0)\n            return false;\n    }\n    return true;\n}",
  "{\n    return isPrime(string.length);\n}", "{\n    int len = string.length;\n \
    \   int result = true;\n    int counter = 0;\n    foreach(i; 1..len) \n    {\n\
    \        if(len % i == 0)\n        {\n            counter++;\n        }\n    }\n\
    \    if(counter > 2)\n    {\n        result = false;\n    }\n    return result;\n\
    }\n/*\nWrite a function that takes a list of numbers and returns the mode\n  \
    \  (the value that appears most often)\n    Examples\n    >>> mode([1, 2, 3, 3,\
    \ 3, 4, 5, 6, 7, 8, 8, 9])\n    3\n    >>> mode([2, 2, 3, 3, 4, 4, 5, 5, 6, 6,\
    \ 7, 7, 7, 8, 8, 9, 9])\n    7\n    >>> mode([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2,\
    \ 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9])\n    9\n*/", "{\n    int result = length(string);\n    if (result % 2\
    \ == 0)\n    {\n        return false;\n    }\n    else if (result == 2)\n    {\n\
    \        return true;\n    }\n    return true;\n}", "{\n    int length = string.length;\n\
    \    if (length <= 1)\n        return false;\n    else if (length == 2)\n    \
    \    return true;\n    else\n    {\n        for (int i = 2; i <= floor(sqrt(length));\
    \ i++)\n        {\n            if (length % i == 0)\n                return false;\n\
    \        }\n        return true;\n    }\n}", "{\n    // Body\n    return isPrime(string.length);\n\
    }", "{\n    bool isPrime = false;\n    int num = string.length;\n    if (num >=\
    \ 2)\n    {\n        if (num == 2)\n        {\n            isPrime = true;\n \
    \       }\n        else\n        {\n            for (int i = 2; i < num; i++)\n\
    \            {\n                if (num % i == 0)\n                {\n       \
    \             isPrime = false;\n                    break;\n                }\n\
    \                else\n                {\n                    isPrime = true;\n\
    \                }\n            }\n        }\n    }\n    return isPrime;\n}",
  "{\n\tint len = string.length;\n\tif (len == 1 || len == 2)\n\t\treturn true;\n\t\
    if (len == 0)\n\t\treturn false;\n\tif (len % 2 == 0)\n\t\treturn false;\n\tfor\
    \ (int i = 3; i <= (int)sqrt(len); i += 2)\n\t{\n\t\tif (len % i == 0)\n\t\t\t\
    return false;\n\t}\n\treturn true;\n}\n//test code", "{\n    return is(typeof(string.length)\
    \ : size_t) && is_prime(string.length);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
