language: d
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1)\n        return\
    \ true;\n    else if (lst.length == 2)\n        return lst[0] < lst[1];\n    else\n\
    \    {\n        for (int i = 0; i < lst.length - 1; i++)\n        {\n        \
    \    if (lst[i] > lst[i + 1])\n                return false;\n        }\n    \
    \    return true;\n    }\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n\
    \    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpcll9t6es.d(38): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x4285ce]\n??:? bool tmpcll9t6es.is_sorted(long[]) [0x427da4]\n??:?
    void tmpcll9t6es.__unittest_L44_C1() [0x428052]\n??:? void tmpcll9t6es.__modtest()
    [0x4282a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c59f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b432]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430a74]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430551]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b409]\n??:? runModuleUnitTests [0x42c375]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289e0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428967]\n??:? _d_run_main [0x4288d2]\n??:? main [0x4282b3]\n??:?
    __libc_start_main [0x39e4a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    if (lst.length < 2) \n        return\
    \ true;\n    int prev = lst[0];\n    foreach (int x; lst[1..$]) \n    {\n    \
    \    if (x > prev)\n            prev = x;\n        else\n            return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n\
    \    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf_g_hcak.d(32): Error: cannot implicitly convert expression
    `lst[0]` of type `long` to `int`\n/tmp/tmpf_g_hcak.d(33): Error: cannot implicitly
    convert expression `__r73[__key74]` of type `long` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpf_g_hcak.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long d_lst = lst.dup;\n    d_lst.sort;\n\
    \    foreach(i, val; lst) {\n        if(val != d_lst[i]) return false;\n    }\n\
    \    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\n  \
    \  assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvpcarx6u.d(37): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpvpcarx6u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    auto len = lst.length;\n    if (len\
    \ == 1) \n    {\n        return true;\n    } \n    else \n    {\n        long\
    \ prev = lst[0];\n        bool is_dup = false;\n        foreach (i, ref n; lst[1..len])\
    \ \n        {\n            if (n < prev) \n            {\n                return\
    \ false;\n            }\n            if (n == prev) \n            {\n        \
    \        if (is_dup) \n                {\n                    return false;\n\
    \                } \n                else \n                {\n              \
    \      is_dup = true;\n                }\n            } \n            else \n\
    \            {\n                is_dup = false;\n            }\n            prev\
    \ = n;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpuyyqojm9.d(37): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x4285de]\n??:? bool tmpuyyqojm9.is_sorted(long[]) [0x427d3d]\n??:?
    void tmpuyyqojm9.__unittest_L65_C1() [0x42805e]\n??:? void tmpuyyqojm9.__modtest()
    [0x4282ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b442]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430a84]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430561]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b419]\n??:? runModuleUnitTests [0x42c385]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289f0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428977]\n??:? _d_run_main [0x4288e2]\n??:? main [0x4282bf]\n??:?
    __libc_start_main [0x472d8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1)\n        return\
    \ true;\n    else\n    {\n        bool result = true;\n        auto it = lst.front;\n\
    \        while (it != lst.back)\n        {\n            auto next = it + 1;\n\
    \            if (*it >= *next)\n            {\n                result = false;\n\
    \                break;\n            }\n            it = next;\n        }\n  \
    \      return result;\n    }\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqwpfu5nx.d(35): Error: no property `front` for type `long[]`\n/tmp/tmpqwpfu5nx.d(36):
    Error: no property `back` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpqwpfu5nx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1) return true;\n\
    unittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgqk_xa7y.d(31): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgqk_xa7y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    long i = 0;\n    long j = 1;\n  \
    \  long len = lst.length;\n    while (j < len)\n    {\n        if (lst[i] > lst[j])\
    \ \n        {\n            return false;\n        } \n        else \n        {\n\
    \            i++;\n            j++;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp43b_o3cg.d(60): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284cd]\n??:? void tmp43b_o3cg.__unittest_L47_C1() [0x428105]\n??:?
    void tmp43b_o3cg.__modtest() [0x42824c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428990]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428917]\n??:? _d_run_main [0x428882]\n??:? main [0x42825f]\n??:?
    __libc_start_main [0xba93f554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    \n    \n    if (lst.length == 1) return\
    \ true;\n    bool val = true;\n    for (int i = 0; i < lst.length - 1; i++)\n\
    \    {\n        if (lst[i] < lst[i + 1])\n        {\n            continue;\n \
    \       }\n        else\n        {\n            val = false;\n            break;\n\
    \        }\n    }\n    return val;\n}\n/*\n    Given an array of numbers and a\
    \ target number, return whether or not\n    there are two numbers in the array\
    \ which add up to the target number.\n    Assume only positive integers, no negatives.\n\
    unittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsitpxsn5.d(48): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpsitpxsn5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool found_dup = false;\n    foreach(i,\
    \ v; lst) \n    {\n        if(v == lst[i-1]) \n        {\n            found_dup\
    \ = true;\n        }\n        if(v < lst[i-1]) \n        {\n            return\
    \ false;\n        }\n    }\n    return !found_dup;\n}\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmp1hl3th63.d(33): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x4285b6]\n??:? bool tmp1hl3th63.is_sorted(long[]) [0x427d73]\n??:?
    void tmp1hl3th63.__unittest_L44_C1() [0x427e0c]\n??:? void tmp1hl3th63.__modtest()
    [0x428288]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c587]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b41a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430a5c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430539]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b3f1]\n??:? runModuleUnitTests [0x42c35d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42894f]\n??:? _d_run_main [0x4288ba]\n??:? main [0x42829b]\n??:?
    __libc_start_main [0x7c89f554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    // Initialize a boolean variable sorted\
    \ to be true\n    bool sorted = true;\n    // Create a variable called previous\
    \ and set it to the first element in lst\n    long previous = lst[0];\n    //\
    \ Create a for loop. for i in 2..lst.length\n    for (int i = 1; i < lst.length;\
    \ i++)\n    {\n        // if previous > lst[i]\n        if (previous > lst[i])\n\
    \        {\n            // sorted = false\n            sorted = false;\n     \
    \       // break\n            break;\n        }\n        // previous = lst[i]\n\
    \        previous = lst[i];\n    }\n    // Return sorted\n    return sorted;\n\
    }\n// Define is_sorted\n// Create a boolean is_sorted\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmp0sa_iz3e.d(33): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42859e]\n??:? bool tmp0sa_iz3e.is_sorted(long[]) [0x427d2f]\n??:?
    void tmp0sa_iz3e.__unittest_L53_C1() [0x42801e]\n??:? void tmp0sa_iz3e.__modtest()
    [0x42826c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c56f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b402]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430595]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430a44]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430521]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b3d9]\n??:? runModuleUnitTests [0x42c345]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289b0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428937]\n??:? _d_run_main [0x4288a2]\n??:? main [0x42827f]\n??:?
    __libc_start_main [0x89a71554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1) \n    {\n   \
    \     return true;\n    }\n    if (lst.length == 2) \n    {\n        return lst[0]\
    \ != lst[1];\n    }\n    if (lst.length == 3) \n    {\n        return lst[0] !=\
    \ lst[1] && lst[1] != lst[2];\n    }\n    int index = 1;\n    long curr = lst[0];\n\
    \    while (index < lst.length) \n    {\n        if (curr != lst[index]) \n  \
    \      {\n            curr = lst[index];\n            index++;\n        }\n  \
    \      else \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbso6j0ik.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x4285e5]\n??:? void tmpbso6j0ik.__unittest_L58_C1() [0x427fc2]\n??:?
    void tmpbso6j0ik.__modtest() [0x428368]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43068d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b3c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430619]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428aa8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428a2f]\n??:? _d_run_main [0x42899a]\n??:? main [0x42837b]\n??:?
    __libc_start_main [0x70499554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long[] sorted = sort(lst);\n    long\
    \ length = lst.length;\n    bool is_sorted = true;\n    long i = 0L;\n    while(i\
    \ < length && is_sorted) \n    {\n        if(lst[i] != sorted[i]) \n        {\n\
    \            is_sorted = false;\n        }\n        i += 1L;\n    }\n    return\
    \ is_sorted;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_ms6gcis.d(30): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ms6gcis.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    foreach(i; 1..lst.length)\n    {\n\
    \        if(lst[i-1] > lst[i])\n        {\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi9hqdnrc.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpi9hqdnrc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    return lst.sorted();\n}\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp33yhocl3.d(30): Error: no property `sorted` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp33yhocl3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long prev = lst[0];\n    foreach(el;\
    \ lst)\n    {\n        if(el < prev) return false;\n        prev = el;\n    }\n\
    \    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\n  \
    \  assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp68fw2ym3.d(38): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp68fw2ym3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long prev = lst[0];\n    foreach(long\
    \ e; lst)\n    {\n        if(e == prev)\n            return false;\n        prev\
    \ = e;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjyew9k3q.d(43): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284bd]\n??:? void tmpjyew9k3q.__unittest_L39_C1() [0x427ddb]\n??:?
    void tmpjyew9k3q.__modtest() [0x428240]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430565]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430a14]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4304f1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428980]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428907]\n??:? _d_run_main [0x428872]\n??:? main [0x428253]\n??:?
    __libc_start_main [0x36bce554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool sorted = true;\n    for (long\
    \ a = 0; a < lst.length - 1; a++)\n    {\n        if (lst[a] > lst[a + 1])\n \
    \       {\n            sorted = false;\n        }\n    }\n    return sorted;\n\
    }\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_gutoshx.d(40): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_gutoshx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    /*\n    //solution 1\n    long last\
    \ = lst[0];\n    foreach(int i, long element; lst)\n    {\n        if(last >=\
    \ element)\n            return false;\n        last = element;\n    }\n    return\
    \ true;\n    */\n    //solution 2\n    long[] lst_copy = lst[0..$];\n    sort(lst_copy);\n\
    \    return lst == lst_copy;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpts9pzqrq.d(43): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpts9pzqrq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length<=1)\n        return\
    \ true;\n    auto current, previous = lst[0];\n    for (long i=1; i<lst.length;\
    \ i++)\n    {\n        current = lst[i];\n        if (current>previous)\n    \
    \        previous = current;\n        else\n            return false;\n    }\n\
    \    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\n  \
    \  assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv7d972eh.d(32): Error: no identifier for declarator `current`\n/tmp/tmpv7d972eh.d(32):
    Error: found `,` instead of statement\n/tmp/tmpv7d972eh.d(43): Error: unterminated
    /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv7d972eh.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long prev = lst[0];\n    foreach(item;\
    \ lst[1..$])\n    {\n        if(prev > item)\n            return false;\n    \
    \    prev = item;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmp2kl5l12a.d(30): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428596]\n??:? bool tmp2kl5l12a.is_sorted(long[]) [0x427d2b]\n??:?
    void tmp2kl5l12a.__unittest_L39_C1() [0x428016]\n??:? void tmp2kl5l12a.__modtest()
    [0x428264]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c567]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43058d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430a3c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430519]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b3d1]\n??:? runModuleUnitTests [0x42c33d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289a8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42892f]\n??:? _d_run_main [0x42889a]\n??:? main [0x428277]\n??:?
    __libc_start_main [0xdc8ce554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length <= 1) \n    {\n   \
    \     return true;\n    }\n    else \n    {\n        long last_value = lst[0];\n\
    \        long current_value;\n        for (size_t i = 1; i < lst.length; i++)\
    \ \n        {\n            current_value = lst[i];\n            if (current_value\
    \ == last_value) \n            {\n                return false;\n            }\n\
    \            if (current_value < last_value) \n            {\n               \
    \ return false;\n            }\n            last_value = current_value;\n    \
    \    }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6y4dxre.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    //return false;\n    long[] newLst\
    \ = lst.dup;\n    newLst.sort;\n    if (newLst == lst)\n    {\n        return\
    \ true;\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n\
    \    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n  \
    \  assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8_vk54pt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    auto i = 0;\n    while (i < lst.length\
    \ - 1)\n    {\n        // If the next number is less than the current number,\
    \ it is not sorted.\n        if (lst[i + 1] < lst[i])\n        {\n           \
    \ return false;\n        }\n        // If two numbers are the same, check for\
    \ duplicates by seeing if the\n        // next number is the same. If it is, it\
    \ is not sorted.\n        else if (lst[i + 1] == lst[i])\n        {\n        \
    \    if (i < lst.length - 2 && lst[i + 2] == lst[i])\n            {\n        \
    \        return false;\n            }\n        }\n        i++;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpho7fxua3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1)\n        return\
    \ true;\n    else if (lst.length == 2)\n        return lst[0] < lst[1];\n    else\n\
    \    {\n        int i;\n        int j;\n        for (i = 0; i < lst.length - 1;\
    \ i++)\n        {\n            if (lst[i] > lst[i + 1])\n                return\
    \ false;\n            else if (lst[i] == lst[i + 1])\n            {\n        \
    \        for (j = i + 1; j < lst.length - 1; j++)\n                {\n       \
    \             if (lst[j] != lst[j + 1])\n                        break;\n    \
    \            }\n                if (j == lst.length - 1)\n                   \
    \ return false;\n            }\n        }\n        return true;\n    }\n}\n/*\n\
    unittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpktyhz45o.d(56): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpktyhz45o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long[] lst_cmp = lst[0..$-1];\n  \
    \  lst_cmp.sort;\n    return lst_cmp == lst[0..$-1];\n}\nassert(is_sorted([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]));\nassert(!is_sorted([1L, 3L, 2L, 4L, 5L, 6L, 7L]));\n\
    /*\n    Given a character, return if its a vowel or not.\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4anrbb_b.d(34): Error: Declaration expected, not \''assert\''\n/tmp/tmp4anrbb_b.d(35):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp4anrbb_b.d(36): Error:
    unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4anrbb_b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    auto current= lst[0];\n    foreach(i;\
    \ lst)\n    {\n        if(i<current)\n        {\n            return false;\n \
    \       }\n        current=i;\n    }\n    return true;\n}\n/*\nunittest\n{\n \
    \   alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqp5ci7w1.d(41): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpqp5ci7w1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long prev_l;\n    long curr_l;\n \
    \   /*\n    If the number of elements in the array is less than 1\n    then return\
    \ true.\n    */\n    if (lst.length < 1) \n    {\n        return true;\n    }\n\
    \    // Assign the first element in the array to prev_l\n    prev_l = lst[0];\n\
    \    /*\n    Loop through the list and assign the current element\n    to curr_l.\
    \ If current element is less than the previous\n    element, return false. Otherwise,\
    \ assign the current\n    element to the previous element and continue looping\n\
    \    through the list.\n    */\n    foreach (l; lst) \n    {\n        curr_l =\
    \ l;\n        if (curr_l < prev_l) \n        {\n            return false;\n  \
    \      }\n        prev_l = curr_l;\n    }\n    return true;\n}\n/*\n    Given\
    \ an array of numbers, return whether or not they are sorted\n    in ascending\
    \ order. If array has more than 1 duplicate of the same\n    number, return false.\
    \ Assume no negative numbers and only integers.\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn48wicze.d(60): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpn48wicze.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1)\n        return\
    \ true;\n    else if (lst.length == 2)\n        return lst[0] <= lst[1];\n   \
    \ else\n    {\n        if (lst[0] > lst[1])\n            return false;\n     \
    \   else\n            return is_sorted(lst[1..$]);\n    }\n}\nunittest\n{\n  \
    \  alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm71_6qgv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \nin {\n    assert(lst.length > 0);\n    assert(lst.length\
    \ == uniq(lst).length);\n}\nout (bool result) \n{\n    forall(j in 1..(lst.length-1))\
    \ \n    { \n        result ==> lst[j-1] <= lst[j];\n    }\n}\n{\n    // Take care\
    \ of the case where the list is length 1\n    if (lst.length == 1) \n    {\n \
    \       return true;\n    }\n    // Iterate over the list, checking if the next\
    \ element is\n    // greater than or equal to the previous one\n    for (long\
    \ i = 1; i < lst.length; i++) \n    {\n        if (lst[i] < lst[i-1]) \n     \
    \   {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptv0mkew0.d(33): Error: (identifier) following \''out\'' expected,
    not bool\n/tmp/tmptv0mkew0.d(33): Error: found \''result\'' when expecting \'')\''\n/tmp/tmptv0mkew0.d(33):
    Error: statement expected to be { }, not )\n/tmp/tmptv0mkew0.d(33): Error: found
    \'')\'' instead of statement\n/tmp/tmptv0mkew0.d(38): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptv0mkew0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    //if the list is empty then return\
    \ true\n    if(lst.length == 0)\n    {\n        return true;\n    }\n    //if\
    \ the list is only 1 element return true\n    if(lst.length == 1)\n    {\n   \
    \     return true;\n    }\n    for(size_t index = 0; index < lst.length - 1; index++)\n\
    \    {\n        //if the element before the current element is greater than the\
    \ current element then return false\n        if(lst[index] > lst[index + 1])\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwnkpkhdz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    if (lst.length == 1) return true;\n\
    \    long prev = lst[0];\n    foreach (index, value; lst)\n    {\n        if (index\
    \ == 0) continue;\n        if (prev >= value) return false;\n        prev = value;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n\
    \    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpltao0kjo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    lst = sort(lst);\n    if(lst.length\
    \ == 1) return true;\n    for(long i = 0; i < lst.length - 1; i++)\n    {\n  \
    \      if(lst[i] == lst[i + 1]) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf5vz_p9j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    long[] arr = lst.dup;\n    arr.sort;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] != lst[i])\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq33g_ni3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    // NOTE: This solution does not check\
    \ for duplicates\n    // Check that the list isn't empty\n    if (lst.length ==\
    \ 0) \n    {\n        return false;\n    }\n    // Go through each number and\
    \ check that it is less than the next one\n    long prev = lst[0];\n    foreach\
    \ (long next; lst[1..$]) \n    {\n        if (prev > next) \n        {\n     \
    \       return false;\n        }\n        prev = next;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprj0urehm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    lst = lst.dup; \n    lst.sort; \n\
    \    return lst == lst.dup; \n}\nlong[] nums = [1L, 2L, 3L, 4L, 5L, 6L, 7L];\n\
    unittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptz0wu3n5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1)\n        return\
    \ true;\n    for (int i = 0; i < lst.length - 1; i++)\n    {\n        if (lst[i]\
    \ > lst[i + 1])\n            return false;\n    }\n    return true;\n}\n/*\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7jx7311w.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7jx7311w.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool result = true;\n    bool prev\
    \ = false;\n    int i = 0;\n    foreach(long x; lst)\n    {\n        if(prev)\n\
    \        {\n            if(x < lst[i-1])\n            {\n                result\
    \ = false;\n                break;\n            }\n        }\n        else\n \
    \       {\n            prev = true;\n        }\n        i++;\n    }\n    return\
    \ result;\n}\n \n/*\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpecs5ij3h.d(52): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpecs5ij3h.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    foreach(i; 1..lst.length) \n    {\
    \ \n        if(lst[i-1] > lst[i]) \n        { \n            return false; \n \
    \       } \n    } \n    return true; \n} \n//}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp16w64uud.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool result = true;\n    foreach(idx,val;lst)\n\
    \    {\n        if(idx != lst.length - 1)\n        {\n            if(val == lst[idx+1])\n\
    \            {\n                result = false;\n                break;\n    \
    \        }\n            else if(val > lst[idx+1])\n            {\n           \
    \     result = false;\n                break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjak55vuy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool result = true;\n    long last\
    \ = 0;\n    foreach(long i; lst) \n    {\n        if(last != 0 && i < last) \n\
    \        {\n            result = false;\n            break;\n        }\n     \
    \   last = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpia59rode.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    int length = lst.length;\n    if (length\
    \ < 2)\n    {\n        return true;\n    }\n    else\n    {\n        for (int\
    \ i = 0; i < length - 1; i++)\n        {\n            if (lst[i] > lst[i + 1])\n\
    \            {\n                return false;\n            }\n        }\n    \
    \    return true;\n    }\n}\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnbdj2je6.d(47): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnbdj2je6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    auto tmp = lst[0];\n    foreach(n;\
    \ lst)\n    {\n        if(n > tmp)\n        {\n            tmp = n;\n        }\n\
    \        else\n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpogi123bx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool ret = true;\n    if (lst.length\
    \ >= 2)\n    {\n        long compare = lst[0];\n        int index = 1;\n     \
    \   while (index < lst.length)\n        {\n            if (lst[index] == compare)\n\
    \            {\n                ret = false;\n                break;\n       \
    \     }\n            if (lst[index] < compare)\n            {\n              \
    \  ret = false;\n                break;\n            }\n            compare =\
    \ lst[index];\n            index++;\n        }\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpykgn15z2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool sorted = true;\n    long prev\
    \ = -1;\n    long dup = -1;\n    foreach(cur; lst)\n    {\n        if(prev ==\
    \ cur)\n        {\n            dup = cur;\n        }\n        if(cur < prev)\n\
    \        {\n            if(dup != cur)\n            {\n                sorted\
    \ = false;\n            }\n        }\n        prev = cur;\n    }\n    return sorted;\n\
    }\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s4z2x5q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n\tforeach(i; 0 .. lst.length - 1)\n\t\
    {\n\t\tif(lst[i] > lst[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzv0fgtvd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    // Write implementation here \n  \
    \  return false;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoamhyv_h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    if (lst.length <= 1) \n    {\n  \
    \      return true;\n    } \n    else \n    {\n        long[] sortedLst = lst.dup;\n\
    \        sort(sortedLst);\n        // debug(lst, sortedLst);\n        long[] result\
    \ = lst.zip(sortedLst).map!(tuple => tuple[0] == tuple[1] ? tuple[0] : tuple[0]\
    \ - tuple[1]).array;\n        return result.every!(el => el == 0);\n    }\n}\n\
    unittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1lv6e9pt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1) return true;\n\
    \    else\n    {\n        for (int i = 0; i < lst.length - 1; i++)\n        {\n\
    \            if (lst[i] >= lst[i + 1])\n            {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n}\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp0g5hwui.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool is_sorted = true;\n    if (lst.length\
    \ == 1)\n    {\n        return is_sorted;\n    }\n    else if (lst.length > 1)\n\
    \    {\n        for (long i = 0; i < lst.length - 1; i++)\n        {\n       \
    \     if (lst[i] > lst[i + 1])\n            {\n                is_sorted = false;\n\
    \                break;\n            }\n        }\n    }\n    return is_sorted;\n\
    }\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaw88h4cg.d(48): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpaw88h4cg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1)\n        return\
    \ true;\n    \n    long prev = lst[0];\n    foreach (i, _; lst[1..$])\n    {\n\
    \        if (i < prev)\n            return false;\n        prev = i;\n    }\n\
    \    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\n  \
    \  assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo042xvt2.d(42): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpo042xvt2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long prev = std.int.min;\n    foreach(el;\
    \ lst) \n    {\n        if(el < prev) \n        {\n            return false;\n\
    \        }\n        prev = el;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8efzwwq0.d(30): Error: identifier expected following \''.\'',
    not \''int\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8efzwwq0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long[] lst_uniq;\n    if (lst.length\
    \ == 1) \n    {\n        return true;\n    }\n    else if (lst.length == 2) \n\
    \    {\n        return lst[0] <= lst[1];\n    }\n    else \n    {\n        auto\
    \ lst_uniq = std.algorithm.uniq(lst).array;\n        if (lst_uniq.length != lst.length)\
    \ \n        {\n            return false;\n        }\n        else \n        {\n\
    \            for (long i = 0; i < lst.length - 1; i++) \n            {\n     \
    \           if (lst[i] > lst[i + 1]) \n                {\n                   \
    \ return false;\n                }\n            }\n            return true;\n\
    \        }\n    }\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpva1imdbg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    import std.algorithm : sort;\n   \
    \ return lst.sort.equal(lst);\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpruxmnw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n\tif (lst.length < 2)\n    {\n       \
    \ return true;\n    }\n\t\n\tfor (int i = 0; i < lst.length - 1; i++)\n    {\n\
    \        if (lst[i] > lst[i + 1])\n        {\n            return false;\n    \
    \    }\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps7yk69rz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    ulong i = 0;\n    long tmp = 0;\n\
    \    long item = 0;\n    bool sorted = true;\n    immutable ulong len = lst.length;\n\
    \    for (i = 0; i < len; i++)\n    {\n        item = lst[i];\n        if (i >\
    \ 0)\n        {\n            if (item < tmp)\n            {\n                sorted\
    \ = false;\n                break;\n            }\n        }\n        tmp = item;\n\
    \    }\n    return sorted;\n}\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3bw7sbmg.d(50): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3bw7sbmg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    for (size_t i = 0; i < lst.length\
    \ - 1; i++)\n    {\n        if (lst[i] > lst[i + 1])\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph_kpueu5.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmph_kpueu5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    \n    if (lst.length <= 1)\n    {\n\
    \        return true;\n    }\n    else\n    {\n        int prev = lst[0];\n  \
    \      for (int i = 1; i < lst.length; i++)\n        {\n            if (lst[i]\
    \ < prev)\n            {\n                return false;\n            }\n     \
    \       else\n            {\n                prev = lst[i];\n            }\n \
    \       }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfcjxcnqz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length < 2) return true;\n\
    \    foreach (i, v; lst) \n    {\n        if (i == 0) continue;\n        if (v\
    \ < lst[i - 1]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbspyycvl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool state = true;\n    bool cont\
    \ = true;\n    long current = -1;\n    long previous = -1;\n    long[] seen =\
    \ new long[0];\n    foreach(n; lst)\n    {\n        state = true;\n        foreach(nn;\
    \ seen)\n        {\n            if(n == nn)\n            {\n                state\
    \ = false;\n                cont = false;\n                break;\n          \
    \  }\n        }\n        if(!cont)\n        {\n            break;\n        }\n\
    \        seen ~= n;\n        current = n;\n        if(previous != -1)\n      \
    \  {\n            if(previous > current)\n            {\n                state\
    \ = false;\n                break;\n            }\n        }\n        previous\
    \ = current;\n    }\n    return state;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp12lhk57u.d(65): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp12lhk57u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool inOrder = true;\n    foreach(i,j;\
    \ zip(lst[0..$-1], lst[1..$]))\n    {\n        if(i[0] >= i[1])\n        {\n \
    \           inOrder = false;\n            break;\n        }\n    }\n    return\
    \ inOrder;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt4n00754.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n\tlong preNum = lst[0];\n\tbool isFirst\
    \ = true;\n\tforeach(n; lst) \n\t{\n\t\tif(n != preNum) \n\t\t{\n\t\t\tif(n <\
    \ preNum)\n\t\t\t\treturn false;\n\t\t\tpreNum = n;\n\t\t}\n\t\telse \n\t\t{\n\
    \t\t\tif(isFirst)\n\t\t\t\tisFirst = false;\n\t\t\telse\n\t\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvgom7kfp.d(50): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpvgom7kfp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length < 2)\n        return\
    \ true;\n    else\n    {\n        bool result = true;\n        long prev = lst[0];\n\
    \        int i = 1;\n        while (i < lst.length && result)\n        {\n   \
    \         if (prev > lst[i])\n                result = false;\n            prev\
    \ = lst[i];\n            i++;\n        }\n        return result;\n    }\n}\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzs2iuhoo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length < 2) return true;\n\
    \    for (size_t i = 1; i < lst.length; i++) \n    {\n        if (lst[i] <= lst[i\
    \ - 1]) return false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwmj44jox.d(37): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpwmj44jox.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1)\n        return\
    \ true;\n    if (lst.length == 2)\n        return lst[0] < lst[1];\n    if (lst.length\
    \ == 3)\n        return (lst[0] < lst[1]) && (lst[1] < lst[2]);\n    if (lst.length\
    \ == 4)\n        return (lst[0] < lst[1]) && (lst[1] < lst[2]) && (lst[2] < lst[3]);\n\
    \    else {\n        long[] lst_new = lst[1..$];\n        return (lst[0] < lst[1])\
    \ && is_sorted(lst_new);\n    }\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8543xqml.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1)\n        return\
    \ true;\n    else\n    {\n        long prev = lst[0];\n        for (long i = 1;\
    \ i < lst.length; i++)\n        {\n            if (prev >= lst[i])\n         \
    \       return false;\n            prev = lst[i];\n        }\n        return true;\n\
    \    }\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc9m5w4gk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length < 2) \n    {\n    \
    \    return true;\n    }\n    else \n    {\n        int count = 1;\n        for\
    \ (int i = 0; i < lst.length - 1; i++) \n        {\n            if (lst[i] < lst[i\
    \ + 1]) \n            {\n                count += 1;\n            }\n        }\n\
    \        return count == lst.length;\n    }\n}\n/*\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9smuveya.d(47): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp9smuveya.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long[] unique_lst = new long[];\n\
    \    bool? seen_before = null;\n    foreach(long i; lst)\n    {\n        seen_before\
    \ = i in unique_lst;\n        if(seen_before) return false;\n        else append(unique_lst,\
    \ i);\n    }\n    long[] sorted_lst = new long[];\n    foreach(long i; unique_lst)\n\
    \    {\n        append(sorted_lst, i);\n    }\n    sort(sorted_lst);\n    return\
    \ unique_lst == sorted_lst;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvptxd8e8.d(31): Error: no identifier for declarator bool\n/tmp/tmpvptxd8e8.d(31):
    Error: found \''?\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpvptxd8e8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    // Using sort()\n    long[] lst_copy\
    \ = lst[0..$];\n    sort(lst_copy);\n    return lst_copy == lst;\n    \n    //\
    \ Iterative\n    /*\n    enum max = lst.length;\n    foreach(i; 0..max)\n    {\n\
    \        if(i+1 < max)\n        {\n            if(lst[i] >= lst[i+1])\n      \
    \      {\n                return false;\n            }\n        }\n    }\n   \
    \ return true;\n    */\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n \
    \   assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1hnlqbv7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n\tbool result = true;\n\tint size = lst.length;\n\
    \tfor (int i = 0; i < size - 1; i++) \n\t{\n\t\tif (lst[i] > lst[i + 1]) \n\t\t\
    {\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\n//\n\
    unittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7msajk5q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    auto len = lst.length;\n    long min\
    \ = 0;\n    foreach(i, element; lst)\n    {\n        if(i == 0)\n        {\n \
    \           min = element;\n        }\n        else\n        {\n            min\
    \ = element;\n            break;\n        }\n    }\n    long max = maxElement(lst);\n\
    \    if(min == max)\n    {\n        return true;\n    }\n    foreach(element;\
    \ lst)\n    {\n        if(element == min)\n        {\n            continue;\n\
    \        }\n        else if(element > min)\n        {\n            min = element;\n\
    \        }\n        else\n        {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\n// Test cases\nunittest \n{\n    assert(is_sorted([5L]));\n\
    \    assert(is_sorted([1L, 2L, 3L, 4L, 5L]));\n    assert(!is_sorted([1L, 3L,\
    \ 2L, 4L, 5L]));\n    assert(is_sorted([1L, 2L, 3L, 4L, 5L, 6L]));\n    assert(is_sorted([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]));\n    assert(!is_sorted([1L, 3L, 2L, 4L, 5L, 6L, 7L]));\n\
    \    assert(is_sorted([1L, 2L, 2L, 3L, 3L, 4L]));\n    assert(!is_sorted([1L,\
    \ 2L, 2L, 2L, 3L, 4L]));\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n\
    \    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1j1sy7j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    if (lst.length < 2) \n        return\
    \ true;\n    \n    int prev = lst[0];\n    int curr;\n    foreach (i, x; lst[1..$])\
    \ \n    {\n        curr = x;\n        if (curr <= prev)\n            return false;\n\
    \        prev = curr;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvytg1oqp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    static struct State\n    {\n     \
    \   long prev = long.min;\n        bool in_a_run = false;\n    }\n    bool is_sorted_impl(ref\
    \ State state, in long l)\n    {\n        if (l < state.prev)\n            return\
    \ false;\n        if (l == state.prev)\n        {\n            if (state.in_a_run)\n\
    \                return false;\n            state.in_a_run = true;\n        }\n\
    \        else\n        {\n            state.in_a_run = false;\n        }\n   \
    \     state.prev = l;\n        return true;\n    }\n    State state;\n    return\
    \ lst.all!(a => is_sorted_impl(state, a));\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp64snnw15.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool result = true;\n    size_t prev\
    \ = lst[0];\n    size_t current = lst[0];\n    foreach(long x; lst)\n    {\n \
    \       if(prev > x)\n        {\n            result = false;\n            break;\n\
    \        }\n        prev = x;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnbt6ocic.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long[] sub = lst[0..$-1];\n    long[]\
    \ rst = lst[1..$];\n    return lst.length == 1 ||\n           (rst.length == 0\
    \ && lst.length == 0) ||\n           (rst.length == 0 && lst.length != 0) ||\n\
    \           (rst.length != 0 && lst.length != 0 && \n           zip(sub, rst).reduce!((a,\
    \ b) => a && b[0] <= b[1])) &&\n           is_sorted(rst);\n}\nunittest\n{\n \
    \   alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ufq48j0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    int length = lst.length;\n    if (length\
    \ <= 1) \n    {\n        return true;\n    }\n    auto prev = lst[0];\n    auto\
    \ prev_count = 1;\n    for (auto current = 1; current < length; current++) \n\
    \    {\n        if (lst[current] == prev) \n        {\n            prev_count++;\n\
    \            if (prev_count > 1) \n            {\n                return false;\n\
    \            }\n        }\n        else if (lst[current] < prev) \n        {\n\
    \            return false;\n        }\n        else \n        {\n            prev\
    \ = lst[current];\n            prev_count = 1;\n        }\n    }\n    return true;\n\
    }\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsunpeg3z.d(59): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpsunpeg3z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n\tlong prev = lst[0];\n\tforeach(item;\
    \ lst) \n\t{\n\t\tif(item > prev) \n\t\t{\n\t\t\tprev = item;\n\t\t}\n\t\telse\
    \ \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n/*\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqwzhhbdv.d(44): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpqwzhhbdv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    bool sorted = true; \n    bool duplicate_found\
    \ = false; \n    long prev; \n    long curr; \n    foreach(idx, val; lst) \n \
    \   { \n        if(idx == 0) \n        { \n            prev = val; \n        \
    \    continue; \n        } \n        curr = val; \n        if(curr > prev) \n\
    \        { \n            prev = curr; \n            continue; \n        } \n \
    \       else if(curr == prev) \n        { \n            if(duplicate_found) \n\
    \            { \n                sorted = false; \n                break; \n \
    \           } \n            else \n            { \n                duplicate_found\
    \ = true; \n                prev = curr; \n                continue; \n      \
    \      } \n        } \n        else \n        { \n            sorted = false;\
    \ \n            break; \n        } \n    } \n    return sorted; \n}\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpehb0xkcm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1)\n        return\
    \ true;\n    else if (lst.length > 1)\n    {\n        // T[int] is a key-value\
    \ pair with key being an int\n        // and value being another int.\n      \
    \  T[int] hist = new T[int](0);\n        for (long l : lst)\n        {\n     \
    \       int i = cast(int) l;\n            if (i in hist)\n                hist[i]\
    \ += 1;\n            else\n                hist[i] = 1;\n        }\n        int[]\
    \ keys = hist.keys();\n        if (keys.length == lst.length)\n        {\n   \
    \         keys.sort;\n            for (int i=0; i<keys.length; i++)\n        \
    \    {\n                if (keys[i] != i+1)\n                    return false;\n\
    \            }\n            return true;\n        }\n        else\n          \
    \  return false;\n    }\n    else\n        return false;\n}\nunittest\n{\n   \
    \ alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp94oezkwf.d(36): Error: need size of rightmost array, not type
    int\n/tmp/tmp94oezkwf.d(37): Error: semicolon expected, not \'':\''\n/tmp/tmp94oezkwf.d(37):
    Error: expression expected, not \'':\''\n/tmp/tmp94oezkwf.d(37): Error: found
    \''lst\'' when expecting \'';\'' following for condition\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp94oezkwf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    auto slst = lst.copy.sort;\n    if\
    \ (lst == slst)\n    {\n        for (int i = 0; i < lst.length; i++)\n       \
    \ {\n            for (int j = i + 1; j < lst.length; j++)\n            {\n   \
    \             if (lst[i] == lst[j])\n                {\n                    return\
    \ false;\n                }\n            }\n        }\n        return true;\n\
    \    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8t68_bs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    lst = lst.map!(a => a)(lst);\n  \
    \  lst = lst.sort;\n    foreach(a; lst)\n    {\n        if(a[0] != a[1])\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp40sktp_3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length < 2) \n    {\n    \
    \    return true;\n    }\n    else \n    {\n        /* \n            We will iterate\
    \ through the list, and \n            compare the element with the element\n \
    \           that comes after it. If it is smaller\n            then the array\
    \ is not sorted, otherwise\n            we move onto the next element. If we\n\
    \            make it to the end of the list and\n            haven't found any\
    \ differences, then\n            we return true.\n        */\n        foreach\
    \ (i, elem; lst) \n        {\n            if (i < lst.length - 1) \n         \
    \   {\n                if (elem > lst[i + 1]) \n                {\n          \
    \          return false;\n                }\n            }\n        }\n      \
    \  return true;\n    }\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n \
    \   assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8_j4ycxs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long[] myArray = sort(lst);\n    if\
    \ (myArray.equal(lst)) \n    {\n        return true;\n    }\n    else \n    {\n\
    \        return false;\n    }\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiy6njjbc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length <= 1) \n    {\n   \
    \     return true;\n    } \n    else \n    {\n        long prev_num = lst[0];\n\
    \        long prev_prev_num = lst[0];\n        foreach (num; lst[1..$]) \n   \
    \     {\n            if (num > prev_num) \n            {\n                prev_prev_num\
    \ = prev_num;\n                prev_num = num;\n            } \n            else\
    \ if (num == prev_num && num != prev_prev_num) \n            {\n             \
    \   return false;\n            } \n            else \n            {\n        \
    \        return false;\n            }\n        }\n        return true;\n    }\n\
    }\n// low-level names for long unsigned int and long unsigned int\nalias ulong\
    \ = long;\nalias uint = int;\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9fwe0ng9.d(58): Error: no identifier for declarator ulong\n/tmp/tmp9fwe0ng9.d(58):
    Error: found \'';\'' when expecting \''.\'' following long\n/tmp/tmp9fwe0ng9.d(59):
    Error: found \''alias\'' when expecting identifier following \''long.\''\n/tmp/tmp9fwe0ng9.d(59):
    Error: alias cannot have initializer\n/tmp/tmp9fwe0ng9.d(59): Error: semicolon
    expected to close alias declaration\n/tmp/tmp9fwe0ng9.d(59): Error: no identifier
    for declarator uint\n/tmp/tmp9fwe0ng9.d(59): Error: Declaration expected, not
    \''=\''\n/tmp/tmp9fwe0ng9.d(60): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp9fwe0ng9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    bool is_sorted = true;\n    if (lst.length\
    \ > 1)\n    {\n        int i = 0;\n        long prev = lst[i];\n        i++;\n\
    \        while (i < lst.length)\n        {\n            long curr = lst[i];\n\
    \            if (prev > curr)\n            {\n                is_sorted = false;\n\
    \                break;\n            }\n            prev = curr;\n           \
    \ i++;\n        }\n    }\n    return is_sorted;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq9cd5a7y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long prev = lst[0];\n    bool is_prev_duplicate\
    \ = false;\n    foreach(long n; lst)\n    {\n        if(is_prev_duplicate && n\
    \ == prev)\n            return false;\n        if(n < prev)\n            return\
    \ false;\n        prev = n;\n        is_prev_duplicate = n == prev;\n    }\n \
    \   return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt39retvm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long last = lst[0];\n    foreach(item;\
    \ lst)\n    {\n        if(item < last)\n            return false;\n        else\
    \ if(item == last)\n            continue;\n        else\n            last = item;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n\
    \    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqlrkt9n4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n    in { \n        assert(lst.length > 0);\n\
    \        assert(allSatisfy(lst, (x => x > 0)));\n    }\n    out (result) { \n\
    \        assert(result in [true, false]);\n    }\n    body {\n        bool res\
    \ = true;\n        lst = sort(lst);\n        foreach(i; 0..lst.length-1) {\n \
    \           if(i != 0 && lst[i] == lst[i-1]) {\n                res = false;\n\
    \                break;\n            }\n        }\n        return res;\n    }\n\
    /*\n    Given a list of integer numbers, sort them in descending order.\n    Assume\
    \ no negative numbers and only integers.\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2hyki1qb.d(47): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp2hyki1qb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length < 2)\n        return\
    \ true;\n    \n    bool result = true;\n    long prev = lst[0];\n    foreach (long\
    \ current; lst[1..$])\n    {\n        if (current < prev)\n        {\n       \
    \     result = false;\n            break;\n        }\n        prev = current;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps3ojbebo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long curr_prev_num = lst[0];\n   \
    \ bool result = true;\n    lst = lst[1 .. $];\n    // int num_unique_nums = 0;\n\
    unittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvit8ar51.d(34): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvit8ar51.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \nin {\n    assert(lst.length > 0);\n    assert(forall(i\
    \ in 0 .. lst.length - 1) {lst[i] > 0});\n}\nout (result) {\n    assert(forall(i\
    \ in 0 .. lst.length - 1, j in i + 1 .. lst.length - 1){(!result) ? true : lst[i]\
    \ < lst[j]});\n}\n{\n    long[] sorted = lst.map!(x => x).sort();\n    if(lst\
    \ == sorted) {\n        return true;\n    } else {\n        return false;\n  \
    \  }\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr996gy1s.d(31): Error: found \''..\'' when expecting \'',\''\n/tmp/tmpr996gy1s.d(31):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpr996gy1s.d(31): Error: found
    \''lst\'' when expecting \'';\'' following statement\n/tmp/tmpr996gy1s.d(31):
    Error: found \''}\'' when expecting \'';\'' following statement\n/tmp/tmpr996gy1s.d(31):
    Error: found \'')\'' instead of statement\n/tmp/tmpr996gy1s.d(34): Error: found
    \''..\'' when expecting \'',\''\n/tmp/tmpr996gy1s.d(34): Error: found \''..\''
    when expecting \'',\''\n/tmp/tmpr996gy1s.d(34): Error: found \''{\'' when expecting
    \'')\''\n/tmp/tmpr996gy1s.d(34): Error: found \''}\'' when expecting \'';\'' following
    statement\n/tmp/tmpr996gy1s.d(34): Error: found \'')\'' instead of statement\n/tmp/tmpr996gy1s.d(36):
    Error: missing body { ... } after in or out\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr996gy1s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    foreach(i; 0 .. lst.length - 1)\n\
    \    {\n        if(lst[i] > lst[i + 1])\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps3j_sq9a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long[] nlst = lst.dup;\n    nlst.sort;\n\
    \    if (nlst.equal(lst))\n    {\n        return true;\n    }\n    else\n    {\n\
    \        return false;\n    }\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3becbaem.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length<2)\n        return\
    \ true;\n    long first = lst[0];\n    long second = lst[1];\n    foreach(i;2..lst.length)\n\
    \    {\n        if (lst[i]==first)\n            return false;\n        first =\
    \ lst[i-1];\n        second = lst[i];\n        if(first>second)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprn9dedp6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long t = lst[0];\n    foreach(x; lst)\n\
    \    {\n        if(x < t) return false;\n        t = x;\n    }\n    return true;\n\
    }\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7289o4nc.d(38): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7289o4nc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    foreach(i; 1..lst.length) \n    {\n\
    \        if(lst[i] < lst[i-1]) \n        {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi984ta5l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    // // Good enough for now\n    //\
    \ long r = lst[0];\n    // for (long x in lst) {\n    //     if (x < r)\n    //\
    \         return false;\n    //     r = x;\n    // }\n    // return true;\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpva0cuy06.d(38): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpva0cuy06.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length <= 1)\n        return\
    \ true;\n    \n    auto a = lst[0];\n    foreach (i, b; lst[1..$])\n    {\n  \
    \      if (a > b)\n            return false;\n        a = b;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcnqeca0h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    bool chk;\n    int len = lst.length;\n\
    \    for (int i = 0; i < len - 1; i++)\n    {\n        chk = lst[i] < lst[i +\
    \ 1];\n        if (!chk)\n        {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n \
    \   assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6_ti5z0m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long min = 0;\n    long max = 0;\n\
    \    foreach(i; lst) \n    {\n        if(i < min) \n        {\n            return\
    \ false;\n        }\n        else if(i > max) \n        {\n            max = i;\n\
    \        }\n        else \n        {\n            return false;\n        }\n \
    \   }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n\
    \    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppbu58m9g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1)\n        return\
    \ true;\n    if (lst.length == 2)\n        return lst[0] <= lst[1];\n    bool\
    \ sorted = true;\n    for (int i = 0; i < lst.length - 1; i++)\n    {\n      \
    \  if (lst[i] > lst[i + 1])\n        {\n            sorted = false;\n        \
    \    break;\n        }\n    }\n    return sorted;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqhcaqlh_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1) \n    {\n   \
    \     return true;\n    } \n    else \n    {\n        long[] copy = lst[1..$];\n\
    \        sort(copy);\n        return copy == lst[1..$];\n    }\n}\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp41u_41kj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    for (int i = 0; i < lst.length - 1;\
    \ i++) \n    {\n        if (lst[i] >= lst[i + 1])\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1onqgpq6.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp1onqgpq6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    int length = lst.length;\n    long\
    \ last = min(lst);\n    for (int i = 0; i < length; i++) \n    {\n        if (lst[i]\
    \ > last) \n        {\n            last = lst[i];\n        }\n        else \n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    /*\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0qucukhb.d(45): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp0qucukhb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool sorted = true;\n    size_t len\
    \ = lst.length;\n    foreach(immutable i, ref el1; lst) \n    {\n        if(i\
    \ < len - 1) \n        {\n            immutable el2 = lst[i + 1];\n          \
    \  if(el1 > el2) \n            {\n                sorted = false;\n          \
    \      break;\n            }\n        }\n    }\n    return sorted;\n}\n/*\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbhs4ut87.d(46): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpbhs4ut87.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    long _state;\n    typeof(lst.front)\
    \ __last_value;\n    for (__last_value = lst.front, _state = 0; ; __last_value\
    \ = __last_value + 1, _state = _state + 1) {\n        switch (_state) {\n    \
    \        case 0:\n                if (__last_value != lst.front) {\n         \
    \           _state = 1;\n                    continue;\n                }\n  \
    \              else {\n                    return true;\n                }\n \
    \           case 1:\n                if (__last_value > lst.front) {\n       \
    \             _state = 2;\n                    continue;\n                }\n\
    \                else {\n                    return false;\n                }\n\
    \            case 2:\n                if (__last_value != lst.front) {\n     \
    \               _state = 3;\n                    continue;\n                }\n\
    \                else {\n                    return true;\n                }\n\
    \            case 3:\n                if (__last_value > lst.front) {\n      \
    \              _state = 2;\n                    continue;\n                }\n\
    \                else {\n                    return false;\n                }\n\
    \        }\n    }\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4zckgg3p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long last_number = 0;\n    bool has_duplicate\
    \ = false;\n    long len = lst.length;\n    if (len > 1) {\n        last_number\
    \ = lst[0];\n        foreach (long i, long num; lst) {\n            if (num <=\
    \ last_number) {\n                has_duplicate = true;\n                break;\n\
    \            }\n            last_number = num;\n        }\n    }\n    return !has_duplicate;\n\
    }\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpew98e5zz.d(45): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpew98e5zz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1) \n    {\n   \
    \     return true;\n    }\n    for (int i = 0; i < lst.length - 1; i++) \n   \
    \ {\n        if (lst[i] >= lst[i + 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb3qvrina.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool sorted;\n    long i = 0;\n  \
    \  long last = lst[0];\n    while (i < lst.length)\n    {\n        if (last >\
    \ lst[i])\n        {\n            sorted = false;\n            break;\n      \
    \  }\n        else\n        {\n            last = lst[i];\n            sorted\
    \ = true;\n        }\n        i++;\n    }\n    return sorted;\n}\nunittest\n{\n\
    \    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n  \
    \  assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvqttsp7h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    return is_sorted(lst, 0UL, lst.length);\n\
    }\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp424mjm9c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n  bool is_sorted = true;\n  for (int\
    \ i = 0; i < lst.length; i++) \n  {\n    for (int k = i + 1; k < lst.length; k++)\
    \ \n    {\n      if (lst[i] > lst[k])\n      {\n        is_sorted = false;\n \
    \     }\n    }\n  }\n  return is_sorted;\n}\n \n/*\n    Given an array of integers,\
    \ return the range. The range is the\n    difference between the maximum and minimum\
    \ values in the array.\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph4tq6_yt.d(44): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmph4tq6_yt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \nin {\n  assert(lst.length >= 0);\n  long\
    \ old = lst[0];\n  foreach (i; 1 .. lst.length) {\n    long curr = lst[i];\n \
    \   assert(curr >= old);\n    old = curr;\n  }\n}\nout (bool result) \n{\n  assert(lst.length\
    \ >= 0);\n  long old = lst[0];\n  foreach (i; 1 .. lst.length) {\n    long curr\
    \ = lst[i];\n    assert(curr >= old);\n    old = curr;\n  }\n}\n{\n    if (lst.length\
    \ == 0) {\n        return true;\n    }\n    long num_prev = lst[0];\n    long\
    \ num_curr;\n    foreach (i; 1 .. lst.length) {\n        num_curr = lst[i];\n\
    \        if (num_curr <= num_prev) {\n            return false;\n        }\n \
    \       num_prev = num_curr;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzmmucb_d.d(38): Error: (identifier) following \''out\'' expected,
    not bool\n/tmp/tmpzmmucb_d.d(38): Error: found \''result\'' when expecting \'')\''\n/tmp/tmpzmmucb_d.d(38):
    Error: statement expected to be { }, not )\n/tmp/tmpzmmucb_d.d(38): Error: found
    \'')\'' instead of statement\n/tmp/tmpzmmucb_d.d(42): Error: Declaration expected,
    not \''foreach\''\n/tmp/tmpzmmucb_d.d(42): Error: Declaration expected, not \''1\''\n/tmp/tmpzmmucb_d.d(44):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpzmmucb_d.d(45): Error:
    no identifier for declarator old\n/tmp/tmpzmmucb_d.d(45): Error: Declaration expected,
    not \''=\''\n/tmp/tmpzmmucb_d.d(46): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzmmucb_d.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool ret = true;\n    foreach(index,\
    \ item; lst) \n    {\n        if(index > 0) \n        {\n            if(lst[index-1]\
    \ > item)\n            {\n                ret = false;\n                break;\n\
    \            }\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcb0ert4k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length <= 1)\n        return\
    \ true;\n    return sort(lst) == lst;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw7khok13.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool flag = true;\n    long temp =\
    \ 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] < temp)\n    \
    \    {\n            flag = false;\n            break;\n        }\n        temp\
    \ = lst[i];\n    }\n    return flag;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpymtn0hag.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    size_t size = lst.length;\n    if\
    \ (size == 1)\n    {\n        return true;\n    }\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7k7trgm2.d(35): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7k7trgm2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    for (int i = 0; i < lst.length - 1;\
    \ i++) \n    {\n        if (lst[i] >= lst[i + 1])\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaerht5ys.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1)\n        return\
    \ true;\n    bool result = true;\n    foreach (i, n; lst)\n    {\n        if (i\
    \ != 0)\n        {\n            if (n < lst[i - 1])\n                result =\
    \ false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplxwml2ab.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool result = true;\n    long prev\
    \ = 0;\n    foreach(i; lst)\n    {\n        if(prev == i)\n        {\n       \
    \     result = false;\n            break;\n        }\n        else if(prev > i)\n\
    \        {\n            result = false;\n            break;\n        }\n     \
    \   prev = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprbqvmnyw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    /*\n    // Naive solution\n    if\
    \ (lst.length <= 1) return true;\n    long previous = lst[0];\n    foreach (long\
    \ item; lst[1..])\n    {\n        if (item < previous) return false;\n       \
    \ previous = item;\n    }\n    return true;\n    */\n    // More optimized solution\n\
    \    if (lst.length <= 1) return true;\n    long previous = lst[0];\n    foreach\
    \ (long item; lst[1..])\n    {\n        if (item < previous) return false;\n \
    \       previous = item;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt2pwao6w.d(44): Error: expression expected, not \'']\''\n/tmp/tmpt2pwao6w.d(44):
    Error: found \'')\'' when expecting \'']\''\n/tmp/tmpt2pwao6w.d(45): Error: found
    \''{\'' when expecting \'')\''\n/tmp/tmpt2pwao6w.d(49): Error: Declaration expected,
    not \''return\''\n/tmp/tmpt2pwao6w.d(50): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt2pwao6w.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long prev = long.min;\n    bool first\
    \ = true;\n    foreach(val; lst)\n    {\n        if(first)\n        {\n      \
    \      prev = val;\n            first = false;\n        }\n        else\n    \
    \    {\n            if(prev >= val)\n            {\n                return false;\n\
    \            }\n            prev = val;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppxul631a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool ascending;\n    bool duplicate;\n\
    \    foreach(i; 0 .. lst.length - 1)\n    {\n        if(lst[i] > lst[i + 1])\n\
    \        {\n            ascending = false;\n        }\n        if(lst[i] == lst[i\
    \ + 1])\n        {\n            duplicate = true;\n        }\n    }\n    return\
    \ ascending && !duplicate;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpira575d0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    \n    \n    // enumerate zip_longest(lst,\
    \ lst[1:]))\n    foreach((long item,long next) in zip_longest(lst, lst[1..$]))\n\
    \    {\n        \n        if(item > next)\n        {\n            return false;\n\
    \        }\n        \n    }\n    \n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6r2h8t_4.d(33): Error: basic type expected, not (\n/tmp/tmp6r2h8t_4.d(33):
    Error: function declaration without return type. (Note that constructors are always
    named \''this\'')\n/tmp/tmp6r2h8t_4.d(33): Error: no identifier for declarator
    int(long item, long next)\n/tmp/tmp6r2h8t_4.d(33): Error: found \''in\'' when
    expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6r2h8t_4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \nin {\n    foreach(i; 0 .. lst.length)\n \
    \       assert(lst[i] >= 0);\n} \nout {\n    foreach(j; 0 .. lst.length)\n   \
    \     assert(lst[j] >= 0);\n}\nbody {\n    if (lst.length == 0) return true;\n\
    \    for (int i = 0; i < lst.length-1; i++) {\n        if (lst[i] >= lst[i+1])\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplgxfyfzj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    /*\n    if (lst.length == 1)\n   \
    \     return true;\n    bool retval = true;\n    for (long i = 0; i < lst.length\
    \ - 1; i++)\n    {\n        if (lst[i] > lst[i + 1])\n        {\n            retval\
    \ = false;\n            break;\n        }\n    }\n    return retval;\n    */\n\
    \    auto v = sort(lst);\n    return v == lst;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt_qin74c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    size_t len = lst.length;\n    foreach(size_t\
    \ i; 0..len-1)\n    {\n        foreach(size_t j; i+1..len)\n        {\n      \
    \      if(lst[i]>lst[j])\n            {\n                return false;\n     \
    \       }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2m4qikfn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    bool result = true;\n    bool first\
    \ = true;\n    long last = 0;\n    foreach(n; lst)\n    {\n        if(!first)\n\
    \        {\n            if(last > n)\n            {\n                result =\
    \ false;\n                break;\n            }\n        }\n        last = n;\n\
    \        first = false;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp08qrz13.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length <= 1) return true;\n\
    \    long curr = lst[0];\n    int i = 1;\n    while (i < lst.length)\n    {\n\
    \        if (lst[i] < curr) return false;\n        else curr = lst[i];\n     \
    \   i += 1;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4uqv397a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    assert(!lst.empty);\n    long expected\
    \ = lst[0];\n    foreach(actual; lst[1..$])\n    {\n        if(actual < expected)\n\
    \            return false;\n        expected = actual;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp41spblg3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    auto const size = lst.length;\n  \
    \  auto last_element = lst[0];\n    for (size_t i = 1; i < size; i++) \n    {\n\
    \        if (lst[i] <= last_element)\n            return false;\n        last_element\
    \ = lst[i];\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfq816d1m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    // return true;\n    if (lst.length\
    \ == 1) return true;\n    long[] copy = lst.dup;\n    sort(copy);\n    int counter\
    \ = 0;\n    foreach(long i; copy) {\n        if (lst[counter] == i) ++counter;\n\
    \        else return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0cgg03v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n  // set prev = null\n  long? prev = null;\n\
    \  // iterate over the list \n  foreach(long i; lst) \n  {\n    // if prev !=\
    \ null and prev > i return false\n    if (prev is not null && prev > i)\n    \
    \  return false;\n    // prev = i\n    prev = i;\n  }\n  // return true\n  return\
    \ true;\n}\n \nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnm_pp9vr.d(31): Error: no identifier for declarator long\n/tmp/tmpnm_pp9vr.d(31):
    Error: found \''?\'' instead of statement\n/tmp/tmpnm_pp9vr.d(36): Error: found
    \''null\'' when expecting \'')\''\n/tmp/tmpnm_pp9vr.d(36): Error: found \''&&\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnm_pp9vr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length < 2) return true;\n\
    \    long prev = lst[0];\n    for (long i=1; i<lst.length; i++)\n    {\n     \
    \   if (prev > lst[i]) return false;\n        prev = lst[i];\n    }\n    return\
    \ true;\n}\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0uavmnbp.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp0uavmnbp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool flag = true;\n    for (int i\
    \ = 0; i < lst.length - 1; i++)\n    {\n        if (lst[i] >= lst[i + 1])\n  \
    \      {\n            flag = false;\n            break;\n        }\n    }\n  \
    \  return flag;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprfythw3k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n     auto num_elements = lst.length;\n\
    \     auto value_seen = false;\n     for (size_t i = 0; i < num_elements - 1;\
    \ i++)\n     {\n         if (value_seen)\n         {\n             if (lst[i]\
    \ == lst[i+1])\n             {\n                 return false;\n             }\n\
    \         }\n         if (lst[i] >= lst[i+1])\n         {\n             value_seen\
    \ = true;\n         }\n     }\n     return true;\n}\n \n/*\n    Given a list of\
    \ numbers, return whether or not the list is an arithmetic\n    sequence. An arithmetic\
    \ sequence is a list of numbers where each number\n    is the last number plus\
    \ some constant.\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp36mrgfgu.d(49): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp36mrgfgu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    return lst.length < 2 || lst[0..$-1].all!((e,\
    \ i) => lst[i] <= lst[i + 1]);\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpalee7l0k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool isSorted = true;\n    int arrSize\
    \ = lst.length;\n    int[] numOccurences = new int[arrSize];\n    for (int i =\
    \ 0; i < arrSize; i++)\n    {\n        numOccurences[i] = 0;\n    }\n    foreach(int\
    \ i; 0..arrSize-1)\n    {\n        foreach(int j; 0..arrSize-1)\n        {\n \
    \           if (lst[i] == lst[j])\n            {\n                numOccurences[i]\
    \ += 1;\n            }\n        }\n    }\n    foreach(int i; 0..arrSize-1)\n \
    \   {\n        if (numOccurences[i] > 1)\n        {\n            isSorted = false;\n\
    \        }\n    }\n    foreach(int i; 0..arrSize-1)\n    {\n        if (i > 0)\n\
    \        {\n            if (lst[i] < lst[i-1])\n            {\n              \
    \  isSorted = false;\n            }\n        }\n    }\n    return isSorted;\n\
    }\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_n2cenyt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    long prev = lst[0];\n    for (inout\
    \ long num : lst) \n    {\n        if (num < prev) \n        {\n            return\
    \ false;\n        }\n        prev = num;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpakyynbxc.d(31): Error: semicolon expected, not \'':\''\n/tmp/tmpakyynbxc.d(31):
    Error: expression expected, not \'':\''\n/tmp/tmpakyynbxc.d(31): Error: found
    \''lst\'' when expecting \'';\'' following for condition\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpakyynbxc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    auto t = tuple(lst);\n    auto l =\
    \ to!(long[])(t);\n    l.sort();\n    return l == lst;\n}\n \n/*\n    This version\
    \ works on any range, not just arrays.\n    The only reason we use a tuple at\
    \ all is that\n    array comparison needs the elements of the array\n    to be\
    \ Comparable.\n*/\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpezojygnr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    // TODO implement this function\n\
    \    // note that the arrays are passed in by reference\n    // to indicate this,\
    \ the variable name is prefixed\n    // with an &\n    long previous = lst[0];\n\
    \    int size = lst.length;\n    for (int i = 1; i < size; i++) {\n        if\
    \ (lst[i] <= previous) {\n            return false;\n        }\n        previous\
    \ = lst[i];\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp25rzlnz2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1) \n    {\n   \
    \     return true;\n    }\n    for (size_t i = 0; i < lst.length - 1; i++) \n\
    \    {\n        if (lst[i] >= lst[i + 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate =\
    \ is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx0h68wsu.d(43): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpx0h68wsu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    int i = 0;\n    int j = 0;\n    int\
    \ len = lst.length;\n    long cur = 0;\n    long last = 0;\n    bool ret = true;\n\
    \    bool first = true;\n    if (len > 1)\n    {\n        for (i = 0; i < len;\
    \ i++)\n        {\n            cur = lst[i];\n            if (first)\n       \
    \     {\n                last = cur;\n                first = false;\n       \
    \     }\n            else\n            {\n                if (cur >= last)\n \
    \               {\n                    j = i;\n                    if (j < len\
    \ - 1)\n                    {\n                        last = cur;\n         \
    \           }\n                }\n                else\n                {\n  \
    \                  ret = false;\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return ret;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkzo37mdm.d(67): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpkzo37mdm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    import std.algorithm;\n    import\
    \ std.math;\n    bool res = true;\n    long[] temp = lst.dup;\n    temp.sort;\n\
    \    if (temp != lst) res = false;\n    return res;\n}\n \n/*\n    Given a key,\
    \ modify a hash such that the modified hash is\n    equal to the hash of the key,\
    \ if the key exists in the hash.\n    If the key does not exist, add it to the\
    \ hash and make the\n    value of the key equal to the hash of the key.\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkfhlvhi3.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpkfhlvhi3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    immutable long? old_num = null; \n\
    \    immutable long? new_num = null; \n    immutable bool ok = true; \n    foreach(num;\
    \ lst) \n    { \n        if(ok && new_num is null) \n        { \n            new_num\
    \ = num; \n        } \n        else if(old_num == num) \n        { \n        \
    \    ok = false; \n        } \n        else if(new_num <= num) \n        { \n\
    \            old_num = new_num; \n            new_num = num; \n        } \n  \
    \      else \n        { \n            ok = false; \n        } \n    } \n    return\
    \ ok; \n} \n/*\n    Return true if there is a difference of 1 or less \n    between\
    \ any two adjacent numbers, else return false. \n    If array has more than 1\
    \ duplicate of the same number, \n    return false. Assume no negative numbers\
    \ and only integers. \n    \n    >>> is_consecutive([1L, 1L, 2L, 3L, 4L, 5L])\n\
    \    true\n    >>> is_consecutive([1L, 1L, 1L, 2L, 3L, 4L])\n    false\n    >>>\
    \ is_consecutive([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n    >>> is_consecutive([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_consecutive([1L, 2L, 3L, 4L,\
    \ 5L, 6L, 7L, 8L])\n    true\n    >>> is_consecutive([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L, 9L])\n    true\n    >>> is_consecutive([1L, 2L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L, 10L])\n    true\n    >>> is_consecutive([1L, 2L, 3L, 4L, 5L, 6L, 7L,\
    \ 8\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp77h8at1i.d(30): Error: no identifier for declarator long\n/tmp/tmp77h8at1i.d(30):
    Error: found \''?\'' instead of statement\n/tmp/tmp77h8at1i.d(31): Error: no identifier
    for declarator long\n/tmp/tmp77h8at1i.d(31): Error: found \''?\'' instead of statement\n/tmp/tmp77h8at1i.d(55):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp77h8at1i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool res = true;\n    long[] arr =\
    \ [5L, 1L, 3L, 2L, 4L, 5L, 1L, 3L, 2L, 4L, 5L, 6L, 1L, 3L, 2L, 4L, 5L, 6L, 7L,\
    \ 1L, 3L, 2L, 4L, 5L, 6L, 7L, 1L, 2L, 2L, 3L, 3L, 4L, 1L, 2L, 2L, 2L, 3L, 4L];\n\
    \    foreach(i; lst)\n    {\n        if(arr[i] >= arr[i + 1])\n        {\n   \
    \         res = false;\n        }\n    }\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwe7tk6i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length==1) return true;\n\
    \    for (long i=0; i<lst.length-1; i++) \n    {\n        if (lst[i]==lst[i+1])\
    \ return false;\n        if (lst[i]>lst[i+1]) return false;\n    }\n    return\
    \ true;\n}\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1uy1z841.d(38): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp1uy1z841.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool sorted;\n    long value_last\
    \ = 0;\n    long value_current = 0;\n    long value_next = 0;\n    bool is_duplicate;\n\
    \    bool is_duplicate_last;\n    bool is_duplicate_current;\n    long count_duplicate;\n\
    \    bool has_duplicate;\n    bool duplicate_found;\n    bool duplicates_found;\n\
    \    bool true_value;\n    long i;\n    long a;\n    long b;\n    long c;\n  \
    \  long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n\
    \    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n\
    \    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long length;\n\
    \    long xxx;\n    long yyy;\n    long zzz;\n    long last_value;\n    long current_value;\n\
    \    long next_value;\n    bool has_duplicate;\n    bool duplicate_found;\n  \
    \  bool duplicates_found;\n    bool is_duplicate;\n    bool is_duplicate_last;\n\
    \    bool is_duplicate_current;\n    long count_duplicate;\n    bool true_value;\n\
    \    long i;\n    long a;\n    long b;\n    long c;\n    long j;\n    long k;\n\
    \    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n\
    \    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n\
    \    long x;\n    long y;\n    long z;\n    // \n    true_value = 1;\n    false_value\
    \ = 0;\n    count_duplicate = 0;\n    length = lst.length;\n    has_duplicate\
    \ = false;\n    duplicate_found = false;\n    duplicates_found = false;\n    is_duplicate\
    \ = false;\n    is_dupl\nunittest\n{\n    alias candidate = is_sorted;\n\n   \
    \ assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk9_kjwxs.d(109): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmpk9_kjwxs.d(127): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpk9_kjwxs.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    auto sorted = true;\n    auto prev\
    \ = lst[0];\n    foreach(l; lst) \n    {\n        if(l < prev) \n        {\n \
    \           sorted = false;\n            break;\n        }\n        prev = l;\n\
    \    }\n    return sorted;\n}\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp40uudl26.d(43): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp40uudl26.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    auto copy = lst.dup;\n    return copy.length\
    \ == copy.sort.length;\n}\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3pq40xv1.d(33): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3pq40xv1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    int len = lst.length;\n    if (len\
    \ < 2) return true;\n    for (int i = 1; i < len; i++)\n    {\n        if (lst[i-1]\
    \ >= lst[i]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkr5mdyzn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    auto temp = lst[0];\n    foreach(item;\
    \ lst)\n    {\n        if(temp >= item)\n        {\n            temp = item;\n\
    \        }\n        else\n        {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n \
    \   assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpft_sh38m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    foreach(int index, long elem; lst)\
    \ \n    {\n        if(index + 1 == lst.length)\n            return true;\n   \
    \     long next_elem = lst[index + 1];\n        if(elem > next_elem)\n       \
    \     return false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1bgs22uo.d(40): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp1bgs22uo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool sorted = true;\n    long temp\
    \ = -1;\n    long prev = -1;\n    foreach(elem; lst)\n    {\n        if(elem <\
    \ temp)\n        {\n            sorted = false;\n            break;\n        }\n\
    \        if(elem == prev)\n        {\n            sorted = false;\n          \
    \  break;\n        }\n        temp = elem;\n        prev = elem;\n    }\n    return\
    \ sorted;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44hpr9af.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length <= 1) \n    {\n   \
    \     return true;\n    }\n    /*\n    auto tpl = zip(lst[0..$-1], lst[1..$]);\n\
    \    foreach (Idx, Pair; tpl) \n    {\n        if (Pair[0] > Pair[1]) \n     \
    \   {\n            return false;\n        }\n    }\n    */\n    for (int i = 0;\
    \ i < lst.length-1; i++)\n    {\n        if (lst[i] > lst[i+1])\n        {\n \
    \           return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n  \
    \  assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyxunrmas.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    bool is_ok = true;\n    long prev\
    \ = lst[0];\n    foreach(i; lst)\n    {\n        if(prev != i)\n        {\n  \
    \          if(prev > i)\n            {\n                is_ok = false;\n     \
    \           break;\n            }\n        }\n        prev = i;\n    }\n    return\
    \ is_ok;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphow0j8t8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    size_t size = lst.length;\n    foreach(i,\
    \ j; zip(iota(size - 1), iota(1, size)))\n    {\n        if(lst[i] > lst[j])\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm2izqpof.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    int count = 0;\n    foreach(i; lst)\n\
    \    {\n        if(i == lst[0])\n        {\n            count++;\n        }\n\
    \    }\n    if(count == lst.length)\n    {\n        return true;\n    }\n    for(int\
    \ i = 0; i < lst.length - 1; i++)\n    {\n        if(lst[i] > lst[i + 1])\n  \
    \      {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdqqbcim.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    \n    assert (lst.length > 0);\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdu1j8nm6.d(32): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdu1j8nm6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    long prev = lst[0];\n    for (long\
    \ i = 1; i < lst.length; i++)\n    {\n        if (prev > lst[i])\n        {\n\
    \            return false;\n        }\n        else if (prev == lst[i])\n    \
    \    {\n            return false;\n        }\n        prev = lst[i];\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeyq61l7w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool isSorted = true;\n    long prevItem\
    \ = lst[0];\n    foreach(item; lst) \n    {\n        if(item < prevItem) \n  \
    \      {\n            isSorted = false;\n            break;\n        }\n     \
    \   prevItem = item;\n    }\n    return isSorted;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0mom6lez.d(43): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp0mom6lez.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n    if (lst.length > 1) \n        for (i\
    \ in 0..lst.length-2) \n            if (lst[i] > lst[i+1]) \n                return\
    \ false;\n    return true;\nunittest\n{\n    alias candidate = is_sorted;\n\n\
    \    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprbzf13nd.d(29): Error: semicolon expected following function
    declaration\n/tmp/tmprbzf13nd.d(29): Error: Declaration expected, not \''if\''\n/tmp/tmprbzf13nd.d(33):
    Error: Declaration expected, not \''return\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmprbzf13nd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    for (int i = 0; i < lst.length - 1;\
    \ i++)\n    {\n        if (lst[i] > lst[i + 1])\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbioe64tp.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpbioe64tp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    /*\n    for (long i = 0; i < lst.length;\
    \ i++)\n    {\n        if (i > 0 && lst[i] < lst[i - 1])\n        {\n        \
    \    return false;\n        }\n    }\n    return true;\n    */\n    return lst.equal(array(0L,\
    \ 1L, 2L, 3L, 4L, 5L, 6L, 7L));\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6uz25n38.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    int index = 0;\n    if (lst.length\
    \ == 1) return true;\n    while (index < lst.length - 1)\n    {\n        if (lst[index]\
    \ <= lst[index + 1])\n        {\n            index += 1;\n        }\n        else\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsu8atdtb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length < 2)\n        return\
    \ true;\n    auto range = minmaxElement(lst);\n    auto min = range.getFirst;\n\
    \    auto max = range.getSecond;\n    auto result = false;\n    if ((max - min\
    \ + 1) == lst.length) \n    {\n        result = true;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppftv1d51.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    /*\n        lst.length > 0\n     \
    \   lst.length == 1 \n        lst.length > 1 \n    */\n    if (lst.length == 0)\n\
    \    {\n        return true;\n    }\n    else if (lst.length == 1)\n    {\n  \
    \      return true;\n    }\n    else\n    {\n        return is_sorted(lst[1 ..\
    \ $]);\n    }\n}\n/*\n    Given an array of numbers and a number, return the array\
    \ sorted \n    ascendingly and with the given number inserted in the correct spot.\
    \ \n    You should modify the input array and not create a new array.\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxyc5zjnp.d(48): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxyc5zjnp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1) return true;\n\
    \    if (lst.length == 2) return lst[0] < lst[1];\n    for (iota(0L, lst.length-1,\
    \ 1L))\n    {\n        if (lst[i] > lst[i+1]) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0hqyhhc5.d(32): Error: found \'')\'' when expecting \'';\''
    following statement\n/tmp/tmp0hqyhhc5.d(36): Error: found \''return\'' when expecting
    \'';\'' following for condition\n/tmp/tmp0hqyhhc5.d(36): Error: found \'';\''
    when expecting \'')\''\n/tmp/tmp0hqyhhc5.d(37): Error: found \''}\'' instead of
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0hqyhhc5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool result = true;\n    if (lst.length\
    \ > 1)\n    {\n        auto lst_length = lst.length;\n        for (int i = 0;\
    \ i < lst_length - 1; i++)\n        {\n            if (lst[i] > lst[i + 1])\n\
    \            {\n                result = false;\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd6264ni_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length <= 1)\n        return\
    \ true;\n    return is_sorted_rec(lst.take(lst.length - 1), lst[lst.length - 1]);\n\
    }\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9d5tsoi6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \nin {\n    assert(lst.length > 0L);\n    assert(lst.length\
    \ < 8L);\n    foreach (i, v; lst) {\n        assert(v > 0L);\n    }\n}\nout (bool\
    \ result) \n{\n    assert(result || !result);\n}\n{\n    bool result = true;\n\
    \    long previous = lst[0L];\n    foreach (index, value; lst) {\n        if (index\
    \ > 0L) {\n            if (value == previous) {\n                result = false;\n\
    \                break;\n            }\n            if (value < previous) {\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n        previous = value;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n  \
    \  assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppegv6d58.d(36): Error: (identifier) following \''out\'' expected,
    not bool\n/tmp/tmppegv6d58.d(36): Error: found \''result\'' when expecting \'')\''\n/tmp/tmppegv6d58.d(36):
    Error: statement expected to be { }, not )\n/tmp/tmppegv6d58.d(36): Error: found
    \'')\'' instead of statement\n/tmp/tmppegv6d58.d(39): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppegv6d58.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1) return true;\n\
    \    for (size_t i = 0; i < lst.length-1; i++)\n    {\n        if (lst[i] >= lst[i+1])\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmponerjjo3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length < 2) \n    {\n    \
    \    return true;\n    } \n    else \n    {\n        auto zipped_list = zip(lst[0..$-1],\
    \ lst[1..$]);\n        for (auto l; zipped_list) \n        {\n            if (l[0]\
    \ >= l[1]) \n            {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n}\n// Given an array of numbers, return\
    \ whether or not they are sorted\n// in ascending order. If array has more than\
    \ 1 duplicate of the same\n// number, return false. Assume no negative numbers\
    \ and only integers.\n \n// Examples\n// >>> is_sorted([5L])\n// true\n// >>>\
    \ is_sorted([1L, 2L, 3L, 4L, 5L])\n// true\n// >>> is_sorted([1L, 3L, 2L, 4L,\
    \ 5L])\n// false\n// >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n// true\n// >>>\
    \ is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n// true\n// >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L, 6L, 7L])\n// false\n// >>> is_sorted([1L, 2L, 2L, 3L, 3L, 4L])\n\
    // true\n// >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n// false\n \n \nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmponew06oz.d(37): Error: no identifier for declarator l\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmponew06oz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    /*\n    bool sorted = true;\n    int\
    \ i;\n    for (i = 0; i < lst.length - 1; i++)\n    {\n        if (lst[i] > lst[i\
    \ + 1])\n        {\n            sorted = false;\n            break;\n        }\n\
    \    }\n    return sorted;\n    */\n    if (lst.length < 2)\n    {\n        return\
    \ true;\n    }\n    if (lst[0] > lst[1])\n    {\n        return false;\n    }\n\
    \    return is_sorted(lst[1..$]);\n    \n}\n/*\n    Returns the index in the lst\
    \ of the item if the item is in the list,\n    -1 otherwise.\n    \n    Examples\n\
    \    >>> linear_search([1L, 3L, 2L, 4L, 5L, 6L, 7L], 1L)\n    0\n    >>> linear_search([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L], 2L)\n    2\n    >>> linear_search([1L, 3L, 2L, 4L,\
    \ 5L, 6L, 7L], 7L)\n    6\n    >>> linear_search([1L, 3L, 2L, 4L, 5L, 6L, 7L],\
    \ 8L)\n    -1\n*/\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz05vw6vr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    return lst.isSorted();\n}\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu8ax374n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    int len = lst.length;\n    if (len\
    \ < 2)\n        return true;\n    int value = lst[0];\n    for (int i = 1; i <\
    \ len; i++)\n    {\n        if (lst[i] == value)\n            return false;\n\
    \        if (lst[i] < value)\n            return false;\n        value = lst[i];\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n\
    \    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp67khpjn2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool result = true;\n    long length\
    \ = lst.length;\n    if (length == 1) \n    {\n        return true;\n    }\n \
    \   else \n    {\n        long end = length - 1;\n        foreach (i, x; lst)\
    \ \n        {\n            if (i == end)\n            {\n                break;\n\
    \            }\n            else \n            {\n                long next =\
    \ i + 1;\n                if (lst[i] >= lst[next]) \n                {\n     \
    \               result = false;\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nunittest\n{\n   \
    \ alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmuosjidb.d(58): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmuosjidb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool b = true;\n    for (int i = 0;\
    \ i < lst.length - 1; i++)\n    {\n        if (lst[i] < lst[i + 1])\n        {\n\
    \            b = true;\n        }\n        else\n        {\n            b = false;\n\
    \            break;\n        }\n    }\n    return b;\n}\n/*\nunittest\n{\n   \
    \ alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkjhk0ilm.d(45): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpkjhk0ilm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    auto i = 0;\n    auto n = lst.length;\n\
    \    while (i < n - 1)\n    {\n        if (lst[i] > lst[i + 1])\n            return\
    \ false;\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3emq52ar.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length <= 1)\n        return\
    \ true;\n    long prev_elem = lst[0];\n    foreach (elem; lst[1..$])\n    {\n\
    \        if (elem < prev_elem)\n            return false;\n        prev_elem =\
    \ elem;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc74dq5b1.d(41): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpc74dq5b1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1)\n        return\
    \ true;\n    if (lst.length == 2)\n        return lst[0] <= lst[1];\n    \n  \
    \  int i = 0;\n    while (i < lst.length - 1)\n    {\n        if (lst[i] > lst[i\
    \ + 1])\n            return false;\n        i++;\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6666908v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length <= 1)\n        return\
    \ true;\n    \n    bool b = true;\n    long prev = lst[0];\n    for (long i =\
    \ 1; i < lst.length; i++)\n    {\n        if (prev > lst[i])\n        {\n    \
    \        b = false;\n            break;\n        }\n        prev = lst[i];\n \
    \   }\n    return b;\n}\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\n\
    \    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuyme5f3z.d(46): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpuyme5f3z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    for (int i = 0; i < lst.length - 1;\
    \ i++) \n    {\n        if (lst[i] >= lst[i + 1])\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1onqgpq6.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp1onqgpq6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length > 1)\n    {\n     \
    \   for (int i = 0; i < lst.length - 1; i++)\n        {\n            if (lst[i]\
    \ > lst[i + 1])\n            {\n                return false;\n            }\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkua68clz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    auto it = lst.begin();\n    auto end\
    \ = lst.end();\n    if (it != end) {\n        auto prev = *it;\n        while\
    \ (++it != end) {\n            if (prev >= *it) return false;\n            prev\
    \ = *it;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpplsz8kmu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n  bool res;\n  long prev = 0;\n  bool\
    \ first = true;\n  foreach(n; lst)\n  {\n    if(first)\n    {\n      prev = n;\n\
    \      first = false;\n    }\n    else\n    {\n      if(prev != n)\n      {\n\
    \        if(prev > n)\n        {\n          res = false;\n          break;\n \
    \       }\n        else\n        {\n          prev = n;\n        }\n      }\n\
    \      else\n      {\n        res = false;\n        break;\n      }\n    }\n \
    \ }\n  return res;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc4v0_ejj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length <= 1)\n        return\
    \ true;\n    \n    if (lst[0] > lst[1])\n        return false;\n    \n    long[]\
    \ tail = lst[1..$];\n    return is_sorted(tail);\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpui9w3hwy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool result = true;\n    foreach(i,j;\
    \ zip(lst[0..$-1], lst[1..$]))\n    {\n        if(i[0] > i[1]) result = false;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpde_nrrh2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    auto tpl = tuple(lst[0L], true);\n\
    \    foreach(e; lst[1L..$])\n    {\n        tpl[1] = (tpl[0] <= e) && tpl[1];\n\
    \        tpl[0] = e;\n    }\n    return tpl[1];\n}\n \n/*\n    Given a sorted\
    \ array of numbers, return whether or not the array\n    contains an element with\
    \ given value. Assume no negative numbers\n    and only integers.\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc0uefw8s.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpc0uefw8s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015480
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n    if (lst.length == 1) \n        return\
    \ true;\n    else \n        return is_sorted_helper(lst, 0);\n    \nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nto98xx.d(29): Error: semicolon expected following function
    declaration\n/tmp/tmp3nto98xx.d(29): Error: Declaration expected, not \''if\''\n/tmp/tmp3nto98xx.d(31):
    Error: Declaration expected, not \''else\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3nto98xx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    auto prev = lst[0];\n    foreach(i;\
    \ lst[1..$])\n    {\n        if(i < prev)\n            return false;\n       \
    \ prev = i;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd9pgt48x.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpd9pgt48x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n    pure nothrow @safe\n{\n    size_t length\
    \ = lst.length;\n    if (length == 0) return true;\n    foreach (index, l; lst)\
    \ \n    {\n        if (index == 0) \n        {\n            continue;\n      \
    \  }\n        else if (lst[index - 1] > l) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpttzbkgly.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long prev;\n    if(lst.length > 0)\n\
    \    {\n        prev = lst[0];\n        foreach(curr; lst)\n        {\n      \
    \      if(curr < prev)\n            {\n                return false;\n       \
    \     }\n            prev = curr;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2kqgwnys.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    assert(lst.length > 0);\n    long\
    \ n = lst[0];\n    int  i = 1;\n    while (i < lst.length)\n    {\n        long\
    \ curr = lst[i];\n        if (curr < n)\n            return false;\n        n\
    \ = curr;\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqr_kj7a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1)\n        return\
    \ true;\n    else if (lst.length == 2)\n        return lst[0] < lst[1];\n    else\n\
    \    {\n        long[] head = lst[0..$-1];\n        long[] tail = lst[1..$];\n\
    \        long[] sa1 = sort(head);\n        long[] sa2 = sort(tail);\n        return\
    \ sa1 == sa2;\n    }\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n   \
    \ assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuap_6wq_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool? is_sorted = null;\n    int len\
    \ = lst.length;\n    foreach(i, e; lst) \n    {\n        if (is_sorted.isNone)\
    \ \n        {\n            if (i + 1 >= len) break;\n            is_sorted = lst[i]\
    \ <= lst[i + 1];\n        } \n        else if (is_sorted.isSome) \n        {\n\
    \            if (i + 1 >= len) break;\n            if (lst[i] <= lst[i + 1] !=\
    \ is_sorted.get) return false;\n        }\n    }\n    return true;\n}\n// NOTE:\
    \ Not efficient, but simple\nunittest\n{\n    alias candidate = is_sorted;\n\n\
    \    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2h9o9gdb.d(30): Error: no identifier for declarator bool\n/tmp/tmp2h9o9gdb.d(30):
    Error: found \''?\'' instead of statement\n/tmp/tmp2h9o9gdb.d(42): Error: found
    \''!=\'' when expecting \'')\''\n/tmp/tmp2h9o9gdb.d(42): Error: found \'')\''
    when expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2h9o9gdb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n    if (lst.length == 1) return true;\n \
    \   return lst.every!(a => a > a[0]) && lst.every!(a => a < a[$ - 1]);\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyog6vbzy.d(29): Error: semicolon expected following function
    declaration\n/tmp/tmpyog6vbzy.d(29): Error: Declaration expected, not \''if\''\n/tmp/tmpyog6vbzy.d(30):
    Error: Declaration expected, not \''return\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpyog6vbzy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long max = lst[0];\n    for (long\
    \ i = 1; i < lst.length; i++)\n    {\n        if (lst[i] <= max)\n        {\n\
    \            return false;\n        }\n        max = lst[i];\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu3o_oq5t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    //<--Template begins here\n    int\
    \ i = 0;\n    while (i < lst.length - 1) \n    {\n        if (lst[i] > lst[i +\
    \ 1]) \n        {\n            return false;\n        }\n        i++;\n    }\n\
    \    return true;\n    //Template ends here-->\n}\n/*\n    Given a sorted array\
    \ of numbers, return whether or not the array contains a given number.\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdknmct1l.d(43): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdknmct1l.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n  long comparer = 0;\n  for (long i =\
    \ 0; i < lst.length; i++)\n  {\n    if (lst[i] <= comparer)\n    {\n      return\
    \ false;\n    }\n    comparer = lst[i];\n  }\n  return true;\n}\nunittest\n{\n\
    \    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n  \
    \  assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq86ej5b4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long prev = lst[0];\n    foreach(long\
    \ x; lst) \n    {\n        if (x < prev) \n        {\n            return false;\n\
    \        }\n        prev = x;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpetrsdbwp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long[] temp = lst.dup;\n    temp.sort;\n\
    \    lst.sort;\n    return lst == temp;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpogw9ucl4.d(35): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpogw9ucl4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015481
