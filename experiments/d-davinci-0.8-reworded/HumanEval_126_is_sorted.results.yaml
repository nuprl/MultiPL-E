name: HumanEval_126_is_sorted
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1)\n        return\
    \ true;\n    else if (lst.length == 2)\n        return lst[0] < lst[1];\n    else\n\
    \    {\n        for (int i = 0; i < lst.length - 1; i++)\n        {\n        \
    \    if (lst[i] > lst[i + 1])\n                return false;\n        }\n    \
    \    return true;\n    }\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n\
    \    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpcll9t6es.d(38): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4285ce]\\n??:? bool tmpcll9t6es.is_sorted(long[]) [0x427da4]\\\
    n??:? void tmpcll9t6es.__unittest_L44_C1() [0x428052]\\n??:? void tmpcll9t6es.__modtest()\
    \ [0x4282a0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c59f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b432]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4305c5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a74]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430551]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b409]\\n??:? runModuleUnitTests [0x42c375]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428967]\\n??:? _d_run_main [0x4288d2]\\n??:? main [0x4282b3]\\\
    n??:? __libc_start_main [0x39e4a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    if (lst.length < 2) \n        return\
    \ true;\n    int prev = lst[0];\n    foreach (int x; lst[1..$]) \n    {\n    \
    \    if (x > prev)\n            prev = x;\n        else\n            return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n\
    \    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf_g_hcak.d(32): Error: cannot implicitly convert expression `lst[0]`\
    \ of type `long` to `int`\\n/tmp/tmpf_g_hcak.d(33): Error: cannot implicitly convert\
    \ expression `__r73[__key74]` of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpf_g_hcak.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long d_lst = lst.dup;\n    d_lst.sort;\n\
    \    foreach(i, val; lst) {\n        if(val != d_lst[i]) return false;\n    }\n\
    \    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\n  \
    \  assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvpcarx6u.d(37): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvpcarx6u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    auto len = lst.length;\n    if (len\
    \ == 1) \n    {\n        return true;\n    } \n    else \n    {\n        long\
    \ prev = lst[0];\n        bool is_dup = false;\n        foreach (i, ref n; lst[1..len])\
    \ \n        {\n            if (n < prev) \n            {\n                return\
    \ false;\n            }\n            if (n == prev) \n            {\n        \
    \        if (is_dup) \n                {\n                    return false;\n\
    \                } \n                else \n                {\n              \
    \      is_dup = true;\n                }\n            } \n            else \n\
    \            {\n                is_dup = false;\n            }\n            prev\
    \ = n;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpuyyqojm9.d(37): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4285de]\\n??:? bool tmpuyyqojm9.is_sorted(long[]) [0x427d3d]\\\
    n??:? void tmpuyyqojm9.__unittest_L65_C1() [0x42805e]\\n??:? void tmpuyyqojm9.__modtest()\
    \ [0x4282ac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5af]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b442]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4305d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430561]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b419]\\n??:? runModuleUnitTests [0x42c385]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428977]\\n??:? _d_run_main [0x4288e2]\\n??:? main [0x4282bf]\\\
    n??:? __libc_start_main [0x472d8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1)\n        return\
    \ true;\n    else\n    {\n        bool result = true;\n        auto it = lst.front;\n\
    \        while (it != lst.back)\n        {\n            auto next = it + 1;\n\
    \            if (*it >= *next)\n            {\n                result = false;\n\
    \                break;\n            }\n            it = next;\n        }\n  \
    \      return result;\n    }\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqwpfu5nx.d(35): Error: no property `front` for type `long[]`\\\
    n/tmp/tmpqwpfu5nx.d(36): Error: no property `back` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqwpfu5nx.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1) return true;\n\
    unittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgqk_xa7y.d(31): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgqk_xa7y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{ \n    long i = 0;\n    long j = 1;\n  \
    \  long len = lst.length;\n    while (j < len)\n    {\n        if (lst[i] > lst[j])\
    \ \n        {\n            return false;\n        } \n        else \n        {\n\
    \            i++;\n            j++;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp43b_o3cg.d(60): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284cd]\\n??:? void tmp43b_o3cg.__unittest_L47_C1()\
    \ [0x428105]\\n??:? void tmp43b_o3cg.__modtest() [0x42824c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3e2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430575]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430501]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b9]\\n??:? runModuleUnitTests [0x42c325]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428990]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428917]\\n??:? _d_run_main [0x428882]\\n??:? main [0x42825f]\\\
    n??:? __libc_start_main [0xba93f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    \n    \n    if (lst.length == 1) return\
    \ true;\n    bool val = true;\n    for (int i = 0; i < lst.length - 1; i++)\n\
    \    {\n        if (lst[i] < lst[i + 1])\n        {\n            continue;\n \
    \       }\n        else\n        {\n            val = false;\n            break;\n\
    \        }\n    }\n    return val;\n}\n/*\n    Given an array of numbers and a\
    \ target number, return whether or not\n    there are two numbers in the array\
    \ which add up to the target number.\n    Assume only positive integers, no negatives.\n\
    unittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsitpxsn5.d(48): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsitpxsn5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool found_dup = false;\n    foreach(i,\
    \ v; lst) \n    {\n        if(v == lst[i-1]) \n        {\n            found_dup\
    \ = true;\n        }\n        if(v < lst[i-1]) \n        {\n            return\
    \ false;\n        }\n    }\n    return !found_dup;\n}\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp1hl3th63.d(33): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4285b6]\\n??:? bool tmp1hl3th63.is_sorted(long[]) [0x427d73]\\\
    n??:? void tmp1hl3th63.__unittest_L44_C1() [0x427e0c]\\n??:? void tmp1hl3th63.__modtest()\
    \ [0x428288]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c587]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b41a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4305ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430539]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f1]\\n??:? runModuleUnitTests [0x42c35d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42894f]\\n??:? _d_run_main [0x4288ba]\\n??:? main [0x42829b]\\\
    n??:? __libc_start_main [0x7c89f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    // Initialize a boolean variable sorted\
    \ to be true\n    bool sorted = true;\n    // Create a variable called previous\
    \ and set it to the first element in lst\n    long previous = lst[0];\n    //\
    \ Create a for loop. for i in 2..lst.length\n    for (int i = 1; i < lst.length;\
    \ i++)\n    {\n        // if previous > lst[i]\n        if (previous > lst[i])\n\
    \        {\n            // sorted = false\n            sorted = false;\n     \
    \       // break\n            break;\n        }\n        // previous = lst[i]\n\
    \        previous = lst[i];\n    }\n    // Return sorted\n    return sorted;\n\
    }\n// Define is_sorted\n// Create a boolean is_sorted\nunittest\n{\n    alias\
    \ candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp0sa_iz3e.d(33): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42859e]\\n??:? bool tmp0sa_iz3e.is_sorted(long[]) [0x427d2f]\\\
    n??:? void tmp0sa_iz3e.__unittest_L53_C1() [0x42801e]\\n??:? void tmp0sa_iz3e.__modtest()\
    \ [0x42826c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c56f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b402]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430595]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430521]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d9]\\n??:? runModuleUnitTests [0x42c345]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428937]\\n??:? _d_run_main [0x4288a2]\\n??:? main [0x42827f]\\\
    n??:? __libc_start_main [0x89a71554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length == 1) \n    {\n   \
    \     return true;\n    }\n    if (lst.length == 2) \n    {\n        return lst[0]\
    \ != lst[1];\n    }\n    if (lst.length == 3) \n    {\n        return lst[0] !=\
    \ lst[1] && lst[1] != lst[2];\n    }\n    int index = 1;\n    long curr = lst[0];\n\
    \    while (index < lst.length) \n    {\n        if (curr != lst[index]) \n  \
    \      {\n            curr = lst[index];\n            index++;\n        }\n  \
    \      else \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbso6j0ik.d(64): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4285e5]\\n??:? void tmpbso6j0ik.__unittest_L58_C1()\
    \ [0x427fc2]\\n??:? void tmpbso6j0ik.__modtest() [0x428368]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c667]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b4fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43068d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b3c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430619]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b4d1]\\n??:? runModuleUnitTests [0x42c43d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428aa8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428a2f]\\n??:? _d_run_main [0x42899a]\\n??:? main [0x42837b]\\\
    n??:? __libc_start_main [0x70499554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long[] sorted = sort(lst);\n    long\
    \ length = lst.length;\n    bool is_sorted = true;\n    long i = 0L;\n    while(i\
    \ < length && is_sorted) \n    {\n        if(lst[i] != sorted[i]) \n        {\n\
    \            is_sorted = false;\n        }\n        i += 1L;\n    }\n    return\
    \ is_sorted;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ms6gcis.d(30): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ms6gcis.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    foreach(i; 1..lst.length)\n    {\n\
    \        if(lst[i-1] > lst[i])\n        {\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi9hqdnrc.d(39): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi9hqdnrc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    return lst.sorted();\n}\nunittest\n\
    {\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp33yhocl3.d(30): Error: no property `sorted` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp33yhocl3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long prev = lst[0];\n    foreach(el;\
    \ lst)\n    {\n        if(el < prev) return false;\n        prev = el;\n    }\n\
    \    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\n  \
    \  assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp68fw2ym3.d(38): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp68fw2ym3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long prev = lst[0];\n    foreach(long\
    \ e; lst)\n    {\n        if(e == prev)\n            return false;\n        prev\
    \ = e;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjyew9k3q.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284bd]\\n??:? void tmpjyew9k3q.__unittest_L39_C1()\
    \ [0x427ddb]\\n??:? void tmpjyew9k3q.__modtest() [0x428240]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c53f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430565]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3a9]\\n??:? runModuleUnitTests [0x42c315]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428980]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428907]\\n??:? _d_run_main [0x428872]\\n??:? main [0x428253]\\\
    n??:? __libc_start_main [0x36bce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    bool sorted = true;\n    for (long\
    \ a = 0; a < lst.length - 1; a++)\n    {\n        if (lst[a] > lst[a + 1])\n \
    \       {\n            sorted = false;\n        }\n    }\n    return sorted;\n\
    }\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L,\
    \ 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n  \
    \  assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([])\
    \ == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L,\
    \ 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_gutoshx.d(40): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_gutoshx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    /*\n    //solution 1\n    long last\
    \ = lst[0];\n    foreach(int i, long element; lst)\n    {\n        if(last >=\
    \ element)\n            return false;\n        last = element;\n    }\n    return\
    \ true;\n    */\n    //solution 2\n    long[] lst_copy = lst[0..$];\n    sort(lst_copy);\n\
    \    return lst == lst_copy;\n}\nunittest\n{\n    alias candidate = is_sorted;\n\
    \n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L,\
    \ 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpts9pzqrq.d(43): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpts9pzqrq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    if (lst.length<=1)\n        return\
    \ true;\n    auto current, previous = lst[0];\n    for (long i=1; i<lst.length;\
    \ i++)\n    {\n        current = lst[i];\n        if (current>previous)\n    \
    \        previous = current;\n        else\n            return false;\n    }\n\
    \    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_sorted;\n\n  \
    \  assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L])\
    \ == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n\
    \    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n  \
    \  assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L,\
    \ 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n\
    \    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv7d972eh.d(32): Error: no identifier for declarator `current`\\\
    n/tmp/tmpv7d972eh.d(32): Error: found `,` instead of statement\\n/tmp/tmpv7d972eh.d(43):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpv7d972eh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of numbers,\
    \ return whether or not they are sorted\n    in ascending order. If array has\
    \ more than 1 duplicate of the same\n    number, return false. Assume no negative\
    \ numbers and only integers.\n\n    Examples\n    >>> is_sorted([5L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L])\n    true\n    >>> is_sorted([1L, 3L,\
    \ 2L, 4L, 5L])\n    false\n    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\n    true\n\
    \    >>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    true\n    >>> is_sorted([1L,\
    \ 3L, 2L, 4L, 5L, 6L, 7L])\n    false\n    >>> is_sorted([1L, 2L, 2L, 3L, 3L,\
    \ 4L])\n    true\n    >>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\n    false\n   \
    \ \n*/\nbool is_sorted(long[] lst) \n{\n    long prev = lst[0];\n    foreach(item;\
    \ lst[1..$])\n    {\n        if(prev > item)\n            return false;\n    \
    \    prev = item;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L,\
    \ 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L])\
    \ == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L,\
    \ 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L])\
    \ == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp2kl5l12a.d(30): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428596]\\n??:? bool tmp2kl5l12a.is_sorted(long[]) [0x427d2b]\\\
    n??:? void tmp2kl5l12a.__unittest_L39_C1() [0x428016]\\n??:? void tmp2kl5l12a.__modtest()\
    \ [0x428264]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43058d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a3c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430519]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42892f]\\n??:? _d_run_main [0x42889a]\\n??:? main [0x428277]\\\
    n??:? __libc_start_main [0xdc8ce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
