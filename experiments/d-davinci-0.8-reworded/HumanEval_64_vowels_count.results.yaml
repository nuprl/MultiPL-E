language: d
name: HumanEval_64_vowels_count
results:
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long c = 0;\n    for (size_t\
    \ i = 0; i < s.length; i++) \n    {\n        if (tolower(s[i]) == 'a' || tolower(s[i])\
    \ == 'e' || tolower(s[i]) == 'i' || tolower(s[i]) == 'o' || tolower(s[i]) == 'u')\
    \ \n        {\n            c += 1;\n        }\n    }\n    if (tolower(s[s.length\
    \ - 1]) == 'y') \n    {\n        c += 1;\n    }\n    return c;\n}\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ikgxz3n.d(20): Error: undefined identifier `tolower`

    /tmp/tmp2ikgxz3n.d(20): Error: undefined identifier `tolower`

    /tmp/tmp2ikgxz3n.d(20): Error: undefined identifier `tolower`

    /tmp/tmp2ikgxz3n.d(20): Error: undefined identifier `tolower`

    /tmp/tmp2ikgxz3n.d(20): Error: undefined identifier `tolower`

    /tmp/tmp2ikgxz3n.d(25): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ikgxz3n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    // TODO: implement this\
    \ function\n    long count=0;\n    foreach(c; s)\n    {\n        //cast(char)c\
    \ compiles but it does not work\n        if(tolower(c)=='a' || tolower(c)=='e'\
    \ || tolower(c)=='i' || tolower(c)=='o' || tolower(c)=='u')\n        {\n     \
    \       count++;\n        }\n    }\n    if(tolower(s[$-1])=='y')\n    {\n    \
    \    count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate =\
    \ vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphr73mgzn.d(22): Error: undefined identifier `tolower`

    /tmp/tmphr73mgzn.d(22): Error: undefined identifier `tolower`

    /tmp/tmphr73mgzn.d(22): Error: undefined identifier `tolower`

    /tmp/tmphr73mgzn.d(22): Error: undefined identifier `tolower`

    /tmp/tmphr73mgzn.d(22): Error: undefined identifier `tolower`

    /tmp/tmphr73mgzn.d(27): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphr73mgzn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long i, count;\n    count\
    \ = 0;\n    for (i = 0; i < s.length; i++) \n    {\n        if ((s[i] == 'a')\
    \ || (s[i] == 'e') || (s[i] == 'i') ||\n        (s[i] == 'o') || (s[i] == 'u')\
    \ || (s[i] == 'y')) \n        {\n            count++;\n        }\n    }\n    if\
    \ ((s[s.length - 1] == 'y') && (s.length >= 2)) \n    {\n        count--;\n  \
    \  }\n    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprre181sr.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmprre181sr.__unittest_L33_C1() [0x427bb1]

    ??:? void tmprre181sr.__modtest() [0x427ca0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bcb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab4a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcdd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43018c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc69]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab21]

    ??:? runModuleUnitTests [0x42ba8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283e0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(char\
    \ c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || c == 'y')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp999uch7x.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmp999uch7x.__unittest_L27_C1() [0x427af1]

    ??:? void tmp999uch7x.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n\tlong vowelsCount = 0;\n\t\
    foreach(dchar ch; s)\n\t{\n\t\tif((ch == 'a' || ch == 'e' || ch == 'i' || ch ==\
    \ 'o' || ch == 'u') || (ch == 'y' && s.length == s.countUntil(ch)))\n\t\t{\n\t\
    \t\tvowelsCount++;\n\t\t}\n\t}\n\treturn vowelsCount;\n}\nunittest\n{\n    alias\
    \ candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_f8cookc.d(20): Error: no property `countUntil` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_f8cookc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long ret = 0;\n    foreach(char\
    \ c; s)\n    {\n        switch(tolower(c))\n        {\n            case 'a':\n\
    \            case 'e':\n            case 'i':\n            case 'o':\n       \
    \     case 'u':\n                ret += 1;\n                break;\n         \
    \   case 'y':\n                if(s[1] == 0)\n                    ret += 1;\n\
    \                break;\n        }\n    }\n    return ret;\n}\n/*\nWrite a function\
    \ com_vowels_count which takes two strings as input\n    and returns the number\
    \ of common vowels in them.\n    A common vowel is a vowel which is present in\
    \ both the words.\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8fzgt3qd.d(37): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8fzgt3qd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n\tlong result = 0;\n\tforeach(i,\
    \ ch; s)\n\t{\n\t\tif(i == s.length - 1)\n\t\t{\n\t\t\tif(ch == 'a' || ch == 'e'\
    \ || ch == 'i' || ch == 'o' || ch == 'u' || ch == 'y')\n\t\t\t\tresult++;\n\t\t\
    }\n\t\telse\n\t\t{\n\t\t\tif(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o'\
    \ || ch == 'u')\n\t\t\t\tresult++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpelniun4a.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e85]

    ??:? void tmpelniun4a.__unittest_L33_C1() [0x427b15]

    ??:? void tmpelniun4a.__modtest() [0x427c04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa3e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430080]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]

    ??:? runModuleUnitTests [0x42b981]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(char\
    \ c; s)\n    {\n        switch(tolower(c))\n        {\n            case 'a':\n\
    \            case 'e':\n            case 'i':\n            case 'o':\n       \
    \     case 'u':\n            case 'y':\n                count++;\n           \
    \     break;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvgyu11zn.d(20): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvgyu11zn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n\tlong n = 0;\n\tforeach(const\
    \ char c; s) {\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ ||\n\t\t   c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t\
    n++;\n\t}\n\treturn n;\n}\n/*\nWrite a function sorted_string_list which takes\
    \ a list of strings\n    as input and returns a sorted version of the list. Sorting\
    \ should\n    be done based on the length of the strings, shorter strings should\n\
    \    come before longer strings. If two strings have the same length,\n    they\
    \ should be sorted in alphabetical order.\nunittest\n{\n    alias candidate =\
    \ vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnbn_un3p.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnbn_un3p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(char\
    \ c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || c == 'y')\n        {\n            count += 1;\n        }\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyl6prevo.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpyl6prevo.__unittest_L27_C1() [0x427af1]

    ??:? void tmpyl6prevo.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(ch;\
    \ s)\n    {\n        switch(ch)\n        {\n            case 'a':\n          \
    \  case 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n\
    \            case 'y':\n                count++;\n                break;\n   \
    \     }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa72lhzny.d(20): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa72lhzny.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(i,\
    \ c; s)\n    {\n        switch(tolower(c))\n        {\n            case 'a': case\
    \ 'e': case 'i': case 'o': case 'u': case 'y':\n                count++;\n   \
    \             break;\n        }\n    }\n    return count;\n}\nunittest\n{\n  \
    \  alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptpb7rxxv.d(20): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptpb7rxxv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(c;\
    \ s)\n    {\n        switch(c)\n        {\n            case 'a':\n           \
    \ case 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n\
    \            case 'y':\n                count++;\n                break;\n   \
    \     }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpha1zsa9_.d(20): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpha1zsa9_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n     auto vowels = \"aeiouy\"\
    ;\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvfkcxynn.d(18): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvfkcxynn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 0
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long num = 0;\n    foreach(char\
    \ c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' ||\n           c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \        {\n            num += 1;\n        }\n    }\n    if(s[$-1] == 'y' || s[$-1]\
    \ == 'Y')\n    {\n        num += 1;\n    }\n    return num;\n}\nunittest\n{\n\
    \    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    s = toLower(s);\n    long\
    \ count = 0;\n    foreach(char c; s) \n    {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u')\n            count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpld3lymyx.d(17): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpld3lymyx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long result = 0;\n    for\
    \ (long i = 0; i < s.length; i++)\n    {\n        char c = tolower(s[i]);\n  \
    \      if ((c == 'a')||(c == 'e')||(c == 'i')||(c == 'o')||(c == 'u'))\n     \
    \   {\n            result += 1;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxtd6m0zy.d(20): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtd6m0zy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    \n    long vowels = 0;\n\
    \    for (int i = 0; i < length(s); i++) \n    {\n        if (tolower(s[i]) ==\
    \ 'a' || tolower(s[i]) == 'e' || tolower(s[i]) == 'i' || tolower(s[i]) == 'o'\
    \ || tolower(s[i]) == 'u')\n        {\n            vowels++;\n        }\n    \
    \    else if (tolower(s[i]) == 'y' && i == length(s) - 1)\n        {\n       \
    \     vowels++;\n        }\n    }\n    return vowels;\n}\nunittest\n{\n    alias\
    \ candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptfph69zb.d(19): Error: undefined identifier `length`

    /tmp/tmptfph69zb.d(21): Error: undefined identifier `tolower`

    /tmp/tmptfph69zb.d(21): Error: undefined identifier `tolower`

    /tmp/tmptfph69zb.d(21): Error: undefined identifier `tolower`

    /tmp/tmptfph69zb.d(21): Error: undefined identifier `tolower`

    /tmp/tmptfph69zb.d(21): Error: undefined identifier `tolower`

    /tmp/tmptfph69zb.d(25): Error: undefined identifier `tolower`

    /tmp/tmptfph69zb.d(25): Error: undefined identifier `length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptfph69zb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    for\
    \ (long i = 0; i < s.length; i++)\n    {\n        if (s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n        {\n            count++;\n\
    \        }\n        else if (s[i] == 'y' && i == s.length - 1)\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbz6runmb.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmpbz6runmb.__unittest_L31_C1() [0x427b91]

    ??:? void tmpbz6runmb.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc97]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab2a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcbd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43016c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc49]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]

    ??:? runModuleUnitTests [0x42ba6d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    // transform string to lowercase.\n\
    \    s = s.toLower();\n    // initialize a counter, and set it to 0.\n    long\
    \ counter = 0;\n    // loop through all the characters in the string.\n    foreach(char\
    \ c; s)\n    {\n        // check if character is a vowel.\n        if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\n        {\n  \
    \          // add one to the counter.\n            counter++;\n        }\n   \
    \ }\n    // return the number of vowels in the string.\n    return counter;\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfsnv6mar.d(18): Error: no property `toLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfsnv6mar.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count=0;\n    int n=s.length;\n\
    \    foreach(char c; s)\n    {\n        if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||(c=='y'&&\
    \ (n-1)==n))\n        {\n            count++;\n        }\n        n--;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n  \
    \  assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzknu_3hx.d(18): Error: cannot implicitly convert expression `s.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzknu_3hx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(ch;\
    \ s) \n    {\n        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch\
    \ == 'u' || ch == 'y')\n            count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprbie6m5r.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmprbie6m5r.__unittest_L25_C1() [0x427af1]

    ??:? void tmprbie6m5r.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    for\
    \ (size_t i = 0; i < s.length; i++) \n    {\n        if (s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') \n        {\n            count++;\n\
    \        }\n        else if ((s[i] == 'y' && i == s.length - 1)) \n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvjhgy493.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmpvjhgy493.__unittest_L31_C1() [0x427ba1]

    ??:? void tmpvjhgy493.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bca7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab3a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fccd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43017c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc59]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab11]

    ??:? runModuleUnitTests [0x42ba7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long n = 0;\n    foreach(ch;\
    \ s)\n    {\n        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch\
    \ == 'u' ||\n            (ch == 'y' && s.length == 1))\n        {\n          \
    \  n++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8tn306on.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmp8tn306on.__unittest_L28_C1() [0x427af9]

    ??:? void tmp8tn306on.__modtest() [0x427be8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    for\
    \ (size_t i = 0; i < s.length; i++) \n    {\n        switch (s[i]) \n        {\n\
    \            case 'a':\n            case 'e':\n            case 'i':\n       \
    \     case 'o':\n            case 'u':\n            case 'y':\n              \
    \  count++;\n                break;\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\"\
    ) == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\"\
    ) == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\"\
    ) == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\"\
    ) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjhi30hwa.d(20): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhi30hwa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n\tlong v = 0;\n\tforeach(c;\
    \ s)\n\t{\n\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\
    \ c == 'y')\n\t\t\tv++;\n\t}\n\treturn v;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe74qwp45.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpe74qwp45.__unittest_L25_C1() [0x427af1]

    ??:? void tmpe74qwp45.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long numVowels=0;\n    foreach(char\
    \ c; s)\n    {\n        c = toLower(c);\n        if(c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u')\n        {\n            numVowels++;\n     \
    \   }\n    }\n    //if last character is y and the length of s is greater than\
    \ 2\n    if(s[$-1] == 'y' && s.length>2)\n    {\n        numVowels++;\n    }\n\
    \    return numVowels;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n\
    \    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg133xeup.d(20): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg133xeup.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long counter = 0;\n    for\
    \ (size_t i = 0; i < s.length; i++)\n    {\n        if (s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n        {\n            counter++;\n\
    \        }\n        else if (s[i] == 'y' && i == s.length - 1)\n        {\n  \
    \          counter++;\n        }\n    }\n    return counter;\n}\n/*\nWrite a function\
    \ first_vowel_pos which takes a string representing\n    a word as input and returns\
    \ the position of the first vowel in the string.\n    Vowels in this case are\
    \ 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is\
    \ at the end of the given word.\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjy_snmhv.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjy_snmhv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long c = 0;\n    foreach(ch;\
    \ s)\n    {\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch\
    \ == 'u'\n            || (ch == 'y' && s.length == 1)) c++;\n    }\n    return\
    \ c;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2mpyfbvo.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmp2mpyfbvo.__unittest_L25_C1() [0x427af9]

    ??:? void tmp2mpyfbvo.__modtest() [0x427be8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long c = 0;\n    foreach(char\
    \ ch; s)\n    {\n        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' ||\
    \ ch == 'u' || (ch == 'y' && ch == '\\0'))\n            c++;\n    }\n    return\
    \ c;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz17i8dp5.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmpz17i8dp5.__unittest_L25_C1() [0x427af5]

    ??:? void tmpz17i8dp5.__modtest() [0x427be4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long cnt = 0;\n    if(s.length\
    \ > 1)\n    {\n        foreach(immutable c; s)\n        {\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            {\n      \
    \          cnt++;\n            }\n        }\n        if(s[$-1] == 'y')\n     \
    \   {\n            cnt++;\n        }\n    }\n    else\n    {\n        if(s[0]\
    \ == 'a' || s[0] == 'e' || s[0] == 'i' || s[0] == 'o' || s[0] == 'u')\n      \
    \  {\n            cnt++;\n        }\n    }\n    return cnt;\n}\nunittest\n{\n\
    \    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe7wrw1hz.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f4d]

    ??:? void tmpe7wrw1hz.__unittest_L41_C1() [0x427bdd]

    ??:? void tmpe7wrw1hz.__modtest() [0x427ccc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bce7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd0d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301bc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc99]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab51]

    ??:? runModuleUnitTests [0x42babd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428410]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(char\
    \ c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' ||\n            (c == 'y' && index(s, c) == length(s) - 1))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0tq1l0vg.d(21): Error: undefined identifier `index`

    /tmp/tmp0tq1l0vg.d(21): Error: undefined identifier `length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0tq1l0vg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(c;\
    \ s)\n    {\n        if((c == 'a') || (c == 'e') || (c == 'i') || (c == 'o') ||\
    \ (c == 'u') ||\n            ((c == 'y') && (c == s[$-1])))\n            count++;\n\
    \    }\n    return count;\n}\n/*\nWrite a function times_two which takes an input\
    \ n and returns 2n\n*/\nunittest\n{\n    alias candidate = vowels_count;\n\n \
    \   assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm7cn7pnk.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpm7cn7pnk.__unittest_L29_C1() [0x427b29]

    ??:? void tmpm7cn7pnk.__modtest() [0x427c18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc55]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430104]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa99]

    ??:? runModuleUnitTests [0x42ba05]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428358]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long num_vowels = 0;\n \
    \   foreach(ch; s)\n    {\n        if(ch == 'a' || ch == 'e' || ch == 'i' || ch\
    \ == 'o' || ch == 'u' || ch == 'y')\n        {\n            num_vowels++;\n  \
    \      }\n    }\n    return num_vowels;\n}\nunittest\n{\n    alias candidate =\
    \ vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxhxq84ip.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpxhxq84ip.__unittest_L27_C1() [0x427af1]

    ??:? void tmpxhxq84ip.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long sum = 0;\n    long\
    \ n = s.length;\n    foreach(c; s)\n    {\n        if(c=='a' || c=='e' || c=='i'\
    \ || c=='o' || c=='u')\n        {\n            sum += 1;\n        }\n        else\
    \ if(c=='y' && (n-1)==find(s,c))\n        {\n            sum += 1;\n        }\n\
    \    }\n    return sum;\n}\n/*\nWrite a function int reverse_bits(uint32_t n)\
    \ which takes a\n    32-bit unsigned integer as an input and returns the integer\n\
    \    formed by reversing the bits of the input value.\nunittest\n{\n    alias\
    \ candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpchyvewkz.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpchyvewkz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long cnt = 0;\n    foreach(const\
    \ char c; s)\n    {\n        switch(tolower(c))\n        {\n            case 'a':\n\
    \            case 'e':\n            case 'i':\n            case 'o':\n       \
    \     case 'u':\n                cnt++;\n                break;\n            case\
    \ 'y':\n                if(c == s[$-1])\n                    cnt++;\n        }\n\
    \    }\n    return cnt;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4zh148j5.d(20): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4zh148j5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n\tlong count = 0;\n\tfor (long\
    \ i = 0; i < s.length; i++)\n\t{\n\t\tif (s[i] == 'a' || s[i] == 'e' || s[i] ==\
    \ 'i' || s[i] == 'o' || s[i] == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if\
    \ (s[i] == 'y' && i == s.length - 1)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpepbmab4x.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmpepbmab4x.__unittest_L31_C1() [0x427b91]

    ??:? void tmpepbmab4x.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc97]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab2a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcbd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43016c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc49]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]

    ??:? runModuleUnitTests [0x42ba6d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    /*\n    long answer = 0;\n\
    \    char[] a = s.toLower().dup;\n    foreach(a; ch) {\n        if (ch == 'a'\
    \ || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n            answer +=\
    \ 1;\n    }\n    if (a[$-1] == 'y') answer += 1;\n    return answer;\n    */\n\
    \    return s.length - s.replaceAll(new RegExp(r\"[aeiouy]\", \"gi\"), \"\").length;\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpavky7c3m.d(27): Error: no property `replaceAll` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpavky7c3m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    import std.conv;\n    //\
    \ The toLower function just makes the string all lowercase\n    s = s.toLower();\n\
    \    long v = 0;\n    foreach(char c; s)\n    {\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u')\n        {\n            v++;\n        }\n\
    \    }\n    return v;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n\
    \    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuau4y_od.d(19): Error: no property `toLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuau4y_od.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    // TBD\n    long result\
    \ = 0;\n    foreach(char c; s)\n    {\n        if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u')\n            result++;\n    }\n    if (s[$-1] ==\
    \ 'y')\n        result++;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6cxfygi3.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e8d]

    ??:? void tmp6cxfygi3.__unittest_L28_C1() [0x427b21]

    ??:? void tmp6cxfygi3.__modtest() [0x427c10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc27]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc4d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300fc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa91]

    ??:? runModuleUnitTests [0x42b9fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428350]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long c = 0;\n    foreach(ch;\
    \ s) \n    {\n        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch\
    \ == 'u' || (ch == 'y' && indexOf(s, ch) == s.length - 1)) \n        {\n     \
    \       c += 1;\n        }\n    }\n    return c;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpavt2fum2.d(20): Error: undefined identifier `indexOf`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpavt2fum2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long r = 0;\n    for (in\
    \ i = 0; i < s.length; i++)\n    {\n        if (s[i] == 'a' || s[i] == 'e' ||\
    \ s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n        {\n            r++;\n  \
    \      }\n        else if (s[i] == 'y' && i != s.length - 1)\n        {\n    \
    \        r++;\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpib71vwxp.d(18): Error: found `in` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpib71vwxp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long n = 0;\n    auto l\
    \ = s.length;\n    foreach(i, e; s)\n    {\n        if(e == 'a' || e == 'e' ||\
    \ e == 'i' || e == 'o' || e == 'u' || (e == 'y' && i == l-1))\n            n++;\n\
    \    }\n    return n;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n\
    \    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpljx3quzl.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e6d]

    ??:? void tmpljx3quzl.__unittest_L26_C1() [0x427b01]

    ??:? void tmpljx3quzl.__modtest() [0x427bf0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430068]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]

    ??:? runModuleUnitTests [0x42b969]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long vowel_count = 0;\n\
    \    foreach(char c; s)\n    {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n        {\n            vowel_count++;\n        }\n  \
    \  }\n    return vowel_count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7ede0xg5.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e55]

    ??:? void tmp7ede0xg5.__unittest_L27_C1() [0x427ae9]

    ??:? void tmp7ede0xg5.__modtest() [0x427bd8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430050]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]

    ??:? runModuleUnitTests [0x42b951]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n  long n = 0;\n  foreach(char\
    \ c; s)\n  {\n    switch(c)\n    {\n      case 'a':\n      case 'e':\n      case\
    \ 'i':\n      case 'o':\n      case 'u':\n      case 'y':\n        n++;\n    \
    \    break;\n    }\n  }\n  return n;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmrxc4uo1.d(20): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmrxc4uo1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long i = 0;\n    long count\
    \ = 0;\n    while (i < s.length)\n    {\n        if (s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n        {\n            count++;\n\
    \        }\n        i++;\n    }\n    if (s[s.length - 1] == 'y')\n    {\n    \
    \    count++;\n    }\n    return count;\n}\n/*\nWrite a function array_sum which\
    \ takes a long[] representing an\n    array of numbers and returns the sum of\
    \ the elements in the array.\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmyzn3gyg.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmyzn3gyg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n     long num_vowels=0;\n  \
    \  int vv=0;\n    string vowels=\"aeiouy\";\n    char last_char=s[$-1];\n    foreach(c;s)\n\
    \    {\n        if(c=='y'&&c==last_char)\n            num_vowels+=1;\n       \
    \ else\n        {\n            vv=vowels.indexOf(c);\n            if(vv>=0)\n\
    \                num_vowels+=1;\n        }\n    }\n    return num_vowels;\n}\n\
    unittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\"\
    ) == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\"\
    ) == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\"\
    ) == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\"\
    ) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa6l10ak6.d(27): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa6l10ak6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long vowels = 0;\n    foreach(c;\
    \ s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || c == 'y')\n        {\n            vowels++;\n        }\n    }\n    return\
    \ vowels;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp76bjgy4b.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmp76bjgy4b.__unittest_L27_C1() [0x427af1]

    ??:? void tmp76bjgy4b.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    auto vowel_count = 0L;\n\
    \    auto count = 0L;\n    foreach(ch; s)\n    {\n        switch(ch)\n       \
    \ {\n            case 'a':\n            case 'e':\n            case 'i':\n   \
    \         case 'o':\n            case 'u':\n            case 'y':\n          \
    \      ++vowel_count;\n                break;\n            default:\n        \
    \        break;\n        }\n    }\n    count = vowel_count;\n    return count;\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0rqovfe2.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e55]

    ??:? void tmp0rqovfe2.__unittest_L38_C1() [0x427ae9]

    ??:? void tmp0rqovfe2.__modtest() [0x427bd8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430050]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]

    ??:? runModuleUnitTests [0x42b951]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n  long num_vowels = 0;\n  foreach(ch;\
    \ s)\n  {\n    switch(ch)\n    {\n      case 'a':\n      case 'e':\n      case\
    \ 'i':\n      case 'o':\n      case 'u':\n      case 'y':\n        num_vowels++;\n\
    \        break;\n    }\n  }\n  return num_vowels;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3mw6794u.d(20): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3mw6794u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long cnt = 0;\n    int ia\
    \ = 'a';\n    int iy = 'y';\n    foreach(a; s)\n    {\n        if (a == 'a' ||\
    \ a == 'e' || a == 'i' || a == 'o' || a == 'u')\n            cnt++;\n        else\
    \ if (a == 'y' && (ia > ia || iy < s.length - 1))\n            cnt++;\n      \
    \  ia++;\n        iy++;\n    }\n    return cnt;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnvk2ffyu.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpnvk2ffyu.__unittest_L31_C1() [0x427b25]

    ??:? void tmpnvk2ffyu.__modtest() [0x427c14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430090]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]

    ??:? runModuleUnitTests [0x42b991]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long l = s.length;\n   \
    \ long res = 0;\n    foreach(char c; s)\n    {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u')\n            res++;\n    }\n    if (s[l-1]\
    \ == 'y')\n        res++;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvlwnlo7e.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e8d]

    ??:? void tmpvlwnlo7e.__unittest_L28_C1() [0x427b21]

    ??:? void tmpvlwnlo7e.__modtest() [0x427c10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc27]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc4d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300fc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa91]

    ??:? runModuleUnitTests [0x42b9fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428350]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    auto n = s.length;\n   \
    \ long cnt = 0;\n    for (size_t i = 0; i < n; i++)\n    {\n        char c = tolower(s[i]);\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n     \
    \   {\n            cnt++;\n        }\n    }\n    if (cnt > 0 && tolower(s[n-1])\
    \ == 'y')\n    {\n        cnt++;\n    }\n    return cnt;\n}\nunittest\n{\n   \
    \ alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7346f65l.d(21): Error: undefined identifier `tolower`

    /tmp/tmp7346f65l.d(27): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7346f65l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(char\
    \ c; s) \n    {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u' || (c == 'y' && c == s[$-1]))\n            count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8nf2whcd.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmp8nf2whcd.__unittest_L25_C1() [0x427b29]

    ??:? void tmp8nf2whcd.__modtest() [0x427c18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc55]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430104]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa99]

    ??:? runModuleUnitTests [0x42ba05]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428358]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long res = 0;\n    foreach(c;\
    \ s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ ||\n           (c == 'y' && c != s[$-1]))\n        {\n            res++;\n \
    \       }\n    }\n    return res;\n}\n//---------------------------------------------------------\n\
    /*\n    Write a function most_frequent_chars(s, n) which takes a string s\n  \
    \  and an int n as input and returns an array of type char of length n\n    containing\
    \ the n most frequently occurring characters in the string.\n    The function\
    \ is supposed to ignore case. If there are more than n\n    characters which have\
    \ an equal number of occurrences in the string,\n    return the characters in\
    \ alphabetical order.\n    Example:\n    >>> most_frequent_chars(\"The quick brown\
    \ fox jumped over the lazy dog\", 2)\n    ['o', 't']\n*/\nchar[] most_frequent_chars(string\
    \ s, int n)\n{\n    char[] ret;\n    auto ranks = new string[1];\n    auto charMap\
    \ = new int[char.max];\n    // auto charSet = new string[1];\n    foreach(c; s)\n\
    \    {\n        if(!charMap[c]) charMap[c] = 1;\n        else charMap[c]++;\n\
    \    }\n    foreach(c; charMap)\n    {\n        int val = c[1];\n        if(val\
    \ == 0) continue;\n        if(ranks.empty)\n        {\n            ranks ~= to!string(val);\n\
    \            ret ~= c[0];\n            continue;\n        }\n        int ind =\
    \ -1;\n        foreach(i, r; ranks)\n        {\n            if(val >= to!int(r))\n\
    \            {\n                ind = i;\n                break;\n           \
    \ }\n        }\n        if(ind == -1)\n        {\n            if(ret.length <\
    \ n)\n            {\n                ranks ~= to!string(val);\n              \
    \  ret ~= c[0];\n            }\n        }\n        else\n        {\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo6cjr4xd.d(80): Error: found `unittest` instead of statement

    /tmp/tmpo6cjr4xd.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpo6cjr4xd.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo6cjr4xd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 0
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    assert(s);\n    long r =\
    \ 0;\n    foreach(c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' ||\n           c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U')\n            r++;\n    }\n    if(r > 0 && (s[$-1] == 'y' ||\
    \ s[$-1] == 'Y'))\n        r++;\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long result = 0;\n    foreach(c;\
    \ s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || c == 'y')\n        {\n            result++;\n        }\n    }\n    if(s[$-1]\
    \ == 'y')\n    {\n        result++;\n    }\n    return result;\n}\n/*\nWrite a\
    \ function count_vowels which takes a string representing\n    a sentence as input\
    \ and returns the number of vowels in the string.\n    Vowels in this case are\
    \ 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is\
    \ at the end of the given word.\n    Example:\n    >>> count_vowels(\"My name\
    \ is Zara\")\n    4L\n    >>> count_vowels(\"What is this?\")\n    4L\n    \n\
    */\nlong count_vowels(string s) \n{\n    long result = 0;\n    string s_convert\
    \ = \"\";\n    string word = \"\";\n    foreach(c; s)\n    {\n        if(c ==\
    \ ' ')\n        {\n            s_convert ~= word;\n            word = \"\";\n\
    \        }\n        else\n        {\n            word ~= c;\n        }\n    }\n\
    \    s_convert ~= word;\n    foreach(s_word; s_convert)\n    {\n        result\
    \ += vowels_count(s_word);\n    }\n    return result;\n}\n/*\nWrite a function\
    \ vowels_percentage which takes a string representing\n    a sentence as input\
    \ and returns the percentage of vowels as\n    compared to the total number of\
    \ characters in the sentence.\n    Vowels in this case are 'a', 'e', 'i', 'o',\
    \ 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given\
    \ word.\n    Example:\n    >>> vowels_percentage(\"I like python\")\n    16.666665L\n\
    \    \n*/\nlong vowels_percentage(string s)\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprrww999y.d(79): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprrww999y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long res = 0;\n    foreach(c;\
    \ s) {\n        res += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ ||\n                (c == 'y' && s.indexOf(c) == s.length - 1));\n    }\n  \
    \  return res;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpavl8x691.d(20): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpavl8x691.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n\ts = lower(s);\n\tlong counter\
    \ = 0;\n\tforeach(c; s)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n\t\t{\n\t\t\tcounter++;\n\t\t}\n\t}\n\tif(s[$-1] == 'y')\n\
    \t{\n\t\tcounter++;\n\t}\n\treturn counter;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9xnlphte.d(17): Error: undefined identifier `lower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9xnlphte.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{ \n    long num = 0;\n    foreach(c;\
    \ s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || c == 'y')\n        {\n            num++;\n        }\n    }\n    return num;\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmputnc0o24.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmputnc0o24.__unittest_L27_C1() [0x427af1]

    ??:? void tmputnc0o24.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    static char[] vowels = {'a',\
    \ 'e', 'i', 'o', 'u', 'y'};\n    long sum = 0;\n    foreach(c; s) \n    {\n  \
    \      foreach(v; vowels) \n        {\n            if(v == c) \n            {\n\
    \                ++sum;\n                break;\n            }\n        }\n  \
    \  }\n    if(s.length > 1 && s[$-1] == 'y') \n    {\n        return sum;\n   \
    \ }\n    else \n    {\n        return max(sum - 1, 0);\n    }\n}\nunittest\n{\n\
    \    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy6hi5lpl.d(17): Error: a struct is not a valid initializer for
    a `char[]`

    /tmp/tmpy6hi5lpl.d(36): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy6hi5lpl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count=0;\n    for(int\
    \ i=0;i<s.length;i++)\n    {\n      if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||(s[i]=='y'&&i==s.length-1))\n\
    \         count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi3d4zfjn.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmpi3d4zfjn.__unittest_L25_C1() [0x427b95]

    ??:? void tmpi3d4zfjn.__modtest() [0x427c84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc9f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab32]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcc5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430174]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab09]

    ??:? runModuleUnitTests [0x42ba75]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    auto vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    int count = 0;\n    foreach(char c; s) {\n        auto\
    \ lowerC = toLower(c);\n        if(vowels.canFind(lowerC)) {\n            count++;\n\
    \        }\n    }\n    if(s.length && toLower(s[$-1]) == 'y') {\n        count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxcvqz2ju.d(20): Error: undefined identifier `toLower`

    /tmp/tmpxcvqz2ju.d(21): Error: no property `canFind` for type `char[]`

    /tmp/tmpxcvqz2ju.d(25): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxcvqz2ju.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    return count(s.begin(),\
    \ s.end(), 'a')\n        + count(s.begin(), s.end(), 'e')\n        + count(s.begin(),\
    \ s.end(), 'i')\n        + count(s.begin(), s.end(), 'o')\n        + count(s.begin(),\
    \ s.end(), 'u')\n        + (s.back == 'y' ? 1 : 0);\n}\nunittest\n{\n    alias\
    \ candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprb0p0lik.d(17): Error: undefined identifier `count`

    /tmp/tmprb0p0lik.d(18): Error: undefined identifier `count`

    /tmp/tmprb0p0lik.d(19): Error: undefined identifier `count`

    /tmp/tmprb0p0lik.d(20): Error: undefined identifier `count`

    /tmp/tmprb0p0lik.d(21): Error: undefined identifier `count`

    /tmp/tmprb0p0lik.d(22): Error: no property `back` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprb0p0lik.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{ \n  long l=0;\n  for(auto i :\
    \ s)\n  {\n     if(i=='a'||i=='e'||i=='i'||i=='o'||i=='u'||i=='y')\n     { \n\
    \       l++;\n     }\n  }\n  return l;\n}\nunittest\n{\n    alias candidate =\
    \ vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpat6fhcnw.d(18): Error: no identifier for declarator `i`

    /tmp/tmpat6fhcnw.d(18): Error: expression expected, not `:`

    /tmp/tmpat6fhcnw.d(18): Error: found `s` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpat6fhcnw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    size_t n = s.length;\n \
    \   long count = 0;\n    for (size_t i = 0; i < n; i++) {\n        switch (tolower(s[i]))\
    \ {\n            case 'a':\n            case 'e':\n            case 'i':\n   \
    \         case 'o':\n            case 'u':\n                count++;\n       \
    \         break;\n            case 'y':\n                if (i == n - 1) {\n \
    \                   count++;\n                }\n                break;\n    \
    \    }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp874yrhpz.d(20): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp874yrhpz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{ \n    /* your code here */ \n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphn5o1996.d(15): Error: function `tmphn5o1996.vowels_count` has
    no `return` statement, but is expected to return a value of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphn5o1996.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(dchar\
    \ c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || c == 'y')\n            count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuy6p3mc6.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f3d]

    ??:? void tmpuy6p3mc6.__unittest_L25_C1() [0x427bd1]

    ??:? void tmpuy6p3mc6.__modtest() [0x427cc0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c043]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42adce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430069]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430518]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fff5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ada5]

    ??:? runModuleUnitTests [0x42be19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42841c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long counter = 0;\n    foreach(inout\
    \ c; s)\n    {\n        switch(c)\n        {\n            case 'a': case 'e':\
    \ case 'i': case 'o': case 'u':\n            case 'A': case 'E': case 'I': case\
    \ 'O': case 'U':\n                counter++;\n                break;\n       \
    \     case 'y': case 'Y':\n                if (counter == s.length - 1)\n    \
    \                counter++;\n                break;\n        }\n    }\n    return\
    \ counter;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7t1h9c2d.d(20): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7t1h9c2d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long len = s.length();\n\
    \    long count = 0;\n    long i = 0;\n    foreach(c; s) \n    {\n        if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n       \
    \     count++;\n        }\n        else if (c == 'y' && i == len - 1)\n      \
    \  {\n            count++;\n        }\n        i++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4hx8x4fz.d(17): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4hx8x4fz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long num = 0;\n    foreach(ch;\
    \ s)\n    {\n        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch\
    \ == 'u' || (ch == 'y' && index(s, ch) == s.length - 1))\n            num++;\n\
    \    }\n    return num;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfzkup0z6.d(20): Error: undefined identifier `index`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfzkup0z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    auto vowel = \"aeiouy\"\
    ;\n    auto cnt = 0L;\n    foreach(index, ch; s)\n    {\n        if(vowel.canFind(lower(ch)))\n\
    \            cnt++;\n    }\n    return cnt;\n}\n/*\nWrite a function which takes\
    \ a string representing a word as\n    input and returns the longest consecutive\
    \ set of vowels\n    contained within the string. If there are multiple runs\n\
    \    of consecutive vowels of the same length, the function\n    should return\
    \ the last set of consecutive vowels.\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn0ofo78k.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0ofo78k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(ch;\
    \ s)\n    {\n        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch\
    \ == 'u' || (ch == 'y' && ch == s[$-1]))\n            count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxfhdcl3s.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpxfhdcl3s.__unittest_L25_C1() [0x427b29]

    ??:? void tmpxfhdcl3s.__modtest() [0x427c18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc55]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430104]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa99]

    ??:? runModuleUnitTests [0x42ba05]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428358]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long counter = 0;\n    for\
    \ (size_t i = 0; i < s.length; i++) \n    {\n        switch (tolower(s[i])) \n\
    \        {\n            case 'a':\n            case 'e':\n            case 'i':\n\
    \            case 'o':\n            case 'u':\n                counter++;\n  \
    \              break;\n            case 'y':\n                if(i == s.length\
    \ - 1) \n                {\n                    counter++;\n                }\n\
    \        }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate =\
    \ vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl9j5ndq2.d(20): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9j5ndq2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n\tlong ret;\n\tlong i;\n\tret\
    \ = 0;\n\ti = 0;\n\tfor (; i < s.length; i++)\n\t{\n\t\ts[i] = tolower(s[i]);\n\
    \t\tif (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n\
    \t\t{\n\t\t\tret = ret + 1;\n\t\t}\n\t}\n\tif (s[s.length - 1] == 'y')\n\t{\n\t\
    \tret = ret + 1;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgwu_stoi.d(23): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgwu_stoi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 0
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long vowelCount = 0;\n \
    \   foreach(char c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' ||\n            c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U')\n        {\n            ++vowelCount;\n        }\n    }\n \
    \   if(s[$-1] == 'y' || s[$-1] == 'Y')\n    {\n        ++vowelCount;\n    }\n\
    \    return vowelCount;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long r = 0;\n    foreach(c;\
    \ s)\n    {\n        r += c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' ? 1 : 0;\n    }\n    return r;\n}\n/*\nWrite a function common_prefix which\
    \ takes two strings as input\n    and returns a string which represents the common\
    \ prefix that the two\n    strings share.\nunittest\n{\n    alias candidate =\
    \ vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy6b6wpxc.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy6b6wpxc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(char\
    \ c; s) \n    {\n        // array of vowels to test if current char is a vowel\n\
    \        char[] vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n        foreach(char\
    \ v; vowels) \n        {\n            if(c == v)\n                count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpauq2z0lt.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ec5]

    ??:? void tmpauq2z0lt.__unittest_L30_C1() [0x427b55]

    ??:? void tmpauq2z0lt.__modtest() [0x427c44]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd8f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ac22]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fdb5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430264]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fd41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42abf9]

    ??:? runModuleUnitTests [0x42bb65]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428314]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long counter = 0;\n    for\
    \ (size_t i = 0; i < s.length; i++)\n    {\n        if (s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n        {\n            counter++;\n\
    \        }\n        else if (s[i] == 'y' && i == s.length - 1)\n        {\n  \
    \          counter++;\n        }\n    }\n    return counter;\n}\nunittest\n{\n\
    \    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi3fav0gg.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmpi3fav0gg.__unittest_L31_C1() [0x427ba1]

    ??:? void tmpi3fav0gg.__modtest() [0x427c90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bca7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab3a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fccd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43017c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc59]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab11]

    ??:? runModuleUnitTests [0x42ba7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    return count(s, \"aeiouyAEIOUY\"\
    );\n}\n/*\nWrite a function which takes two strings, each representing a\n   \
    \ word, and returns a long representing the number of letters\n    the two words\
    \ have in common. The order of the letters doesn't\n    matter, and capitalization\
    \ does not matter.  So for instance,\n    if string1=\"abc\" and string2=\"bcd\"\
    , the answer is 2L.\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkcyv_jg.d(19): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkcyv_jg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n  assert(s.length);\n  \n  long\
    \ count = 0;\n  foreach(char c; s) \n  {\n    if (tolower(c) == 'a' || tolower(c)\
    \ == 'e' || tolower(c) == 'i' || tolower(c) == 'o' || tolower(c) == 'u')\n   \
    \   count++;\n  }\n  if (tolower(s[$-1]) == 'y')\n    count++;\n  return count;\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpetre1847.d(22): Error: undefined identifier `tolower`

    /tmp/tmpetre1847.d(22): Error: undefined identifier `tolower`

    /tmp/tmpetre1847.d(22): Error: undefined identifier `tolower`

    /tmp/tmpetre1847.d(22): Error: undefined identifier `tolower`

    /tmp/tmpetre1847.d(22): Error: undefined identifier `tolower`

    /tmp/tmpetre1847.d(25): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpetre1847.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    \n    return std.algorithm.count_if!(a\
    \ => in(\"aeiou\", tolower(a)))(s);\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxjlu2t6z.d(18): Error: expression expected, not `in`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxjlu2t6z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{ \n    long count = 0; \n    int\
    \ n = s.length; \n    for (int i = 0; i < n; i++) \n    { \n        if (s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y')\
    \ \n            count++; \n    } \n    return count; \n} \n  \n/*\nWrite a function\
    \ vowels_count which takes a string representing\n    a word as input and returns\
    \ the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i',\
    \ 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of\
    \ the given word.\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt7ox0nnw.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt7ox0nnw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    assert(s!=null);\n    return\
    \ count(s, ch => ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u'\
    \ || ch == 'y');\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg5hucylo.d(18): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg5hucylo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long result = 0;\n    const\
    \ char ch[] = \"aeiouy\";\n    for (size_t i = 0; i < s.length; i++)\n    {\n\
    \        for (size_t j = 0; j < 6; j++)\n        {\n            if (s[i] == ch[j])\n\
    \            {\n                result++;\n                break;\n          \
    \  }\n        }\n    }\n    if (s[s.length - 1] == 'y')\n    {\n        result++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: '/tmp/tmp9kinzcqs.d(18): Deprecation: instead of C-style syntax, use D-style
    syntax `char[] ch`

    /tmp/tmp9kinzcqs.d(18): Deprecation: instead of C-style syntax, use D-style syntax
    `char[] ch`

    core.exception.AssertError@/tmp/tmp9kinzcqs.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ecd]

    ??:? void tmp9kinzcqs.__unittest_L36_C1() [0x427b5d]

    ??:? void tmp9kinzcqs.__modtest() [0x427c4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc67]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aafa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43013c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aad1]

    ??:? runModuleUnitTests [0x42ba3d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428390]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long n = 0;\n    foreach(char\
    \ c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' ||\n           c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \            n++;\n    }\n    if(s[$-1] == 'y' || s[$-1] == 'Y')\n        n++;\n\
    \    return n;\n}\n/*\n    Write a function two_least which takes a string representing\
    \ a word\n    as input and returns the two lowest alphabetically occurring \n\
    \    characters in the string. Return the characters in the order that \n    they\
    \ appear in the string.\nunittest\n{\n    alias candidate = vowels_count;\n\n\
    \    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn6aybuch.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn6aybuch.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long n = 0;\n    foreach(e;\
    \ s)\n    {\n        char c = toLower(e);\n        if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')\n            n += 1;\n    }\n    return n;\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnt1j_2mc.d(20): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnt1j_2mc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long ret = 0;\n    foreach(c;\
    \ s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || c == 'y')\n            ret++;\n    }\n    return ret;\n}\nunittest\n{\n \
    \   alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk9ui6sag.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpk9ui6sag.__unittest_L25_C1() [0x427af1]

    ??:? void tmpk9ui6sag.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long result;\n    foreach(char\
    \ c; s)\n    {\n        if(c=='a' || c=='e' || c=='i' || c=='o' || c=='u' || c=='y')\n\
    \        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfmpekmvx.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpfmpekmvx.__unittest_L27_C1() [0x427af1]

    ??:? void tmpfmpekmvx.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long c = 0;\n    foreach(x;\
    \ s) {\n        if(x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' ||\
    \ x == 'y') {\n            c++;\n        }\n    }\n    return c;\n}\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyfefhmea.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpyfefhmea.__unittest_L25_C1() [0x427af1]

    ??:? void tmpyfefhmea.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long num = 0;\n    for (int\
    \ i = 0; i < s.length; i++)\n    {\n        if (tolower(s[i]) == 'a' || tolower(s[i])\
    \ == 'e' || tolower(s[i]) == 'i' || tolower(s[i]) == 'o' || tolower(s[i]) == 'u')\n\
    \        {\n            if (tolower(s[i]) == 'y' && (i == 0 || i == s.length -\
    \ 1))\n            {\n                num++;\n            }\n            else\n\
    \            {\n                num++;\n            }\n        }\n    }\n    return\
    \ num;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwk8i2vak.d(20): Error: undefined identifier `tolower`

    /tmp/tmpwk8i2vak.d(20): Error: undefined identifier `tolower`

    /tmp/tmpwk8i2vak.d(20): Error: undefined identifier `tolower`

    /tmp/tmpwk8i2vak.d(20): Error: undefined identifier `tolower`

    /tmp/tmpwk8i2vak.d(20): Error: undefined identifier `tolower`

    /tmp/tmpwk8i2vak.d(22): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwk8i2vak.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n\tlong vowels = 0;\n\tlong i;\n\
    \tfor (i = 0; i < s.length; i++) \n\t{\n\t\tif (s[i] == 'a' || s[i] == 'e' ||\
    \ s[i] == 'i' || s[i] == 'o' || s[i] == 'u') \n\t\t{\n\t\t\tvowels++;\n\t\t}\n\
    \t\telse if (s[i] == 'y' && (i == s.length - 1)) \n\t\t{\n\t\t\tvowels++;\n\t\t\
    }\n\t}\n\treturn vowels;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6rht796k.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmp6rht796k.__unittest_L32_C1() [0x427b95]

    ??:? void tmp6rht796k.__modtest() [0x427c84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc9f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab32]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcc5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430174]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab09]

    ??:? runModuleUnitTests [0x42ba75]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long result;\n    foreach(char\
    \ c; s) \n    {\n        c = toLower(c);\n        if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') \n        {\n            result++;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp07ss2bis.d(20): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp07ss2bis.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long vowel_count = 0;\n\
    \    long vowels[] = {'a', 'e', 'i', 'o', 'u', 'y'};\n    foreach(ch; s) {\n \
    \       if(ch in vowels)\n            vowel_count++;\n    }\n    return vowel_count;\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppwt8tnfe.d(18): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] vowels`

    /tmp/tmppwt8tnfe.d(18): Error: a struct is not a valid initializer for a `long[]`

    /tmp/tmppwt8tnfe.d(20): Error: incompatible types for `(ch) in (vowels)`: `immutable(char)`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppwt8tnfe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164002
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    int i;\n    long count =\
    \ 0;\n    for (i = 0; i < s.length; i++) \n    {\n        if ((s[i] == 'a') ||\
    \ (s[i] == 'e') || (s[i] == 'i') || (s[i] == 'o') || (s[i] == 'u')) \n       \
    \ {\n            count++;\n        }\n        else if ((s[i] == 'y') && (i ==\
    \ s.length - 1)) \n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzsnzri4g.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmpzsnzri4g.__unittest_L32_C1() [0x427b91]

    ??:? void tmpzsnzri4g.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc97]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab2a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcbd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43016c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc49]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]

    ??:? runModuleUnitTests [0x42ba6d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{ \n    long vowels = 0; \n   \
    \ for (int i = 0; i < s.length; i++) \n    { \n        // If current character\
    \ is vowel \n        if ( \n            s[i] == 'a' || \n            s[i] == 'e'\
    \ || \n            s[i] == 'i' || \n            s[i] == 'o' || \n            s[i]\
    \ == 'u' || \n            s[i] == 'y' ) \n            vowels++; \n    } \n   \
    \ return vowels; \n}\nunittest\n{\n    alias candidate = vowels_count;\n\n   \
    \ assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu1hs_2_a.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427eed]

    ??:? void tmpu1hs_2_a.__unittest_L32_C1() [0x427b7d]

    ??:? void tmpu1hs_2_a.__modtest() [0x427c6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc87]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab1a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43015c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]

    ??:? runModuleUnitTests [0x42ba5d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long num = 0;\n    for (size_t\
    \ i = 0; i < s.length; i++) \n    {\n        char c = tolower(s[i]);\n       \
    \ if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n        {\n\
    \            num += 1;\n        } \n        else if (c == 'y' && i == s.length\
    \ - 1) \n        {\n            num += 1;\n        }\n    }\n    return num;\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph9lu1l4_.d(20): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9lu1l4_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long res = 0;\n    foreach(c;\
    \ s) {\n        res += toLower(c) in ['a', 'e', 'i', 'o', 'u'];\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcexz2vgl.d(19): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcexz2vgl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(char\
    \ c; s)\n    {\n        switch(tolower(c))\n        {\n            case 'a':\n\
    \            case 'e':\n            case 'i':\n            case 'o':\n       \
    \     case 'u':\n                count++;\n                break;\n          \
    \  case 'y':\n                if(c == s[$-1])\n                    count++;\n\
    \                break;\n        }\n    }\n    return count;\n}\n/*\n    Write\
    \ a function max_vowels_word which takes a string representing\n    a sentence\
    \ as input and returns the word with the most vowels. If there\n    are multiple\
    \ words with the same number of vowels, the function returns\n    the first such\
    \ word.\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8qk7zjay.d(37): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8qk7zjay.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    static string vowels = \"\
    aeiouy\";\n    return count_if(s, (char c) => c != ' ' && vowel(c, vowels));\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj31zqkjp.d(18): Error: undefined identifier `count_if`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj31zqkjp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{ \n    long n=0;\n    long i=0;\n\
    \    for(;i<s.length;++i)\n    {\n        if(s[i]=='a' || s[i]=='e' || s[i]=='i'\
    \ || s[i]=='o' || s[i]=='u' || (s[i]=='y' && i==s.length-1))\n            ++n;\n\
    \    }\n    return n;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n\
    \    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr7p86dce.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmpr7p86dce.__unittest_L26_C1() [0x427b9d]

    ??:? void tmpr7p86dce.__modtest() [0x427c8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bca7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab3a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fccd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43017c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc59]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab11]

    ??:? runModuleUnitTests [0x42ba7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long result = 0;\n    foreach(c;\
    \ s) \n    {\n        c = toLower(c);\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u')\n            result++;\n    }\n    if(s[$-1] ==\
    \ 'y')\n        result++;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7rgylr3w.d(20): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7rgylr3w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long result = 0;\n    long\
    \ size = s.length;\n    for (long i = 0; i < size; i++)\n    {\n        if (tolower(s[i])\
    \ == 'a' || tolower(s[i]) == 'e' || tolower(s[i]) == 'i' || tolower(s[i]) == 'o'\
    \ || tolower(s[i]) == 'u')\n        {\n            result++;\n        }\n    }\n\
    \    if (result > 0 && tolower(s[size - 1]) == 'y')\n    {\n        result++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsqxfwlhx.d(21): Error: undefined identifier `tolower`

    /tmp/tmpsqxfwlhx.d(21): Error: undefined identifier `tolower`

    /tmp/tmpsqxfwlhx.d(21): Error: undefined identifier `tolower`

    /tmp/tmpsqxfwlhx.d(21): Error: undefined identifier `tolower`

    /tmp/tmpsqxfwlhx.d(21): Error: undefined identifier `tolower`

    /tmp/tmpsqxfwlhx.d(26): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsqxfwlhx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    // First we convert the\
    \ whole string to lower case.\n    s = lower(s);\n    // Now we count all the\
    \ vowels in s.\n    long count = 0;\n    foreach(c; s) {\n        switch(c) {\n\
    \            case 'a':\n            case 'e':\n            case 'i':\n       \
    \     case 'o':\n            case 'u':\n            case 'y':\n              \
    \  ++count;\n                break;\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\"\
    ) == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\"\
    ) == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\"\
    ) == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\"\
    ) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprl_6wukd.d(18): Error: undefined identifier `lower`

    /tmp/tmprl_6wukd.d(22): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprl_6wukd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long r = 0;\n    if(s.length\
    \ > 0 && find(s, \"a\") != -1) r++;\n    if(s.length > 0 && find(s, \"e\") !=\
    \ -1) r++;\n    if(s.length > 0 && find(s, \"i\") != -1) r++;\n    if(s.length\
    \ > 0 && find(s, \"o\") != -1) r++;\n    if(s.length > 0 && find(s, \"u\") !=\
    \ -1) r++;\n    if(s.length > 0 && find(s, \"y\") != -1) r++;\n    return r;\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt6umczcj.d(18): Error: undefined identifier `find`, did you mean
    function `fmod`?

    /tmp/tmpt6umczcj.d(19): Error: undefined identifier `find`, did you mean function
    `fmod`?

    /tmp/tmpt6umczcj.d(20): Error: undefined identifier `find`, did you mean function
    `fmod`?

    /tmp/tmpt6umczcj.d(21): Error: undefined identifier `find`, did you mean function
    `fmod`?

    /tmp/tmpt6umczcj.d(22): Error: undefined identifier `find`, did you mean function
    `fmod`?

    /tmp/tmpt6umczcj.d(23): Error: undefined identifier `find`, did you mean function
    `fmod`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6umczcj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    for\
    \ (size_t i = 0; i < s.length; i++) \n    {\n        char c = tolower(s[i]);\n\
    \        if ((c == 'a') || (c == 'e') || (c == 'i') || (c == 'o') || (c == 'u'))\
    \ \n        {\n            count++;\n        } \n        else if ((c == 'y') &&\
    \ (i == s.length - 1)) \n        {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n   \
    \ assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz7hg96t1.d(20): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz7hg96t1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{ \n    long c = 0;\n    for (long\
    \ i = 0; i < s.length; i++) \n    { \n        if (s[i] == 'a' || s[i] == 'e' ||\
    \ s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') \n            c++;\
    \ \n    } \n    return c; \n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc9ixwhll.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427edd]

    ??:? void tmpc9ixwhll.__unittest_L25_C1() [0x427b6d]

    ??:? void tmpc9ixwhll.__modtest() [0x427c5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc77]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab0a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc9d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43014c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc29]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aae1]

    ??:? runModuleUnitTests [0x42ba4d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    \n    long count = 0;\n\
    \    for(int i = 0; i < s.length; i++)\n    {\n        if(s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\n/*\nWrite\
    \ a function num_consec_vowels which takes a string representing\n    a word as\
    \ input and returns the number of consecutive vowels in\n    the string. A consecutive\
    \ vowel is a vowel that is followed by\n    another vowel. You are given the vowels_count\
    \ function which\n    takes a string representing a word as input and returns\
    \ the\n    number of vowels in the string. Vowels in this case are 'a', 'e',\n\
    \    'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at\n    the\
    \ end of the given word. The following example shows the\n    vowels_count function\
    \ in action:\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpba9abu3w.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpba9abu3w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    int i, j, count=0;\n   \
    \ s = toLower(s);\n    for(i=0; i<s.length; i++)\n    {\n        if(s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n        {\n  \
    \          count++;\n        }\n        else if(s[i] == 'y')\n        {\n    \
    \        if(i+1 == s.length)\n            {\n                count++;\n      \
    \      }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz0wex7_w.d(18): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0wex7_w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    bool\
    \ y_done = false;\n    for (size_t i = 0; i < s.length; i++)\n    {\n        switch\
    \ (s[i])\n        {\n            case 'a':\n            case 'e':\n          \
    \  case 'i':\n            case 'o':\n            case 'u':\n                count++;\n\
    \                break;\n            case 'y':\n                if (!y_done)\n\
    \                {\n                    count++;\n                    y_done =\
    \ true;\n                }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp34h6zaix.d(21): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp34h6zaix.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    // TODO: Write your code\
    \ here\n    long count = 0;\n    for(size_t i = 0; i < s.length(); i++)\n    {\n\
    \        if(tolower(s[i]) == 'a' || tolower(s[i]) == 'e' || tolower(s[i]) == 'i'\
    \ || tolower(s[i]) == 'o' || tolower(s[i]) == 'u')\n        {\n            count++;\n\
    \        }\n    }\n    if(tolower(s[s.length() - 1]) == 'y')\n    {\n        count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8j5x6sfj.d(19): Error: no property `length` for type `string`

    /tmp/tmp8j5x6sfj.d(21): Error: undefined identifier `tolower`

    /tmp/tmp8j5x6sfj.d(21): Error: undefined identifier `tolower`

    /tmp/tmp8j5x6sfj.d(21): Error: undefined identifier `tolower`

    /tmp/tmp8j5x6sfj.d(21): Error: undefined identifier `tolower`

    /tmp/tmp8j5x6sfj.d(21): Error: undefined identifier `tolower`

    /tmp/tmp8j5x6sfj.d(26): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8j5x6sfj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{ \n    long n = 0;\n    foreach(ch;\
    \ s)\n    {\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch\
    \ == 'u' || ch == 'y')\n            n++;\n    }\n    return n;\n}\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnfdcck1j.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpnfdcck1j.__unittest_L25_C1() [0x427af1]

    ??:? void tmpnfdcck1j.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    // ToDo: Write code here\n\
    \    long cnt = 0;\n    foreach(char c; s)\n    {\n        c = toLower(c);\n \
    \       if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n       \
    \     cnt++;\n    }\n    if(toLower(s[$-1]) == 'y')\n        cnt++;\n    return\
    \ cnt;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv80odb98.d(21): Error: undefined identifier `toLower`

    /tmp/tmpv80odb98.d(25): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv80odb98.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long vc = 0;\n    foreach(char\
    \ c; s) \n    {\n        switch(tolower(c)) \n        {\n            case 'a':\n\
    \            case 'e':\n            case 'i':\n            case 'o':\n       \
    \     case 'u':\n            case 'y':\n                vc += 1;\n        }\n\
    \    }\n    return vc;\n}\n/*\nWrite a function vowels_count_p which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string\n\
    \    as in vowels_count but using pointers as indexing mechanisms for \n    strings.\n\
    */\nlong vowels_count_p(string s) \n{\n    long vc = 0;\n    const char* p = s.ptr;\n\
    \    while(*p) \n    {\n        switch(tolower(*p)) \n        {\n            case\
    \ 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n\
    \            case 'u':\n            case 'y':\n                vc += 1;\n    \
    \    }\n        p++;\n    }\n    return vc;\n}\n/*\nWrite a function vowels_count_r\
    \ which takes a string representing\n    a word as input and returns the number\
    \ of vowels in the string\n    as in vowels_count but using recursion.\n*/\nlong\
    \ vowels_count_r(string s) \n{\n    long vc = 0;\n    if(s.length == 0)\n    \
    \    return 0;\n    else \n    {\n        switch(tolower(s[0])) \n        {\n\
    \            case 'a':\n            case 'e':\n            case 'i':\n       \
    \     case 'o':\n            case 'u':\n            case 'y':\n              \
    \  vc += 1;\n        }\n        return vc + vowels_count_r(s[1..$]);\n    }\n\
    }\n/*\nWrite a function vowels_count_s which takes a string representing\n   \
    \ a word as input and returns the number of vowels in the string\n    as in vowels_count\
    \ but using slicing.\n*/\nlong vowels_count_s(string s) \n{\nunittest\n{\n   \
    \ alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpebg5ra5x.d(91): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpebg5ra5x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(char\
    \ c; s) \n    {\n        switch(c) \n        {\n            case 'a':\n      \
    \      case 'e':\n            case 'i':\n            case 'o':\n            case\
    \ 'u':\n            case 'y':\n                count += 1;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n  \
    \  assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprixabad7.d(20): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprixabad7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    char[5]\
    \ vowels = ['a', 'e', 'i', 'o', 'u'];\n    bool anyVowel = false;\n    char last_char\
    \ = s[$-1];\n    foreach(char c; s)\n    {\n        foreach(char v; vowels)\n\
    \        {\n            if(c == v)\n            {\n                anyVowel =\
    \ true;\n                break;\n            }\n        }\n        if(anyVowel)\n\
    \        {\n            count++;\n            anyVowel = false;\n        }\n \
    \   }\n    if(last_char == 'y')\n    {\n        count++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpla_5wema.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ed5]

    ??:? void tmpla_5wema.__unittest_L43_C1() [0x427b65]

    ??:? void tmpla_5wema.__modtest() [0x427c54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc6f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab02]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc95]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430144]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc21]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aad9]

    ??:? runModuleUnitTests [0x42ba45]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428398]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(c;\
    \ s)\n    {\n        if(tolower(c) == 'a' || tolower(c) == 'e' || tolower(c) ==\
    \ 'i' ||\n            tolower(c) == 'o' || tolower(c) == 'u' || (c == 'y' && c\
    \ == s[$-1]))\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc2fqfunv.d(20): Error: undefined identifier `tolower`

    /tmp/tmpc2fqfunv.d(20): Error: undefined identifier `tolower`

    /tmp/tmpc2fqfunv.d(20): Error: undefined identifier `tolower`

    /tmp/tmpc2fqfunv.d(21): Error: undefined identifier `tolower`

    /tmp/tmpc2fqfunv.d(21): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc2fqfunv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long vowels_count = 0;\n\
    \    if (s.length > 0)\n    {\n        s = s.tolower();\n        if (s[0] == 'a'\
    \ || s[0] == 'e' || s[0] == 'i' || s[0] == 'o' || s[0] == 'u')\n            vowels_count++;\n\
    \        if (s.length > 1)\n        {\n            if (s[1] == 'a' || s[1] ==\
    \ 'e' || s[1] == 'i' || s[1] == 'o' || s[1] == 'u')\n                vowels_count++;\n\
    \            if (s.length > 2)\n            {\n                if (s[2] == 'a'\
    \ || s[2] == 'e' || s[2] == 'i' || s[2] == 'o' || s[2] == 'u')\n             \
    \       vowels_count++;\n                if (s.length > 3)\n                {\n\
    \                    if (s[3] == 'a' || s[3] == 'e' || s[3] == 'i' || s[3] ==\
    \ 'o' || s[3] == 'u')\n                        vowels_count++;\n             \
    \       if (s.length > 4)\n                    {\n                        if (s[4]\
    \ == 'a' || s[4] == 'e' || s[4] == 'i' || s[4] == 'o' || s[4] == 'u')\n      \
    \                      vowels_count++;\n                        if (s.length >\
    \ 5)\n                        {\n                            if (s[5] == 'a' ||\
    \ s[5] == 'e' || s[5] == 'i' || s[5] == 'o' || s[5] == 'u')\n                \
    \                vowels_count++;\n                            if (s.length > 6)\n\
    \                            {\n                                if (s[6] == 'a'\
    \ || s[6] == 'e' || s[6] == 'i' || s[6] == 'o' || s[6] == 'u')\n             \
    \                       vowels_count++;\n                                if (s.\n\
    unittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\"\
    ) == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\"\
    ) == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\"\
    ) == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\"\
    ) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph7k10js9.d(48): Error: identifier expected following `.`, not `unittest`

    /tmp/tmph7k10js9.d(49): Error: found `{` when expecting `)`

    /tmp/tmph7k10js9.d(60): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmph7k10js9.d(60): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmph7k10js9.d(60): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmph7k10js9.d(60): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmph7k10js9.d(60): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmph7k10js9.d(60): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmph7k10js9.d(60): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph7k10js9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n  int counter = 0;\n  \n  foreach(immutable\
    \ char c; s) \n  {\n    if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || c == 'y')\n    {\n      counter++;\n    }\n  }\n  return counter;\n}\n\
    unittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\"\
    ) == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\"\
    ) == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\"\
    ) == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\"\
    ) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5fwsljbk.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmp5fwsljbk.__unittest_L28_C1() [0x427aed]

    ??:? void tmp5fwsljbk.__modtest() [0x427bdc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long i;\n    int len = s.length;\n\
    \    long count = 0;\n    char c;\n    bool isLower;\n    for (i = 0; i < len;\
    \ i++) {\n        c = s[i];\n        isLower = s[i] >= 'a' && s[i] <= 'z';\n \
    \       if ((c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') ||\n  \
    \          (isLower && (c == 'y' && i == len - 1))) {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptzpxou11.d(18): Error: cannot implicitly convert expression `s.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptzpxou11.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long vowels = 0;\n    foreach(index,\
    \ c; s) \n    {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') \n        {\n            ++vowels;\n        } \n        else if (c ==\
    \ 'y' && index == s.length - 1) \n        {\n            ++vowels;\n        }\n\
    \    }\n    return vowels;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzfdsryah.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e75]

    ??:? void tmpzfdsryah.__unittest_L31_C1() [0x427b09]

    ??:? void tmpzfdsryah.__modtest() [0x427bf8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430070]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]

    ??:? runModuleUnitTests [0x42b971]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    // your code here\n    return\
    \ 0;\n}\n/*\n    Write a function is_palindrome which takes a string representing\
    \ a\n    word as input and returns true if the string is a palindrome and\n  \
    \  false otherwise. \nunittest\n{\n    alias candidate = vowels_count;\n\n   \
    \ assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg75ouc5f.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg75ouc5f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count=0;\n    foreach(char\
    \ c; s) \n    {\n        if(tolower(c)=='a' || tolower(c)=='e' || tolower(c)=='i'\
    \ || tolower(c)=='o' || tolower(c)=='u')\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwgmz_8h.d(20): Error: undefined identifier `tolower`

    /tmp/tmpkwgmz_8h.d(20): Error: undefined identifier `tolower`

    /tmp/tmpkwgmz_8h.d(20): Error: undefined identifier `tolower`

    /tmp/tmpkwgmz_8h.d(20): Error: undefined identifier `tolower`

    /tmp/tmpkwgmz_8h.d(20): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwgmz_8h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long total = 0;\n    foreach(char\
    \ c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || c == 'y')\n        {\n            total += 1;\n        }\n    }\n   \
    \ return total;\n}\n/*\nWrite a function vowels_count_2 which takes a string representing\n\
    \    a word as input and returns the number of vowels in the string.\n    Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is never a\n    vowel.\n\
    unittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\"\
    ) == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\"\
    ) == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\"\
    ) == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\"\
    ) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk4akscq5.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk4akscq5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    s = toLower(s);\n    long\
    \ res = 0;\n    foreach(c; s)\n    {\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') res++;\n    }\n    return res;\n}\nunittest\n{\n\
    \    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp90gqqy_p.d(17): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp90gqqy_p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long num_vowels;\n    num_vowels\
    \ = 0;\n    long len;\n    len = s.length;\n    foreach(i; 0..len)\n    {\n  \
    \      //std.conv.to!int('a');\n        if(((std.conv.to!int(s[i])==97)||(std.conv.to!int(s[i])==101)||(std.conv.to!int(s[i])==105)||(std.conv.to!int(s[i])==111)||(std.conv.to!int(s[i])==117))||((std.conv.to!int(s[i])==65)||(std.conv.to!int(s[i])==69)||(std.conv.to!int(s[i])==73)||(std.conv.to!int(s[i])==79)||(std.conv.to!int(s[i])==85)))\n\
    \        {\n            if((std.conv.to!int(s[i])==89)||(std.conv.to!int(s[i])==121))\n\
    \            {\n                if(i==len-1)\n                {\n            \
    \        num_vowels++;\n                }\n            }\n            else\n \
    \           {\n                num_vowels++;\n            }\n        }\n    }\n\
    \    return num_vowels;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe32sn0wm.d(24): Error: undefined identifier `conv` in package `std`

    /tmp/tmpe32sn0wm.d(24): Error: undefined identifier `conv` in package `std`

    /tmp/tmpe32sn0wm.d(24): Error: undefined identifier `conv` in package `std`

    /tmp/tmpe32sn0wm.d(24): Error: undefined identifier `conv` in package `std`

    /tmp/tmpe32sn0wm.d(24): Error: undefined identifier `conv` in package `std`

    /tmp/tmpe32sn0wm.d(24): Error: undefined identifier `conv` in package `std`

    /tmp/tmpe32sn0wm.d(24): Error: undefined identifier `conv` in package `std`

    /tmp/tmpe32sn0wm.d(24): Error: undefined identifier `conv` in package `std`

    /tmp/tmpe32sn0wm.d(24): Error: undefined identifier `conv` in package `std`

    /tmp/tmpe32sn0wm.d(24): Error: undefined identifier `conv` in package `std`

    /tmp/tmpe32sn0wm.d(26): Error: undefined identifier `conv` in package `std`

    /tmp/tmpe32sn0wm.d(26): Error: undefined identifier `conv` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe32sn0wm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long vowels = 0;\n    foreach(ch;\
    \ s)\n    {\n        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch\
    \ == 'u' || ch == 'y')\n        {\n            vowels++;\n        }\n    }\n \
    \   return vowels;\n}\n/*\nWrite a function cons_count which takes a string representing\n\
    \    a word as input and returns the number of consonants in the string.\n   \
    \ Consonants in this case are 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\n \
    \   'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z', 'y'. 'y' is only\n\
    \    a consonant when it is not at the end of the given word.\nunittest\n{\n \
    \   alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeev7643i.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeev7643i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(c;\
    \ s) \n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || (c == 'y' && c.indexof(s) == s.length-1))\n            count++;\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n\
    \    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxnqriv0u.d(20): Error: no property `indexof` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxnqriv0u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long r = 0;\n    foreach(c;\
    \ s)\n    {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' ||\n            (c == 'y' && c == s[$-1]))\n            r++;\n    }\n  \
    \  return r;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp777zp5kw.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmp777zp5kw.__unittest_L26_C1() [0x427b29]

    ??:? void tmp777zp5kw.__modtest() [0x427c18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc55]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430104]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa99]

    ??:? runModuleUnitTests [0x42ba05]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428358]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n  int count = 0;\n  foreach(char\
    \ c; s)\n  {\n    switch(c)\n    {\n      case 'a':\n      case 'e':\n      case\
    \ 'i':\n      case 'o':\n      case 'u':\n      case 'y':\n        count++;\n\
    \    }\n  }\n  if(count > 0 && s[$-1] != 'y')\n    count--;\n  return count;\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpic0vh794.d(20): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpic0vh794.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n  const string vowels = \"aeiou\"\
    ;\n  long count = 0;\n  foreach(const char c; s)\n  {\n    if (c == 'y' && c ==\
    \ s[$-1]) continue;\n    if (vowels.canFind(c)) ++count;\n  }\n  return count;\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi8dg_hdt.d(22): Error: no property `canFind` for type `const(string)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi8dg_hdt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    long\
    \ sz = s.length;\n    foreach(c; s)\n    {\n        if(tolower(c) == 'a' || tolower(c)\
    \ == 'e' || tolower(c) == 'i' || tolower(c) == 'o' || tolower(c) == 'u')\n   \
    \     {\n            count++;\n        }\n        else if(tolower(c) == 'y' &&\
    \ tolower(s[sz - 1]) == 'y')\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n\
    \    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpefo_6tx1.d(21): Error: undefined identifier `tolower`

    /tmp/tmpefo_6tx1.d(21): Error: undefined identifier `tolower`

    /tmp/tmpefo_6tx1.d(21): Error: undefined identifier `tolower`

    /tmp/tmpefo_6tx1.d(21): Error: undefined identifier `tolower`

    /tmp/tmpefo_6tx1.d(21): Error: undefined identifier `tolower`

    /tmp/tmpefo_6tx1.d(25): Error: undefined identifier `tolower`

    /tmp/tmpefo_6tx1.d(25): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpefo_6tx1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long vcount = 0;\n    foreach(char\
    \ c; s) \n    {\n        if (tolower(c) == 'a' ||\n            tolower(c) == 'e'\
    \ ||\n            tolower(c) == 'i' ||\n            tolower(c) == 'o' ||\n   \
    \         tolower(c) == 'u') \n        {\n            vcount++;\n        }\n \
    \   }\n    return vcount;\n}\n/*\nWrite a function words_count which takes a string\n\
    \    representing a phrase and an integer threshold. The function returns\n  \
    \  the number of words in the phrase whose length is greater than or\n    equal\
    \ to the threshold.\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgb7h6ibd.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgb7h6ibd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    auto count = 0L;\n    foreach(c;\
    \ s)\n    {\n        if(c=='a' || c=='e' || c=='i' || c=='o' || c=='u' ||\n  \
    \          (c=='y' && s.length()-1 == count))\n            count++;\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n   \
    \ assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1f4qwjtj.d(21): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1f4qwjtj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    enum { VOWELS = 5 };\n \
    \   static char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n    long result = 0;\n\
    \    foreach (c; s) {\n        c = toLower(c);\n        foreach (v; vowels) {\n\
    \            if (c == v)\n                ++result;\n        }\n    }\n    if\
    \ (result > 0 && s[$ - 1] == 'y')\n        ++result;\n    return result;\n}\n\
    unittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\"\
    ) == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\"\
    ) == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\"\
    ) == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\"\
    ) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpym7qjuvu.d(17): Deprecation: use `{ }` for an empty statement,
    not `;`

    /tmp/tmpym7qjuvu.d(18): Error: a struct is not a valid initializer for a `char[]`

    /tmp/tmpym7qjuvu.d(21): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpym7qjuvu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long vowel_count = 0;\n\
    \    foreach(ch; s) \n    {\n        switch(ch) \n        {\n            case\
    \ 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n\
    \            case 'u':\n            case 'y':\n                vowel_count++;\n\
    \                break;\n        }\n    }\n    if(startsWith(s, \"y\"))\n    \
    \    vowel_count--;\n    if(endsWith(s, \"y\"))\n        vowel_count++;\n    return\
    \ vowel_count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp10nmrkfb.d(20): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmp10nmrkfb.d(32): Error: undefined identifier `startsWith`

    /tmp/tmp10nmrkfb.d(34): Error: undefined identifier `endsWith`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp10nmrkfb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(char\
    \ c; s)\n    {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u' || c == 'y')\n            count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptv1iwxb6.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmptv1iwxb6.__unittest_L25_C1() [0x427af1]

    ??:? void tmptv1iwxb6.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count=0;\n    foreach(i;\
    \ s)\n    {\n        if(i=='a'||i=='e'||i=='i'||i=='o'||i=='u'||(i=='y'&&i==s[$-1]))\n\
    \            count++;\n    }\n    return count;\n}\n/*\n    Write a function largest_sum\
    \ which takes an array of ints as input\n    and returns the sum of the 3 largest\
    \ elements. If the input array\n    contains less than 3 elements, return the\
    \ sum of all of its elements.\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7_xuxdpm.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7_xuxdpm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    s = toLower(s);\n    long\
    \ result = 0;\n    for (size_t i = 0; i < s.length; i++)\n    {\n        if (s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n      \
    \  {\n            result++;\n        }\n    }\n    if (s[s.length - 1] == 'y')\n\
    \    {\n        result++;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf83k0utl.d(17): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf83k0utl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    char[] vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    long result = 0;\n    foreach(char i; s)\n    {\n     \
    \   foreach(char v; vowels)\n        {\n            if(i == v)\n            {\n\
    \                result++;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgll_3rqd.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ecd]

    ??:? void tmpgll_3rqd.__unittest_L31_C1() [0x427b5d]

    ??:? void tmpgll_3rqd.__modtest() [0x427c4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd97]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ac2a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fdbd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43026c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fd49]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ac01]

    ??:? runModuleUnitTests [0x42bb6d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42831c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(char\
    \ c; s)\n    {\n        if(c=='a' || c=='e' || c=='i' || c=='o' || c=='u' || c=='y')\n\
    \            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplnlq9z5e.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmplnlq9z5e.__unittest_L25_C1() [0x427af1]

    ??:? void tmplnlq9z5e.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    int len = s.length();\n\
    \    int count = 0;\n    int i = 0;\n    while(i<len)\n    {\n        char c =\
    \ s[i];\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            count++;\n        }\n        else if(c == 'y' && i ==\
    \ len-1)\n        {\n            count++;\n        }\n        i++;\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfx80spxp.d(17): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfx80spxp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(c;\
    \ s)\n    {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || (c == 'y' && c == s[$-1]))\n            count++;\n    }\n    return count;\n\
    }\n/*\nWrite a function find_date which takes a string representing a date\n \
    \   as input and returns a tuple representing the date. The input date can be\n\
    \    represented in any of the following formats:\n    (1) 'Jan 31 2017'\n   \
    \ (2) '31 Jan 2017'\n    (3) '1/31/2017'\n    (4) '2017-01-31'\n    The returned\
    \ tuple should contain the following three fields\n    (1) year (int)\n    (2)\
    \ month (int)\n    (3) day (int)\n    If the given date is not in any of the above\
    \ formats, raise an AssertError\n    with a suitable message.\nunittest\n{\n \
    \   alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiq6v8gqy.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiq6v8gqy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long l;\n    l = s.length;\n\
    \    long i = 0;\n    long j = 0;\n    long c = 0;\n    for (i = 0; i < l; i++)\
    \ {\n        switch (s[i]) {\n            case 'a':\n            case 'e':\n \
    \           case 'i':\n            case 'o':\n            case 'u':\n        \
    \    case 'y':\n                c++;\n                break;\n            default:\n\
    \                break;\n        }\n    }\n    if (s[l-1] == 'y')\n        c--;\n\
    \    return c;\n}\n/*\nWrite a function str_to_int which takes a string representing\
    \ a whole\n    number and returns the number as an int. You must not use any\n\
    \    built-in conversion functions. The string might be prefixed with a\n    '+'\
    \ or '-' sign, in which case the result should be correspondingly\n    negative\
    \ or positive. Your function must handle the case where the\n    input is not\
    \ a valid whole number.\nunittest\n{\n    alias candidate = vowels_count;\n\n\
    \    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp28k5z442.d(40): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp28k5z442.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(char\
    \ c; s)\n    {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u' || c == 'y')\n            count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptv1iwxb6.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmptv1iwxb6.__unittest_L25_C1() [0x427af1]

    ??:? void tmptv1iwxb6.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n\tlong i;\n\tlong count;\n\t\
    count = 0;\n\tforeach(c; s)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' || c == 'y')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgeiun1zj.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpgeiun1zj.__unittest_L29_C1() [0x427af1]

    ??:? void tmpgeiun1zj.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(c;\
    \ s)\n    {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || (c == 'y' && c == s[$-1])) count++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw4ah78uf.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpw4ah78uf.__unittest_L24_C1() [0x427b29]

    ??:? void tmpw4ah78uf.__modtest() [0x427c18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc55]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430104]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa99]

    ??:? runModuleUnitTests [0x42ba05]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428358]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(c;\
    \ s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || (c == 'y' && s.length == 1))\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyqo7_amu.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmpyqo7_amu.__unittest_L27_C1() [0x427af9]

    ??:? void tmpyqo7_amu.__modtest() [0x427be8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long cnt = 0;\n    foreach(char\
    \ ch; s) \n    {\n        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o'\
    \ || ch == 'u' || ch == 'y')\n            cnt++;\n    }\n    if(cnt > 0 && s[$-1]\
    \ == 'y')\n        cnt--;\n    return cnt;\n}\n/*\nWrite a function longest_word\
    \ which takes a string representing a\n    text as input and returns the longest\
    \ word in the text.\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw7suocit.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw7suocit.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long vowels = 0;\n    foreach(c;\
    \ s)\n    {\n        if (c=='a' || c=='e' || c=='i' || c=='o' || c=='u' || c=='y')\n\
    \            vowels++;\n    }\n    if (s[$-1]=='y')\n        vowels++;\n    return\
    \ vowels;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1xkxebtj.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmp1xkxebtj.__unittest_L27_C1() [0x427b25]

    ??:? void tmp1xkxebtj.__modtest() [0x427c14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc55]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430104]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa99]

    ??:? runModuleUnitTests [0x42ba05]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428358]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    long\
    \ i = 0;\n    for (i = 0; i < s.length; i++)\n    {\n        if ((tolower(s[i])\
    \ == 'a') || (tolower(s[i]) == 'e') || (tolower(s[i]) == 'i') || (tolower(s[i])\
    \ == 'o') || (tolower(s[i]) == 'u'))\n        {\n            count++;\n      \
    \  }\n    }\n    if (tolower(s[i-1]) == 'y')\n    {\n        count++;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n  \
    \  assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi5fv1zv_.d(21): Error: undefined identifier `tolower`

    /tmp/tmpi5fv1zv_.d(21): Error: undefined identifier `tolower`

    /tmp/tmpi5fv1zv_.d(21): Error: undefined identifier `tolower`

    /tmp/tmpi5fv1zv_.d(21): Error: undefined identifier `tolower`

    /tmp/tmpi5fv1zv_.d(21): Error: undefined identifier `tolower`

    /tmp/tmpi5fv1zv_.d(26): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5fv1zv_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    return std.algorithm.count_if(s,\
    \ c => \"aeiouAEIOUyY\".canFind(c));\n}\n/*\nWrite a function space_count which\
    \ takes a string representing\n    a word as input and returns the number of spaces\
    \ in the string.\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplgihvx1r.d(19): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplgihvx1r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    return std.algorithm.count_if(s,\
    \ (char c) => \n\t\t\t\t  'a' <= c && c <= 'z' &&\n\t\t\t\t  is_vowel(c));\n}\n\
    unittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\"\
    ) == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\"\
    ) == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\"\
    ) == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\"\
    ) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovq37k_t.d(17): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovq37k_t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(char\
    \ c; s)\n    {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u' || (c == 'y' && s.length == 1))\n            count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_y3tlc4e.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmp_y3tlc4e.__unittest_L25_C1() [0x427af9]

    ??:? void tmp_y3tlc4e.__modtest() [0x427be8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n  long i;\n  long v;\n  i =\
    \ s.length;\n  v = 0;\n  while (i--)\n    if (s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y')\n      v++;\n  return v;\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4qbzt3bj.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ee5]

    ??:? void tmp4qbzt3bj.__unittest_L26_C1() [0x427b79]

    ??:? void tmp4qbzt3bj.__modtest() [0x427c68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc7f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab12]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430154]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc31]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aae9]

    ??:? runModuleUnitTests [0x42ba55]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long vowels = 0;\n    foreach(char\
    \ c; s)\n    {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n            vowels += 1;\n    }\n    return vowels;\n}\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphbyzhzw2.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e55]

    ??:? void tmphbyzhzw2.__unittest_L25_C1() [0x427ae9]

    ??:? void tmphbyzhzw2.__modtest() [0x427bd8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430050]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]

    ??:? runModuleUnitTests [0x42b951]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n  return count(s, (c) {\n  \
    \  import std.algorithm : map;\n    return map!(toLower)(c)\n      .canFindIn(\"\
    aeiou\");\n  });\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpie32m5vj.d(17): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpie32m5vj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{ \n    return count(s, ch => ch\
    \ in ['a', 'e', 'i', 'o', 'u', 'y']);\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtcvhs6m.d(17): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtcvhs6m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(c;\
    \ s) \n    {\n        char lower = toLower(c);\n        if (lower == 'a' || lower\
    \ == 'e' || lower == 'i' || lower == 'o' || lower == 'u') \n        {\n      \
    \      count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkitcw7ey.d(20): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkitcw7ey.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{ \n  long count = 0;\n  foreach(character;\
    \ s)\n  {\n    if (character == 'a' || character == 'e' || character == 'i' ||\
    \ character == 'o' || character == 'u' || character == 'y')\n    {\n      count\
    \ = count + 1;\n    }\n  }\n  return count;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8yd_bgno.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmp8yd_bgno.__unittest_L27_C1() [0x427af9]

    ??:? void tmp8yd_bgno.__modtest() [0x427be8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long cnt = 0;\n    foreach(c;\
    \ s) \n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' ||\n            (c == 'y' && c == s[$-1]))\n        {\n            cnt +=\
    \ 1;\n        }\n    }\n    return cnt;\n}\nunittest\n{\n    alias candidate =\
    \ vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7pmlzm_r.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmp7pmlzm_r.__unittest_L28_C1() [0x427b29]

    ??:? void tmp7pmlzm_r.__modtest() [0x427c18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc55]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430104]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa99]

    ??:? runModuleUnitTests [0x42ba05]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428358]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long vowels = 0;\n    for\
    \ (int i = 0; i < s.length; i++)\n    {\n        if (\n        s[i] == 'a' ||\n\
    \        s[i] == 'e' ||\n        s[i] == 'i' ||\n        s[i] == 'o' ||\n    \
    \    s[i] == 'u' ||\n        s[i] == 'y' && (i+1 == s.length)\n        )\n   \
    \     {\n            vowels++;\n        }\n    }\n    return vowels;\n}\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp43cro20l.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmp43cro20l.__unittest_L34_C1() [0x427b91]

    ??:? void tmp43cro20l.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc97]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab2a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcbd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43016c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc49]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]

    ??:? runModuleUnitTests [0x42ba6d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long vcnt=0;\n    foreach(c;\
    \ s)\n    {\n        if ( c=='a' || c=='e' || c=='i' || c=='o' || c=='u' || (c=='y'\
    \ && s.length()-1 == s.indexOf(c)))\n        {\n            vcnt++;\n        }\n\
    \    }\n    return vcnt;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_am28svo.d(20): Error: no property `length` for type `string`

    /tmp/tmp_am28svo.d(20): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_am28svo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    return filter!((a) => ((a\
    \ == 'a') || (a == 'e') || (a == 'i') || (a == 'o') || (a == 'u') || (a == 'y'))\
    \ )(s).length;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2vntoyv0.d(17): Error: template instance `filter!((a) => a == ''a''
    || a == ''e'' || a == ''i'' || a == ''o'' || a == ''u'' || a == ''y'')` template
    `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2vntoyv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(c;\
    \ s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || c == 'y')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjy94m48_.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpjy94m48_.__unittest_L27_C1() [0x427af1]

    ??:? void tmpjy94m48_.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    bool\
    \ isLastY = false;\n    foreach(c; s) {\n        if(tolower(c) == 'a' || tolower(c)\
    \ == 'e' || tolower(c) == 'i' || tolower(c) == 'o' || tolower(c) == 'u') {\n \
    \           if(tolower(c) == 'y') {\n                isLastY = true;\n       \
    \     }\n            count++;\n        } else {\n            isLastY = false;\n\
    \        }\n    }\n    return count + isLastY;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeix3mu1j.d(20): Error: undefined identifier `tolower`

    /tmp/tmpeix3mu1j.d(20): Error: undefined identifier `tolower`

    /tmp/tmpeix3mu1j.d(20): Error: undefined identifier `tolower`

    /tmp/tmpeix3mu1j.d(20): Error: undefined identifier `tolower`

    /tmp/tmpeix3mu1j.d(20): Error: undefined identifier `tolower`

    /tmp/tmpeix3mu1j.d(21): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeix3mu1j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    /*\n    For a given word,\
    \ call it s, there are four cases:\n    (1) s ends in the consonant y.\n    (2)\
    \ s ends in the vowel y.\n    (3) s does not end in y.\n    (4) s is the empty\
    \ string.\n    */\n    long n = s.length;\n    if (n == 0) return 0;\n    char\
    \ last = s[n-1];\n    if (last == 'y') {\n        /*\n        If the last character\
    \ of s is y, then there is one less vowel in s\n        than in the substring\
    \ formed by deleting the last character.\n        */\n        return vowels_count(s[0..n-2])\
    \ + (last in \"aeiou\");\n    } else {\n        /*\n        If the last character\
    \ of s is not y, then there is one more vowel in s\n        than in the substring\
    \ formed by deleting the last character.\n        */\n        return vowels_count(s[0..n-2])\
    \ + (last in \"aeiouy\");\n    }\n}\n/*\n    Exercise 4.14\nunittest\n{\n    alias\
    \ candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3s5j4zl_.d(41): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s5j4zl_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(c;\
    \ s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || c == 'y')\n        {\n            ++count;\n        }\n    }\n    return\
    \ count;\n}\n/*\nWrite a function non_vowels_count which takes a string representing\n\
    \    a word as input and returns the number of non-vowels in the string.\n   \
    \ Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel,\
    \ but only when it is at the end of the given word.\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4oo18idh.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4oo18idh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    //for\
    \ (int i = 0; i < s.length; i++) {\n    foreach(c; s) {\n        char upperC =\
    \ toupper(c);\n        if (upperC == 'A' || upperC == 'E' || upperC == 'I' ||\
    \ upperC == 'O' || upperC == 'U') {\n            count += 1;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n  \
    \  assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzkl5zqt5.d(20): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzkl5zqt5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long cnt = 0;\n    for (int\
    \ i = 0; i < s.length; i++)\n    {\n        if (s[i] == 'a' || s[i] == 'e' ||\
    \ s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n        {\n            cnt++;\n\
    \        }\n        else if (s[i] == 'y' && i == s.length - 1)\n        {\n  \
    \          cnt++;\n        }\n    }\n    return cnt;\n}\nunittest\n{\n    alias\
    \ candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp264iz38m.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmp264iz38m.__unittest_L31_C1() [0x427b9d]

    ??:? void tmp264iz38m.__modtest() [0x427c8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bca7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab3a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fccd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43017c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc59]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab11]

    ??:? runModuleUnitTests [0x42ba7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long length = s.length;\n\
    \    long result = 0;\n    for (int i = 0; i < length; i++)\n    {\n        char\
    \ c = tolower(s[i]);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n        {\n            result++;\n        }\n    }\n    if (s[length\
    \ - 1] == 'y')\n    {\n        result++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp608xbqb.d(21): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp608xbqb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    for\
    \ (size_t i = 0; i < s.length; i++)\n    {\n        auto c = toLower(s[i]);\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n     \
    \   {\n            count++;\n        }\n    }\n    if (toLower(s[s.length - 1])\
    \ == 'y')\n    {\n        count++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_cbi3z05.d(20): Error: undefined identifier `toLower`

    /tmp/tmp_cbi3z05.d(26): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_cbi3z05.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long vowel_count = 0;\n\
    \    auto last = s.length - 1;\n    if (s[last] == 'y')\n    {\n        vowel_count++;\n\
    \    }\n    foreach (i, char c; s)\n    {\n        if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')\n        {\n            vowel_count++;\n \
    \       }\n    }\n    return vowel_count;\n}\n/*\nWrite a function factorial which\
    \ takes a positive integer n and\n    returns n! (n factorial).\n    Example:\n\
    \    >>> factorial(5)\n    120L\n    >>> factorial(0)\n    1L\n*/\nlong factorial(long\
    \ n)\n{\n    long fac = 1;\n    if (n == 0)\n    {\n        return 1;\n    }\n\
    \    foreach (i; 0 .. n)\n    {\n        fac *= i + 1;\n    }\n    return fac;\n\
    }\n/*\nWrite a function find_min_max which takes an array of integers and\n  \
    \  returns a tuple of two values (min, max) such that min is the smallest\n  \
    \  and max is the largest of the array elements. The array should not be\n   \
    \ modified by the function.\n    Example:\n    >>> find_min_max([1, 2, 4, 3])\n\
    \    (1L, 4L)\n    >>> find_min_max([])\n    ()\n*/\ntuple!(long, long) find_min_max(const(long[])\
    \ arr)\n{\n    if (arr.length == 0)\n    {\n        return tuple();\n    }\n \
    \   long min = arr[0];\n    long max = arr[0];\n    foreach (i, ref e; arr)\n\
    \    {\n        if (e < min)\n        {\n            min = e;\n        }\n   \
    \     if (e > max)\n        {\n            max = e;\n        }\n    }\n    return\
    \ tuple(min, max);\n}\n/*\nWrite a function reverse which takes an array of integers\
    \ as input and\n    returns a reversed array. The original array should not be\
    \ modified by\n\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0sn27yya.d(86): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0sn27yya.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    // your code goes here\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph471ip8c.d(15): Error: function `tmph471ip8c.vowels_count` has
    no `return` statement, but is expected to return a value of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph471ip8c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long vowels = 0;\n    foreach(char\
    \ c; s)\n    {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n            vowels++;\n    }\n    return vowels;\n}\nunittest\n{\n\
    \    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsmv8gx88.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e55]

    ??:? void tmpsmv8gx88.__unittest_L25_C1() [0x427ae9]

    ??:? void tmpsmv8gx88.__modtest() [0x427bd8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430050]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]

    ??:? runModuleUnitTests [0x42b951]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long counter = 0;\n    long\
    \ last_index = length(s) - 1;\n    foreach(ch; s)\n    {\n        if(ch == 'a'\
    \ || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n        {\n          \
    \  counter++;\n        }\n        else if(ch == 'y' && (last_index == -1 || s[last_index]\
    \ == ch))\n        {\n            counter++;\n        }\n        last_index--;\n\
    \    }\n    return counter;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp06s8rqap.d(18): Error: undefined identifier `length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp06s8rqap.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    /* magic goes here */\n\
    \    int count = 0;\n    for (int i = 0; i < s.length; i++)\n    {\n        if\
    \ (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n\
    \        {\n            count++;\n        }\n        else if (s[i] == 'y' && i\
    \ == s.length - 1)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz3qt1bzx.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ef5]

    ??:? void tmpz3qt1bzx.__unittest_L32_C1() [0x427b89]

    ??:? void tmpz3qt1bzx.__modtest() [0x427c78]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc8f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab22]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcb5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430164]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf9]

    ??:? runModuleUnitTests [0x42ba65]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164004
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    // magic goes here \n  \
    \  \n    long cnt = 0;\n    foreach(c; s)\n    {\n        switch(c)\n        {\n\
    \            case 'a':\n            case 'e':\n            case 'i':\n       \
    \     case 'o':\n            case 'u':\n            case 'y':\n              \
    \  cnt++;\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    return cnt;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk6z3rql0.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e55]

    ??:? void tmpk6z3rql0.__unittest_L38_C1() [0x427ae9]

    ??:? void tmpk6z3rql0.__modtest() [0x427bd8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430050]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]

    ??:? runModuleUnitTests [0x42b951]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164004
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    //write your code here\n\
    \    long vowels = 0;\n    bool y_vowel = false;\n    foreach(char c; s) {\n \
    \       if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        ++vowels;\n        }\n        if (c == 'y') {\n            y_vowel =\
    \ true;\n        }\n    }\n    if (y_vowel) {\n        return vowels + 1;\n  \
    \  }\n    return vowels;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfy_tip_w.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmpfy_tip_w.__unittest_L33_C1() [0x427b0d]

    ??:? void tmpfy_tip_w.__modtest() [0x427bfc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]

    ??:? runModuleUnitTests [0x42b979]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164004
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{ \n    //TODO: Implement this\
    \ function\n    long result = 0;\n    long len = s.length;\n    for(long i = 0;\
    \ i < len; i++)\n    {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' ||\
    \ s[i] == 'o' || s[i] == 'u')\n        {\n            result++;\n        }\n \
    \       else if(i == len - 1 && s[i] == 'y')\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp0p8aj8m.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmpp0p8aj8m.__unittest_L33_C1() [0x427b91]

    ??:? void tmpp0p8aj8m.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc97]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab2a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcbd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43016c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc49]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]

    ??:? runModuleUnitTests [0x42ba6d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164004
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count=0;\n    foreach(char\
    \ c; s)\n    {\n        if(c=='a' || c=='e' || c=='i' || c=='o' || c=='u' || c=='y')\n\
    \            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf0wzep6a.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpf0wzep6a.__unittest_L25_C1() [0x427af1]

    ??:? void tmpf0wzep6a.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164004
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n\timmutable vowels = \"aeiouy\"\
    ;\n\treturn s.filter!(a => a.tolower ~ vowels).length;\n}\nunittest\n{\n    alias\
    \ candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnx6u5vn7.d(18): Error: no property `filter` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnx6u5vn7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long numVowels = 0;\n  \
    \  foreach(char c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' || c == 'y')\n        {\n            numVowels++;\n     \
    \   }\n    }\n    return numVowels;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6hgi4nn8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmp6hgi4nn8.__unittest_L27_C1() [0x427af1]

    ??:? void tmp6hgi4nn8.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164004
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    static auto set = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"];\n    size_t len = s.length;\n    size_t\
    \ cnt = 0;\n    foreach(i, c; s) {\n        if (lower(c) in set) {\n         \
    \   cnt++;\n        }\n    }\n    return cnt;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6iurro22.d(21): Error: undefined identifier `lower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6iurro22.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    return count((r) => member(r,\
    \ ['a', 'e', 'i', 'o', 'u', 'y']), s);\n}\nunittest\n{\n    alias candidate =\
    \ vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn96m4awr.d(17): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn96m4awr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    //foreach\
    \ (e; s) {\n    for (size_t i = 0; i < s.length; i++) {\n        char e = s[i];\n\
    \        if (e == 'a' || e == 'e' || e == 'i' || e == 'o' || e == 'u') {\n   \
    \         count++;\n        }\n        if (e == 'y' && i != s.length - 1) {\n\
    \            continue;\n        }\n        if (e == 'y' && i == s.length - 1)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyk0xymyk.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e8d]

    ??:? void tmpyk0xymyk.__unittest_L33_C1() [0x427b1d]

    ??:? void tmpyk0xymyk.__modtest() [0x427c0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc27]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc4d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300fc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa91]

    ??:? runModuleUnitTests [0x42b9fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428350]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164004
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long sum = 0;\n    foreach(immutable\
    \ c; s) \n    {\n        if(tolower(c) == 'a' || tolower(c) == 'e' || tolower(c)\
    \ == 'i' || tolower(c) == 'o' || tolower(c) == 'u')\n        {\n            sum++;\n\
    \        }\n    }\n    return sum;\n}\n/*\nWrite a function fibonacci which takes\
    \ one argument n and generates\n    the first n Fibonacci numbers.\n    Fibonacci\
    \ numbers are numbers in the sequence 0, 1, 1, 2, 3, 5, 8, 13, 21, ...\n    where\
    \ each number after the first two is the sum of the previous two.\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4qanh4g6.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4qanh4g6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    int\
    \ last = s.length - 1;\n    foreach(c; s)\n    {\n        if(tolower(c) == 'a'\
    \ || tolower(c) == 'e' || tolower(c) == 'i' || tolower(c) == 'o' || tolower(c)\
    \ == 'u')\n        {\n            if(tolower(c) == 'y' && s.indexOf(c) != last)\n\
    \            {\n                continue;\n            }\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2wccfv1j.d(18): Error: cannot implicitly convert expression `s.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmp2wccfv1j.d(21): Error: undefined identifier `tolower`

    /tmp/tmp2wccfv1j.d(21): Error: undefined identifier `tolower`

    /tmp/tmp2wccfv1j.d(21): Error: undefined identifier `tolower`

    /tmp/tmp2wccfv1j.d(21): Error: undefined identifier `tolower`

    /tmp/tmp2wccfv1j.d(21): Error: undefined identifier `tolower`

    /tmp/tmp2wccfv1j.d(23): Error: undefined identifier `tolower`

    /tmp/tmp2wccfv1j.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2wccfv1j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(c;\
    \ s)\n    {\n        if((c == 'a') || (c == 'e') || (c == 'i') || (c == 'o') ||\
    \ (c == 'u') ||\n           (c == 'A') || (c == 'E') || (c == 'I') || (c == 'O')\
    \ || (c == 'U'))\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsfzmz0bb.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmpsfzmz0bb.__unittest_L28_C1() [0x427b38]

    ??:? void tmpsfzmz0bb.__modtest() [0x427bfc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]

    ??:? runModuleUnitTests [0x42b979]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164004
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(inout\
    \ char c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' ||\n           (c == 'y' && s.length == count + 1))\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1pkp9cy.d(18): Error: variable `tmpa1pkp9cy.vowels_count.c` `inout`
    variables can only be declared inside `inout` functions

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1pkp9cy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164003
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    bool\
    \ end_y = (s[$-1] == 'y');\n    foreach(ch; s) {\n        if (ch == 'a' || ch\
    \ == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || (ch == 'y' && end_y))\n   \
    \         count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps6lk3o9b.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e8d]

    ??:? void tmps6lk3o9b.__unittest_L25_C1() [0x427b21]

    ??:? void tmps6lk3o9b.__modtest() [0x427c10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc27]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc4d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300fc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa91]

    ??:? runModuleUnitTests [0x42b9fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428350]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4282d7]

    ??:? _d_run_main [0x428242]

    ??:? main [0x427c23]

    ??:? __libc_start_main [0xa8d2e554]

    1/1 unittests FAILED

    '
  stdout: ''
  timestamp: 1660164004
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(ch;\
    \ s)\n    {\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch\
    \ == 'u' ||\n            ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch\
    \ == 'U')\n            count++;\n    }\n    if (count > 0 && s[$-1] == 'y') count++;\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n  \
    \  assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaiv0bvsk.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427eb5]

    ??:? void tmpaiv0bvsk.__unittest_L27_C1() [0x427bce]

    ??:? void tmpaiv0bvsk.__modtest() [0x427c38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc4f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aae2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430124]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aab9]

    ??:? runModuleUnitTests [0x42ba25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428378]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164004
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long num = 0;\n    foreach(c;\
    \ s) \n    {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || c == 'y') \n        {\n            num++;\n        }\n    }\n    return\
    \ num;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3smfqk5w.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmp3smfqk5w.__unittest_L27_C1() [0x427af1]

    ??:? void tmp3smfqk5w.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164004
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{ \n    long vowels = 0;\n    foreach(char\
    \ c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' ||\n           c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \        {\n            vowels++;\n        }\n    }\n    return vowels;\n}\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp33i7wuei.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmp33i7wuei.__unittest_L28_C1() [0x427b38]

    ??:? void tmp33i7wuei.__modtest() [0x427bfc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]

    ??:? runModuleUnitTests [0x42b979]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164004
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    for\
    \ (int i = 0; i < s.length; i++) \n    {\n        auto c = toLower(s[i]);\n  \
    \      if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n      \
    \  {\n            count++;\n        }\n    }\n    if (toLower(s[$ - 1]) == 'y')\
    \ \n    {\n        count++;\n    }\n    return count;\n}\n// ________________________________________________________________________________________\n\
    /*\nWrite a function multi_divide which takes an integer as input and returns\
    \ an integer.\n    The output integer is the result of multiplying all numbers\
    \ in the range of 0 to the\n    input integer (both inclusive) and then dividing\
    \ it by all numbers in the range of 1\n    to the input integer (both inclusive).\
    \ Return 0 if the input is invalid.\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfwnvhknm.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfwnvhknm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164004
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long vowels = 0;\n    foreach(c;\
    \ s)\n    {\n        c = tolower(c);\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u')\n            vowels++;\n    }\n    if(s[$-1] ==\
    \ 'y')\n        vowels++;\n    return vowels;\n}\nunittest\n{\n    alias candidate\
    \ = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"\
    Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"\
    bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"\
    bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1qu3p_u.d(20): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1qu3p_u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164004
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long ans = 0;\n    for (;s\
    \ != \"\";s = s[1..$])\n    {\n        switch (s[0])\n        {\n            case\
    \ 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n\
    \            case 'u':\n            case 'y':\n                ++ans;\n      \
    \          break;\n            default:\n                break;\n        }\n \
    \   }\n    return ans;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\n\
    \    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n\
    \    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n\
    \    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n\
    \    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9gw2vdku.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fa5]

    ??:? void tmp9gw2vdku.__unittest_L36_C1() [0x427b99]

    ??:? void tmp9gw2vdku.__modtest() [0x427d24]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bcc3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42abd2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fce9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430198]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aba9]

    ??:? runModuleUnitTests [0x42ba99]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428468]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164004
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long nvowels=0;\n    foreach(char\
    \ ch; s) \n    {\n        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o'\
    \ || ch == 'u' || ch == 'y')\n            nvowels++;\n    }\n    return nvowels;\n\
    }\nunittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
    abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
    key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"\
    keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"\
    ACEDY\") == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp16digfgl.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmp16digfgl.__unittest_L25_C1() [0x427af1]

    ??:? void tmp16digfgl.__modtest() [0x427be0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164004
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long result = 0;\n    bool\
    \ at_end = false;\n    foreach(c; s)\n    {\n        switch(c)\n        {\n  \
    \          case 'a':\n            case 'e':\n            case 'i':\n         \
    \   case 'o':\n            case 'u':\n                result += 1;\n         \
    \       break;\n            case 'y':\n                if(at_end)\n          \
    \          result += 1;\n                break;\n            default:\n      \
    \          break;\n        }\n        at_end = c == 'y';\n    }\n    return result;\n\
    }\n/*\nWrite a function vowels_from_end which takes a string representing\n  \
    \  a word as input and returns the number of vowels in the string\n    at the\
    \ end of the word. Vowels in this case are 'a', 'e', 'i', 'o', 'u'.\nunittest\n\
    {\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n\
    \    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n\
    \    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n\
    \    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz785woit.d(41): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz785woit.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164004
- exit_code: 1
  program: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
    \ representing\n    a word as input and returns the number of vowels in the string.\n\
    \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  \
    \  vowel, but only when it is at the end of the given word.\n\n    Example:\n\
    \    >>> vowels_count(\"abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n  \
    \  3L\n    \n*/\nlong vowels_count(string s) \n{\n    long count = 0;\n    foreach(s;i)\n\
    \    {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u' || (s[i] == 'y' && i == s.length()-1))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = vowels_count;\n\
    \n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") ==\
    \ 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") ==\
    \ 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") ==\
    \ 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo5dsbviu.d(18): Error: undefined identifier `i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo5dsbviu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164004
