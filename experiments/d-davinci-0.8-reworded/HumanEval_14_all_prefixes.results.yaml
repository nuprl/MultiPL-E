language: d
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.algorithm : map;\n    import std.range      : putBack;\n\
    \    import std.string     : chunk;\n    import std.conv       : to;\n    return\
    \ string.chunk(1).putBack(string).map!(a => a.to!string);\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg098t3ej.d(12): Error: module `std.range` import `putBack` not
    found, did you mean alias `std.array.popBack`?

    /tmp/tmpg098t3ej.d(13): Error: module `std.string` import `chunk` not found

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg098t3ej.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (i; 0 .. string.length)\n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqjf2uzx6.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqjf2uzx6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164585
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    assert(!string.empty);\n    int len = string.length;\n    return iota(1,\
    \ len).map!(i => string[0..i])();\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23tr8_wa.d(11): Error: no property `empty` for type `string`

    /tmp/tmp23tr8_wa.d(12): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmp23tr8_wa.d(13): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23tr8_wa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164585
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    return map!(take(string))(iota(string.length + 1)).array;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4lrumb7k.d(11): Error: template instance `map!(take(string))` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4lrumb7k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164585
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto retval = [];\n    for (size_t i = 0; i < string.length; i++)\n\
    \    {\n        retval ~= string[0..i];\n    }\n    return retval;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmple2t2p9h.d(14): Error: cannot append type `string` to type `void[]`

    /tmp/tmple2t2p9h.d(16): Error: cannot implicitly convert expression `retval` of
    type `void[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmple2t2p9h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164585
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    int length = string.length;\n    foreach (string\
    \ substr; 0 .. length)\n    {\n        result ~= substr;\n    }\n    return result;\n\
    }\n/*\nReturn all suffixes of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"bc\", \"c\", \"\"]\n*/\nstring[] all_suffixes(string string) \n{\n   \
    \ return all_prefixes(string.dup.reverse);\n}\n/*\nReturn the longest common prefix\
    \ of the two input strings\n    >>> lcp(\"abcdef\", \"abc\")\n    \"abc\"\n  \
    \  >>> lcp(\"abcdef\", \"abd\")\n    \"ab\"\n    >>> lcp(\"abcdef\", \"def\")\n\
    \    \"\"\n*/\nstring lcp(string string1, string string2) \n{\n    foreach (string1_prefix;\
    \ all_prefixes(string1))\n    {\n        foreach (string2_prefix; all_prefixes(string2))\n\
    \        {\n            if (string1_prefix == string2_prefix)\n            {\n\
    \                return string1_prefix;\n            }\n        }\n    }\n   \
    \ return \"\";\n}\n/*\nReturn the longest common suffix of the two input strings\n\
    \    >>> lcs(\"abcdef\", \"def\")\n    \"def\"\n    >>> lcs(\"abcdef\", \"abc\"\
    )\n    \"\"\n    >>> lcs(\"abcdef\", \"cde\")\n    \"de\"\n*/\nstring lcs(string\
    \ string1, string string2) \n{\n    return lcp(string1.dup.reverse, string2.dup.reverse);\n\
    }\n/*\nReturn the longest common subsequence of the two input strings.\n    >>>\
    \ lcs(\"abcdef\", \"abc\")\n    \"abc\"\n    >>> lcs(\"abcdef\", \"acf\")\n  \
    \  \"acf\"\n    >>> lcs(\"132535365\", \"123456789\")\n    \"12356\"\n*/\nstring\
    \ lcs(string string1, string string2) \n{\n    string[] lcs_array;\n    foreach\
    \ (string1_prefix; all_prefixes(string1))\n    {\n        foreach (string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4hkmb3p_.d(79): Error: no identifier for declarator `string`

    /tmp/tmp4hkmb3p_.d(79): Error: found `unittest` when expecting `;`

    /tmp/tmp4hkmb3p_.d(87): Error: found `void` when expecting `)`

    /tmp/tmp4hkmb3p_.d(87): Error: found `{` when expecting `;` following statement

    /tmp/tmp4hkmb3p_.d(87): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4hkmb3p_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164585
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefixes;\n    foreach (int i; 0 .. string.length) \n    {\n\
    \        prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpseyjbu5e.d(11): Error: `string` is used as a type

    /tmp/tmpseyjbu5e.d(12): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpseyjbu5e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    static struct Prefix\n    {\n        size_t length;\n        string\
    \ prefix;\n    }\n    string[] ret = [];\n    foreach(auto cur; iota(0, string.length\
    \ + 1)) \n    {\n        ret ~= Prefix(length=cur, prefix=string[0..cur]).prefix;\n\
    \    }\n    return ret;\n}\n/*\n  Find the longest common prefix of n strings\n\
    \    >>> longest_common_prefix(\"abc\", \"abcd\", \"abdc\")\n    \"ab\"\n*/\n\
    string longest_common_prefix(R...)(R strings)\n{\n    if(strings.length == 0)\
    \ return \"\";\n    string[] all_prefixes_array = all_prefixes(strings[0]);\n\
    \    string[] prefixes = all_prefixes_array[0..$];\n    foreach(auto p; all_prefixes_array)\n\
    \    {\n        foreach(auto s; strings[1..$])\n        {\n            if(!p.startsWith(s[0..p.length]))\n\
    \            {\n                prefixes[p.length] = \"\";\n            }\n  \
    \      }\n    }\n    return prefixes.join(\"\\n\").retro.retro.retro.retro.retro.split(\"\
    \\n\").retro.find!\"a\"!.retro;\n}\n//unittest\n{\n    import std.range;\n   \
    \ import std.algorithm;\n    string[] test1 = [\"abc\", \"abcd\", \"abdc\"];\n\
    \    string[] test2 = [\"abc\", \"abcd\", \"abdce\"];\n    string[] test3 = [\"\
    abc\", \"abcd\", \"abdce\", \"abde\"];\n    assert(test1.sort().equal([\"abc\"\
    , \"abcd\", \"abdc\"]));\n    assert(test2.sort().equal([\"abc\", \"abcd\", \"\
    abdce\"]));\n    assert(test3.sort().equal([\"abc\", \"abcd\", \"abdce\", \"abde\"\
    ]));\n    assert(longest_common_prefix(test1) == \"ab\");\n    assert(longest_common_prefix(test2)\
    \ == \"abc\");\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbev2gv78.d(17): Error: basic type expected, not `auto`

    /tmp/tmpbev2gv78.d(17): Error: no identifier for declarator `_error_`

    /tmp/tmpbev2gv78.d(17): Error: found `auto` when expecting `;`

    /tmp/tmpbev2gv78.d(17): Error: found `;` when expecting `)`

    /tmp/tmpbev2gv78.d(17): Error: found `)` when expecting `;` following statement

    /tmp/tmpbev2gv78.d(33): Error: basic type expected, not `auto`

    /tmp/tmpbev2gv78.d(33): Error: no identifier for declarator `_error_`

    /tmp/tmpbev2gv78.d(33): Error: found `auto` when expecting `;`

    /tmp/tmpbev2gv78.d(33): Error: found `;` when expecting `)`

    /tmp/tmpbev2gv78.d(33): Error: found `)` when expecting `;` following statement

    /tmp/tmpbev2gv78.d(35): Error: basic type expected, not `auto`

    /tmp/tmpbev2gv78.d(35): Error: no identifier for declarator `_error_`

    /tmp/tmpbev2gv78.d(35): Error: found `auto` when expecting `;`

    /tmp/tmpbev2gv78.d(35): Error: found `;` when expecting `)`

    /tmp/tmpbev2gv78.d(35): Error: found `)` when expecting `;` following statement

    /tmp/tmpbev2gv78'
  stdout: ''
  timestamp: 1660164585
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n  if (string.length == 0)\n    return [];\n  string[] res = new string[string.length];\n\
    \  foreach (i, c; string[0 .. $])\n    res[i] = string[0 .. i];\n  return res;\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp13qwez3l.d(13): Error: `string` is used as a type

    /tmp/tmp13qwez3l.d(13): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13qwez3l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164585
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (size_t i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n * \n\
    \ * Returns a reversed copy of the input string.\n * \n * For example:\n *   \
    \  >>> reverse(\"abc\")\n *     \"cba\"\n *     >>> reverse(\"abc defg\")\n *\
    \     \"gfed cba\"\n *     \n */\nstring reverse(string input) \n{\n    string\
    \ result;\n    foreach (i; 0 .. input.length) \n    {\n        result ~= input[$\
    \ - i];\n    }\n    return result;\n}\n/*\n * \n * Returns a lower-case copy of\
    \ the input string.\n * \n * For example:\n *     >>> lower(\"abC\")\n *     \"\
    abc\"\n *     >>> lower(\"aBc dEfG\")\n *     \"abc defg\"\n *     \n */\nstring\
    \ lower(string input) \n{\n    string result;\n    foreach (c; input) \n    {\n\
    \        result ~= toLower(c);\n    }\n    return result;\n}\n/*\n * \n * Returns\
    \ an upper-case copy of the input string.\n * \n * For example:\n *     >>> upper(\"\
    abC\")\n *     \"ABC\"\n *     >>> upper(\"aBc dEfG\")\n *     \"ABC DEFG\"\n\
    \ *     \n */\nstring upper(string input) \n{\n    string result;\n    foreach\
    \ (c; input) \n    {\n        result ~= toUpper(c);\n    }\n    return result;\n\
    }\n/*\n * \n * Returns a strip of the input string.\n * \n * For example:\n *\
    \     >>> strip(\"  abc  \")\n *     \"abc\"\n *     >>> strip(\"aBc dEfG  \"\
    )\n *     \"aBc dEfG\"\n *     >>> strip(\"  aBc dEfG\")\n *     \"aBc dEfG\"\n\
    \ *     >>> strip(\"  aBc dEfG  \")\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsyf8rjom.d(78): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsyf8rjom.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164585
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] all_prefixes = new string[$];\n    int i = 0;\n    foreach\
    \ (prefix; all(string))\n    {\n        all_prefixes[i] = prefix;\n        i++;\n\
    \    }\n    return all_prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq34xuixv.d(11): Error: `string` is used as a type

    /tmp/tmpq34xuixv.d(11): Error: `string` is used as a type

    /tmp/tmpq34xuixv.d(13): Error: undefined identifier `all`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq34xuixv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    static assert(is(typeof({string.init}) == typeof(char[])));\n    auto\
    \ ret = new string[];\n    foreach(i; 0 .. string.length) \n    {\n        ret\
    \ ~= string[0 .. i];\n    }\n    return ret;\n}\n// Helper to shift a tuple right\n\
    Tuple!(T...) rotateRight(T)(Tuple!(T...) t) \n{\n    static assert(t.length >\
    \ 0);\n    return t[t.length - 1] ~ t[0 .. $ - 1];\n}\n/*\n    >>> sum([[1, 2],\
    \ [3, 4]], 0)\n    [4, 6]\n    >>> sum([[1, 2], [3, 4]], 1)\n    [5, 7]\n*/\n\
    Tuple!(T...) sum(T)(Tuple!(Tuple!(T...)) tuples, uint dim) \n{\n    return tuples.front.length\
    \ == 1\n        ? reduce!((a, b) => a + b)(tuples)\n        : sum(map!(t => t[dim\
    \ .. $]).array(tuples), dim - 1)\n        ~ sum(map!(t => t[0 .. dim]).array(tuples),\
    \ dim - 1);\n}\n// For example, if you have the tuples [0,1] and [1,2] then you\
    \ will get the\n// tuples [0,1] and [0,2] when you reduce by columns.\nTuple!(Tuple!(T...)...)\
    \ reduceByCol(T)(Tuple!(Tuple!(T...)) tuples) \n{\n    return tuples.tupleof[0\
    \ .. $ - 1].reduce!((a, b) => a ~ b.map!(t => t));\n}\n/*\n    >>> shift([[1,\
    \ 2], [3, 4]], 0)\n    [[1, 2], [0, 0]]\n    >>> shift([[1, 2], [3, 4]], 1)\n\
    \    [[1, 2], [0, 0]]\n    >>> shift([[1, 2], [3, 4]], 2)\n    [[0, 0], [1\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyazy1a8a.d(11): Error: found `}` when expecting `;` following statement

    /tmp/tmpyazy1a8a.d(11): Error: found `)` instead of statement

    /tmp/tmpyazy1a8a.d(20): Error: found `Tuple` when expecting `)`

    /tmp/tmpyazy1a8a.d(20): Error: found `!` when expecting `)`

    /tmp/tmpyazy1a8a.d(20): Error: found `...` when expecting `,`

    /tmp/tmpyazy1a8a.d(20): Error: found `rotateRight` when expecting `)`

    /tmp/tmpyazy1a8a.d(20): Error: found `(` when expecting `;`

    /tmp/tmpyazy1a8a.d(20): Error: found `)` when expecting `;` following statement

    /tmp/tmpyazy1a8a.d(20): Error: found `...` when expecting `)` following template
    argument list

    /tmp/tmpyazy1a8a.d(20): Error: missing `{ ... }` for function literal

    /tmp/tmpyazy1a8a.d(20): Error: found `t` when expecting `;` following statement

    /tmp/tmpyazy1a8a.d(20): Error: found `)` instead of statement

    /tmp/tmpyazy1a8a.d(31): Error: found `...` when expecting `)` following template
    argument list

    /tmp/tmpyazy1a8a.d(31): Error: no identifier for declarator `Tuple!T`

    /tmp/tmpyazy1a'
  stdout: ''
  timestamp: 1660164585
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    immutable size = string.length;\n    return iota(size).map!(i => string[0..i]);\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphm3nognu.d(12): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphm3nognu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefixes;\n    foreach (index, ch; string)\n    {\n      \
    \  prefixes ~= string[0..index];\n    }\n    return prefixes;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps79o3rml.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps79o3rml.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefs;\n    foreach(size_t i; 0 .. string.length)\n    {\n\
    \        prefs ~= string[0 .. i];\n    }\n    return prefs;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgj5hxy86.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgj5hxy86.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\tauto length = string.length;\n\tstring[] result;\n\tresult.length = length;\n\
    \tfor (size_t i = 0; i < length; i++)\n\t{\n\t\tresult[i] = string[0..i];\n\t\
    }\n\treturn result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkl9w0yun.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkl9w0yun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\tsize_t n = string.length;\n\tstring[] result;\n\tforeach( i ; 0 .. n\
    \ )\n\t{\n\t\tresult ~= string[0 .. i];\n\t}\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp84pbion8.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp84pbion8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    for (size_t i = 0; i < string.length; i++) \n\
    \    {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc77fjfr9.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc77fjfr9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    int n = string.length;\n    string[] result = new string[];\n    foreach\
    \ (i; 0 .. n) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n\
    }\n/*\n Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    int n = string.length;\n    string[] result = new string[];\n\
    \    foreach (i; 0 .. n) \n    {\n        result ~= string[i .. $];\n    }\n \
    \   return result;\n}\n/*\nReturn array of all substrings from shortest to longest\
    \ of the input string\n   >>> all_substrings(\"abc\")\n   [\"a\", \"ab\", \"abc\"\
    , \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    int\
    \ n = string.length;\n    string[] result = new string[];\n    foreach (i; 0 ..\
    \ n) \n    {\n        foreach (j; i .. n) \n        {\n            result ~= string[i\
    \ .. j];\n        }\n    }\n    return result;\n}\n/*\nGiven a string and a pattern\
    \ (list of substrings), return true if any of the strings in the pattern are a\
    \ substring of the string\n    >>> substring_match(\"abcdef\", [\"bc\"])\n   \
    \ true\n*/\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbw7wpv2_.d(11): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmpbw7wpv2_.d(12): Error: `string` is used as a type

    /tmp/tmpbw7wpv2_.d(12): Error: `string` is used as a type

    /tmp/tmpbw7wpv2_.d(26): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmpbw7wpv2_.d(27): Error: `string` is used as a type

    /tmp/tmpbw7wpv2_.d(27): Error: `string` is used as a type

    /tmp/tmpbw7wpv2_.d(41): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmpbw7wpv2_.d(42): Error: `string` is used as a type

    /tmp/tmpbw7wpv2_.d(42): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbw7wpv2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] res;\n    while(string.length > 0) \n    {\n        res ~=\
    \ string;\n        string = string[0..$-1];\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpunrm7b16.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpunrm7b16.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.array;\n    import std.conv;\n    import std.range;\n  \
    \  import std.math;\n    import std.typecons;\n    int N = string.length;\n  \
    \  string[] result;\n    foreach(i; 0..N) {\n        result ~= string[0..i];\n\
    \    }\n    return result;\n}\n/*\n    Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"\
    bc\", \"abc\"]\n*/\nstring[] all_suffixes(string string) \n{\n    import std.array;\n\
    \    import std.conv;\n    import std.range;\n    import std.math;\n    import\
    \ std.typecons;\n    int N = string.length;\n    string[] result;\n    foreach(i;\
    \ 0..N) {\n        result ~= string[i..$];\n    }\n    return result;\n}\n/*\n\
    \    Return the longest common prefix of two strings.\n    >>> lcp(\"abcdef\"\
    , \"abc\")\n    \"abc\"\n*/\nstring lcp(string string_1, string string_2) \n{\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.math;\n    import std.typecons;\n    int n1 = string_1.length;\n    int\
    \ n2 = string_2.length;\n    int n = min(n1, n2);\n    foreach(i; 0..n) {\n  \
    \      if(string_1[i] != string_2[i]) {\n            return string_1[0..i];\n\
    \        }\n    }\n    return string_1[0..n];\n}\n/*\n    Return the longest common\
    \ suffix of two strings.\n    >>> lcs(\"abcdef\", \"def\")\n    \"def\"\n*/\n\
    string lcs(string string_1, string string_2) \n{\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.math;\n    import std.typecons;\n\
    \    int n1 = string_1.length;\n    int n\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptbf99tve.d(78): Error: semicolon expected, not `unittest`

    /tmp/tmptbf99tve.d(78): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptbf99tve.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164585
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.array;\n    return iota(string.length+1).map!(a => string[0..a]);\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpunxmntpv.d(12): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpunxmntpv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\tstring[] ret;\n\tstring prefix;\n\tforeach(prefix; 0 .. string.length)\n\
    \t{\n\t\tret ~= string[0 .. prefix];\n\t}\n\treturn ret;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_b9kewcc.d(11): Error: `string` is used as a type

    /tmp/tmp_b9kewcc.d(12): Error: `string` is used as a type

    /tmp/tmp_b9kewcc.d(13): Error: variable `prefix` is shadowing variable `tmp_b9kewcc.all_prefixes.prefix`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_b9kewcc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto results = string[];\n    foreach (index, char; string)\n    {\n\
    \        results ~= string[0..index];\n    }\n    return results;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw5cuhm67.d(12): Error: no identifier for declarator `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw5cuhm67.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164585
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    int len = string.length;\n    string[] result = new string[len];\n\
    \    foreach (index, ch; string) \n    {\n        result[index] = string[0..index];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2n86usj6.d(11): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmp2n86usj6.d(12): Error: `string` is used as a type

    /tmp/tmp2n86usj6.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2n86usj6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto prefixes = new string[](cast(size_t)string.length);\n    for (size_t\
    \ i = 0; i < string.length; i++) \n    {\n        prefixes[i] = string[0..i+1];\n\
    \    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvrrbof8p.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvrrbof8p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    return [0 .. string.length].map!((i) => string[0 .. i])();\n}\n \n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3_o0e06t.d(11): Error: found `..` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3_o0e06t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    int current = 0;\n    string[] result;\n    for (int i = 0; i < string.length;\
    \ i++)\n    {\n        result[current] = string[0..i];\n        current++;\n \
    \   }\n    return result;\n}\n \n/*\n Return a new string that is the longest\
    \ common prefix of all elements of the array\n  >>> longest_common_prefix([\"\
    a\", \"ab\", \"abc\"])\n  \"a\"\n  >>> longest_common_prefix([\"apple\", \"are\"\
    , \"ace\"])\n  \"a\"\n  >>> longest_common_prefix([\"apple\", \"are\", \"ace\"\
    , \"act\"])\n  \"\"\n*/\nstring longest_common_prefix(string[] array)\n{\n   \
    \ int minLength = array[0].length;\n    int minIndex = 0;\n    foreach (int index,\
    \ string word; array)\n    {\n        if (word.length < minLength)\n        {\n\
    \            minLength = word.length;\n            minIndex = index;\n       \
    \ }\n    }\n    string allCommon = array[minIndex];\n    foreach (string word;\
    \ array)\n    {\n        while (word.find(allCommon) != 0)\n        {\n      \
    \      allCommon = allCommon[0..$-1];\n        }\n    }\n    return allCommon;\n\
    }\n \n/*\n Return a new string that is a concatenation of all the strings in the\
    \ array\n  >>> concat_all([\"A\", \"B\", \"C\"])\n  \"ABC\"\n  >>> concat_all([\"\
    A\", \"\"])\n  \"A\"\n  >>> concat_all([])\n  \"\"\n*/\nstring concat_all(string[]\
    \ strings)\n{\n    string result = \"\";\n    foreach (string word; strings)\n\
    \    {\n        result ~= word;\n    }\n    return result;\n}\n \n/*\n Return\
    \ a new string in which the words of the input string are reversed\n  >>> reverse_words(\"\
    I am testing\")\n  \"testing am I\"\n  >>> reverse_words(\"\")\n  \"\"\n*/\nstring\
    \ reverse_words(string string)\n{\n    string[] array = string.split(\"\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjxlnbzjx.d(86): Error: Implicit string concatenation is deprecated,
    use "\x0aunittest\x0a{\x0a    alias candidate = all_prefixes;\x0a\x0a    assert(candidate("
    ~ ") == []);\x0a    assert(candidate(" instead

    /tmp/tmpjxlnbzjx.d(87): Error: found `asdfgh` when expecting `,`

    /tmp/tmpjxlnbzjx.d(87): Error: found `a` when expecting `,`

    /tmp/tmpjxlnbzjx.d(87): Error: found `as` when expecting `,`

    /tmp/tmpjxlnbzjx.d(87): Error: found `asd` when expecting `,`

    /tmp/tmpjxlnbzjx.d(87): Error: found `asdf` when expecting `,`

    /tmp/tmpjxlnbzjx.d(87): Error: found `asdfg` when expecting `,`

    /tmp/tmpjxlnbzjx.d(87): Error: found `asdfgh` when expecting `,`

    /tmp/tmpjxlnbzjx.d(88): Error: found `WWW` when expecting `,`

    /tmp/tmpjxlnbzjx.d(88): Error: found `W` when expecting `,`

    /tmp/tmpjxlnbzjx.d(88): Error: found `WW` when expecting `,`

    /tmp/tmpjxlnbzjx.d(88): Error: found `WWW` when expecting `,`

    /tmp/tmpjxlnbzjx.d(88): Error: unterminated string constant starting at /tmp/tmpjxlnbzjx.d(88)

    /tmp/tmpjxlnbzjx.d(90): Error'
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.algorithm : map;\n    import std.range : take;\n    return\
    \ string.take(string.length)\n                 .map!(x => string[0..x.length])\n\
    \                 .array;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxrkmdx89.d(14): Error: no property `length` for type `dchar`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(499):        instantiated
    from here: `MapResult!(__lambda2, Take!string)`

    /tmp/tmpxrkmdx89.d(14):        instantiated from here: `map!(Take!string)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxrkmdx89.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n  auto temp =[];\n  for (size_t i = 1; i <= string.length; i++)\n    temp\
    \ ~= string[0..i];\n  return temp;\n}\n/*\n Find the longest common prefix from\
    \ a string array\n    >>> longest_common_prefix([\"abc\", \"abcdef\"])\n    \"\
    abc\"\n*/\nstring longest_common_prefix(T)(T prefixes) \n  if (isInputRange!T\
    \ && is(ElementType!T : string))\n{\n  if (prefixes.empty)\n    return \"\";\n\
    \  auto it = prefixes.front;\n  if (it.length == 0)\n    return \"\";\n  string\
    \ r;\n  while (true) \n  {\n    auto l = r.length;\n    r = longest_common_prefix(all_prefixes(it));\n\
    \    if (r.length == l)\n      break;\n    if (!it.moveNext)\n      break;\n \
    \ }\n  return r;\n}\n/*\n Base class for a Trie which maps a string to a value\
    \ of type V.\n The Trie is a prefix tree of the string keys.  The tree is\n traversed\
    \ from the root to the leafs to find the value mapped to a\n given key.  A node\
    \ contains either a value or a mapping from a\n character to a child node.  If\
    \ a key is a prefix of another key,\n the shorter key is stored in the tree and\
    \ the longer key is not.\n For example, with the keys \"abc\", \"abd\", and \"\
    a\", the tree contains\n the nodes: root -> a -> ab -> abc -> abd.  The key \"\
    abde\" is not\n in the tree.\n \n It is not possible to store an empty string\
    \ in the Trie.\n*/\nabstract class Trie(V)\n{\n  V opIndex(string key) \n  {\n\
    \    return this.opIndex(key.byChunk);\n  }\n  abstract V opIndex(R)(R key) \n\
    \    if (isInputRange!R && is(ElementType!R : char));\n  abstract V opIndexAssign(string\
    \ key, V val);\n  abstract Trie remove(string key);\n  abstract size_\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6vlu2uc_.d(65): Error: no identifier for declarator `size_`

    /tmp/tmp6vlu2uc_.d(73): Error: `}` expected following members in `class` declaration
    at /tmp/tmp6vlu2uc_.d(54)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6vlu2uc_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    return iota(string.length).map!(i => string[0..i]);\n}\n/*\n Return\
    \ array of all suffixes from shortest to longest of the input string\n    >>>\
    \ all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    return iota(string.length).map!(i => string[i..$]);\n}\n/*\n\
    \ Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    return all_prefixes(string)\
    \ ~ all_suffixes(string);\n}\n/*\n Return array of repeated elements in the input\
    \ string\n    >>> repeated_elements(\"aabbb\")\n    [\"a\", \"b\"]\n*/\nstring[]\
    \ repeated_elements(string string) \n{\n    string[] repeated = string.dup;\n\
    \    foreach (letter; repeated) \n    {\n        if (string.count(letter) < 2)\n\
    \        {\n            repeated = repeated.filter!(x => x != letter);\n     \
    \   }\n    }\n    return repeated;\n}\n/*\n Check if two strings are anagrams\n\
    \    >>> are_anagrams(\"aab\", \"baa\")\n    true\n    >>> are_anagrams(\"aab\"\
    , \"baaa\")\n    false\n*/\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb98uk2yt.d(11): Error: undefined identifier `iota`

    /tmp/tmpb98uk2yt.d(21): Error: undefined identifier `iota`

    /tmp/tmpb98uk2yt.d(40): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb98uk2yt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    int string_length = string.length;\n    string[] result;\n    result.length\
    \ = string_length;\n    for (int index = 0; index < string_length; index++) \n\
    \    {\n        result[index] = string[0..index];\n    }\n    return result;\n\
    }\n \n/*\nReturn array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    int string_length = string.length;\n    string[] result;\n\
    \    result.length = string_length;\n    for (int index = 0; index < string_length;\
    \ index++) \n    {\n        result[index] = string[index..$];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79y7_xe8.d(11): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmp79y7_xe8.d(12): Error: `string` is used as a type

    /tmp/tmp79y7_xe8.d(28): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmp79y7_xe8.d(29): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79y7_xe8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\timport std.array;\n\tauto n = string.length;\n\tstring[] result;\n\t\
    reserve(result, n);\n\tforeach(i; 0 .. n) \n\t{\n\t\tresult ~= string[0 .. i];\n\
    \t}\n\treturn result;\n}\n/*\n Return array of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"bc\", \"\
    c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\timport std.array;\n\
    \tauto n = string.length;\n\tstring[] result;\n\treserve(result, n);\n\tforeach(i;\
    \ 0 .. n) \n\t{\n\t\tresult ~= string[i .. $];\n\t}\n\treturn result;\n}\n/*\n\
    \ Sort a string in order of increasing length\n    >>> sort_by_length([\"a\",\
    \ \"abc\", \"ab\"])\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] sort_by_length(string[]\
    \ string) \n{\n\timport std.algorithm;\n\treturn sort!((a, b) => a.length < b.length)(string);\n\
    }\n/*\n Reverse a string\n    >>> reverse(\"abcd\")\n    \"dcba\"\n    \n*/\n\
    string reverse(string string) \n{\n\timport std.algorithm;\n\treturn string.front.map!((c)\
    \ => c);\n}\n/*\n Convert a string to a list of characters\n    >>> to_list(\"\
    abc\")\n    ['a', 'b', 'c']\n    \n*/\nchar[] to_list(string string) \n{\n\timport\
    \ std.algorithm;\n\treturn string.front.map!((c) => c);\n}\n/*\n Convert a list\
    \ of characters to a string\n    >>> from_list(['a', 'b', 'c'])\n    \"abc\"\n\
    \    \n*/\nstring from_list(char[] list) \n{\n\timport std.algorithm;\n\treturn\
    \ list.front.map!((c) => c);\n}\n/*\n Combine two lists alternatingly\n    >>>\
    \ interleave([1, 2\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp01sfqbni.d(83): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp01sfqbni.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (size_t i; 0 .. string.length + 1)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz1kz2ngi.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz1kz2ngi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n  string[] result;\n  int length = string.length;\n  result.length = length;\n\
    \  for (int i = 0; i < length; i++) \n  {\n    result[i] = string[0..i];\n  }\n\
    \  return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\",\
    \ \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5umnfjv5.d(11): Error: `string` is used as a type

    /tmp/tmp5umnfjv5.d(12): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5umnfjv5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\tif (string.length == 0) \n\t{\n\t\treturn [\"\"];\n\t} \n\telse \n\t\
    {\n\t\tauto r = all_prefixes(string[1..$]);\n\t\treturn map!(a => string[0..1]\
    \ ~ a)(r) ~ r;\n\t}\n}\n/*\n    Return suffixes of string with the last one first\n\
    \    >>> suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] suffixes(string\
    \ string) \n{\n\tif (string.length == 0) \n\t{\n\t\treturn [\"\"];\n\t} \n\telse\
    \ \n\t{\n\t\tauto r = suffixes(string[0..$-1]);\n\t\treturn map!(a => a ~ string[$-1..$])(r)\
    \ ~ r;\n\t}\n}\n/*\n    >>> [\"a\", \"ab\", \"abc\"] + [\"c\", \"bc\", \"abc\"\
    ]\n    [\"a\", \"ab\", \"abc\", \"c\", \"bc\", \"abc\"]\n*/\nstring[] operator+(string[]\
    \ a, string[] b) \n{\n\treturn a ~ b;\n}\n/*\n    >>> [1, 2, 3] + [4, 5, 6]\n\
    \    [1, 2, 3, 4, 5, 6]\n*/\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj25sd3e7.d(42): Error: semicolon expected, not `+`

    /tmp/tmpj25sd3e7.d(42): Error: declaration expected, not `+`

    /tmp/tmpj25sd3e7.d(45): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj25sd3e7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefixes;\n    foreach (immutable i; 0 .. string.length)\n\
    \    {\n        prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv2v02m6x.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv2v02m6x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto ret = appender!(string[])();\n    foreach(auto i, immutable char[]\
    \ prefix; string[0 .. i]) \n    {\n        ret.put(prefix);\n    }\n    return\
    \ ret.data;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0qxf2wff.d(12): Error: basic type expected, not `auto`

    /tmp/tmp0qxf2wff.d(12): Error: no identifier for declarator `_error_`

    /tmp/tmp0qxf2wff.d(12): Error: found `auto` when expecting `;`

    /tmp/tmp0qxf2wff.d(12): Error: `(arguments)` expected following `immutable(char)`

    /tmp/tmp0qxf2wff.d(12): Error: found `[` when expecting `)`

    /tmp/tmp0qxf2wff.d(12): Error: found `]` instead of statement

    /tmp/tmp0qxf2wff.d(12): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0qxf2wff.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    int[] result = new int[];\n    for (int i = 0; i < string.length; i++)\n\
    \    {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5f2jxew5.d(11): Error: new can only create structs, dynamic arrays
    or class objects, not `int[]`''s

    /tmp/tmp5f2jxew5.d(14): Error: cannot append type `string` to type `int[]`

    /tmp/tmp5f2jxew5.d(16): Error: cannot implicitly convert expression `result` of
    type `int[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5f2jxew5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] results;\n    for (size_t i = 0; i < string.length; i++)\n\
    \    {\n        results ~= string[0..i];\n    }\n    return results;\n}\n//--------------------\n\
    /*\n Return list of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] results;\n    for (size_t i =\
    \ 0; i < string.length; i++)\n    {\n        results ~= string[i..$];\n    }\n\
    \    return results;\n}\n//--------------------\n/*\n Return list of all prefixes\
    \ of the input word of specified length\n    >>> all_of_length(\"abc\", 2)\n \
    \   [\"ab\", \"ac\"]\n    \n*/\nstring[] all_of_length(string word, size_t length)\
    \ \n{\n    string[] results;\n    foreach (prefix; all_prefixes(word))\n    {\n\
    \        if (prefix.length == length)\n        {\n            results ~= prefix;\n\
    \        }\n    }\n    return results;\n}\n//--------------------\n/*\n Return\
    \ list of all suffixes of the input word of specified length\n    >>> all_of_length(\"\
    abc\", 2)\n    [\"bc\", \"ac\"]\n    \n*/\nstring[] all_of_length(string word,\
    \ size_t length) \n{\n    string[] results;\n    foreach (suffix; all_suffixes(word))\n\
    \    {\n        if (suffix.length == length)\n        {\n            results ~=\
    \ suffix;\n        }\n    }\n    return results;\n}\n//--------------------\n\
    //====================\n// Random string generation\n//--------------------\n\
    /*\nReturn a random choice of the input string.\n    >>> choice(\"abc\")\n   \
    \ \"a\" or \"b\" or \"c\"\n*/\nstring choice(string string) \n{\n    return string[uniform(0,\
    \ string.length)];\n}\n//--------------------\n/*\nReturn a random string of specified\
    \ length consisting of\nrandom choices from the input string\n    >>> random_string(\"\
    abc\", 3\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvdwsf207.d(86): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvdwsf207.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto result = new string[];\n    foreach (int i; 0 .. string.length)\
    \ \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n\
    \ Return the longest common prefix of all strings in the input array\n    \n \
    \   >>> lcp([\"hello\", \"hell\", \"helli\"])\n    \"hell\"\n    \n    >>> lcp([\"\
    hello\", \"hullo\", \"hallo\"])\n    \"h\"\n*/\nstring lcp(string[] array) \n\
    {\n    auto result = array[0];\n    foreach (string prefix; all_prefixes(result))\
    \ \n    {\n        foreach (string element; array) \n        {\n            if\
    \ (!element.startsWith(prefix)) \n            {\n                return result[0\
    \ .. prefix.length - 1];\n            }\n        }\n    }\n    return result;\n\
    }\n/*\n Return the set of all longest common prefixes of all strings in the input\
    \ array\n    \n    >>> lcps([\"hello\", \"hell\", \"helli\"])\n    [\"hell\"]\n\
    \    \n    >>> lcps([\"hello\", \"hullo\", \"hallo\"])\n    [\"h\", \"ha\", \"\
    hal\", \"hall\", \"hallo\"]\n*/\nstring[] lcps(string[] array) \n{\n    auto result\
    \ = new string[];\n    foreach (string element; array) \n    {\n        foreach\
    \ (string prefix; all_prefixes(element)) \n        {\n            foreach (string\
    \ other; array) \n            {\n                if (other != element && !other.startsWith(prefix))\
    \ \n                {\n                    goto loop_break;\n                }\n\
    \            }\n            result ~= prefix;\n            loop_break: ;\n   \
    \     }\n    }\n    return result;\n}\n/*\n Return the set of all common prefixes\
    \ (from shortest to longest) of all strings in the input array\n    \n    >>>\
    \ all_lcps([\"hello\", \"hell\", \"helli\"])\n    [\"h\", \"he\", \"hel\", \"\
    hell\"]\n    \n    >>> all_lcps([\"hello\", \"hullo\", \"hall\nunittest\n{\n \
    \   alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5i4bsvis.d(71): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5i4bsvis.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    return map!((string)(input => input[0..$]))(0..string.length);\n}\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm4fs33y5.d(11): Error: C style cast illegal, use `cast(string)(input)
    => input[0..__dollar]`

    /tmp/tmpm4fs33y5.d(11): Error: found `..` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm4fs33y5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\tint []  indices = iota(string.length);\n\treturn indices.map!(index =>\
    \ string[0..index])();\n}\n/*\nCompute the common prefix of two strings\n    >>>\
    \ common_prefix(\"abc\", \"abcd\")\n    \"abc\"\n    >>> common_prefix(\"abc\"\
    , \"abc\")\n    \"abc\"\n    >>> common_prefix(\"abcd\", \"abc\")\n    \"abc\"\
    \n*/\nstring common_prefix(string str1, string str2) \n{\n\tint [] indices = iota(min(str1.length,\
    \ str2.length));\n\tauto result = indices.filter!(index => str1[index] == str2[index])();\n\
    \treturn result.empty ? \"\" : str1[0..result.back];\n}\n//Fuzzy Search a list\
    \ of strings.\n//Return the indexes of the closest matches to the input string.\n\
    //The Fuzzy Search is more sensitive than the exact search,\n//so you may get\
    \ results that match more than 1 letter in the input string.\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsr_fy019.d(11): Error: undefined identifier `iota`

    /tmp/tmpsr_fy019.d(12): Error: no property `map` for type `int[]`

    /tmp/tmpsr_fy019.d(25): Error: undefined identifier `iota`

    /tmp/tmpsr_fy019.d(26): Error: no property `filter` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsr_fy019.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    return iota(1,string.length + 1).map!(i => string[0..i]).array;\n}\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4hdrxf8w.d(11): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4hdrxf8w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (int i; 0 .. string.length) \n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Given a\
    \ string, return the longest repeated substring.\n    >>> longest_repeated_substring(\"\
    banana\")\n    \"ana\"\n*/\nstring longest_repeated_substring(string string) \n\
    {\n    /*\n     If string is short, brute force is faster than suffix tree.\n\
    \    */\n    if (string.length < 40) \n    {\n        string longest_repeated_substring\
    \ = \"\";\n        foreach (string prefix; all_prefixes(string)) \n        {\n\
    \            string repeated_substring = prefix.find(prefix);\n            if\
    \ (repeated_substring.length > longest_repeated_substring.length) \n         \
    \   {\n                longest_repeated_substring = repeated_substring;\n    \
    \        }\n        }\n        return longest_repeated_substring;\n    }\n   \
    \ /*\n     Find the (sorted) suffixes of the input string\n    */\n    string[]\
    \ suffixes;\n    foreach (int i; 0 .. string.length) \n    {\n        suffixes\
    \ ~= string[i .. $];\n    }\n    sort!((a, b) => a < b)(suffixes);\n    /*\n \
    \    Binary search for repeated strings\n    */\n    string longest_repeated_substring\
    \ = \"\";\n    foreach (string suffix; suffixes) \n    {\n        int half_length\
    \ = longest_repeated_substring.length / 2;\n        int start = suffix.length\
    \ - max(longest_repeated_substring.length, 1);\n        string candidate = suffix[start\
    \ .. $];\n        int position = binarySearch!((a, b) => a < b)(suffixes, candidate);\n\
    \        /*\n         Find repeated substring of candidate\n        */\n     \
    \   if (position > 0) \n        {\n            string repeated_substring = suffixes[position\
    \ - 1].find(candidate);\n            if (repeated_substring.length > longest_repeated_substring.length)\
    \ \n            {\n                longest\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnx4pnfc1.d(69): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpnx4pnfc1.d(77): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpnx4pnfc1.d(77): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpnx4pnfc1.d(77): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpnx4pnfc1.d(77): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnx4pnfc1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] ret = new string[string.length];\n    string[] prefixes =\
    \ std.algorithm.iota(string.length).map!(i => string[0..i])();\n    return prefixes;\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptrdjquvy.d(11): Error: `string` is used as a type

    /tmp/tmptrdjquvy.d(11): Error: `string` is used as a type

    /tmp/tmptrdjquvy.d(12): Error: `string` is used as a type

    /tmp/tmptrdjquvy.d(12): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrdjquvy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    return SList!(string)([string])()\n        .map!(s => repeat(map!(s\
    \ => s[0..$-1])(iota(s.length))))\n        .array\n        .back\n        .front;\n\
    }\n/*\n * Return array of all suffixes from shortest to longest of the input string\n\
    \ * \n * >>> all_suffixes(\"abc\")\n * [\"c\", \"bc\", \"abc\"]\n */\nstring[]\
    \ all_suffixes(string string) \n{\n    return SList!(string)([string])()\n   \
    \     .map!(s => repeat(map!(s => s[1..$])(iota(s.length))))\n        .array\n\
    \        .back\n        .front;\n}\n/*\n * Split a string into an array of its\
    \ words, separated by the supplied \n * separator character (or group of characters),\
    \ which default to space\n * \n * >>> split(\"a b c\")\n * [\"a\", \"b\", \"c\"\
    ]\n * >>> split(\"a,b,c\", ',')\n * [\"a\", \"b\", \"c\"]\n */\nstring[] split(string\
    \ string, string separator = \" \")\n{\n    return SList!(string)([string])()\n\
    \        .map!(s => filter!(x => x != \"\")(s.split(separator)))\n        .array\n\
    \        .back;\n}\n/*\n * Return the next-longest substring of the input string\
    \ that is also a\n * substring of the other input strings, starting from the longest.\n\
    \ * \n * >>> next_substring(\"foobar\", \"foo\")\n * \"foo\"\n * >>> next_substring(\"\
    foobar\", \"f\")\n * \"fo\"\n * >>> next_substring(\"foobar\", \"f\", \"o\")\n\
    \ * \"fo\"\n * >>> next_substring(\"foobar\", \"f\", \"oo\")\n * \"foo\"\n * >>>\
    \ next_substring(\"foobar\", \"foo\", \"o\")\n * \"oo\"\n * >>> next_substring(\"\
    foobar\", \"foobar\")\n * \"foobar\"\n * >>> next_substring(\"foobar\", \"bar\"\
    )\n * \"bar\"\n *\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnhpp6rzp.d(47): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhpp6rzp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    return text(array(string.length)).map!(a => \".\"~string[0..to!int(a)]).drop(1);\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn7jzhxjn.d(11): Error: undefined identifier `text`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn7jzhxjn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.array;\n    auto result = [];\n    foreach (i; 0 .. string.length)\
    \ \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2yc8d0tq.d(15): Error: cannot append type `string` to type `void[]`

    /tmp/tmp2yc8d0tq.d(17): Error: cannot implicitly convert expression `result` of
    type `void[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yc8d0tq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefixes;\n    foreach (prefix; 0 .. string.length)\n    {\n\
    \        prefixes ~= string[0 .. prefix];\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaha1kxqw.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaha1kxqw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    return string.splitInPlace();\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsx4jeoam.d(11): Error: no property `splitInPlace` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsx4jeoam.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.algorithm : map;\n    string[] result;\n    foreach(inout\
    \ e; result) e = e.idup; // just to make sure we don't mutate the string or hold\
    \ references.\n    foreach(i; 0 .. string.length) result ~= string[0 .. i];\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0bzgkpmc.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0bzgkpmc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    result.length = string.length;\n    foreach (i,\
    \ c; string)\n    {\n        result[i] = string[0..i];\n    }\n    return result;\n\
    }\n/*\n Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result;\n    result.length = string.length;\n\
    \    foreach (i, c; string)\n    {\n        result[i] = string[i..$];\n    }\n\
    \    return result;\n}\n/*\n Return array of all prefixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"\
    ]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n\
    \    result.length = string.length;\n    foreach (i, c; string)\n    {\n     \
    \   result[i] = string[i..$];\n    }\n    return result;\n}\n/*\n Compute the\
    \ Longest Common Subsequence of two strings\n    >>> longest_common_subsequence(\"\
    sunday\", \"saturday\")\n    \"sunday\"\n    \n*/\nstring longest_common_subsequence(string\
    \ string_a, string string_b) \n{\n    auto common_substring_lengths = new int[string_a.length][string_b.length];\n\
    \    foreach (index_a, char_a; string_a)\n    {\n        foreach (index_b, char_b;\
    \ string_b)\n        {\n            if (char_a == char_b)\n            {\n   \
    \             common_substring_lengths[index_a][index_b] = (index_a > 0 && index_b\
    \ > 0) ? common_substring_lengths[index_a - 1][index_b - 1] + 1 : 1;\n       \
    \     }\n            else\n            {\n                common_substring_lengths[index_a][index_b]\
    \ = max(common\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoqrhgja3.d(71): Error: found `unittest` when expecting `,`

    /tmp/tmpoqrhgja3.d(79): Error: found `void` when expecting `,`

    /tmp/tmpoqrhgja3.d(79): Error: found `{` when expecting `,`

    /tmp/tmpoqrhgja3.d(79): Error: expression expected, not `}`

    /tmp/tmpoqrhgja3.d(79): Error: found `End of File` when expecting `,`

    /tmp/tmpoqrhgja3.d(79): Error: found `End of File` when expecting `)`

    /tmp/tmpoqrhgja3.d(79): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmpoqrhgja3.d(79): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpoqrhgja3.d(79): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpoqrhgja3.d(79): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpoqrhgja3.d(79): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoqrhgja3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    int length = string.length;\n    string[] result = new string[length];\n\
    \    for (int count = 0; count < length; count++)\n    {\n        result[count]\
    \ = string[0..count+1];\n    }\n    return result;\n}\n/*\n Given the original\
    \ array and the array of the prefixes \n return the minimum number of elements\
    \ to remove from the original array \n to make it a prefix of the prefix array\n\
    \ \n For example,\n    >>> minimum_of_removing_to_make_prefix([\"a\", \"b\", \"\
    c\"], [\"a\", \"ab\", \"abc\"])\n    0\n    >>> minimum_of_removing_to_make_prefix([\"\
    a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"])\n    0\n    >>> minimum_of_removing_to_make_prefix([\"\
    a\", \"b\", \"c\"], [\"a\", \"b\", \"c\", \"abc\"])\n    2\n    >>> minimum_of_removing_to_make_prefix([\"\
    a\", \"b\", \"b\", \"ab\", \"c\"], [\"a\", \"b\", \"b\", \"ab\", \"c\"])\n   \
    \ 0\n    >>> minimum_of_removing_to_make_prefix([\"a\", \"b\", \"b\", \"ab\",\
    \ \"c\"], [\"a\", \"b\", \"ab\", \"c\"])\n    1\n    >>> minimum_of_removing_to_make_prefix([\"\
    a\", \"b\", \"b\", \"ab\", \"c\"], [\"a\", \"b\", \"ab\", \"c\", \"abc\"])\n \
    \   2\n    >>> minimum_of_removing_to_make_prefix([\"a\", \"b\", \"b\", \"ab\"\
    , \"c\"], [\"a\", \"b\", \"ab\", \"c\", \"ab\"])\n    3\n    >>> minimum_of_removing_to_make_prefix([\"\
    a\", \"b\", \"b\", \"ab\", \"c\"], [\"a\", \"b\", \"b\", \"ab\", \"c\", \"abc\"\
    ])\n    0\n    >>> minimum_of_removing_to_make_prefix([\"a\", \"b\", \"b\", \"\
    ab\", \"c\"], [\"a\", \"\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzkl9p114.d(19): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzkl9p114.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto result = new string[](string.length + 1);\n    foreach (uint i,\
    \ idx; 0 .. string.length + 1) \n    {\n        result[idx] = string[0 .. i];\n\
    \    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"\
    bc\", \"abc\"]\n*/\nstring[] all_suffixes(string string) \n{\n    auto result\
    \ = new string[](string.length + 1);\n    foreach (uint i, idx; 0 .. string.length\
    \ + 1) \n    {\n        result[idx] = string[$ - i .. $];\n    }\n    return result;\n\
    }\n/*\n Return the longest common prefix of the two input strings.\n    >>> longest_common_prefix(\"\
    abc\", \"abx\")\n    \"ab\"\n*/\nstring longest_common_prefix(string a, string\
    \ b) \n{\n    uint max_len = min(a.length, b.length);\n    foreach (uint i; 0\
    \ .. max_len) \n    {\n        if (a[i] != b[i]) \n        {\n            return\
    \ a[0 .. i];\n        }\n    }\n    return a[0 .. max_len];\n}\n/*\n Return the\
    \ longest common suffix of the two input strings.\n    >>> longest_common_suffix(\"\
    abc\", \"xbc\")\n    \"bc\"\n*/\nstring longest_common_suffix(string a, string\
    \ b) \n{\n    uint max_len = min(a.length, b.length);\n    foreach (uint i; 0\
    \ .. max_len) \n    {\n        if (a[$ - i] != b[$ - i]) \n        {\n       \
    \     return a[$ - i .. $];\n        }\n    }\n    return a[$ - max_len .. $];\n\
    }\n/*\n Return the longest common substring of the two input strings.\n    >>>\
    \ longest_common_substring(\"abc\", \"xbc\")\n    \"bc\"\n*/\nstring longest_common_substring(string\
    \ a, string b\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6i6c8fe0.d(12): Error: found `..` when expecting `)`

    /tmp/tmp6i6c8fe0.d(12): Error: found `)` when expecting `;` following statement

    /tmp/tmp6i6c8fe0.d(26): Error: found `..` when expecting `)`

    /tmp/tmp6i6c8fe0.d(26): Error: found `)` when expecting `;` following statement

    /tmp/tmp6i6c8fe0.d(72): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6i6c8fe0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto result = new string[];\n    foreach (int i; 0 .. string.length)\n\
    \        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbw6dqhza.d(11): Error: `string` is used as a type

    /tmp/tmpbw6dqhza.d(12): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbw6dqhza.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto length = string.length;\n    string[] s = new string[];\n    foreach(i;\
    \ 0 .. length) \n    {\n        s ~= string[0 .. i];\n    }\n    return s;\n}\n\
    /*\nReturn array of all prefixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"abc\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    auto length = string.length;\n    string[]\
    \ s = new string[];\n    foreach(i; 0 .. length) \n    {\n        s ~= string[i\
    \ .. $];\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30g6yz9x.d(12): Error: `string` is used as a type

    /tmp/tmp30g6yz9x.d(12): Error: `string` is used as a type

    /tmp/tmp30g6yz9x.d(28): Error: `string` is used as a type

    /tmp/tmp30g6yz9x.d(28): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30g6yz9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.algorithm : iota;\n    return iota(1, string.length + 1).map!(n\
    \ => string[0 .. n]);\n}\n/*\n    >>> count_letters(\"aabbc\")\n    [(\"a\", 2),\
    \ (\"b\", 2), (\"c\", 1)]\n*/\ntuple!(uint, char)[] count_letters(string s) \n\
    {\n    import std.algorithm : group, map;\n    return group(s).map!(g => tuple(g.length,\
    \ g[0])).array;\n}\n/*\n    >>> same_frequency_of_letters(\"aabbc\")\n    true\n\
    \    >>> same_frequency_of_letters(\"aaaabbc\")\n    false\n*/\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwju6dhc1.d(18): Error: `tuple!(uint, char)` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwju6dhc1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto ret = map!((string s) {return s;})\n        (take!(2; repeat!(idup;\
    \ string)));\n    return ret;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphd3nxs9a.d(12): Error: found `;` when expecting `)` following template
    argument list

    /tmp/tmphd3nxs9a.d(12): Error: found `repeat` when expecting `,`

    /tmp/tmphd3nxs9a.d(12): Error: found `;` when expecting `)`

    /tmp/tmphd3nxs9a.d(12): Error: found `string` when expecting `,`

    /tmp/tmphd3nxs9a.d(12): Error: semicolon expected following auto declaration,
    not `)`

    /tmp/tmphd3nxs9a.d(12): Error: found `)` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphd3nxs9a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto result = [];\n    foreach (len; 1 .. strlen(string)) \n    {\n\
    \        result ~= string[0 .. len];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu17uakfe.d(12): Error: undefined identifier `strlen`

    /tmp/tmpu17uakfe.d(16): Error: cannot implicitly convert expression `result` of
    type `void[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu17uakfe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\tif(string.length == 0) return new string[](0);\n\tstring[] arr = new\
    \ string[string.length];\n\tfor(size_t i = 0; i < string.length; i++) {\n\t\t\
    arr[i] = string[0..i+1];\n\t}\n\treturn arr;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk49j8d1y.d(11): Error: `string` is used as a type

    /tmp/tmpk49j8d1y.d(12): Error: `string` is used as a type

    /tmp/tmpk49j8d1y.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk49j8d1y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.algorithm.iteration : map;\n    import std.range : iota;\n\
    \    import std.range : take;\n    import std.range : dropOne;\n    return iota(0,\
    \ string.length)\n    .map!(i => string.take(i))\n    .array;\n}\n/*\n Return\
    \ array of all suffixes from shortest to longest of the input string\n    >>>\
    \ all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    import std.algorithm.iteration : map;\n    import std.range\
    \ : iota;\n    import std.range : take;\n    import std.range : dropOne;\n   \
    \ return iota(0, string.length)\n    .map!(i => string.dropOne.take(string.length\
    \ - i).array)\n    .array;\n}\n/*\n Based on a standard two-dimensional model\
    \ of structural and functional similarity,\n given two strings, return the percentage\
    \ of structural similarity between them.\n The structural similarity between two\
    \ strings is defined as the ratio of the number\n of characters in the longest\
    \ common substring to the length of the longer string.\n    >>> structural_similarity(\"\
    abcd\", \"abce\")\n    0.25\n    \n*/\nreal structural_similarity(string string_a,\
    \ string string_b) \n{\n    import std.array : max;\n    import std.algorithm.iteration\
    \ : map;\n    import std.range : iota;\n    import std.range : take;\n    import\
    \ std.range : dropOne;\n    import std.range : zip;\n    import std.range : drop;\n\
    \    import std.algorithm.searching : maxElement;\n    import std.algorithm.mutation\
    \ : sort;\n    import std.algorithm.comparison : equal;\n    import std.range\
    \ : take;\n    import std.range : drop;\n    import std.range : equal;\n    import\
    \ std.range : zip;\n    import std.range : takeExactly;\n    import std.range\
    \ : takeExactly;\n    import std.range : dropExactly;\n    import std.range :\
    \ dropExactly;\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvkkgo1rh.d(64): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkkgo1rh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.algorithm;\n    return iota(string.length + 1).map!(a =>\
    \ string[0 .. a]);\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplzdnget1.d(12): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplzdnget1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\treturn string.map!(a => string[0..a]);\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj0tlvazv.d(11): Error: no property `map` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj0tlvazv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.typecons;\n    string[] result;\n    auto n = string.length;\n\
    \    foreach (i; 0 .. n) \n    {\n        result ~= string[0 .. i];\n    }\n \
    \   return result;\n}\n/*\n Return array of all prefixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"\
    ]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    import std.typecons;\n\
    \    string[] result;\n    auto n = string.length;\n    foreach (i; 0 .. n) \n\
    \    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n\
    \ Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    auto n = string.length;\n    foreach (i; 0 .. n) \n    {\n        foreach\
    \ (j; i .. n) \n        {\n            result ~= string[i .. j];\n        }\n\
    \    }\n    return result;\n}\n/*\n Returns the index of the first character of\
    \ the first match.\n Returns -1 if no match.\n \n    >>> find_first_substring_match_with_overlap(\"\
    mississippi\", \"issi\")\n    1\n    >>> find_first_substring_match_with_overlap(\"\
    abcabcabc\", \"bc\")\n    1\n*/\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnf3qqset.d(12): Error: `string` is used as a type

    /tmp/tmpnf3qqset.d(29): Error: `string` is used as a type

    /tmp/tmpnf3qqset.d(45): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnf3qqset.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (int i; 0 .. string.length) \n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return\
    \ array of all suffixes from shortest to longest of the input string\n    >>>\
    \ all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result;\n    foreach (int i; 0 .. string.length) \n\
    \    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptgj07yhm.d(11): Error: `string` is used as a type

    /tmp/tmptgj07yhm.d(12): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmptgj07yhm.d(25): Error: `string` is used as a type

    /tmp/tmptgj07yhm.d(26): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptgj07yhm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto prefixes = [mutable]() {\n        foreach (i; 1 .. string.length\
    \ + 1)\n            yield string[0 .. i];\n    };\n    return prefixes.array;\n\
    }\n/*\n Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd2czmlmz.d(11): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpd2czmlmz.d(13): Error: found `string` when expecting `;` following statement

    /tmp/tmpd2czmlmz.d(13): Error: found `..` when expecting `,`

    /tmp/tmpd2czmlmz.d(14): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpd2czmlmz.d(17): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2czmlmz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    return map!((x) => string[0..x])(iota(1, string.length + 1));\n}\n\
    /*\n    Remove the first element of the string\n    >>> string.substr(1)\n   \
    \ \"bc\"\n*/\nstring remove_first(string string)\n{\n    return string.substr(1);\n\
    }\n/*\n    Remove the last element of the string\n    >>> string.substr(0, string.length\
    \ - 1)\n    \"ab\"\n*/\nstring remove_last(string string)\n{\n    return string.substr(0,\
    \ string.length - 1);\n}\n/*\n    Return all substrings of string\n    >>> substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] substrings(string\
    \ string)\n{\n    return all_prefixes(string) ~ map!(remove_first)(all_prefixes(remove_last(string)));\n\
    }\n/*\n    Return the length of the longest common subsequence\n    >>> longest_common_subsequence(\"\
    ABC\", \"BAB\")\n    2\n*/\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp25od5qh0.d(11): Error: template instance `map!((x) => string[0..x])`
    template `map` is not defined

    /tmp/tmp25od5qh0.d(20): Error: no property `substr` for type `string`

    /tmp/tmp25od5qh0.d(29): Error: no property `substr` for type `string`

    /tmp/tmp25od5qh0.d(38): Error: template instance `map!remove_first` template `map`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp25od5qh0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    return map!\"a.idup\".to!((string[])uninitializedArray(string.length)).array(0,\
    \ idup(string.length));\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3hgmbmq2.d(11): Error: C style cast illegal, use `cast(string[])uninitializedArray(string.length)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3hgmbmq2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto prefixes = [];\n    foreach (pre; 0 .. string.length)\n    {\n\
    \        prefixes ~= string[0 .. pre];\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe2iwoqal.d(14): Error: cannot append type `string` to type `void[]`

    /tmp/tmpe2iwoqal.d(16): Error: cannot implicitly convert expression `prefixes`
    of type `void[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe2iwoqal.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto string_array = [];\n    for (size_t i = 0; i < string.length;\
    \ i++) \n    {\n        string_array ~= string[0..i];\n    }\n    return string_array;\n\
    }\n/*\n    Return array of all prefixes from shortest to longest of the input\
    \ array\n    \n    >>> all_prefixes([\"a\", \"b\", \"c\"])\n    [[], [\"a\"],\
    \ [\"a\", \"b\"], [\"a\", \"b\", \"c\"]]\n    \n*/\nstring[][] all_prefixes(string[]\
    \ array) \n{\n    auto string_array = [];\n    for (size_t i = 0; i < array.length;\
    \ i++) \n    {\n        string_array ~= array[0..i];\n    }\n    return string_array;\n\
    }\n/*\n    Return array of all prefixes from shortest to longest of the input\
    \ string\n    \n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_prefixes(string string) \n{\n    auto string_array = [];\n\
    \    for (size_t i = 0; i < string.length; i++) \n    {\n        string_array\
    \ ~= string[0..i];\n    }\n    return string_array;\n}\n/*\n    Return array of\
    \ all prefixes from shortest to longest of the input array\n    \n    >>> all_prefixes([\"\
    a\", \"b\", \"c\"])\n    [[], [\"a\"], [\"a\", \"b\"], [\"a\", \"b\", \"c\"]]\n\
    \    \n*/\nstring[][] all_prefixes(string[] array) \n{\n    auto string_array\
    \ = [];\n    for (size_t i = 0; i < array.length; i++) \n    {\n        string_array\
    \ ~= array[0..i];\n    }\n    return string_array;\n}\n/*\n    Return array of\
    \ all prefixes from shortest to longest of the input string\n    \n    >>> all_prefixes(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto string\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbw6bztlp.d(76): Error: no identifier for declarator `string`

    /tmp/tmpbw6bztlp.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbw6bztlp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto result = new string[];\n    for (size_t i = 0; i < string.length\
    \ + 1; i++)\n    {\n        string prefix = string[0 .. i];\n        result ~=\
    \ prefix;\n    }\n    return result;\n}\n// Unittest\nunittest\n{\n    assert(all_prefixes(\"\
    abc\") == [\"a\", \"ab\", \"abc\"]);\n}\n/*\n Return array of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    auto result = new string[];\n    for (size_t i = 0; i < string.length +\
    \ 1; i++)\n    {\n        string suffix = string[i .. $];\n        result ~= suffix;\n\
    \    }\n    return result;\n}\n// Unittest\nunittest\n{\n    assert(all_suffixes(\"\
    abc\") == [\"c\", \"bc\", \"abc\"]);\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    auto result = new string[];\n    foreach (i; 0 .. string.length\
    \ + 1)\n    {\n        foreach (j; i .. string.length + 1)\n        {\n      \
    \      string substring = string[i .. j];\n            result ~= substring;\n\
    \        }\n    }\n    return result;\n}\n// Unittest\nunittest\n{\n    assert(all_substrings(\"\
    abc\") == [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]);\n}\n/*\n Reverse strings\
    \ in array.\n    >>> reverse_strings([\"abc\", \"def\"])\n    [\"cba\", \"fed\"\
    ]\n    \n*/\nstring[] reverse_strings(string[] strings) \n{\n    auto result =\
    \ new string[];\n    foreach (string; strings)\n    {\n       \nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw0dce0c4.d(81): Error: found `unittest` instead of statement

    /tmp/tmpw0dce0c4.d(89): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw0dce0c4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefixes;\n    foreach (prefix; 0 .. strlen(string)) \n  \
    \  {\n        prefixes ~= string[0 .. prefix];\n    }\n    return prefixes;\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8dld6m64.d(11): Error: `string` is used as a type

    /tmp/tmp8dld6m64.d(12): Error: undefined identifier `strlen`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8dld6m64.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] rs;\n    foreach(i; 0 .. string.length)\n    {\n        //+1\
    \ to include last character\n        rs ~= string[0 .. i+1];\n    }\n    return\
    \ rs;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ddblu_r.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ddblu_r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (index, element; string) \n    {\n  \
    \      result ~= string[0..index];\n    }\n    return result;\n}\n/*\n Sort a\
    \ list of strings by the length of their longest common prefix\n    >>> sort_by_lcp([\"\
    hello\", \"hel\", \"hellos\"])\n    [\"hel\", \"hello\", \"hellos\"]\n    \n*/\n\
    string[] sort_by_lcp(string[] words) \n{\n    // For each word, return a tuple\
    \ of the word and the length of its lcp\n    Tuple!(string, size_t)[][] lcps =\
    \ words.map!(prefix =>\n    {\n        return all_prefixes(prefix).map!(p => tuple(p,\
    \ p.length));\n    });\n    auto compare = (Tuple!(string, size_t) a, Tuple!(string,\
    \ size_t) b) =>\n    {\n        return a[1] > b[1];\n    };\n    return lcps.sort!(compare).map!(lcp\
    \ => lcp[0].string);\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpduq3r4iv.d(11): Error: `string` is used as a type

    /tmp/tmpduq3r4iv.d(27): Error: no property `map` for type `string[]`

    /tmp/tmpduq3r4iv.d(35): Error: no property `sort` for type `Tuple!(string, ulong)[][]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpduq3r4iv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (int i, string s; array(zip(iota(0, string.length),\
    \ string))) \n    {\n        result ~= string[0..i];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1e6k8uk.d(11): Error: `string` is used as a type

    /tmp/tmpp1e6k8uk.d(12): Error: undefined identifier `array`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1e6k8uk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto result = new string[$];\n    foreach (i; 0 .. string.length) \n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbufktcvm.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbufktcvm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefixes;\n    foreach (i; 0 .. string.length) \n    {\n \
    \       prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\n// All prefixes\
    \ starting with a given char\n// all_prefixes_from(\"abc\", 'a') --> [\"a\", \"\
    ab\", \"abc\"]\nstring[] all_prefixes_from(string string, char ch)\n{\n    int\
    \ index = string.find(ch);\n    string[] prefixes;\n    foreach (i; index .. string.length)\
    \ \n    {\n        prefixes ~= string[index .. i];\n    }\n    return prefixes;\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8tbi_qym.d(11): Error: `string` is used as a type

    /tmp/tmp8tbi_qym.d(22): Error: no property `find` for type `string`

    /tmp/tmp8tbi_qym.d(23): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8tbi_qym.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    int len = string.length;\n    string[] result = new string[];\n   \
    \ foreach(i; 0..len)\n    {\n       result ~= string[0..i];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb0la8xuz.d(11): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmpb0la8xuz.d(12): Error: `string` is used as a type

    /tmp/tmpb0la8xuz.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb0la8xuz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefixes;\n    foreach (len; 1 .. string.length + 1)\n   \
    \ {\n        prefixes ~= string[0 .. len - 1];\n    }\n    return prefixes;\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf828u1d1.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf828u1d1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] res;\n    foreach(idx, char ch; string)\n    {\n        res\
    \ ~= string[0..idx];\n    }\n    return res;\n}\n/*\n Return array of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] res;\n    foreach(idx, char ch; string)\n    {\n        res ~= string[idx..$];\n\
    \    }\n    return res;\n}\n/*\n Return unique elements of array:\n    >>> unique_elements([1,\
    \ 1, 2, 3, 4, 4, 5])\n    [1, 2, 3, 4, 5]\n*/\nT[] unique_elements(T)(T[] arr)\n\
    {\n    return arr.dup.unique;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1uzkir29.d(11): Error: `string` is used as a type

    /tmp/tmp1uzkir29.d(25): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1uzkir29.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    assert(string !is null);\n    string[] prefixes;\n    foreach(i; 0\
    \ .. string.length) \n    {\n        prefixes ~= string[0 .. i];\n    }\n    return\
    \ prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7kynzsg.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7kynzsg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (int i, string c; string)\n    {\n  \
    \      result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp13p12q8h.d(11): Error: `string` is used as a type

    /tmp/tmp13p12q8h.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13p12q8h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    return map!(text => text[0 .. $ - 1])(slices(string));\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvbdfi2nw.d(11): Error: template instance `map!((text) => text[0..__dollar
    - 1])` template `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvbdfi2nw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto ret = new string[string.length + 1];\n    ret[0] = \"\";\n   \
    \ foreach (i, c; string)\n        ret[i + 1] = ret[i] ~ c;\n    return ret;\n\
    }\n/*\n Return number of characters that are the same on the front of two strings\n\
    \    >>> longest_common_prefix(\"abcde\", \"abcxyz\")\n    3\n    >>> longest_common_prefix(\"\
    abcxyz\", \"abcde\")\n    3\n    >>> longest_common_prefix(\"abcxyz\", \"xyzabc\"\
    )\n    0\n*/\nsize_t longest_common_prefix(string string1, string string2) \n\
    {\n    return most(zip(all_prefixes(string1), all_prefixes(string2))\n       \
    \         .map!(common_prefix));\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3md001g5.d(11): Error: `string` is used as a type

    /tmp/tmp3md001g5.d(28): Error: undefined identifier `most`, did you mean function
    `modf`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3md001g5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.typecons;\n    import std.array;\n    import std.algorithm;\n\
    \    import std.range;\n    import std.typecons;\n    import std.conv;\n    import\
    \ std.traits;\n    import std.meta;\n    import std.range;\n    import std.string;\n\
    \    string[] ret = [];\n    foreach(i; 0..string.length)\n    {\n        ret\
    \ ~= string[0..i];\n    }\n    return ret;\n}\n/*\n    Return all suffixes of\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_suffixes(string string) \n{\n    import std.typecons;\n\
    \    import std.array;\n    import std.algorithm;\n    import std.range;\n   \
    \ import std.typecons;\n    import std.conv;\n    import std.traits;\n    import\
    \ std.meta;\n    import std.range;\n    import std.string;\n    string[] ret =\
    \ [];\n    foreach(i; 0..string.length)\n    {\n        ret ~= string[i..$];\n\
    \    }\n    return ret;\n}\n/*\n    Return all substrings of input string\n  \
    \  >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"\
    c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    import std.typecons;\n\
    \    import std.array;\n    import std.algorithm;\n    import std.range;\n   \
    \ import std.typecons;\n    import std.conv;\n    import std.traits;\n    import\
    \ std.meta;\n    import std.range;\n    import std.string;\n    string[] ret =\
    \ [];\n    foreach(i; 0..string.length)\n    {\n        ret ~= all_prefixes(string[i..$]);\n\
    \    }\n    return ret;\n}\n/*\n    Return all substrings of input string\n  \
    \  >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"\
    c\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo54kc_ra.d(78): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo54kc_ra.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (size_t i; 0 .. string.length + 1)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz1kz2ngi.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz1kz2ngi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    return [\"\"].concatenate(map!(i => string[0..i], iota(string.length)));\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp07ua_k71.d(11): Error: no property `concatenate` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp07ua_k71.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (i; 0 .. string.length)\n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Calculate the\
    \ maximum depth of nodes from the root node in a single-linked tree\n    >>> max_depth([\"\
    a\", [\"b\", [\"c\", [\"d\", [\"e\", \"f\"]]]]])\n    4\n*/\nuint max_depth(T)(T\
    \ tree)\n{\n    if (tree.length == 0)\n    {\n        return 0;\n    }\n    else\n\
    \    {\n        uint max_child_depth = 0;\n        foreach (child; tree[1 .. $])\n\
    \        {\n            uint child_depth = max_depth(child);\n            if (child_depth\
    \ > max_child_depth)\n            {\n                max_child_depth = child_depth;\n\
    \            }\n        }\n        return max_child_depth + 1;\n    }\n}\n/*\n\
    \ Find the minimum element in a sequence of `Comparable` elements\n    >>> minimum([3,\
    \ 5, 1, 2, 4])\n    1\n*/\nT minimum(alias less_than, T)(T[] array)\n{\n    assert(array.length\
    \ > 0);\n    auto min = array[0];\n    foreach (element; array[1 .. $])\n    {\n\
    \        if (less_than(element, min))\n        {\n            min = element;\n\
    \        }\n    }\n    return min;\n}\n/*\n Find the minimum element in a sequence\
    \ of `Comparable` elements\n    >>> minimum([3, 5, 1, 2, 4])\n    1\n*/\nT minimum(T)(T[]\
    \ array)\n{\n    return minimum!(a < b)(array);\n}\n/*\n Return true iff both\
    \ arrays have the same length, and contain the same elements\n    >>> equals([1,\
    \ 2, 3], [1, 2, 3])\n    true\n    >>> equals([1, 2, 3], [4, 5, 6])\n    false\n\
    \    >>> equals([1, 2, 3], [1, 2, 3, 4])\n    false\n*/\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9uttly08.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9uttly08.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n    if (string.length == 0)\n    {\n    return new string[0];\n    }\n   \
    \ else \n    {\n    return all_prefixes(string[0..$-1]) ~ [string];\n    }\n \
    \   }\n    /*\n     Compute the Levenshtein distance between two strings\n   \
    \ >>> levenshtein(\"kitten\", \"sitting\")\n    3\n    >>> levenshtein(\"rosettacode\"\
    , \"raisethysword\")\n    8\n    */\n    int levenshtein(string s, string t)\n\
    \    {\n    return cast(int) reduce!min(map!(find_min)(all_prefixes(s), all_prefixes(t)));\n\
    \    }\n    /*\n    Find the minimum of three numbers\n    */\n    int find_min(int\
    \ a, int b, int c)\n    {\n    return min(a, min(b, c));\n    }\n    void main()\n\
    \    {\n    import std.stdio;\n    import std.string;\n    auto text = readText(stdin);\n\
    \    string[] split;\n    int[][] matrix;\n    string[][] answer;\n    int[][]\
    \ leven;\n    foreach (line; text.splitLines())\n    {\n    split = line.split();\n\
    \    matrix = new int[split.length][split.length];\n    leven = new int[split.length][split.length];\n\
    \    answer = new string[split.length][split.length];\n    foreach (i, word1;\
    \ split)\n    {\n    foreach (j, word2; split)\n    {\n    matrix[i][j] = word1.compare(word2);\n\
    \    leven[i][j] = levenshtein(word1, word2);\n    answer[i][j] = word1.compare(word2)\
    \ ? word1 : \"\";\n    }\n    }\n    foreach (i, word1; split)\n    {\n    foreach\
    \ (j, word2; split)\n    {\n    if (word1.compare(word2))\n    {\n    if (word1.length\
    \ > word2.length\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4lmu22so.d(10): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmp4lmu22so.d(10): Error: declaration expected, not `if`

    /tmp/tmp4lmu22so.d(13): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4lmu22so.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\tint prefix_len = 0;\n\tstring[] all_prefixes = new string[];\n\twhile\
    \ (prefix_len < string.length)\n\t{\n\t\tall_prefixes ~= string[0..prefix_len];\n\
    \t\tprefix_len += 1;\n\t}\n\treturn all_prefixes;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgio_nk02.d(12): Error: `string` is used as a type

    /tmp/tmpgio_nk02.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgio_nk02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] allPrefixes;\n    foreach(int i; 0 .. string.length) \n  \
    \  {\n        allPrefixes ~= string[0 .. i];\n    }\n    return allPrefixes;\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgu3dzgf9.d(11): Error: `string` is used as a type

    /tmp/tmpgu3dzgf9.d(12): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgu3dzgf9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (index, c; string)\n    {\n        result\
    \ ~= string[0..index];\n    }\n    return result;\n}\n/*\n Return array of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result;\n    foreach (index, c; string)\n    {\n        result\
    \ ~= string[index..$];\n    }\n    return result;\n}\n/*\n https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm#/media/File:KMP_illustration.svg\n\
    */\nstring[] preprocess_kmp(string pattern) \n{\n    size_t[] border = new size_t[pattern.length];\n\
    \    string[] prefixes = all_prefixes(pattern);\n    string[] suffixes = all_suffixes(pattern);\n\
    \    foreach (index, prefix; prefixes)\n    {\n        foreach (suffix; suffixes)\n\
    \        {\n            if (prefix == suffix)\n            {\n               \
    \ border[index] = prefix.length;\n                break;\n            }\n    \
    \    }\n    }\n    return border;\n}\n/*\n Return positions of all occurances\
    \ of pattern in text using the Knuth\u2013Morris\u2013Pratt algorithm\n    >>>\
    \ knuth_morris_pratt(\"abcdabcy\", \"abcy\")\n    [6]\n    >>> knuth_morris_pratt(\"\
    abcdabcdabcy\", \"abcy\")\n    [8]\n    >>> knuth_morris_pratt(\"aabaaabaaac\"\
    , \"aabaaac\")\n    [4]\n    >>> knuth_morris_pratt(\"abcdabcy\", \"abcy\")\n\
    \    [6]\n*/\nsize_t[] knuth_morris_pratt(string text, string pattern) \n{\n \
    \   size_t[] results;\n    size_t[] border = preprocess_kmp(pattern);\n    size\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr39hwh74.d(70): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpr39hwh74.d(78): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr39hwh74.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (int i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n    Given\
    \ a list of strings, return the longest common prefix of all strings in the list\n\
    \    >>> longest_common_prefix([\"abc\", \"abde\", \"ab\"])\n    \"ab\"\n*/\n\
    string longest_common_prefix(string[] strings)\n{\n    if (strings.length == 0)\n\
    \    {\n        return \"\";\n    }\n    else if (strings.length == 1)\n    {\n\
    \        return strings[0];\n    }\n    else\n    {\n        string result = strings[0];\n\
    \        foreach (string s; strings[1 .. $])\n        {\n            string tmp\
    \ = \"\";\n            foreach (string x; all_prefixes(result))\n            {\n\
    \                if (x.canFind(s))\n                {\n                    tmp\
    \ = x;\n                }\n            }\n            result = tmp;\n        }\n\
    \        return result;\n    }\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptfuqzj74.d(11): Error: `string` is used as a type

    /tmp/tmptfuqzj74.d(12): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmptfuqzj74.d(41): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptfuqzj74.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\tstring[] ret = new string[string.length + 1];\n\tforeach( i, c; string)\n\
    \t{\n\t\tret[i] = string[0..i];\n\t}\n\tret[$-1] = string;\n\treturn ret;\n}\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxihmd02t.d(11): Error: `string` is used as a type

    /tmp/tmpxihmd02t.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxihmd02t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\treturn iota(string.length+1).map!(i => string[0..i]);\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj15xggfs.d(11): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj15xggfs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto res = appender!(string[])();\n    foreach(i; 0 .. string.length)\
    \ {\n        res.put(string[0 .. i]);\n    }\n    return res.data;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3sqhqltt.d(11): Error: template instance `appender!(string[])`
    template `appender` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3sqhqltt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] res;\n    for (size_t i = 0; i < string.length; i++)\n   \
    \ {\n        res ~= string[0..i];\n    }\n    return res;\n}\n/*\n Return true\
    \ if prefix is a prefix of string\n    >>> is_prefix(\"abc\", \"ab\")\n    true\n\
    \    >>> is_prefix(\"abc\", \"ad\")\n    false\n*/\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnustoiic.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnustoiic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (i; 0 .. length(string))\n        result\
    \ ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptpptbxdt.d(11): Error: `string` is used as a type

    /tmp/tmptpptbxdt.d(12): Error: undefined identifier `length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptpptbxdt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] all_prefixes = [];\n    for (int c = 0; c < string.length;\
    \ c++)\n    {\n        all_prefixes ~= string[0..c];\n    }\n    return all_prefixes;\n\
    }\n \n/*\n Return array of all suffixes from shortest to longest of the input\
    \ string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] all_suffixes = [];\n    for (int\
    \ c = string.length; c > 0; c--)\n    {\n        all_suffixes ~= string[c-1..$];\n\
    \    }\n    return all_suffixes;\n}\n \n/*\n Return the longest common prefix\
    \ of two input strings\n    >>> longest_common_prefix(\"abc\", \"ab\")\n    \"\
    ab\"\n*/\nstring longest_common_prefix(string first, string second) \n{\n    string\
    \ longest_common_prefix = \"\";\n    foreach (string first_prefix; all_prefixes(first))\n\
    \    {\n        foreach (string second_prefix; all_prefixes(second))\n       \
    \ {\n            if (first_prefix == second_prefix && first_prefix.length > longest_common_prefix.length)\n\
    \            {\n                longest_common_prefix = first_prefix;\n      \
    \      }\n        }\n    }\n    return longest_common_prefix;\n}\n \n/*\n Return\
    \ the longest common suffix of two input strings\n    >>> longest_common_suffix(\"\
    abc\", \"bc\")\n    \"bc\"\n*/\nstring longest_common_suffix(string first, string\
    \ second) \n{\n    string longest_common_suffix = \"\";\n    foreach (string first_suffix;\
    \ all_suffixes(first))\n    {\n        foreach (string second_suffix; all_suffixes(second))\n\
    \        {\n            if (first_suffix == second_suffix && first_suffix.length\
    \ > longest_common_suffix.length)\n            {\n                longest_common_suffix\
    \ = first_suffix;\n            }\n        }\n    }\n   \nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe0tk_a6b.d(74): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe0tk_a6b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.array;\n    string[] result;\n    foreach(inout s; string[])\n\
    \    {\n        result ~= string[0..$-1];\n    }\n    return result;\n}\nassert(all_prefixes(\"\
    abc\") == [\"a\", \"ab\", \"abc\"]);\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"\
    bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    import\
    \ std.array;\n    string[] result;\n    foreach(inout s; string[])\n    {\n  \
    \      result ~= string[$-1..$];\n    }\n    return result;\n}\nassert(all_suffixes(\"\
    abc\") == [\"c\", \"bc\", \"abc\"]);\n/*\n Find the single longest common prefix\
    \ of all the provided strings\n    >>> longest_common_prefix(\"abc\", \"abd\"\
    , \"ab\")\n    \"ab\"\n    >>> longest_common_prefix(\"a\", \"b\", \"c\")\n  \
    \  \"\"\n    \n*/\nstring longest_common_prefix(string[] strings) \n{\n    import\
    \ std.array;\n    import std.algorithm;\n    import std.range;\n    import std.typecons;\n\
    \    return (*strings.map!all_prefixes.joiner.array())\n        .only!(x => strings.all!(y\
    \ => y.startsWith(x)))\n        .array;\n}\nassert(longest_common_prefix([\"abc\"\
    , \"abd\", \"ab\"]) == \"ab\");\nassert(longest_common_prefix([\"a\", \"b\", \"\
    c\"]) == \"\");\n/*\n Find the single longest common suffix of all the provided\
    \ strings\n    >>> longest_common_suffix(\"abc\", \"abd\", \"ab\")\n    \"\"\n\
    \    >>> longest_common_suffix(\"a\", \"b\", \"c\")\n    \"\"\n    >>> longest_common_suffix(\"\
    abc\", \"abc\")\n    \"abc\"\n    >>> longest_common_suffix(\"abcabc\", \"bcabc\"\
    )\n    \"bcabc\"\n    >>> longest_\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplm5_4jha.d(19): Error: declaration expected, not `assert`

    /tmp/tmplm5_4jha.d(36): Error: declaration expected, not `assert`

    /tmp/tmplm5_4jha.d(55): Error: declaration expected, not `assert`

    /tmp/tmplm5_4jha.d(56): Error: declaration expected, not `assert`

    /tmp/tmplm5_4jha.d(57): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplm5_4jha.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n  int n = string.length;\n  string[] ret = new string[n];\n  ret[0] = string[0..1];\n\
    \  for (int i = 1; i < n; i++) \n  {\n    ret[i] = string[0..i + 1];\n  }\n  return\
    \ ret;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuv_4itdc.d(11): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmpuv_4itdc.d(12): Error: `string` is used as a type

    /tmp/tmpuv_4itdc.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuv_4itdc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n  import std.array;\n  auto parts = [];\n  foreach (part; chunk(string,\
    \ 1 .. string.length + 1)) \n  {\n    parts ~= part.idup;\n  }\n  return parts;\n\
    }\n/*\nReturn array of all suffixes from shortest to longest of the input string\n\
    >>> all_suffixes(\"abc\")\n[\"abc\", \"bc\", \"c\"]\n*/\nstring[] all_suffixes(string\
    \ string) \n{\n  import std.array;\n  auto parts = [];\n  foreach (part; chunk(string,\
    \ 0 .. string.length)) \n  {\n    parts ~= part.idup;\n  }\n  return parts;\n\
    }\n/*\nA substring of the string is a prefix or suffix of the string\n*/\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpojo9tcck.d(13): Error: found `..` when expecting `,`

    /tmp/tmpojo9tcck.d(28): Error: found `..` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpojo9tcck.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto ret = new string[];\n    auto substr = string;\n    while(substr.length\
    \ > 0) \n    {\n        ret ~= substr;\n        substr = substr[0..$-1];\n   \
    \ }\n    return ret;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpto03gdsg.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpto03gdsg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    // Note: Requires: std.algorithm.sorting\n    import std.algorithm.sorting;\n\
    \    string[] strs;\n    foreach (i; 0 .. string.length + 1)\n    {\n        strs\
    \ ~= string[0 .. i];\n    }\n    sort(strs);\n    return strs;\n}\n/*\n Return\
    \ array of all prefixes from shortest to longest of the input string\n    >>>\
    \ all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] strs;\n    foreach (i; 0 .. string.length + 1)\n \
    \   {\n        strs ~= string[0 .. i];\n    }\n    sort(strs);\n    return strs;\n\
    }\n/*\n Return array of all prefixes from shortest to longest of the input string\n\
    \    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_prefixes(string string) \n{\n    import std.algorithm.sorting;\n    string[]\
    \ strs;\n    foreach (i; 0 .. string.length + 1)\n    {\n        strs ~= string[0\
    \ .. i];\n    }\n    sort(strs);\n    return strs;\n}\n/*\n Return array of all\
    \ prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] strs;\n    foreach (i; 0 .. string.length + 1)\n    {\n  \
    \      strs ~= string[0 .. i];\n    }\n    sort(strs);\n    return strs;\n}\n\
    /*\n Return array of all prefixes from shortest to longest of the input string\n\
    \    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_prefixes(string string) \n{\n    import std.algorithm.sorting;\n    string[]\
    \ strs;\n    foreach (i; 0 .. string.length\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmzzckphr.d(81): Error: found `unittest` when expecting `)`

    /tmp/tmpmzzckphr.d(89): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmzzckphr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.algorithm : iota;\n    size_t[] lengths = iota(string.length);\n\
    \    return lengths.map!(a => string[0 .. a]);\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxdpesfb2.d(11): Error: module `std.algorithm` import `iota` not
    found

    /tmp/tmpxdpesfb2.d(13): Error: no property `map` for type `ulong[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxdpesfb2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    size_t length = string.length;\n    size_t prefixCount = length + 1;\n\
    \    string[] allPrefixes;\n    allPrefixes.length = prefixCount;\n    size_t\
    \ j = 0;\n    foreach(i; 0 .. length)\n    {\n        allPrefixes[j] = string[0\
    \ .. i];\n        j++;\n    }\n    return allPrefixes;\n}\n/*\n Return array of\
    \ all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    size_t length = string.length;\n    size_t suffixCount = length + 1;\n\
    \    string[] allSuffixes;\n    allSuffixes.length = suffixCount;\n    size_t\
    \ j = 0;\n    foreach(i; 0 .. length)\n    {\n        allSuffixes[j] = string[i\
    \ .. $];\n        j++;\n    }\n    return allSuffixes;\n}\n/*\n Return array of\
    \ all the substrings of the input string, except the empty string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    size_t length = string.length;\n    size_t\
    \ subStringCount = length * (length + 1) / 2;\n    string[] allSubStrings;\n \
    \   allSubStrings.length = subStringCount;\n    size_t j = 0;\n    foreach(i;\
    \ 0 .. length)\n    {\n        foreach(k; i .. length)\n        {\n          \
    \  allSubStrings[j] = string[i .. k];\n            j++;\n        }\n    }\n  \
    \  return allSubStrings;\n}\n/*\n Return array of all the superstrings of the\
    \ input string, except the empty string\n    >>> all_superstrings(\"abc\")\n \
    \   [\"abc\", \"bc\", \"c\", \"ab\", \"b\", \"a\"]\n    \n*/\nstring[]\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv_mrcuzv.d(73): Error: no identifier for declarator `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv_mrcuzv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (immutable i; 0 .. string.length) \n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpui8eppg9.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpui8eppg9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto result = new string[];\n    for (size_t i = 0; i < string.length;\
    \ i++)\n    {\n        result ~= string[0..i];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx87wpg0w.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx87wpg0w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    int[] prefix_lengths = iota(string.length + 1);\n    return prefix_lengths.map!(a\
    \ => string[0 .. a]);\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnbci4gyf.d(11): Error: undefined identifier `iota`

    /tmp/tmpnbci4gyf.d(12): Error: no property `map` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnbci4gyf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto size = string.length;\n    string[] result;\n    result.length\
    \ = size;\n    foreach (i; 0 .. size)\n    {\n        result[i] = string[0 ..\
    \ i];\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"\
    bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    auto size\
    \ = string.length;\n    string[] result;\n    result.length = size;\n    foreach\
    \ (i; 0 .. size)\n    {\n        result[i] = string[$ - i .. $];\n    }\n    return\
    \ result;\n}\n/*\n Find the number of elements in each sorted array that are common\
    \ to both, \n in the most efficient way possible (using binary search).\n    \n\
    \    >>> two_sorted_arrays_intersection_count([2, 3, 3, 5, 5, 6, 7, 7, 8, 12],\n\
    \        [5, 5, 6, 8, 8, 9, 10, 10])\n    3\n*/\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn43t1oji.d(12): Error: `string` is used as a type

    /tmp/tmpn43t1oji.d(29): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn43t1oji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (int i; 0 .. string.length)\n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg781czz4.d(11): Error: `string` is used as a type

    /tmp/tmpg781czz4.d(12): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg781czz4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    static if (is(typeof(incl(string(\"\").sliced(\"\")))))\n    {\n  \
    \      string[] res;\n        foreach (incl, i; 0 .. string.length)\n        {\n\
    \            res ~= string[incl(0 .. i)];\n        }\n        return res;\n  \
    \  }\n    else \n    {\n        static assert(0, \"Error: `incl(0 .. 0)` is not\
    \ supported on this version of D.\");\n    }\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzudd4pt8.d(14): Error: found `..` when expecting `)`

    /tmp/tmpzudd4pt8.d(14): Error: found `)` when expecting `;` following statement

    /tmp/tmpzudd4pt8.d(16): Error: found `..` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzudd4pt8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n  static bool[string] _cache;\n  static string[] _prefixes(string string)\n\
    \  {\n    if (string in _cache)\n      return _cache[string];\n    string[] _prefixes\
    \ = [];\n    foreach (prefix; 1 .. string.length + 1)\n      _prefixes ~= string[0\
    \ .. prefix];\n    _cache[string] = _prefixes;\n    return _prefixes;\n  }\n \
    \ return _prefixes(string);\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd2eyisyp.d(11): Error: variable `string` cannot be read at compile
    time

    /tmp/tmpd2eyisyp.d(12): Error: `string` is used as a type

    /tmp/tmpd2eyisyp.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2eyisyp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    assert(!string.empty);\n    auto result = [];\n    foreach (i; 0 ..\
    \ string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_d9_ct6k.d(11): Error: no property `empty` for type `string`

    /tmp/tmp_d9_ct6k.d(14): Error: cannot append type `string` to type `void[]`

    /tmp/tmp_d9_ct6k.d(15): Error: cannot implicitly convert expression `result` of
    type `void[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_d9_ct6k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\treturn all_prefixes(string[0 .. $]);\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164603
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] ret;\n    ret.length = string.length;\n    foreach(i, item;\
    \ string) \n    {\n        ret[i] = item.idup;\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp835tlnb4.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp835tlnb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n    if (string.length == 0) \n        return typeof(return).init;\n    else\
    \ \n        return all_prefixes(string[0 .. $ - 1]) ~ [string];\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5_29ce9x.d(10): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmp5_29ce9x.d(10): Error: declaration expected, not `if`

    /tmp/tmp5_29ce9x.d(12): Error: declaration expected, not `else`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5_29ce9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    size_t len = string.length;\n    string[] ret;\n    ret.length = len;\n\
    \    ret[0] = string[0..1];\n    for (size_t i = 1; i < len; i++)\n    {\n   \
    \     ret[i] = string[0..i+1];\n    }\n    return ret;\n}\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqv130znu.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqv130znu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] res;\n    for (int i = 0; i < string.length; i++)\n    {\n\
    \tres ~= string[0..i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphreg93v9.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphreg93v9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (immutable idx, immutable ch; string)\
    \ \n    {\n        result ~= string[0..idx];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptbk63nla.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptbk63nla.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefixes;\n    foreach (i; 0 .. string.length)\n    {\n  \
    \      prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprkn9o0i0.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprkn9o0i0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (size_t i; 0 .. string.length) \n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n   \
    \ Compute Levenshtein distance between two strings\n    >>> levenshtein(\"abc\"\
    , \"abc\")\n    0\n    >>> levenshtein(\"abc\", \"abcd\")\n    1\n    >>> levenshtein(\"\
    abc\", \"abd\")\n    1\n    >>> levenshtein(\"abc\", \"axc\")\n    1\n    >>>\
    \ levenshtein(\"abc\", \"abx\")\n    1\n    >>> levenshtein(\"abc\", \"ayc\")\n\
    \    2\n    >>> levenshtein(\"abc\", \"axy\")\n    2\n    >>> levenshtein(\"abc\"\
    , \"axb\")\n    2\n    >>> levenshtein(\"abc\", \"xab\")\n    2\n    >>> levenshtein(\"\
    abc\", \"xyz\")\n    3\n*/\nsize_t levenshtein(string a, string b) \n{\n    size_t[string]\
    \ row = new size_t[string]();\n    foreach (size_t i; 0 .. a.length)\n    {\n\
    \        row[a[i .. i]] = i + 1;\n    }\n    foreach (size_t j; 0 .. b.length)\
    \ \n    {\n        size_t k = row[b[j .. j]];\n        row[b[j .. j]] = j + 1;\n\
    \        foreach (size_t i; 0 .. a.length) \n        {\n            size_t c =\
    \ row[a[i .. i]];\n            if (a[i .. i] == b[j .. j])\n            {\n  \
    \              row[a[i .. i]] = k;\n            }\n            else\n        \
    \    {\n                row[a[i .. i]] = min(k, min(row[a[i .. i]], c)) + 1;\n\
    \            }\n            k = c;\n        }\n    }\n    return row[a[$ - 1 ..\
    \ $ - 1]];\n}\n/*\n    Compute Levenshtein distance between two\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl1m6nkj9.d(68): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl1m6nkj9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    return string[0..$].map!(a => string[0..$a]);\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp__fktnrf.d(11): Error: found `a` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__fktnrf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    int n = string.length;\n    string[] result = new string[n];\n    for\
    \ (int i = 0; i < n; i++)\n    {\n        result[i] = string[0..i];\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprum9ig3g.d(11): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmprum9ig3g.d(12): Error: `string` is used as a type

    /tmp/tmprum9ig3g.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprum9ig3g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\tauto res = new string[];\n\tfor (int i = 0; i < string.length; i++)\n\
    \t{\n\t\tres ~= string[0..i];\n\t}\n\treturn res;\n}\n/*\n Return array of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n\tauto res = new string[];\n\tfor (int i = 0; i < string.length; i++)\n\
    \t{\n\t\tres ~= string[$-i..$];\n\t}\n\treturn res;\n}\n//unittest\n{\n\tassert(all_prefixes(\"\
    a\") == [\"a\"]);\n\tassert(all_prefixes(\"ab\") == [\"a\", \"ab\"]);\n\tassert(all_prefixes(\"\
    abc\") == [\"a\", \"ab\", \"abc\"]);\n\tassert(all_suffixes(\"a\") == [\"a\"]);\n\
    \tassert(all_suffixes(\"ab\") == [\"b\", \"ab\"]);\n\tassert(all_suffixes(\"abc\"\
    ) == [\"c\", \"bc\", \"abc\"]);\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptmoq0sd0.d(34): Error: declaration expected, not `{`

    /tmp/tmptmoq0sd0.d(36): Error: declaration expected, not `assert`

    /tmp/tmptmoq0sd0.d(37): Error: declaration expected, not `assert`

    /tmp/tmptmoq0sd0.d(38): Error: declaration expected, not `assert`

    /tmp/tmptmoq0sd0.d(39): Error: declaration expected, not `assert`

    /tmp/tmptmoq0sd0.d(40): Error: declaration expected, not `assert`

    /tmp/tmptmoq0sd0.d(41): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptmoq0sd0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    int len = string.length;\n    string[] ret;\n    ret.length = len;\n\
    \    for (int i = 0; i < len; i++)\n    {\n        ret[i] = string[0..i+1];\n\
    \    }\n    return ret;\n}\n/*\n    Function to return all suffixes of the input\
    \ string\n*/\nstring[] all_suffixes(string string) \n{\n    int len = string.length;\n\
    \    string[] ret;\n    ret.length = len;\n    for (int i = 0; i < len; i++)\n\
    \    {\n        ret[i] = string[i..$];\n    }\n    return ret;\n}\n/*\n    Find\
    \ all prefixes and suffixes of each string and find common\n    prefixes and suffixes,\
    \ return the longest substring in the intersection\n    of all these common suffixes\
    \ and prefixes\n*/\nstring find_longest_common_substring(string a, string b) \n\
    {\n    string[] a_prefs = all_prefixes(a);\n    string[] b_prefs = all_prefixes(b);\n\
    \    string[] a_suffs = all_suffixes(a);\n    string[] b_suffs = all_suffixes(b);\n\
    \    //Find common prefixes and suffixes\n    string[] common_prefs = a_prefs.retain(x\
    \ => b_prefs.contains(x));\n    string[] common_suffs = a_suffs.retain(x => b_suffs.contains(x));\n\
    \    //Find the longest substring in the intersection of common prefixes and suffixes\n\
    \    string longest_substring = \"\";\n    foreach (string pref, string suff;\
    \ common_prefs.zip(common_suffs))\n    {\n        if (pref.length >= longest_substring.length\
    \ && suff.length >= longest_substring.length && pref == suff)\n        {\n   \
    \         longest_substring = pref;\n        }\n    }\n    return longest_substring;\n\
    }\n/*\n    Given two strings find the longest common substring\n*/\nstring longest_common_substring(string\
    \ a, string b) \n{\n   \nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcdh5mx9x.d(65): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdh5mx9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefixes;\n    foreach (i; 0 .. string.length)\n    {\n  \
    \      prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprkn9o0i0.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprkn9o0i0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto new_string = string.dup;\n    for (int i = 0; i < string.length;\
    \ i++)\n    {\n        new_string.remove(new_string.length - 1);\n        auto\
    \ current_string = new_string.dup;\n        new_strings ~= current_string;\n \
    \   }\n    return new_strings;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8nubqq9j.d(14): Error: no property `remove` for type `char[]`

    /tmp/tmp8nubqq9j.d(16): Error: undefined identifier `new_strings`, did you mean
    variable `new_string`?

    /tmp/tmp8nubqq9j.d(18): Error: undefined identifier `new_strings`, did you mean
    variable `new_string`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8nubqq9j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\tsize_t s = string.length;\n\tstring[] prefixes = new string[];\n\t\n\t\
    foreach(i; 0 .. s + 1)\n\t{\n\t\tprefixes ~= string[0 .. i];\n\t}\n\t\n\treturn\
    \ prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph6lr8idz.d(12): Error: `string` is used as a type

    /tmp/tmph6lr8idz.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph6lr8idz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] r;\n    for (size_t i = 0; i < string.length; i++)\n    {\n\
    \        r ~= string[0..i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpokailqb7.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpokailqb7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] words;\n    foreach (i; 0 .. string.length)\n    {\n     \
    \   words ~= string[0 .. i];\n    }\n    return words;\n}\n/*\n    Return a matrix\
    \ of the length of the common prefixes between all of the input words\n    >>>\
    \ word_prefix_matrix([\"ab\", \"abc\", \"abcd\"])\n    [[ 0,  0,  0],\n     [\
    \ 1,  0,  0],\n     [ 2,  1,  0],\n     [ 3,  2,  1]]\n*/\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjve1tlwj.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjve1tlwj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\tstring[] prefixes;\n\tforeach(int x; 0..string.length)\n\t{\n\t\tprefixes\
    \ ~= string[0..x];\n\t}\n\treturn prefixes;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8hcaeome.d(11): Error: `string` is used as a type

    /tmp/tmp8hcaeome.d(12): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8hcaeome.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto prefixes = string[0..$];\n    foreach (i; 0..$) \n    {\n    \
    \    prefixes[i] = string[0..i];\n    }\n    return prefixes;\n}\n/*\n All prefixes\
    \ of numbers 0 through n-1, formatted to three-character\n    strings with leading\
    \ zeros.\n    >>> prefixes_to_3(3)\n    [\"000\", \"001\", \"002\", \"010\", \"\
    011\", \"012\", \"020\", \"021\", \"022\", \"100\",\n    \"101\", \"102\", \"\
    110\", \"111\", \"112\", \"120\", \"121\", \"122\", \"200\", \"201\",\n    \"\
    202\", \"210\", \"211\", \"212\", \"220\", \"221\", \"222\"]\n    \n*/\nstring[]\
    \ prefixes_to_3(int n) \n{\n    auto prefixes = string[];\n    foreach (i; 0..n)\
    \ \n    {\n        foreach (j; 0..n) \n        {\n            foreach (k; 0..n)\
    \ \n            {\n                prefixes ~= format(\"%03d\", [i*100 + j*10\
    \ + k]);\n            }\n        }\n    }\n    return prefixes;\n}\n/*\n Return\
    \ array of all prefixes from shortest to longest of the input string,\n    in\
    \ binary, up to k characters long.\n    >>> bin_prefixes(\"100\", 2)\n    [\"\
    1\", \"10\", \"100\"]\n    \n*/\nstring[] bin_prefixes(string string, int k) \n\
    {\n    auto prefixes = string[];\n    foreach (i; 0..k) \n    {\n        prefixes\
    \ ~= format(\"%0s\", [string[0..i]]);\n    }\n    return prefixes;\n}\n/*\n Return\
    \ the maximum value of an array of n numbers.\n    >>> max_value([1, 7, 12, 14,\
    \ 4])\n    14\n    \n*/\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplxj82gnl.d(12): Error: `$` is valid only inside [] of index or
    slice

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplxj82gnl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.algorithm : map;\n    return\n        iota(0, string.length)\n\
    \        .map!(i => string[0 .. i])\n        .array;\n}\n/*\n Return a map with\
    \ all words as keys and their prefixes as values.\n The longest word should not\
    \ have any prefix.\n    >>> prefix_map([\"a\", \"ab\", \"abc\"])\n    [\"a\":\
    \ [\"a\"], \"ab\": [\"a\", \"ab\"], \"abc\": [\"a\", \"ab\", \"abc\"]]\n*/\nPrefixMap\
    \ prefix_map(string[] words) \n{\n    import std.algorithm : map;\n    return\n\
    \        words\n        .map!(word => tuple(word, all_prefixes(word)))\n     \
    \   .assocArray;\n}\n/*\n Return the prefix map of the words in the input file.\n\
    \    \n*/\nPrefixMap prefix_map(string input_file) \n{\n    import std.algorithm\
    \ : map;\n    return\n        input_file\n        .byLine\n        .map!(line\
    \ => line.stripLeft)\n        .filter!(line => line.length)\n        .map!(word\
    \ => tuple(word, all_prefixes(word)))\n        .assocArray;\n}\n/*\n Return the\
    \ list of all prefixes in the input file.\n    \n*/\nstring[] all_prefixes(string\
    \ input_file) \n{\n    import std.algorithm : map;\n    return\n        input_file\n\
    \        .byLine\n        .map!(line => line.stripLeft)\n        .filter!(line\
    \ => line.length)\n        .map!(all_prefixes)\n        .join;\n}\n/*\n Returns\
    \ the set of all prefixes that are the prefixes of more than one word.\n    >>>\
    \ all_prefixes([\"a\", \"ab\", \"abc\"])\n    [\"a\", \"ab\"]\n*/\nstring[] common_prefixes(string[]\
    \ words) \n{\n    import std.algorithm : map;\n    import std.range : join;\n\
    \    import std.algorithm : count;\n    return\n        words\n        .map!(all_prefixes)\n\
    \        .join\n        .\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmponq372tf.d(76): Error: identifier expected following `.`, not `unittest`

    /tmp/tmponq372tf.d(77): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmponq372tf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    // Determine the length of the given string\n    int length = string.length;\n\
    \    // Set up an empty string array to hold all prefixes\n    string[] all_prefixes;\n\
    \    // For each length from 1 to length, add a prefix of the length to all_prefixes\n\
    \    foreach (i; 1..length+1)\n    {\n        all_prefixes ~= string[0..i];\n\
    \    }\n    return all_prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwzxqt2sy.d(12): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmpwzxqt2sy.d(14): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwzxqt2sy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] ret;\n    foreach(len; 0 .. length(string))\n    {\n     \
    \   ret ~= string[0 .. len];\n    }\n    return ret;\n}\n/*\n Return array of\
    \ all prefixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] ret;\n    foreach(len; 0 .. length(string))\n    {\n     \
    \   ret ~= string[$ - len .. $];\n    }\n    return ret;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] ret;\n    foreach(len; 0 ..\
    \ length(string))\n    {\n        foreach(off; 0 .. (length(string) - len))\n\
    \        {\n            ret ~= string[off .. (off + len)];\n        }\n    }\n\
    \    return ret;\n}\n/*\n Return True if input string contains any characters\
    \ not defined in the alphabet\n    >>> has_non_alphabet_chars(\"abc\", \"abc\"\
    )\n    False\n    >>> has_non_alphabet_chars(\"abc\", \"xyz\")\n    True\n*/\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ya4_m8k.d(11): Error: `string` is used as a type

    /tmp/tmp2ya4_m8k.d(12): Error: undefined identifier `length`

    /tmp/tmp2ya4_m8k.d(26): Error: `string` is used as a type

    /tmp/tmp2ya4_m8k.d(27): Error: undefined identifier `length`

    /tmp/tmp2ya4_m8k.d(41): Error: `string` is used as a type

    /tmp/tmp2ya4_m8k.d(42): Error: undefined identifier `length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ya4_m8k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefixes;\n    foreach (prefix; 0 .. string.length)\n    {\n\
    \        prefixes ~= string[0 .. prefix];\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaha1kxqw.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaha1kxqw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] array = new string[];\n    while (string.length > 0) \n  \
    \  {\n        array ~= string;\n        string = string[0..$-1];\n    }\n    return\
    \ array;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv5qngivb.d(11): Error: `string` is used as a type

    /tmp/tmpv5qngivb.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv5qngivb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    // a string slice of the input string - note: string slices are much\
    \ cheaper to create than strings\n    import std.array : appender;\n    auto prefixes\
    \ = appender!(string[])();\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5gtl3lmm.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5gtl3lmm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto ret = new string[];\n    for (size_t len = 1; len <= string.length;\
    \ ++len)\n        ret ~= string[0 .. len];\n    return ret;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqc5s2ilb.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqc5s2ilb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.algorithm : iota;\n    import std.array : array;\n    import\
    \ std.range : take;\n    import std.typecons : tuple;\n    return tuple(iota(1,\
    \ string.length+1)).array.map!(m => string.take(m)).array;\n}\nunittest\n{\n \
    \   alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl_4eo6ie.d(11): Error: module `std.algorithm` import `iota` not
    found

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl_4eo6ie.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (i; 0 .. string.length) \n    {\n   \
    \     result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Find longest\
    \ common prefix of many strings\n    >>> lcp([\"abcdef\", \"abczzz\", \"abcklm\"\
    ])\n    \"abc\"\n*/\nstring lcp(string[] strings) \n{\n    if (strings.length\
    \ == 0)\n        return \"\";\n    if (strings.length == 1)\n        return strings[0];\n\
    \    string[] prefixes = all_prefixes(strings[0]);\n    foreach (prefix; prefixes)\
    \ \n    {\n        bool match = true;\n        foreach (string; strings[1 .. $])\
    \ \n        {\n            if (!startsWith(string, prefix)) \n            {\n\
    \                match = false;\n                break;\n            }\n     \
    \   }\n        if (match)\n            return prefix;\n    }\n    return \"\"\
    ;\n}\n/*\n Find the common directory name of a list of files\n    >>> common_dirname([\"\
    /one/two/three/four.txt\", \"/one/two/five.txt\"])\n    \"/one/two\"\n    >>>\
    \ common_dirname([\"/one/two/three/four.txt\", \"/one/five.txt\"])\n    \"/\"\n\
    */\nstring common_dirname(string[] strings) \n{\n    if (strings.length == 0)\n\
    \        return \"\";\n    if (strings.length == 1)\n        return dirname(strings[0]);\n\
    \    string[] dirs = strings.map!dirname;\n    return dirname(lcp(dirs));\n}\n\
    /*\n Return a list of all directory names (not including the file name)\n of a\
    \ file or directory\n    >>> get_dirnames(\"/one/two/three/four.txt\")\n    [\"\
    /one\", \"/one/two\", \"/one/two/three\"]\n    >>> get_dirnames(\"/one/two/three\"\
    )\n    [\"/one\", \"/one/two\", \"/one/two/three\"]\n*/\nstring[] get_dirnames(string\
    \ path) \n{\n    string[] result;\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr9dtn_w2.d(73): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr9dtn_w2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] output;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   output ~= string[0 .. i];\n    }\n    return output;\n}\n/*\nReturns a list\
    \ of child nodes for a particular key, node pair\n    >>> follow_path(bob_tree,\
    \ \"bob\")\n    []\n*/\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpng_1ywh7.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpng_1ywh7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto len = string.length;\n    string[] prefs;\n    foreach(i; 0 ..\
    \ len)\n    {\n        prefs ~= string[0 .. i];\n    }\n    return prefs;\n}\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpodwd67pa.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpodwd67pa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.algorithm;\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfyltizg7.d(12): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfyltizg7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\t//code\n\tstring[] prefixes;\n\tforeach(i;0..string.length)\n\t{\n\t\t\
    string temp = string[0..i];\n\t\tprefixes ~= temp;\n\t}\n\treturn prefixes;\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp02eyw65r.d(12): Error: `string` is used as a type

    /tmp/tmp02eyw65r.d(15): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp02eyw65r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\tstring[] result;\n\tforeach(i; 0 .. string.length)\n\t{\n\t\tresult ~=\
    \ string[0 .. i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo1dhpxdh.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1dhpxdh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.typecons;\n    import std.algorithm;\n    return string.to!(immutable(char))[].prefaces.map!(a\
    \ => a.idup).array;\n}\n/*\nReturn array of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"\
    ]\n*/\nstring[] all_suffixes(string string) \n{\n    import std.typecons;\n  \
    \  import std.algorithm;\n    return string.to!(immutable(char))[].suffices.map!(a\
    \ => a.idup).array;\n}\n/*\nReturn the longest common prefix of 2 strings.\nIf\
    \ either string is empty, return an empty string.\nNote this returns a string\
    \ NOT an int\n    >>> longest_common_prefix(\"abc\", \"ab\")\n    \"ab\"\n   \
    \ >>> longest_common_prefix(\"abc\", \"ad\")\n    \"a\"\n    >>> longest_common_prefix(\"\
    abc\", \"\")\n    \"\"\n*/\nstring longest_common_prefix(string string1, string\
    \ string2) \n{\n    string1 = string1.idup;\n    string2 = string2.idup;\n   \
    \ import std.algorithm;\n    import std.typecons;\n    //Find all prefixes of\
    \ string1\n    auto prefixes = all_prefixes(string1);\n    //Find the first prefix\
    \ from string1 that exists in the suffixes of string2\n    foreach(prefix; prefixes)\
    \ \n    {\n        if(string2.canFind(prefix))\n            return prefix;\n \
    \   }\n    return \"\";\n}\n/*\nReturn the longest common suffix of 2 strings.\n\
    If either string is empty, return an empty string.\nNote this returns a string\
    \ NOT an int\n    >>> longest_common_suffix(\"abc\", \"ab\")\n    \"ab\"\n   \
    \ >>> longest_common_suffix(\"abc\", \"ad\")\n    \"c\"\n    >>> longest_common_suffix(\"\
    abc\", \"\")\n    \"\"\n*/\nstring longest_common_suffix(string string1, string\
    \ string2) \n{\n    string1 = string1.idup;\n    string2 =\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmq25lgxf.d(68): Error: expression expected, not `unittest`

    /tmp/tmpmq25lgxf.d(69): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmq25lgxf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\tauto prefixes = new string[string.length+1];\n\tforeach(i; 0..string.length+1)\n\
    \t{\n\t\tprefixes[i] = string[0..i];\n\t}\n\treturn prefixes;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9l0g8tad.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9l0g8tad.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto result = new string[];\n    foreach (index, string c; string)\
    \ \n    {\n        result ~= string[0..index];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph45cgtl1.d(11): Error: `string` is used as a type

    /tmp/tmph45cgtl1.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph45cgtl1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto result = new string[];\n    foreach (i; 0 .. string.length) \n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n\
    Return array of all suffixes from shortest to longest of the input string\n  \
    \  >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    auto result = new string[];\n    foreach (i; 0 .. string.length)\
    \ \n    {\n        result ~= string[$ - i .. $];\n    }\n    return result;\n\
    }\n/*\nGet the longest common prefix of all strings in the array\n    >>> common_prefix([\"\
    abc\", \"abd\", \"abcdefg\"])\n    \"ab\"\n    \n    >>> common_prefix([\"abc\"\
    , \"abd\", \"\"])\n    \"\"\n    \n    >>> common_prefix([\"\"])\n    \"\"\n*/\n\
    string common_prefix(string[] strings) \n{\n    if (strings.length == 0) \n  \
    \  {\n        return \"\";\n    }\n    else if (strings.length == 1) \n    {\n\
    \        return strings[0];\n    }\n    else \n    {\n        auto prefix_length\
    \ = strings[0].length;\n        foreach (i; 1 .. strings.length) \n        {\n\
    \            prefix_length = min(prefix_length, strings[i].length);\n        \
    \    foreach (j; 0 .. prefix_length) \n            {\n                if (strings[0][j]\
    \ != strings[i][j]) \n                {\n                    prefix_length = j;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return strings[0][0 .. prefix_length];\n    }\n}\n/*\nGet the longest common\
    \ suffix of all strings in the array\n    >>> common_suffix([\"abc\", \"abd\"\
    , \"abcdefg\"])\n    \"fg\"\n    \n    >>> common_suffix([\"abc\", \"abd\", \"\
    \"])\n    \"\"\n    \n    >>> common_suffix([\"\"])\n    \"\"\n*/\nstring common_suffix(\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgamfo5f0.d(83): Error: basic type expected, not `unittest`

    /tmp/tmpgamfo5f0.d(83): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgamfo5f0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    for (int i = 0; i < string.length; i++) \n  \
    \  {\n        result ~= string[0..i];\n    }\n    return result;\n}\n/*\nFind\
    \ the first n elements of a Sequence.\n   >>> auto a = [1, 2, 3, 4, 5];\n   >>>\
    \ take(a, 4)\n   [1, 2, 3, 4]\n   >>> take(a, 0)\n   []\n   >>> take(a, 10)\n\
    \   [1, 2, 3, 4, 5]\n   >>> take(a, -1)\n   []\n*/\nT[] take(T)(T[] array, int\
    \ n) if (isInputRange!T) \n{\n    T[] result;\n    foreach (i; 0 .. n) \n    {\n\
    \        if (i >= array.length) \n        {\n            break;\n        }\n \
    \       result ~= array[i];\n    }\n    return result;\n}\n/*\nConverts an array\
    \ of values into an array of indexes.\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4qfr9xa3.d(43): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4qfr9xa3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (index,i;0..string.length)\n        result\
    \ ~= string[0..i];\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplwuf_al5.d(12): Error: found `..` when expecting `)`

    /tmp/tmplwuf_al5.d(12): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplwuf_al5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] ret;\n    foreach(uint idx; 0 .. string.length) \n    {\n\
    \        ret ~= string[0 .. idx];\n    }\n    return ret;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvhpj_y2n.d(11): Error: `string` is used as a type

    /tmp/tmpvhpj_y2n.d(12): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `uint`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvhpj_y2n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\tstring[] prefixes;\n\tforeach(i; 0 .. string.length) \n\t{\n\t\tprefixes\
    \ ~= string[0 .. i];\n\t}\n\treturn prefixes;\n}\n/*\n * Return the suffix of\
    \ a string - the string without the first element\n * \n * Example: \n * \n *\
    \ >>> suffix(\"abc\")\n * \"bc\"\n * \n */\nstring suffix(string string) \n{\n\
    \treturn string[1 .. $];\n}\n/*\n Return a table of all possible split points\
    \ for a string, where a split point is an index in the string.\n    >>> all_split_points(\"\
    abc\")\n    { 0: true, 1: true, 2: true }\n    \n*/\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp460f29t_.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp460f29t_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    int prefix_length = 1;\n    string[] result;\n    while (prefix_length\
    \ <= string.length)\n    {\n        result ~= string[0..prefix_length];\n    \
    \    prefix_length += 1;\n    }\n    return result;\n}\n \n//TODO: make it work\
    \ with arrays \n//TODO: make it work with two arrays\nstring[] all_prefixes(string[]\
    \ string_array)\n{\n    string[] result;\n    foreach(string element; string_array)\n\
    \    {\n        result ~= all_prefixes(element);\n    }\n    return result;\n\
    }\n/*\n Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    int suffix_length = 1;\n    string[] result;\n\
    \    while (suffix_length <= string.length)\n    {\n        result ~= string[suffix_length..$];\n\
    \        suffix_length += 1;\n    }\n    return result;\n}\n/*\n Given a sorted\
    \ array, return the index of the first occurrence of the input element,\n or -1\
    \ if the element is not found\n    >>> find_first([1,2,3,4,5], 4)\n    3\n   \
    \ >>> find_first([1,2,3,4,5], -1)\n    -1\n    >>> find_first([], 4)\n    -1\n\
    \    \n*/\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7wxy44lv.d(12): Error: `string` is used as a type

    /tmp/tmp7wxy44lv.d(41): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7wxy44lv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefixes;\n    for (int i = 0; i < string.length; i++)\n \
    \   {\n        prefixes ~= string[0..i];\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp21n7r8gv.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp21n7r8gv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.algorithm.iteration;\n    import std.range;\n    import\
    \ std.array;\n    import std.conv;\n    string[] strArray;\n    foreach(string\
    \ prefix; take(string.length,string))\n    {\n        strArray ~= to!string(prefix);\n\
    \    }\n    return strArray;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq673aylm.d(15): Error: `string` is used as a type

    /tmp/tmpq673aylm.d(16): Error: template `std.range.take` cannot deduce function
    from argument types `!()(ulong, string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/range/package.d(2006):        `std.range.take(R)(R
    input, size_t n) if (isInputRange!(Unqual!R))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq673aylm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] strs;\n    foreach(i; 1..string.length) \n    {\n        strs\
    \ ~= string[0..i];\n    }\n    return strs;\n}\n/*\n Process the sequence and\
    \ output a new one with the results.\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr7p662m6.d(18): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr7p662m6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto l = length(string);\n    string[] res;\n    foreach(int i; 0..l)\
    \ \n    {\n        res ~= string[0..i];\n    }\n    return res;\n}\n/*\n Return\
    \ array of all suffixes from shortest to longest of the input string\n    >>>\
    \ all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    auto l = length(string);\n    string[] res;\n    foreach(int\
    \ i; 0..l) \n    {\n        res ~= string[i..$];\n    }\n    return res;\n}\n\
    /*\n Return all substrings of the string\n    >>> all_substrings(\"abc\")\n  \
    \  [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    auto prefixes = all_prefixes(string);\n    string[] res;\n\
    \    foreach(string p; prefixes) \n    {\n        res ~= all_suffixes(p);\n  \
    \  }\n    return res;\n}\n/*\n Computes the longest common prefix between two\
    \ arrays of strings.\n    >>> longest_common_prefix([\"a\", \"ab\", \"abc\"],\
    \ [\"a\", \"ac\", \"ad\"])\n    \"a\"\n    >>> longest_common_prefix([\"a\", \"\
    ab\", \"abc\"], [\"a\", \"ac\", \"ad\"], [\"a\", \"ac\", \"ad\", \"ace\"])\n \
    \   \"a\"\n    >>> longest_common_prefix([\"a\", \"ab\", \"abc\"], [\"a\", \"\
    ac\", \"ad\"], [\"a\", \"ac\", \"ad\", \"ace\"], [\"a\", \"ac\", \"ad\", \"ace\"\
    , \"aced\"])\n    \"a\"\n    \n*/\nstring longest_common_prefix(string[] a, string[]\
    \ b) \n{\n    foreach(string s; a) \n    {\n        if (b.canFind(s)) \n     \
    \   {\n            return s;\n        }\n    }\n    return \"\";\n}\n/*\n Computes\
    \ the longest common suffix between\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5alu4fnd.d(72): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5alu4fnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    return \"\".all_prefixesOf(string);\n}\n \n/*\nReturn array of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    return \"\".all_suffixesOf(string);\n}\n \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd6emmeb4.d(11): Error: no property `all_prefixesOf` for type `string`

    /tmp/tmpd6emmeb4.d(21): Error: no property `all_suffixesOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd6emmeb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    // TODO\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoum32t2z.d(9): Error: function `tmpoum32t2z.all_prefixes` has no
    `return` statement, but is expected to return a value of type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoum32t2z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] ret = [];\n    size_t i = 0;\n    while (i < string.length)\
    \ \n    {\n        ret ~= string[0..$i];\n        i++;\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqhwebxuo.d(15): Error: found `i` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqhwebxuo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    return array(map!((p) => take!(string, p.length))(iota(string.length)));\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmkip032j.d(11): Error: undefined identifier `array`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmkip032j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (prefix; 1 .. string.length + 1) \n \
    \   {\n        result ~= string[0 .. prefix - 1];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw1wsvmaf.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw1wsvmaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] all_prefixes;\n    foreach (size_t i; 0 .. string.length +\
    \ 1) \n    {\n        all_prefixes ~= string[0 .. i];\n    }\n    return all_prefixes;\n\
    }\n/*\n    >>> longest_common_prefix(\"abcdef\", \"abc\")\n    \"abc\"\n*/\nstring\
    \ longest_common_prefix(string a, string b) \n{\n    foreach (size_t i; 0 .. a.length\
    \ + 1) \n    {\n        if (b.startsWith(a[0 .. i])) \n        {\n           \
    \ return a[0 .. i];\n        }\n    }\n    return \"\";\n}\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2t0c4u_a.d(11): Error: `string` is used as a type

    /tmp/tmp2t0c4u_a.d(26): Error: no property `startsWith` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2t0c4u_a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto len = string.length;\n    string[] prefixes;\n    for (immutable\
    \ index; 0 <= index < len; index++) \n    {\n        prefixes ~= string[0..index];\n\
    \    }\n    return prefixes;\n}\n/*\nReturn the longest common prefix of two strings\n\
    \    >>> longest_common_prefix(\"acbac\", \"ac\")\n    \"ac\"\n*/\nstring longest_common_prefix(string\
    \ string1, string string2) \n{\n    auto len1 = string1.length;\n    auto len2\
    \ = string2.length;\n    auto min_len = min(len1, len2);\n    for (immutable index;\
    \ 0 <= index < min_len; index++) \n    {\n        if (string1[index] != string2[index])\
    \ \n        {\n            return string1[0..index];\n        }\n    }\n    return\
    \ string1[0..min_len];\n}\n/*\nReturn the shortest common prefix that contains\
    \ all the strings\n    >>> shortest_common_prefix([\"ab\", \"ac\", \"adc\"])\n\
    \    \"a\"\n*/\nstring shortest_common_prefix(string[] strings) \n{\n    auto\
    \ prefixes = all_prefixes(strings[0]);\n    auto shortest_common_prefix = \"\"\
    ;\n    foreach (immutable prefix; prefixes) \n    {\n        auto all_contain_prefix\
    \ = true;\n        foreach (immutable string; strings) \n        {\n         \
    \   if (!string.startsWith(prefix)) \n            {\n                all_contain_prefix\
    \ = false;\n                break;\n            }\n        }\n        if (all_contain_prefix)\
    \ \n        {\n            shortest_common_prefix = prefix;\n            break;\n\
    \        }\n    }\n    return shortest_common_prefix;\n}\n/*\nReturn a tuple of\
    \ the longest common prefixes for each key in the map\n    >>> longest_common_prefixes([\"\
    abc\": \"abc\", \"abd\": \"ab\"])\n    [\"ab\": \"ab\"]\n*/\n@safe unittest \n\
    {\n    static assert(all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmp9c_w_e.d(13): Error: no identifier for declarator `index`

    /tmp/tmpmp9c_w_e.d(13): Error: found `<` when expecting `)`

    /tmp/tmpmp9c_w_e.d(13): Error: found `)` when expecting `;` following statement

    /tmp/tmpmp9c_w_e.d(29): Error: no identifier for declarator `index`

    /tmp/tmpmp9c_w_e.d(29): Error: found `<` when expecting `)`

    /tmp/tmpmp9c_w_e.d(29): Error: found `)` when expecting `;` following statement

    /tmp/tmpmp9c_w_e.d(74): Error: found `unittest` when expecting `)`

    /tmp/tmpmp9c_w_e.d(75): Error: found `{` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmp9c_w_e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    // Preallocate max length with each prefix being unique\n    string[]\
    \ result = new string[string.length];\n    int resultCounter = 0;\n    for (int\
    \ i = 0; i < string.length; i++) \n    {\n        result[resultCounter] = string[0..i];\n\
    \        resultCounter++;\n    }\n    return result;\n}\n/*\n Return array of\
    \ all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    // Preallocate max length with each suffix being unique\n    string[]\
    \ result = new string[string.length];\n    int resultCounter = 0;\n    for (int\
    \ i = 0; i < string.length; i++) \n    {\n        result[resultCounter] = string[i..$];\n\
    \        resultCounter++;\n    }\n    return result;\n}\n// Two strings are defined\
    \ to be anagrams of each other if they contain the same number of characters and\
    \ have the same characters in them but in a different order.\n// This function\
    \ takes two strings as input and returns true if they are anagrams of each other\
    \ and false otherwise.\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsp63eduz.d(12): Error: `string` is used as a type

    /tmp/tmpsp63eduz.d(12): Error: `string` is used as a type

    /tmp/tmpsp63eduz.d(29): Error: `string` is used as a type

    /tmp/tmpsp63eduz.d(29): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsp63eduz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto res = [];\n    foreach (i; 1..string.length+1) \n    {\n     \
    \   res ~= string[0..i];\n    }\n    return res;\n}\n/*\n Return array of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    auto res = [];\n    foreach (i; 1..string.length+1) \n    {\n     \
    \   res ~= string[$-i..$];\n    }\n    return res;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string\
    \ string) \n{\n    auto prefixes = all_prefixes(string);\n    auto suffixes =\
    \ all_suffixes(string);\n    return prefixes ~ suffixes;\n}\n/*\n Return true\
    \ if the string is a suffix of the input string\n    >>> is_suffix(\"abc\", \"\
    bc\")\n    true\n    >>> is_suffix(\"abc\", \"ac\")\n    false\n*/\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph5386sao.d(14): Error: cannot append type `string` to type `void[]`

    /tmp/tmph5386sao.d(16): Error: cannot implicitly convert expression `res` of type
    `void[]` to `string[]`

    /tmp/tmph5386sao.d(29): Error: cannot append type `string` to type `void[]`

    /tmp/tmph5386sao.d(31): Error: cannot implicitly convert expression `res` of type
    `void[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph5386sao.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    return map!((x) => string[0..x])(iota(1, string.length + 1));\n}\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp32_m81aq.d(11): Error: template instance `map!((x) => string[0..x])`
    template `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp32_m81aq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    for (size_t i = 0; i < string.length; i++) \n\
    \    {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc77fjfr9.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc77fjfr9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\tint len = string.length;\n\tstring[] ret = new string[len];\n\tforeach(int\
    \ i, inout ret) \n\t{\n\t\tret[i] = string[0..i];\n\t}\n\treturn ret;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjd6kbn2l.d(13): Error: no identifier for declarator `ret`

    /tmp/tmpjd6kbn2l.d(13): Error: found `)` when expecting `;`

    /tmp/tmpjd6kbn2l.d(17): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjd6kbn2l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto result = new string[](string.length);\n    foreach (i, ref prefix;\
    \ result) \n    {\n        prefix = string[0..i+1];\n    }\n    return result;\n\
    }\n/*\nReturn longest common prefix of a[i] and b[i]\n    >>> longest_common_prefix([\"\
    ab\", \"abc\", \"abcd\"], [\"ab\", \"cde\", \"\"])\n    [\"ab\", \"\", \"\"]\n\
    */\nstring[] longest_common_prefix(string[] a, string[] b) \n{\n    assert(a.length\
    \ == b.length);\n    return zip(a, b).map!((ref a, ref b) {\n        foreach (i,\
    \ prefix; all_prefixes(a)) \n        {\n            if (b.startsWith(prefix))\
    \ \n            {\n                return prefix;\n            }\n        }\n\
    \        return \"\";\n    });\n}\n/*\nReturn all common prefixes of the input\
    \ array\n    >>> common_prefixes([\"ab\", \"abc\", \"abcd\"])\n    [\"ab\", \"\
    abc\"]\n    >>> common_prefixes([\"ab\", \"abc\", \"abcd\", \"abce\"])\n    [\"\
    ab\"]\n    >>> common_prefixes([\"ab\", \"abc\", \"abcd\", \"abce\", \"abcd\"\
    ])\n    [\"ab\"]\n*/\nstring[] common_prefixes(string[] input) \n{\n    if (input.length\
    \ == 0)\n    {\n        return [];\n    }\n    else if (input.length == 1)\n \
    \   {\n        return input;\n    }\n    else\n    {\n        return common_prefixes(longest_common_prefix(input[0..$/2],\
    \ input[$/2..$]));\n    }\n}\n/*\nReturn all common prefixes of a and b\n    >>>\
    \ all_common_prefixes(\"ab\", \"abcde\")\n    [\"a\", \"ab\"]\n*/\nstring[] all_common_prefixes(string\
    \ a, string b) \n{\n    return common_prefixes(all_prefixes(a) ~ all_prefixes(b));\n\
    }\n/*\nReturn all common prefixes of the input\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxwz5sbwe.d(70): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxwz5sbwe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto result = new string[](string.length);\n    foreach (size_t i,\
    \ string prefix; i < string.length; ++i)\n    {\n        result[i] = prefix;\n\
    \        prefix ~= string[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxt0blhwn.d(12): Error: found `;` when expecting `)`

    /tmp/tmpxt0blhwn.d(12): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxt0blhwn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    int first = 0;\n    int last = string.length - 1;\n    string[] result;\n\
    \    foreach(i; first..last)\n    {\n        //TODO: find a way to add all of\
    \ i's substrings to result\n        result[i] = string[0..i];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ybp8rwf.d(12): Error: cannot implicitly convert expression `string.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmp5ybp8rwf.d(13): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ybp8rwf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefixes;\n    foreach (i; 0 .. string.length)\n    {\n  \
    \      prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprkn9o0i0.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprkn9o0i0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.string;\n    int len = string.length;\n    string[] array;\n\
    \    array.length = len;\n    foreach(i; 0..len) \n    {\n        array[i] = string[0..i];\n\
    \    }\n    return array;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5oc6zv7k.d(12): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmp5oc6zv7k.d(13): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5oc6zv7k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164588
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    string temp;\n    foreach(i;0..string.length)\n\
    \    {\n        temp = string[0..i];\n        result ~= temp;\n    }\n    return\
    \ result;\n}\n/*\n    Return array of all prefixes from shortest to longest of\
    \ the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"\
    ]\n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    string\
    \ temp;\n    foreach(i;0..string.length)\n    {\n        temp = string[i..string.length];\n\
    \        result ~= temp;\n    }\n    return result;\n}\n/*\n    Return array of\
    \ all suffixes from shortest to longest of the input string\n    >>> substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] substrings(string\
    \ string) \n{\n    string[] result;\n    string temp;\n    foreach(i;0..string.length)\n\
    \    {\n        temp = string[i..string.length];\n        foreach(j;1..temp.length)\n\
    \        {\n            result ~= temp[0..j];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpngshxcue.d(11): Error: `string` is used as a type

    /tmp/tmpngshxcue.d(12): Error: `string` is used as a type

    /tmp/tmpngshxcue.d(27): Error: `string` is used as a type

    /tmp/tmpngshxcue.d(28): Error: `string` is used as a type

    /tmp/tmpngshxcue.d(43): Error: `string` is used as a type

    /tmp/tmpngshxcue.d(44): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngshxcue.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\t\n\tstring[] result = new string[string.length + 1];\n\tforeach(int i;\
    \ 0 .. string.length)\n\t{\n\t\tresult[i] = string[0 .. i];\n\t}\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpabmgco1n.d(12): Error: `string` is used as a type

    /tmp/tmpabmgco1n.d(12): Error: `string` is used as a type

    /tmp/tmpabmgco1n.d(13): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpabmgco1n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (size_t i; 0 .. string.length + 1)\n\
    \    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz1kz2ngi.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz1kz2ngi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164586
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.range;\n    return string.take(string.length).scan!\"a~a[0..$]\"\
    ;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_la74ei5.d(12): Error: no property `scan` for type `Take!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_la74ei5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto ret = split(string[0..$-1], \"\");\n    foreach(i; 0..ret.length)\
    \ {\n        ret[i] = string[0..i];\n    }\n    return ret;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw61tq7va.d(11): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw61tq7va.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefixes;\n    foreach (i; 0 .. string.length) \n    {\n \
    \       prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\n \n \n \n\
    /*\nReturn array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"abc\", \"bc\", \"c\"]\n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] suffixes;\n    foreach (i; string.length .. 0) \n\
    \    {\n        suffixes ~= string[i .. $];\n    }\n    return suffixes;\n}\n\
    \ \n/*\nReturn array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    string[] substrings;\n\
    \    foreach (i; 0 .. string.length) \n    {\n        foreach (j; i .. string.length)\
    \ \n        {\n            substrings ~= string[i .. j];\n        }\n    }\n \
    \   return substrings;\n}\n \n \n \n/*\nWrapper around the C strstr, use global\
    \ match instead of matching anywhere in string\n*/\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg3nioqt0.d(11): Error: `string` is used as a type

    /tmp/tmpg3nioqt0.d(28): Error: `string` is used as a type

    /tmp/tmpg3nioqt0.d(43): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3nioqt0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    immutable size = string.length;\n    string[] result;\n    result.length\
    \ = size;\n    foreach (prefix_size; 0 .. size) \n    {\n        result[prefix_size]\
    \ = string[0 .. prefix_size];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_bx05b7s.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_bx05b7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    int len = string.length;\n    string[] prefixes = new string[len];\n\
    \    for (int i = 0; i < len; i++)\n    {\n        prefixes[i] = string[0..i+1];\n\
    \    }\n    return prefixes;\n}\n/*\n Return the longest common prefix of the\
    \ input strings\n    >>> longest_common_prefix([\"ab\", \"abc\", \"abcd\"])\n\
    \    \"ab\"\n    >>> longest_common_prefix([\"abcd\", \"ab\", \"abc\"])\n    \"\
    ab\"\n    >>> longest_common_prefix([\"abcd\", \"abc\", \"def\"])\n    \"\"\n\
    */\nstring longest_common_prefix(string[] strings) \n{\n    assert(strings.length\
    \ > 0);\n    int len = strings.length;\n    auto min_prefix_len = min(strings.map!(x\
    \ => x.length));\n    for (int i = 0; i < min_prefix_len; i++)\n    {\n      \
    \  char ch = strings[0][i];\n        for (int j = 1; j < len; j++)\n        {\n\
    \            if (strings[j][i] != ch)\n            {\n                return strings[0][0..i];\n\
    \            }\n        }\n    }\n    return strings[0][0..min_prefix_len];\n\
    }\n/*\n Return true iff the first string is a prefix of the second\n    >>> prefix(\"\
    ab\", \"abc\")\n    true\n    >>> prefix(\"abc\", \"ab\")\n    false\n*/\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwto46y22.d(11): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmpwto46y22.d(12): Error: `string` is used as a type

    /tmp/tmpwto46y22.d(12): Error: `string` is used as a type

    /tmp/tmpwto46y22.d(31): Error: cannot implicitly convert expression `strings.length`
    of type `ulong` to `int`

    /tmp/tmpwto46y22.d(32): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwto46y22.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    result ~= string.idup;\n    while (string.length\
    \ > 1) \n    {\n        string = string[0..$-1];\n        result ~= string.idup;\n\
    \    }\n    return result;\n}\n//XXX unicode bug?\n//all_prefixes(\"\u672C\u8A9E\
    \")\n/*\n Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result;\n    result ~= string.idup;\n\
    \    while (string.length > 1) \n    {\n        string = string[1..$];\n     \
    \   result ~= string.idup;\n    }\n    return result;\n}\n/*\n Return array of\
    \ all substrings in the input string\n    >>> all_substrings(\"abc\")\n    [\"\
    a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    size_t length = string.length;\n    for\
    \ (size_t i = 0; i < length; i++) \n    {\n        for (size_t j = i + 1; j <=\
    \ length; j++) \n        {\n            result ~= string[i..j];\n        }\n \
    \   }\n    return result;\n}\n/*\n Return array of all substrings in the input\
    \ string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"\
    , \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes_of_string(string string) \n\
    {\n    string[] result;\n    size_t length = string.length;\n    for (size_t i\
    \ = 0; i < length; i++) \n    {\n        for (size_t j = i + 1; j <= length; j++)\
    \ \n        {\n            result ~= string[i..j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return array of strings with length of given length\n   \n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaj55gdhu.d(77): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaj55gdhu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    int length = string.length;\n    string[] s = new string[];\n    for\
    \ (int i = 0; i < length; i++)\n    {\n        s ~= string[0..i];\n    }\n   \
    \ return s;\n}\n// not used anymore\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq2079r_3.d(11): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmpq2079r_3.d(12): Error: `string` is used as a type

    /tmp/tmpq2079r_3.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq2079r_3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n    nothrow @safe @nogc {\n    import std.algorithm;\n    import std.range;\n\
    \    import std.conv;\n    string[] ret;\n    size_t len = string.length;\n  \
    \  foreach(i; 0..len)\n        ret ~= string[0..i];\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2749j2h7.d(14): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2749j2h7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\tstring[] ret;\n\tstring current;\n\tforeach(i; 0 .. string.length)\n\t\
    {\n\t\tret ~= string[0 .. i];\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp_zezobn.d(11): Error: `string` is used as a type

    /tmp/tmpp_zezobn.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp_zezobn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\tstring[] prefixes;\n\tforeach(int length; 0 .. length_of_string(string))\
    \ \n\t{\n\t\tprefixes ~=  to_string(string[0 .. length]);\n\t}\n\treturn prefixes;\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwmldixm_.d(11): Error: `string` is used as a type

    /tmp/tmpwmldixm_.d(12): Error: undefined identifier `length_of_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwmldixm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto result = new string[string.length + 1];\n    foreach (i, prefix;\
    \ string.byChunk(i + 1))\n        result[i] = prefix;\n    return result;\n}\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzy_2kzgs.d(11): Error: `string` is used as a type

    /tmp/tmpzy_2kzgs.d(12): Error: no property `byChunk` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzy_2kzgs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    int n = string.length;\n    string[] result = new string[];\n    for\
    \ (int i = 0; i < n; i++)\n    {\n        result ~= string[0..i];\n    }\n   \
    \ return result;\n}\n/*\nThis function returns the maximum of the two arguments.\n\
    */\ndouble max(double a, double b)\n{\n    if (a > b)\n    {\n        return a;\n\
    \    }\n    else \n    {\n        return b;\n    }\n}\n/*\n This function returns\
    \ a tuple of the two arguments with the first element\n    the maximum of the\
    \ two, and the second element the minimum of the two.\n*/\nTuple!(double, double)\
    \ max_min(double a, double b)\n{\n    if (a > b)\n    {\n        return tuple(a,\
    \ b);\n    }\n    else \n    {\n        return tuple(b, a);\n    }\n}\n/*\nA simple\
    \ predicate to determine if a string s is part of a longer string l\n\"\"\"\n\
    >>> is_substring(\"mar\", \"drama\")\ntrue\n>>> is_substring(\"mara\", \"drama\"\
    )\nfalse\n*/\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp27q5vbf1.d(11): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmp27q5vbf1.d(12): Error: `string` is used as a type

    /tmp/tmp27q5vbf1.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp27q5vbf1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    immutable len = string.length;\n    string[] result;\n    result.length\
    \ = len;\n    foreach (index, ref elem; result)\n    {\n        elem = string[0..index+1];\n\
    \    }\n    return result;\n}\nstruct State {\n    size_t parent;\n    size_t\
    \ char_index;\n    size_t depth;\n    size_t suffix_link;\n    size_t terminal_link;\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv0rqwhag.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv0rqwhag.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (i; 0 .. string.length + 1) \n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n    Return\
    \ index of s in container or -1 if not found.\n    >>> index_of(\"abc\", [\"a\"\
    , \"b\", \"c\"])\n    0\n    >>> index_of(\"abcd\", [\"a\", \"b\", \"c\"])\n \
    \   -1\n*/\nsize_t index_of(T)(T s, T[] container) \n{\n    size_t i = 0;\n  \
    \  foreach (e; container) \n    {\n        if (e == s) \n        {\n         \
    \   return i;\n        }\n        i++;\n    }\n    return -1;\n}\n/*\n    Return\
    \ the next index of s in container starting at start_index.\n    >>> next_index_of(\"\
    a\", [\"a\", \"b\", \"c\"], 0)\n    0\n    >>> next_index_of(\"a\", [\"a\", \"\
    b\", \"c\"], 1)\n    -1\n    >>> next_index_of(\"b\", [\"a\", \"b\", \"c\"], 0)\n\
    \    1\n*/\nsize_t next_index_of(T)(T s, T[] container, size_t start_index) \n\
    {\n    for (size_t i = start_index; i < container.length; i++) \n    {\n     \
    \   if (container[i] == s) \n        {\n            return i;\n        }\n   \
    \ }\n    return -1;\n}\n/*\n    Return a map with the first occurence of all elements\
    \ as keys\n    and their index as value.\n    >>> unique_index_map([\"a\", \"\
    b\", \"c\", \"a\"])\n    [\"a\": 0, \"b\": 1, \"c\": 2]\n*/\nsize_t[T] unique_index_map(T[]\
    \ container) \n{\n    size_t[T] result;\n    size_t i = 0;\n    foreach (e; container)\
    \ \n    {\n        if (!result.contains(e)) \n        {\n            result[\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkxujphu2.d(73): Error: expression expected, not `unittest`

    /tmp/tmpkxujphu2.d(74): Error: found `{` when expecting `,`

    /tmp/tmpkxujphu2.d(75): Error: expression expected, not `alias`

    /tmp/tmpkxujphu2.d(75): Error: found `candidate` when expecting `,`

    /tmp/tmpkxujphu2.d(75): Error: expression expected, not `=`

    /tmp/tmpkxujphu2.d(75): Error: found `all_prefixes` when expecting `,`

    /tmp/tmpkxujphu2.d(75): Error: expression expected, not `;`

    /tmp/tmpkxujphu2.d(77): Error: found `assert` when expecting `,`

    /tmp/tmpkxujphu2.d(77): Error: found `;` when expecting `,`

    /tmp/tmpkxujphu2.d(78): Error: found `;` when expecting `,`

    /tmp/tmpkxujphu2.d(79): Error: found `;` when expecting `,`

    /tmp/tmpkxujphu2.d(80): Error: expression expected, not `}`

    /tmp/tmpkxujphu2.d(81): Error: found `void` when expecting `,`

    /tmp/tmpkxujphu2.d(81): Error: found `{` when expecting `,`

    /tmp/tmpkxujphu2.d(81): Error: expression expected, not `}`

    /tmp/tmpkxujphu2.d(81): Error: found `End of File` when expecting `,`

    /tmp/tmpkxujphu2'
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    // Hack: index of the first char is 0\n    alias idx_t = size_t;\n\
    \    size_t string_len = string.length;\n    // number of prefixes\n    idx_t\
    \ max_len = cast(idx_t) floor(log(string_len)/log(2)) + 1;\n    string[] result\
    \ = new string[];\n    // Iterate from 0 to log2(string_len)\n    foreach (idx_t\
    \ i; 0 .. max_len) \n    {\n        result ~= string[0 .. (1 << i)];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx4gz_3o3.d(16): Error: `string` is used as a type

    /tmp/tmpx4gz_3o3.d(16): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx4gz_3o3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n\tscope auto n = len(string);\n\tscope auto output = new string[n];\n\t\
    foreach (i; 0 .. n)\n\t{\n\t\toutput[i] = string[0 .. i];\n\t}\n\treturn output;\n\
    }\n/*\nfrom itertools import permutations\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprwnn4syn.d(19): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprwnn4syn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    return std.algorithm.iota(string.length + 1).map!(a => string[0 ..\
    \ a])();\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto array = std.array.array();\n    foreach (index, c; string)\n \
    \   {\n        array ~= c.idup;\n    }\n    return array;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfwzc4ngt.d(11): Error: undefined identifier `array` in package
    `std`

    /tmp/tmpfwzc4ngt.d(14): Error: template `object.idup` cannot deduce function from
    argument types `!()(immutable(char))`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(4308):        `object.idup(T)(T[]
    a)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import/object.d(4321):        `object.idup(T
    : void)(const(T)[] a)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfwzc4ngt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach (int i; 0 .. string.length + 1)\n   \
    \ {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return\
    \ a tuple of all the indices of all needle in haystack, or null if not found\n\
    \    >>> all_indexes(\"aaab\", \"a\")\n    [0, 1, 2]\n    >>> all_indexes(\"aaab\"\
    , \"b\")\n    [3]\n    >>> all_indexes(\"aaab\", \"c\")\n    null\n*/\nimmutable\
    \ tuple!(int[]) all_indexes(string haystack, string needle) \n{\n    immutable\
    \ indices = haystack.indexOf(needle);\n    if (indices is null)\n    {\n     \
    \   return null;\n    }\n    else\n    {\n        int[] result;\n        foreach\
    \ (int index; indices)\n        {\n            result ~= index;\n        }\n \
    \       return result;\n    }\n}\n/*\n Return all all the contiguous substrings\
    \ of length n of the input string\n    >>> ngrams(\"abc\", 2)\n    [\"ab\", \"\
    bc\"]\n*/\nstring[] ngrams(string input, size_t n) \n{\n    string[] result;\n\
    \    foreach (int i; 0 .. input.length - n + 1)\n    {\n        result ~= input[i\
    \ .. i + n];\n    }\n    return result;\n}\n/*\n Return the highest score for\
    \ a needle in haystack. The score is the number of\n needle in haystack divided\
    \ by the number of all the possible needle in haystack.\n    >>> best_match(\"\
    abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeo2hl9gi.d(58): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeo2hl9gi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164587
