name: HumanEval_24_largest_divisor
language: d
prompt: "import std.math;\n/*\n For a given number n, find the largest number that\
  \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n    \n\
  */\nlong largest_divisor(long n) \n"
tests: "unittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
  \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
  \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
  \ main(){}"
completions: ["{\n    long d;\n    for (d = (long)sqrt(n); d > 1; d--)\n    {\n  \
    \      if (n % d == 0)\n        {\n            return d;\n        }\n    }\n \
    \   return n;\n}", "{\n    foreach (i; 1..n)\n        if (n % i == 0)\n      \
    \      return n / i;\n}\n/*\n Return true if n is prime, false otherwise\n   \
    \ >>> is_prime(4L)\n    false\n*/", "{\n\tauto l = cast(long) sqrt(n);\n\tif (n\
    \ % l == 0)\n\t\treturn l;\n\telse\n\t\treturn cast(long) sqrt(n) - 1;\n}", "{\n\
    \    long largest_divisor = n;\n    for (long i = 2; i < n; i++) \n    {\n   \
    \     if (n % i == 0) \n        {\n            largest_divisor = i;\n        }\n\
    \    }\n    return largest_divisor;\n}", "{\n    long curr = 2L;\n    long result\
    \ = 1L;\n    while ( curr <= n / 2L ) {\n        if ( n % curr == 0L ) {\n   \
    \         result = curr;\n        }\n        curr = curr + 1L;\n    }\n    return\
    \ result;\n}", "{\n  long result = 1L;\n  long i = 2L;\n  while (i <= n) \n  {\n\
    \    if (n % i == 0L) \n    {\n      result = i;\n    }\n    i += 1L;\n  }\n \
    \ return result;\n}", "{\n    for (long i = n/2; i > 1; i--) \n    {\n       \
    \ if (n % i == 0) \n        {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\n/*\n For a given number n, find the number of perfect numbers (which\
    \ is equal to their sums of divisors)\n    >>> number_of_perfect_numbers(3000L)\n\
    \    2L\n*/\nlong number_of_perfect_numbers(long n) \n{\n    long count = 0;\n\
    \    for (long i = 1; i <= n; i++) \n    {\n        long sum = 0;\n        for\
    \ (long j = 1; j < i; j++) \n        {\n            if (i % j == 0) \n       \
    \     {\n                sum += j;\n            }\n        }\n        if (sum\
    \ == i) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n For a given number n, find the number of prime numbers that are less than\
    \ n.\n    >>> number_of_primes(100L)\n    25L\n*/\nlong number_of_primes(long\
    \ n) \n{\n    long count = 0;\n    for (long i = 2; i < n; i++) \n    {\n    \
    \    long divisor_count = 0;\n        for (long j = 1; j <= i; j++) \n       \
    \ {\n            if (i % j == 0) \n            {\n                divisor_count++;\n\
    \            }\n        }\n        if (divisor_count == 2) \n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n/*\n Find a smallest\
    \ triangle number that can be formed by adding up consecutive whole numbers\n\
    \    >>> smallest_triangle_number()\n    3L\n*/\nlong smallest_triangle_number()\
    \ \n{\n    for (long i = 1; i < min(math.max_int, math.max_uint); i++) \n    {\n\
    \        long sum = 0;\n        for (long j = 1; j <= i; j++) \n        {\n  \
    \          sum += j;\n        }", "{\n    for (n--; n > 1; n--) \n        if (n\
    \ % n == 0) \n            return n;\n    return 0;\n}", "{\n    long i = 2L;\n\
    \    for (; i < n; i++) \n    {\n        if (n % i == 0L)\n            return\
    \ largest_divisor(n / i) * i;\n    }\n    return n;\n}", "{\n    long largest_divisor\
    \ = n;\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n \
    \           largest_divisor = i;\n        }\n        i++;\n    }\n    return largest_divisor;\n\
    }", "{\n    import std.math : isPrime;\n    foreach (f; iota(n-1L, 1L, -1L)) \n\
    \    {\n        if (!isPrime(f) && (n % f == 0)) \n        {\n            return\
    \ f;\n        }\n    }\n    return -1L;\n}\n \n/*\n  For a given number n, find\
    \ the sum of all the multiples of 3 or 5 that are below n.\n    >>> multiples_of_3_or_5(10L)\n\
    \    23L\n*/\nlong multiples_of_3_or_5(long n) \n{\n    long sum = 0L;\n    foreach\
    \ (e; iota(n-1L, 1L, -1L)) \n    {\n        if (e % 3 == 0 || e % 5 == 0) \n \
    \       {\n            sum += e;\n        }\n    }\n    return sum;\n}", "{\n\t\
    assert(n > 0);\n\tfor (long i = n-1; i > 0; i--) \n\t{\n\t\tif (n % i == 0)\n\t\
    \t\treturn i;\n\t}\n\treturn 1;\n}", "{\n    auto upper = cast(int)sqrt(n);\n\
    \    foreach(divisor; reverse(1 .. upper))\n    {\n        if (n % divisor ==\
    \ 0)\n            return divisor;\n    }\n    return 1;\n}", "{\n    foreach (i;\
    \ 2..isqrt(n)+1) {\n        if (n % i == 0) {\n            return n / i;\n   \
    \     }\n    }\n    return 1;\n}", "{\n    long x = floor(sqrt(n));\n    while\
    \ (x > 0) \n    {\n        if (n % x == 0) \n        {\n            return x;\n\
    \        }\n        x--;\n    }\n    return 1;\n}", "{\n    long i;\n    for (i\
    \ = floor(n / 2); i > 1; i--) \n    {\n        if (n % i == 0) \n        {\n \
    \           return i;\n        }\n    }\n    return 1;\n}", "{\n    long n_max\
    \ = n/2;\n    foreach (i; 2..n_max)\n    {\n        if (n % i == 0)\n        {\n\
    \            return i;\n        }\n    }\n    return 1;\n}", "{\n    long d =\
    \ n;\n    while (d > 1L) \n    {\n        if (n % d == 0L) \n        {\n     \
    \       return d;\n        }\n        d -= 1L;\n    }\n    return d;\n}", "{\n\
    \    long d = 2L;\n    long limit = n;\n    while (d < limit) \n    {\n      \
    \  if (n % d == 0L) \n        {\n            limit = n / d;\n        }\n     \
    \   d += 1L;\n    }\n    return limit;\n}", "{\n    long d;\n    foreach (d; 2\
    \ .. n-1) \n    {\n        if (n % d == 0) \n        {\n            return d;\n\
    \        }\n    }\n    return 0;\n}\n/*\n For a given number n, find the smallest\
    \ prime number larger than n\n    >>> nearest_prime(15L)\n    17L\n*/\nlong nearest_prime(long\
    \ n) \n{\n    foreach (i; n .. n + 100) \n    {\n        if (isPrime(i)) \n  \
    \      {\n            return i;\n        }\n    }\n    return 0;\n}\n/*\n For\
    \ a given number n, find the smallest prime number larger than n\n    >>> prime_number(15L)\n\
    \    97L\n*/\nlong prime_number(long n) \n{\n    long i = 0;\n    foreach (p;\
    \ primes(n .. n + 100)) \n    {\n        i++;\n        if (i == n) \n        {\n\
    \            return p;\n        }\n    }\n    return 0;\n}", "{\n    long largest\
    \ = 0L;\n    foreach (i; 1L .. n) {\n        if (n % i == 0) {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\n/*\n Given two numbers, a and\
    \ b, find the largest number that divides both of them evenly.\n    >>> greatest_common_divisor(8L,\
    \ 12L)\n    4L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n \
    \   long largest = 0L;\n    foreach (i; 1L .. min(a, b)) {\n        if (a % i\
    \ == 0 && b % i == 0) {\n            largest = i;\n        }\n    }\n    return\
    \ largest;\n}\n/*\n Given a list of numbers and a number k, return the count of\
    \ numbers that are greater than k\n    >>> num_over_k([3, 1, 2, 4, 5], 3)\n  \
    \  2\n    \n*/", "{\n    long i = 1L;\n    long j = 2L;\n    long max = 0L;\n\
    \    while (j<=n)\n    {\n        if (n%j==0)\n        {\n            max = j;\n\
    \        }\n        j = j + 1L;\n    }\n    return max;\n}", "{\n  long s=2;\n\
    \  while (n % s) \n  {\n    ++s;\n  }\n  return s;\n}", "{\n    foreach (divisor;\
    \ 2..n) \n    {\n        if (n % divisor == 0)\n            return n / divisor;\n\
    \    }\n    return 1;\n}", "{\n    long half = n / 2L;\n    long max = 1L;\n \
    \   long divisor = 2L;\n    while (divisor <= half) \n    {\n        if (n % divisor\
    \ == 0L) \n        {\n            max = divisor;\n        }\n        divisor +=\
    \ 1L;\n    }\n    return max;\n}", "{\n    assert(n >= 1);\n    for (long d =\
    \ n - 1; d >= 1; d--)\n    {\n        if (n % d == 0)\n        {\n           \
    \ return d;\n        }\n    }\n    return 1;\n}", "{\n    long end = (long)floor(sqrt(n));\n\
    \    foreach (i; 2L .. end + 1L) \n    {\n        if (n % i == 0L) \n        {\n\
    \            return n / i;\n        }\n    }\n    return 1L;\n}", "{\n    long\
    \ largest = 0L;\n    foreach (i; 1L .. ceil(sqrt(n))) \n    {\n        if (n %\
    \ i == 0L)\n            largest = i;\n    }\n    return largest;\n}\n/*\n For\
    \ a given string (word or sentence), find if any character has been repeated more\
    \ than once.\n    >>> repeated_char(\"aabbcc\")\n    true\n    >>> repeated_char(\"\
    abc\")\n    false\n*/", "{\n  long f = n / 2L;\n  while(f > 1L) \n  {\n    if(n\
    \ % f == 0L) \n    {\n      return f;\n    }\n    f -= 1L;\n  }\n  return 1L;\n\
    }", "{\n    long ret = 1L;\n    long i = 2L;\n    foreach (i; 1L..n)\n    {\n\
    \        if (n % i == 0L)\n        {\n            ret = i;\n        }\n    }\n\
    \    return ret;\n}\n/*\n For a given number n, find the prime number that comes\
    \ closest to it\n    >>> closest_prime(15L)\n    17L\n    >>> closest_prime(16L)\n\
    \    17L\n    >>> closest_prime(17L)\n    17L\n    >>> closest_prime(18L)\n  \
    \  19L\n*/\nlong closest_prime(long n) \n{\n    long ret = 0L;\n    long diff\
    \ = 65536L;\n    long i = 2L;\n    long largest = 0L;\n    foreach (i; 2L..65536L)\n\
    \    {\n        if (n % i == 0L)\n        {\n            if (abs(n - i) < diff)\n\
    \            {\n                diff = abs(n - i);\n                ret = i;\n\
    \            }\n        }\n    }\n    return ret;\n}\n/*\n For a given number\
    \ n, find the largest prime that comes below it\n    >>> largest_prime(15L)\n\
    \    13L\n    >>> largest_prime(16L)\n    13L\n    >>> largest_prime(17L)\n  \
    \  17L\n    >>> largest_prime(18L)\n    17L\n*/\nlong largest_prime(long n) \n\
    {\n    long ret = 0L;\n    long i = 2L;\n    long largest = 0L;\n    foreach (i;\
    \ 2L..n)\n    {\n        if (n % i == 0L)\n        {\n            largest = i;\n\
    \        }\n    }\n    return largest;\n}\n/*\n For a given number n, find the\
    \ smallest prime that comes above it\n    >>> smallest_prime(15L)\n    17L\n \
    \   >>> smallest_prime(16L)\n    17L\n    >>> smallest_prime(17L)\n    17L\n \
    \   >>> smallest_prime(18L)\n    19L\n*/\nlong smallest_prime(long n) \n{", "{\n\
    \tforeach (i; 2..((long)sqrt(n) + 1)) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\
    \treturn n / i;\n\t\t}\n\t}\n\treturn 1;\n}", "{\n    long m = cast(long) sqrt(n);\n\
    \    for (long i = m; i > 0; i--) \n    {\n        if (n % i == 0) \n        {\n\
    \            return i;\n        }\n    }\n    return -1;\n}", "{\n  long m = n;\n\
    \  // now check every number up to m\n  for (long i = 1; i < m; i++) \n  {\n \
    \   if (n % i == 0)\n    {\n      m = i;\n    }\n  }\n  return m;\n}\nlong is_even(long\
    \ n)\n{\n  return n % 2 == 0;\n}", "{\n    if (n == 0L) \n    {\n        return\
    \ 0L;\n    }\n    long i = (long) floor(sqrt(n));\n    while (i > 0L) \n    {\n\
    \        if (n % i == 0L) \n        {\n            return i;\n        }\n    \
    \    i--;\n    }\n    return 1L;\n}", "{\n    long d = floor(sqrt(n));\n    while\
    \ (n % d != 0) \n    {\n        d -= 1;\n    }\n    return d;\n}", "{\n    for\
    \ (long i = n/2; i > 1; i--)\n    {\n        if (n % i == 0)\n        {\n    \
    \        return i;\n        }\n    }\n    return 1;\n}", "{\n    long max_divisor\
    \ = -1;\n    foreach (i; 0 .. long.sqrt(n)+1)\n    {\n        if (n % i == 0)\n\
    \        {\n            max_divisor = i;\n        }\n    }\n    return max_divisor;\n\
    }", "{\n    long i;\n    for (i = 2; i < n; i++) \n    {\n        if (n % i ==\
    \ 0) \n        {\n            return n / i;\n        }\n    }\n    return 1;\n\
    }", "{\n    for (long i = n/2L; i > 1L; i--)\n    {\n        if (n % i == 0L)\n\
    \        {\n            return i;\n        }\n    }\n    return 1L;\n}", "{\n\
    \    long i;\n    for (i = n - 1; i > 0; i--)\n    {\n        if (n % i == 0)\
    \ \n        {\n            return i;\n        }\n    }\n    return 1;\n}", "{\n\
    \    long largest = 0L;\n    foreach (i; 2L .. trunc(sqrt(n)))\n    {\n      \
    \  if (n % i == 0L)\n        {\n            largest = i;\n        }\n    }\n \
    \   return largest;\n}", "{\n    foreach (divisor; 1L .. n) \n    {\n        if\
    \ (n % divisor == 0) {\n            return divisor;\n        }\n    }\n    return\
    \ 1L;\n}", "{\n    long x = 2L;\n    long y = sqrt(n);\n    while (x <= y) \n\
    \    {\n        if (n % x == 0L)\n            return n / x;\n        x += 1L;\n\
    \    }\n    return 1L;\n}", "{\n    long largest_divisor = 1L;\n    for (size_t\
    \ i = 2; i < n; i++)\n    {\n        if(n % i == 0L)\n        {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}", "{\n    // start from\
    \ the largest number that is below n\n    long largest_divisor = n - 1;\n    while\
    \ (largest_divisor > 0) \n    {\n        if (n % largest_divisor == 0)\n     \
    \       break;\n        largest_divisor--;\n    }\n    return largest_divisor;\n\
    }\n/*\nReturns the smallest number that is a multiple of n1 and n2\n    >>> lcm(6L,\
    \ 8L)\n    24L\n*/\nlong lcm(long n1, long n2) \n{\n    long mul = n1 * n2;\n\
    \    long largest_divisor = largest_divisor(mul);\n    return mul / largest_divisor;\n\
    }\n/*\nChecks whether n is a prime number\n*/", "{\n    foreach (i; (1L..sqrt(n)))\n\
    \    {\n        if (n % i == 0)\n        {\n            n = n / i;\n        }\n\
    \    }\n    return n;\n}", "{\n    for (long i = n - 1; i > 0; i--) \n    {\n\
    \        if (n % i == 0) \n        {\n            return i;\n        }\n    }\n\
    \    return 0;\n}", "{\n    long result = 2L;\n    while (n % result != 0L) \n\
    \    {\n        ++result;\n    }\n    return result;\n}", "{\n    long max = cast(long)\
    \ ceil(sqrt(n));\n    foreach (i; 2..max) \n    {\n        if (n % i == 0) \n\
    \        {\n            return n / i;\n        }\n    }\n    return 1;\n}", "{\n\
    \    return n;\n}\n ", "{\n    long i, max;\n    max = 0;\n    for (i = 2; i <\
    \ n; i++) \n    {\n        if (n % i == 0 && i > max) \n        {\n          \
    \  max = i;\n        }\n    }\n    return max;\n}", "{\n    long largest = n;\n\
    \    for (long i = 2; i < largest; i++) {\n        if (n % i == 0) {\n       \
    \     largest = i;\n        }\n    }\n    return largest;\n}\n/*\nWrite a function\
    \ that takes an integer and returns the sum of its digits\n    >>> digit_sum(1234)\n\
    \    10\n*/\nlong digit_sum(long n) \n{\n    long n1 = n;\n    long sum = 0;\n\
    \    while (n1 > 0) {\n        sum += n1 % 10;\n        n1 /= 10;\n    }\n   \
    \ return sum;\n}\n/*\nWrite a function that checks if a number is prime.\n   \
    \ >>> is_prime(7)\n    True\n*/", "{\n    long largest = 1;\n    foreach (i; 2..ceil(sqrt(n)))\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest = i;\n   \
    \     }\n    }\n    return largest;\n}\n/*\n For a given number n, return a list\
    \ of the prime factors of n, i.e. a list of numbers that can divide n evenly,\
    \ and that are also prime numbers\n    >>> prime_factors(15L)\n    [3L, 5L]\n\
    \    \n*/\nlong[] prime_factors(long n) \n{\n    long divisor = largest_divisor(n);\n\
    \    if (divisor == 1) \n    {\n        return [n];\n    }\n    else \n    {\n\
    \        return [divisor] ~ prime_factors(n / divisor);\n    }\n}\n/*\n Return\
    \ the number of elements in the list produced by prime_factors(n)\n    >>> prime_factors_n(15L)\n\
    \    2\n    \n*/\nlong prime_factors_n(long n) \n{\n    return prime_factors(n).length;\n\
    }\n/*\n Return a list of the prime numbers less than n.\n    >>> primes(10L)\n\
    \    [2L, 3L, 5L, 7L]\n    \n*/\nlong[] primes(long n) \n{\n    long[] res = [];\n\
    \    long i = 2;\n    while (i < n) \n    {\n        if (prime_factors_n(i) ==\
    \ 1) \n        {\n            res ~= i;\n        }\n        i++;\n    }\n    return\
    \ res;\n}\n/*\n Return the value of the i-th prime number\n    >>> nth_prime(3L)\n\
    \    5L\n    \n*/\nlong nth_prime(long i) \n{\n    return primes(i * i)[i - 1];\n\
    }\n/*\n Return the number of primes less than n\n    >>> primes_n(10L)\n    4\n\
    \    \n*/\nlong primes_n(long n) \n{\n    return primes", "{\n    long d = n -\
    \ 1;\n    while(n % d != 0)\n    {\n        d--;\n    }\n    return d;\n}", "{\n\
    \    long m = n / 2;\n    while(m > 1) {\n        if(n % m == 0) {\n         \
    \   return m;\n        }\n        m -= 1;\n    }\n    return 1;\n}", "{\n    return\
    \ \"???\";\n}", "{\n    for (int i = n - 1; i > 0; i--)\n    {\n        if (n\
    \ % i == 0)\n        {\n            return i;\n        }\n    }\n    return 1;\n\
    }", "{\n    foreach (i; 0 .. n + 1) \n    {\n        if (n % i == 0) \n      \
    \  {\n            return i;\n        }\n    }\n    return 0;\n}", "{\n    long\
    \ a = n;\n    while(true) {\n        long b = n % a;\n        if(b == 0)\n   \
    \         return a;\n        a -= 1;\n    }\n}", "{\n    // if n is prime, n-1\
    \ is the largest even divisor\n    if (is_prime(n)) return n-1;\n    \n    //\
    \ start at the midpoint\n    long mid = n/2;\n    // while no even divisor is\
    \ found, decrement mid\n    while(n % mid != 0) mid--;\n    return mid;\n}", "{\n\
    \    long result = 2L;\n    foreach (i;2..sqrt(n))\n    {\n        if (n % i ==\
    \ 0) \n        {\n            result = i;\n        }\n    }\n    return result;\n\
    }", "{\n    // first, find a number that divides n without remainder\n    for\
    \ (long i = n - 1; i > 0; i--)\n    {\n        if (n % i == 0) \n        {\n \
    \           return i;\n        }\n    }\n}", "{\n    long candidate = n-1;\n \
    \   while (1) {\n        if (n % candidate == 0)\n            return candidate;\n\
    \        candidate--;\n    }\n}", "{\n    long result = 1L;\n    foreach (immutable\
    \ d; 1L .. cast(long)sqrt(n) + 1L) \n    {\n        if (n % d == 0L) \n      \
    \  {\n            result = d;\n        }\n    }\n    return result;\n}\n```",
  "{\n    foreach (i; iota(1L, n)) \n    {\n        if (n % i == 0) \n        {\n\
    \            return i;\n        }\n    }\n    return 1L;\n}", "{\n    long i =\
    \ 2L;\n    while (i <= sqrt(n)) \n    {\n        if (n % i == 0L)\n          \
    \  return n / i;\n        i++;\n    }\n    return 1L;\n}", "{\n    long i = n-1;\n\
    \    while (i >= 1) \n    {\n        if (n % i == 0) return i;\n        i -= 1;\n\
    \    }\n    return 0;\n}", "{\n    long divisor = 2L;\n    long largest_divisor\
    \ = 1L;\n    while (divisor <= n) \n    {\n        if (n % divisor == 0)\n   \
    \     {\n            largest_divisor = divisor;\n        }\n        divisor++;\n\
    \    }\n    return largest_divisor;\n}", "{\n    assert(n > 0L);\n    long i;\n\
    \    long result = n;\n    foreach (i; 1L .. n)\n    {\n        if ((n % i) ==\
    \ 0L)\n        {\n            result = i;\n        }\n    }\n    return result;\n\
    }", "{\n    long max;\n    foreach (i; 1 .. n) \n    {\n        if (n % i == 0)\
    \ \n        {\n            max = i;\n        }\n    }\n    return max;\n}", "{\n\
    \    long max_divisor = 0L;\n    long i;\n    for (i = 1L; i <= n; i++) \n   \
    \ {\n        if ((n % i) == 0L) \n        {\n            max_divisor = i;\n  \
    \      }\n    }\n    return max_divisor;\n}", "{\n  long largest = 1;\n  for (long\
    \ i = 2; i < n; i++) \n  {\n    if (n % i == 0) \n    {\n      largest = i;\n\
    \    }\n  }\n  return largest;\n}", "{\n    long m = cast(long)sqrt(cast(double)n);\n\
    \    while( n % m != 0)\n        m -= 1;\n    return m;\n}\nlong[8] make_primes(long\
    \ n)\n{\n    long[8] primes;\n    primes[0] = 2;\n    long m = 3;\n    long i\
    \ = 1;\n    while(i < 8)\n    {\n        if(n % m != 0)\n        {\n         \
    \   primes[i] = m;\n            i++;\n        }\n        m += 2;\n    }\n    return\
    \ primes;\n}\nlong phi(long n)\n{\n    long[8] primes = make_primes(n);\n    long\
    \ p;\n    foreach(p; primes)\n    {\n        n = n * (p - 1) / p;\n    }\n   \
    \ return n;\n}", "{\n    long largest = 1;\n    for (long i = 2; i <= n; i++)\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest = i;\n   \
    \     }\n    }\n    return largest;\n}", "{\n    assert(n > 0L);\n    return cast(long)max(1L,\
    \ n/2L);\n}\n/*\n n is prime if it's only divisor is itself\n    >>> is_prime(9L)\n\
    \    false\n    \n    >>> is_prime(17L)\n    true", "{\n  long m = n - 1;\n  while\
    \ (n % m) {\n    m--;\n  }\n  return m;\n}\n/*\nFor a given number n, find the\
    \ largest prime number that divides n evenly, smaller than n\n    >>> largest_prime_divisor(15L)\n\
    \    5L\n    >>> largest_prime_divisor(16L)\n    2L\n*/\nlong largest_prime_divisor(long\
    \ n) \n{\n  long m = largest_divisor(n);\n  while (largest_divisor(m) != 1) {\n\
    \    m = largest_divisor(m);\n  }\n  return m;\n}\n/*\nFor a given number n, find\
    \ the number of divisors\n    >>> number_of_divisors(15L)\n    4L\n    >>> number_of_divisors(16L)\n\
    \    5L\n*/\nlong number_of_divisors(long n) \n{\n  long divisors = 0;\n  for\
    \ (long i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      divisors++;\n    }\n\
    \  }\n  return divisors;\n}\n/*\n For a given number n, find the number of prime\
    \ divisors\n    >>> number_of_prime_divisors(15L)\n    2L\n    >>> number_of_prime_divisors(16L)\n\
    \    1L\n*/\nlong number_of_prime_divisors(long n) \n{\n  long divisors = 0;\n\
    \  long m = largest_divisor(n);\n  while (m != 1) {\n    if (largest_divisor(m)\
    \ == 1) {\n      divisors++;\n    }\n    m = largest_divisor(m);\n  }\n  return\
    \ divisors;\n}\n/*\n For a given number n, find the sum of divisors\n    >>> sum_of_divisors(15L)\n\
    \    24L\n    >>> sum_of_divisors(16L)\n    31L\n*/\nlong sum_of_divisors(long\
    \ n", "{\n    if (n <= 1) return n;\n    long largest = 1;\n    foreach (i; 2\
    \ .. n) {\n        if (n % i == 0) largest = i;\n    }\n    return largest;\n}",
  "{\n    return n / cast(long)cast(int)sqrt(cast(double)n);\n}", "{\n    long m =\
    \ n / 2;\n    foreach (i; 1..m) \n    {\n        if (n % i == 0) \n        {\n\
    \            m = i;\n        }\n    }\n    return m;\n}\n/*\n For a given number\
    \ n, find the largest prime factor of n\n    >>> largest_prime_factor(15L)\n \
    \   5L\n*/\nlong largest_prime_factor(long n) \n{\n    long m = largest_divisor(n);\n\
    \    return (largest_divisor(m) == 1) ? m : largest_prime_factor(m);\n}\n//For\
    \ a given number n, find the largest palindrome made from the product of two n-digit\
    \ numbers\nlong largest_palindrome(long n) \n{\n    long max = 0;\n    long m\
    \ = pow(10, n);\n    foreach (x; m-1..1) \n    {\n        foreach (y; m-1..1)\
    \ \n        {\n            long z = x * y;\n            if (z == z.to!string.reverse.to!long)\
    \ \n            {\n                max = max(max, z);\n            }\n       \
    \ }\n    }\n    return max;\n}\n/*\n For a given number n, find the smallest number\
    \ that is evenly divisible by all numbers from 1 to n\n    >>> smallest_multiple(5L)\n\
    \    60L\n*/\nlong smallest_multiple(long n) \n{\n    long m = n;\n    foreach\
    \ (i; 1..n) \n    {\n        m = m / i * i;\n    }\n    return m;\n}\n//For a\
    \ given number n, find the sum of all the primes below n\nlong sum_of_primes(long\
    \ n) \n{\n    long m = 0;\n    foreach (i; 1..n) \n    {\n        if (largest_divisor(i)\
    \ == 1) \n        {\n            m += i;\n        }\n    }\n    return m;\n}\n\
    //For a given number n, find the difference between the sum of the squares of\
    \ the first n natural numbers and the square of the sum", "{\n    foreach (i;\
    \ 1..n/2) \n    {\n        if (n % i == 0)\n            return i;\n    }\n   \
    \ return n;\n}", "{\n    for (long i = n / 2; i > 1; i--) \n    {\n        if\
    \ (n % i == 0) \n        {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}", "{\n    for (long i = n - 1; i > 0; i--) \n    {\n        if (n % i\
    \ == 0) \n        {\n            return i;\n        }\n    }\n    return 1;\n\
    }\n/*\nReturns the number of elements in the range [`first`, `last`) for which\
    \ predicate p returns true.", "{\n  for (long i = n-1; i > 0; i--)\n    if (n\
    \ % i == 0) return i;\n  return 0;\n}", "{\n    assert(n > 0);\n    foreach (i;\
    \ 1 .. n) \n    {\n        if (n % i == 0) \n        {\n            return n /\
    \ i;\n        }\n    }\n    assert(false);\n}\nlong binary_gcd(long x, long y)\
    \ \n{\n    while (x != y) \n    {\n        if (x > y) \n        {\n          \
    \  x -= y;\n        } \n        else \n        {\n            y -= x;\n      \
    \  }\n    }\n    return x;\n}\nlong binary_gcd_recursive(long x, long y) \n{\n\
    \    if (x == y) \n    {\n        return x;\n    } \n    else if (x > y) \n  \
    \  {\n        return binary_gcd_recursive(x - y, y);\n    } \n    else \n    {\n\
    \        return binary_gcd_recursive(x, y - x);\n    }\n}\nlong gcd(long x, long\
    \ y) \n{\n    if (x < y) \n    {\n        return gcd(y, x);\n    }\n    if (y\
    \ == 0) \n    {\n        return x;\n    }\n    return gcd(y, x % y);\n}\nlong\
    \ gcd_recursive(long x, long y) \n{\n    if (x < y) \n    {\n        return gcd_recursive(y,\
    \ x);\n    }\n    if (y == 0) \n    {\n        return x;\n    }\n    return gcd_recursive(y,\
    \ x % y);\n}\nlong gcd_iterative(long x, long y) \n{\n    if (x < y) \n    {\n\
    \        return gcd_iterative(y, x);\n    }\n    while (y != 0) \n    {\n    \
    \    auto x2 = x;\n        x = y;\n        y = x2 % y;\n    }\n    return x;\n\
    }\nlong gcd_recursive_std(long x, long y) \n{\n    if (x < y) ", "{\n  foreach\
    \ (i; 1L .. n)\n  {\n    if (n % i == 0)\n    {\n      return i;\n    }\n  }\n\
    \  return 1L;\n}", "{\n    auto i = n;\n    while (true) {\n        i -= 1;\n\
    \        if (i == 0) break;\n        if (n % i == 0) break;\n    }\n    return\
    \ i;\n}", "{\n    int i;\n    for (i = n/2; i > 1; i--) \n    {\n        if ((n\
    \ % i) == 0) \n        {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\n/*\n    Given a integer, n, print the numbers from 1 to n. \n    But\
    \ for multiples of three print \"Fizz\" instead of the number and for the multiples\
    \ of five print \"Buzz\". \n    For numbers which are multiples of both three\
    \ and five print \"FizzBuzz\".\n    \n    >>> fizzbuzz(15)\n    1\n    2\n   \
    \ Fizz\n    4\n    Buzz\n    Fizz\n    7\n    8\n    Fizz\n    Buzz\n    11\n\
    \    Fizz\n    13\n    14\n    FizzBuzz\n*/", "{\n    long ans = 1L;\n    for\
    \ (long d = 2L; d < n; d++) \n    {\n        if (n % d == 0L) \n        {\n  \
    \          ans = d;\n        }\n    }\n    return ans;\n}", "{\n    long i = n;\n\
    \    while (i > 1) \n    {\n        if (n % i == 0) \n        {\n            return\
    \ i;\n        }\n        i -= 1;\n    }\n    return i;\n}", "{\n    auto sqrt_n\
    \ = sqrt(n);\n    for (long i = sqrt_n; i > 0; i--) \n    {\n        if (n % i\
    \ == 0) \n        {\n            return i;\n        }\n    }\n    return -1;\n\
    }", "{\n    long largest = 0L;\n    long limit = n / 2L;\n    for (long i = 1L;\
    \ i <= limit; i++) \n    {\n        if (n % i == 0L)\n            largest = i;\n\
    \    }\n    return largest;\n}", "{\n    for (long i = n / 2L; i > 1L; i--) \n\
    \    {\n        if (n % i == 0L)\n            return i;\n    }\n    return 1L;\n\
    }\n/*\n    The prime factorization of n is the list of all prime numbers that\
    \ divide n.\n    The prime factorization of a positive integer is a list of the\
    \ integer's prime factors, together with their multiplicities; the process of\
    \ determining these factors is called integer factorization.\n    >>> factor(24L)\n\
    \    [2L, 2L, 2L, 3L]\n*/\nlong[] factor(long n) \n{\n    long[] factors = new\
    \ long[64];\n    int i = 0;\n    while (n > 1L) \n    {\n        long d = largest_divisor(n);\n\
    \        factors[i] = d;\n        n /= d;\n        i++;\n    }\n    return factors[0..i];\n\
    }\n/*\n   The number of factors of n.\n   >>> number_of_factors(24L)\n   8L\n\
    */\nlong number_of_factors(long n) \n{\n    long[] factors = factor(n);\n    long\
    \ last = 0L;\n    long counter = 0L;\n    long n_of_factors = 1L;\n    foreach\
    \ (long factor; factors) \n    {\n        if (factor == last) \n        {\n  \
    \          counter++;\n        }\n        else \n        {\n            n_of_factors\
    \ *= counter + 1L;\n            counter = 1L;\n            last = factor;\n  \
    \      }\n    }\n    return n_of_factors;\n}", "{\n    long result = n;\n    for\
    \ (long k = 2L; k < n; k += 1L) {\n        while (n % k == 0L) {\n           \
    \ result = k;\n            n /= k;\n        }\n    }\n    return result;\n}",
  "{\n    long i;\n    i = cast(long)sqrt(n);\n    while (n % i != 0) \n    {\n  \
    \      i = i - 1;\n    }\n    return i;\n}\n```", "{\n    long largest_divisor\
    \ = 1L;\n    for (long i = 1L; i < n; i++)\n    {\n        if (n % i == 0L)\n\
    \        {\n            largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n\
    }", "{\n    long largest = 1;\n    foreach (p; 2 .. sqrt(n))\n    {\n        if\
    \ (n % p == 0)\n            largest = p;\n    }\n    return largest;\n}", "{\n\
    \    for (long i = n / 2; i > 1; i--) \n    {\n        if (n % i == 0) \n    \
    \    {\n            return i;\n        }\n    }\n    return 1;\n}", "{\n    long\
    \ x = 0;\n    foreach (i; 1 .. n - 1)\n    {\n        if (n % i == 0)\n      \
    \  {\n            x = i;\n        }\n    }\n    return x;\n}", "{\n    long i\
    \ = 2L;\n    long largest = 1L;\n    while (i <= n / 2L) {\n        if (n % i\
    \ == 0L) {\n            largest = i;\n        }\n        i = i + 1L;\n    }\n\
    \    return largest;\n}", "{\n    long largest = 1;\n    long i = 2;\n    while\
    \ (i < sqrt(n))\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n        i++;\n    }\n    return largest;\n}\n/*\n Given a pair\
    \ of numbers, multiply the first by the largest divisor of the second.\n    >>>\
    \ mdc(4L, 10L)\n    40L\n*/\nlong mdc(long x, long y) \n{\n    return x * largest_divisor(y);\n\
    }\n// Given 3 numbers, find the one in the middle\n/*\n    >>> middle(1L, 2L,\
    \ 3L)\n    2L\n*/\nlong middle(long x, long y, long z) \n{\n    long middle =\
    \ min(max(x, y), min(max(y, z), max(x, z)));\n    return middle;\n}\n/*\n Given\
    \ a list of numbers, find the one in the middle\n    >>> middle([1L, 2L, 3L])\n\
    \    2L\n*/\nlong middle(long[] nums) \n{\n    long middle = min(max(nums[0],\
    \ nums[1]), min(max(nums[1], nums[2]), max(nums[0], nums[2])));\n    return middle;\n\
    }\n/*\n Remove the middle value from a list. If there are an even number of elements,\
    \ delete the smallest.\n    >>> remove_middle([1L, 2L, 3L])\n    [1L, 3L]\n  \
    \  >>> remove_middle([1L, 2L, 3L, 4L])\n    [1L, 2L, 4L]\n*/\nlong[] remove_middle(long[]\
    \ nums) \n{\n    long[] newList = new long[nums.length - 1];\n    long middle\
    \ = min(max(nums[0], nums[1]), min(max(nums[1], nums[2]), max(nums[0], nums[2])));\n\
    \    int i = 0;\n    while (i < nums.length)\n    {\n        if (nums[i]", "{\n\
    \    long res = 1L;\n    foreach (e; iota(2L, long(sqrt(n)+1))) \n    {\n    \
    \    if (n % e == 0) \n        {\n            res = e;\n        }\n    }\n   \
    \ return res;\n}", "{\n    long max = 0L;\n    long i = 1L;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            max = i;\n       \
    \ }\n        i++;\n    }\n    return max;\n}", "{\n    long i = 2L;\n    for (;\
    \ i * i <= n; i += 1L)\n    {\n        if (n % i == 0L) \n        {\n        \
    \    n /= i;\n            break;\n        }\n    }\n    return n;\n}", "{\n  \
    \  long largest = 0L;\n    for (long i = 1L; i <= sqrt(n); i += 1L)\n    {\n \
    \       if (n % i == 0L)\n        {\n            largest = i;\n        }\n   \
    \ }\n    return largest;\n}\n/*\n Find the Nth fibonacci number\n */\nlong fibonacci(long\
    \ n)\n{\n    long f[n];\n    f[0] = 0L;\n    f[1] = 1L;\n    for (long i = 2L;\
    \ i <= n; i += 1L)\n    {\n        f[i] = f[i - 1L] + f[i - 2L];\n    }\n    return\
    \ f[n];\n}", "{\n    long i = 2L;\n    for (; i < n; i++) \n    {\n        if\
    \ (n % i == 0L) \n        {\n            return largest_divisor(n / i) * i;\n\
    \        }\n    }\n    return 1L;\n}", "{\n\tlong largest = 1;\n\tlong i = 2;\n\
    \twhile (i < sqrt(n)) \n\t{\n\t\tif (n % i == 0)\n\t\t\tlargest = i;\n\t\ti++;\n\
    \t}\n\treturn largest;\n}", "{\n\tforeach (i; 1..n+1)\n\t{\n\t\tif (n % i == 0\
    \ && i < n)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn 0;\n}", "{\n    foreach\
    \ (long i; 0 .. n/2)\n    {\n        if(n % i == 0)\n        {\n            long\
    \ largest = i;\n        }\n    }\n    return largest;\n}", "{\n    auto m = cast(long)floor(\
    \ sqrt( n ) );\n    while( n % m )\n        m--;\n    return m;\n}", "{\n    long\
    \ largest = 0L;\n    long i = 1L;\n    while (i <= n) \n    {\n        if (mod(n,\
    \ i) == 0L)\n            largest = i;\n        i += 1L;\n    }\n    return largest;\n\
    }", "{\n\tfor (long i = n - 1; i > 0; i--) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\
    \t\t\treturn i;\n\t\t}\n\t}\n\treturn 1;\n}", "{\n\tforeach (i; 0..sqrt(n))\n\t\
    {\n\t\tif (n % i == 0)\n\t\t{\n\t\t\tif (i == n / i)\n\t\t\t{\n\t\t\t\treturn\
    \ i;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn n / i;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn 1;\n}", "{\n    long divisor = n - 1;\n    while (divisor > 0) {\n\
    \        if (n % divisor == 0) {\n            return divisor;\n        }\n   \
    \     divisor -= 1;\n    }\n    return 1;\n}", "{\n  foreach (k;iota(1L,n)) \n\
    \    if (n % k == 0) \n      n = k;\n  return n;\n}", "{\n    long divisor;\n\
    \    for (divisor = floor(n/2); divisor > 1; divisor--) {\n        if (mod(n,\
    \ divisor) == 0) {\n            return divisor;\n        }\n    }\n    return\
    \ 1;\n}", "{\n    for (long d = n/2; d > 1; d--)\n    {\n        if (n % d ==\
    \ 0) \n        {\n            return d;\n        }\n    }\n    return 1;\n}",
  "{\n    long i;\n    for (i = (long)floor(sqrt(n)); i > 0; i--) \n    {\n      \
    \  if (n % i == 0) \n        {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}", "{\n    long i;\n    foreach (i; 1L .. n/2 + 1L) \n    {\n        if\
    \ (n % i == 0) \n        {\n            return i;\n        }\n    }\n    return\
    \ 1L;\n}", "{\n    foreach (i; 0 .. n+1)\n    {\n        if (n % i == 0)\n   \
    \     {\n            return i;\n        }\n    }\n    return 0;\n}", "{\n    return\
    \ cast(long) floor(sqrt(cast(double) n));\n}\n/*\n Given a number n, find the\
    \ smallest number that has a greater multiple\n than n, without exceeding the\
    \ limit.\n    >>> smallest_multiple(15L, 100L)\n    16L\n*/\nlong smallest_multiple(long\
    \ n, long limit) \n{\n    foreach (i; 6L .. limit) \n    {\n        if (n <= i\
    \ && i % n == 0) \n        {\n            return i;\n        }\n    }\n    return\
    \ -1L;\n}\n/*\n Given a number n, find a number which is the sum of all the digits\
    \ of n\n    >>> sum_digits(123L)\n    6L\n*/\nlong sum_digits(long n) \n{\n  \
    \  long sum = 0L;\n    foreach (c; to!string(n)) \n    {\n        sum += c - '0';\n\
    \    }\n    return sum;\n}\n/*\n Given a number n, find the corresponding character\
    \ from ASCII table\n    >>> num_to_char(65L)\n    'A'\n*/\nchar num_to_char(long\
    \ n) \n{\n    return cast(char) n;\n}\n/*\n Given a character c, find the corresponding\
    \ number from ASCII table\n    >>> char_to_num('A')\n    65L\n*/\nlong char_to_num(char\
    \ c) \n{\n    return cast(long) c;\n}\n/*\n The following function inverts a string\n\
    \    >>> invert_string(\"abc\")\n    \"cba\"\n*/\nstring invert_string(string\
    \ s) \n{\n    string result = \"\";\n    for (int i = s.length; i >= 0; i--) \n\
    \    {\n        result ~= s[i];\n    }\n    return result;\n}\n/*\n Given two\
    \ strings s1 and s2, find a string that contains both s1 and s2\n    >>> merge_strings(\"\
    abc\", \"def\")\n    \"abcdef\"\n*/\nstring merge_strings(string s1, string s2)\
    \ \n{\n    return s1 ~ s2;\n}\n/*\n Given a", "{\n    long i = 2L;\n    while\
    \ (true) \n    {\n        i = i + 1L;\n        if (n % i == 0L) \n        {\n\
    \            n = n / i;\n            i = 2L;\n        }\n        if (i * i > n)\
    \ \n        {\n            return n;\n        }\n    }\n}", "{\n    long max =\
    \ (long) sqrt(n);\n    long i = 2;\n    while (i <= max) \n    {\n        if (n\
    \ % i == 0) \n        {\n            max = n / i;\n        }\n        i++;\n \
    \   }\n    return max;\n}", "{\n    long i;\n    for (i = n - 1; i > 0; i--)\n\
    \    {\n        if (n % i == 0)\n        {\n            return i;\n        }\n\
    \    }\n    return i;\n}\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor_1(15L)\n    5L\n*/\n\
    long largest_divisor_1(long n) \n{\n    long i = n - 1;\n    while (i > 0)\n \
    \   {\n        if (n % i == 0)\n        {\n            return i;\n        }\n\
    \        i = i - 1;\n    }\n    return i;\n}\n/*\n For a given number n, find\
    \ the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_2(15L)\n\
    \    5L\n*/\nlong largest_divisor_2(long n) \n{\n    long i = n - 1;\n    for\
    \ (i = n - 1; i > 0; i--)\n    {\n        if (n % i == 0)\n        {\n       \
    \     return i;\n        }\n    }\n    return i;\n}", "{\n  if (n % 2 == 0) return\
    \ 2;\n  long limit = (long)sqrt(n);\n  long factor = 1;\n  foreach (i; 3..limit\
    \ + 1)\n  {\n    if (n % i == 0)\n    {\n      factor = i;\n    }\n  }\n  return\
    \ factor;\n}", "{\n  return cast(long)(n/2);\n}", "{\n    long i = 2L;\n    for\
    \ (; i <= n / 2; i++)\n    {\n        if (n % i == 0)\n        {\n           \
    \ return n / i;\n        }\n    }\n    return 1L;\n}\n/*\n For a given number\
    \ n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n\
    \    5L\n    \n*/\nlong largest_divisor2(long n) \n{\n    long i = (n / 2) - 1;\n\
    \    for (; i > 1; i--)\n    {\n        if (n % i == 0)\n        {\n         \
    \   return i;\n        }\n    }\n    return 1L;\n}\n/*\n For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n\
    \    5L\n    \n*/\nlong largest_divisor3(long n) \n{\n    long i = (n / 2) - 1;\n\
    \    for (; i > 1; i--)\n    {\n        if (n % i == 0)\n        {\n         \
    \   return i;\n        }\n    }\n    return 1L;\n}", "{\n    long result = n /\
    \ 2;\n    while (n % result != 0L) \n    {\n        result--;\n    }\n    return\
    \ result;\n}", "{\n    static assert(n >= 1L);\n    for (n--; n >= 1L; n--) {\n\
    \        if (n % n == 0L) {\n            return n;\n        }\n    }\n    return\
    \ 1L;\n}", "{\n    for (; n > 0; n--) \n    {\n        if (n % largest_divisor\
    \ == 0)\n            return n;\n    }\n    return n;\n}", "{\n    long divisor\
    \ = n;\n    while (divisor > 1) {\n        if (n % divisor == 0) {\n         \
    \   return divisor;\n        }\n        else {\n            divisor -= 1;\n  \
    \      }\n    }\n    return 0;\n}", "{\n    int retval;\n    int i;\n    retval\
    \ = -1;\n    for (i = int(sqrt(n)); i > 0; i--) {\n        if (n % i == 0) {\n\
    \            retval = i;\n            break;\n        }\n    }\n    return retval;\n\
    }", "{\n    foreach (i; 2..n)\n    {\n        if (n % i == 0)\n        {\n   \
    \         return n / i;\n        }\n    }\n    return 1;\n}", "{\n\tauto nCopy\
    \ = n;\n\tauto largest = n;\n\tfor (long i = 0; i < nCopy; i++)\n\t{\n\t\tif (n\
    \ % i == 0)\n\t\t{\n\t\t\tn = i;\n\t\t\tif (n < largest)\n\t\t\t{\n\t\t\t\tlargest\
    \ = n;\n\t\t\t}\n\t\t}\n\t}\n\treturn largest;\n}\n/*\n Given a string, return\
    \ a new string with all the vowels removed\n    >>> vowels_removed(\"Hello World\"\
    )\n    'Hll Wrld'\n*/\nstring vowels_removed(string s) \n{\n\tstring v = \"\"\
    ;\n\tfor (int i = 0; i < s.length; i++)\n\t{\n\t\tif (s[i] != 'a' && s[i] != 'e'\
    \ && s[i] != 'i' && s[i] != 'o' && s[i] != 'u')\n\t\t{\n\t\t\tv += s[i];\n\t\t\
    }\n\t}\n\treturn v;\n}\n/*\n Given two strings s and t, return true iff the letters\
    \ in s can be remapped to get t\n    >>> is_isomorphic(\"add\", \"egg\")\n   \
    \ True\n    >>> is_isomorphic(\"foo\", \"bar\")\n    False\n*/", "{\n    long\
    \ d = 2L;\n    while (true) {\n        if (n % d == 0L) {\n            if (n ==\
    \ d)\n                return n;\n            else\n                return largest_divisor(n\
    \ / d);\n        }\n        d++;\n    }\n}", "{\n    long max=1;\n    for(long\
    \ d=2; d<=n; d++) \n    {\n        if (n%d==0) \n        {\n            max=d;\n\
    \        }\n    }\n    return max;\n}", "{\n    assert(n > 0);\n    int counter\
    \ = (int)sqrt(n);\n    for (;counter > 0;counter--) \n    {\n        if ((n %\
    \ counter) == 0) \n        {\n            return (long)counter;\n        }\n \
    \   }\n    return 1L;\n}", "{\n    for (long i = n - 1; i > 0; i--) \n    {\n\
    \        if (n % i == 0)\n            return i;\n    }\n    assert(0);\n}", "{\n\
    \    foreach (i; 1L .. n) \n    {\n        if (n % i == 0)\n        {\n      \
    \      return i;\n        }\n    }\n    return n;\n}", "{\n    if (n <= 1L) \n\
    \        return 1L;\n    if (n % 2L == 0L) \n        return n / 2L;\n    for (long\
    \ i = n / 2L; i > 1L; i -= 1L) \n    {\n        if (n % i == 0L) \n          \
    \  return i;\n    }\n    return 1L;\n}\n/*\n Find the number of primes within\
    \ a given range\n    >>> count_primes(2L, 4L)\n    1L\n*/\nlong count_primes(long\
    \ a, long b) \n{\n    if (a < 2L) \n        a = 2L;\n    long prime_count = 0L;\n\
    \    for (long num = a; num <= b; num += 1L) \n    {\n        bool is_prime =\
    \ true;\n        long max_factor = cast(long)sqrt(num);\n        for (long i =\
    \ 2L; i <= max_factor; i += 1L) \n        {\n            if (num % i == 0L) \n\
    \            {\n                is_prime = false;\n                break;\n  \
    \          }\n        }\n        if (is_prime) \n            prime_count += 1L;\n\
    \    }\n    return prime_count;\n}\n/*\n Find the largest prime factor of a number\n\
    \    >>> largest_prime_factor(100L)\n    5L\n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    if (n <= 1L) \n        return 1L;\n    if (n % 2L == 0L) \n    \
    \    return largest_prime_factor(n / 2L);\n    long max_factor = cast(long)sqrt(n);\n\
    \    for (long i = max_factor; i > 1L; i -= 1L) \n    {\n        if (n % i ==\
    \ 0L) \n            return largest_prime_factor(i);\n    }\n    return n;\n}\n\
    /*\n* Concatenate the string representation of a range of numbers\n*\n*  >>> concat_range(1L,\
    \ 10L)\n*  \"12345678910\"\n*/\nstring conc", "{\n    foreach (i; 2L .. isqrt(n)\
    \ + 1L) {\n        if (n % i == 0L) {\n            return n / i;\n        }\n\
    \    }\n    return 1L;\n}", "{\n    foreach (d; 1L .. n)\n    {\n        if (n\
    \ % d == 0)\n        {\n            return d;\n        }\n    }\n    return 0;\n\
    }", "{\n    long i = n-1;\n    while (i > 0) \n    {\n        if (n % i == 0)\n\
    \            return i;\n        else\n            i--;\n    }\n    return i;\n\
    }\n/*\nFind the sum of all factors of a number\n    >>> sum_of_factors(4L)\n \
    \   7L\n*/\nlong sum_of_factors(long n) \n{\n    long i = 1;\n    long sum = 0;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0)\n            sum += i;\n\
    \        i++;\n    }\n    return sum;\n}\n/*\n Check if a number is prime\n  \
    \   >>> is_prime(2L)\n     True\n     >>> is_prime(3L)\n     True\n     >>> is_prime(4L)\n\
    \     False\n */", "{\n  long max = 2L;\n  long i = 2L;\n  while (i <= n) \n \
    \ {\n    if (n % i == 0L) \n    {\n      max = i;\n    }\n    i = i + 1L;\n  }\n\
    \  return max;\n}", "{\n    long result = 0L;\n    for (long i = 1L; i < n; i++)\n\
    \    {\n        if ( n % i == 0)\n        {\n            result = i;\n       \
    \ }\n    }\n    return result;\n}", "{\n    long largest = 1;\n    for (long x\
    \ = 2; x < n; x++) \n    {\n        if (n % x == 0) \n        {\n            largest\
    \ = x;\n        }\n    }\n    return largest;\n}\n/*\n For a given number n, find\
    \ the sum of all integers from 0 to n\n    >>> sum_of_all_integers(10L)\n    55L\n\
    */\nlong sum_of_all_integers(long n) \n{\n    long sum = 0;\n    for (long x =\
    \ 0; x <= n; x++) \n    {\n        sum += x;\n    }\n    return sum;\n}\n/*\n\
    \ For a given number n, find the sum of all odd integers from 0 to n\n    >>>\
    \ sum_of_all_odd_integers(10L)\n    25L\n*/\nlong sum_of_all_odd_integers(long\
    \ n) \n{\n    long sum = 0;\n    for (long x = 0; x <= n; x += 2) \n    {\n  \
    \      sum += x;\n    }\n    return sum;\n}\n/*\n For a given number n, find the\
    \ sum of all even integers from 0 to n\n    >>> sum_of_all_even_integers(10L)\n\
    \    30L\n*/\nlong sum_of_all_even_integers(long n) \n{\n    long sum = 0;\n \
    \   for (long x = 1; x <= n; x += 2) \n    {\n        sum += x;\n    }\n    return\
    \ sum;\n}\n/*\n For a given number n, find the sum of the squares of all integers\
    \ from 0 to n\n    >>> sum_of_squares(10L)\n    385L\n*/\nlong sum_of_squares(long\
    \ n) \n{\n    long sum = 0;\n    for (long x = 0; x <= n; x++) \n    {\n     \
    \   sum += x*x;\n    }\n    return sum;\n}\n/*\n For a given number n, find the\
    \ sum of the cubes of all integers from 0 to n\n    >>> sum_of_cubes(10L)\n  \
    \  3025L", "{\n\tn--;\n\twhile (n > 1 && n % 2 == 0)\n\t\tn = n / 2;\n\twhile\
    \ (n > 1 && n % 3 == 0)\n\t\tn = n / 3;\n\twhile (n > 1 && n % 5 == 0)\n\t\tn\
    \ = n / 5;\n\treturn n;\n}", "{\n    import std.math : sqrt;\n    foreach (i;\
    \ 1L .. cast(long)sqrt(n)) {\n        if (n % i == 0) {\n            return n\
    \ / i;\n        }\n    }\n    return 1L;\n}\n ", "{\n    long l = 2L;\n    while(l\
    \ < n) {\n        if(n % l == 0L) {\n            return l;\n        }\n      \
    \  l++;\n    }\n    return l;\n}\n/*\n  Next Prime\n    >>> next_prime(15L)\n\
    \    17L", "{\n    long m;\n    while (m > 1) \n    {\n        if (n % m == 0)\
    \ \n        {\n            return m;\n        }\n        m = m - 1;\n    }\n \
    \   return 1;\n}", "{\n    long largest = 0L;\n    for (long i = 0L; i < n; i++)\n\
    \    {\n        if (n % i == 0)\n        {\n            largest = i;\n       \
    \ }\n    }\n    return largest;\n}", "{\n    long result = 0L;\n    for (long\
    \ d = 1L; d <= n; d++) \n    {\n        if (n % d == 0L) \n        {\n       \
    \     result = d;\n        }\n    }\n    return result;\n}\n//>>> largest_divisor(15L)\n\
    //5L", "{\n    for (long d = n - 1; d > 0; d--) \n    {\n        if (n % d ==\
    \ 0) \n        {\n            return d;\n        }\n    }\n    return 1;\n}",
  "{\n    foreach (x; iota(n/2L, 1L, -1L))\n        if (n % x == 0) return x;\n  \
    \  return 1L;\n}", "{\n    long d = 2L;\n    foreach (i;iota(2L, sqrt(n))) {\n\
    \        if (n % i == 0) {\n            d = i;\n        }\n    }\n    return d;\n\
    }\n/*\n Create a function that takes an array of characters and reverses the letters\
    \ in place.\n*/", "{\n    long i;\n    for (i = n - 1; i > 0; i--) \n    {\n \
    \       if (n % i == 0) \n        {\n            return i;\n        }\n    }\n\
    \    return 1;\n}\n/*\n Given a number n, find the smallest number that is greater\
    \ than n and evenly divisible\n by all the numbers from 1 to n\n    >>> smallest_multiple(5L)\n\
    \    60L\n*/\nlong smallest_multiple(long n) \n{\n    long result;\n    long i;\n\
    \    result = n;\n    for (i = n - 1; i > 0; i--) \n    {\n        if (result\
    \ % i != 0) \n        {\n            result = result * i / largest_divisor(result);\n\
    \        }\n    }\n    return result;\n}\n/*\n The sum of the squares of the first\
    \ ten natural numbers is,\n 12 + 22 + ... + 102 = 385\n The square of the sum\
    \ of the first ten natural numbers is,\n (1 + 2 + ... + 10)2 = 552 = 3025\n Hence\
    \ the difference between the sum of the squares of the first ten natural numbers\
    \ and the square of the sum is 3025 \u2212 385 = 2640.\n Find the difference between\
    \ the sum of the squares of the first one hundred natural numbers and the square\
    \ of the sum.\n    >>> sum_square_difference(10L)\n    2640L\n*/\nlong sum_square_difference(long\
    \ n) \n{\n    long sum_of_squares;\n    long square_of_sum;\n    long i;\n   \
    \ sum_of_squares = 0;\n    square_of_sum = 0;\n    for (i = 1; i <= n; i++) \n\
    \    {\n        sum_of_squares = sum_of_squares + i * i;\n        square_of_sum\
    \ = square_of_sum + i;\n    }\n    square_of_sum = square_of_sum * square_of_sum;\n\
    \    return square_of_sum - sum_of_squares;\n}\n/*\n Find the 10,001st prime\n\
    \    >>> prime_at(10001L)\n    104743L", "{\n    long result = 0L;\n    long max\
    \ = sqrt(n);\n    foreach (i; 1L .. max) \n    {\n        if ((n % i) == 0L)\n\
    \            result = i;\n    }\n    return result;\n}", "{\n    if (n < 2)\n\
    \    {\n\t\twriteln(\"n must be larger than 1!\");\n\t\treturn 1;\n\t}\n\t\n\t\
    long i = long(sqrt(double(n)));\n\tfor (; i > 1; i--)\n\t{\n\t\tif (n % i == 0)\n\
    \t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn 1;\n}", "{\n    long largest = 1;\n\
    \    foreach (q; 2..n/2+1) \n    {\n        if (n % q == 0) \n        {\n    \
    \        largest = q;\n        }\n    }\n    return largest;\n}", "{\n    long\
    \ result = 0L;\n    foreach (i; 2 .. n) \n    {\n        if (n % i == 0) \n  \
    \      {\n            result = i;\n        }\n    }\n    return result;\n}\n/*\n\
    \ For a given list of numbers return their sum\n    >>> sum([1, 2, 3, 4, 5])\n\
    \    15\n*/", "{\n    long res = n-1;\n    while (n % res != 0) res--;\n    return\
    \ res;\n}", "{\n    long i;\n    for (i = long.floor(sqrt(n)); i > 0; i--) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \    }\n    return 1;\n}\n/*\n    Challenge: Write a function that takes in a\
    \ list of numbers and finds the largest number\n    >>> max_num([5, 10, 15, 20])\n\
    \    20\n*/\nlong max_num(long[] list) \n{\n    long largest = list[0];\n    foreach\
    \ (num; list) \n    {\n        if (num > largest) \n        {\n            largest\
    \ = num;\n        }\n    }\n    return largest;\n}\n/*\n     Challenge: Write\
    \ a function that takes in a list of numbers and returns a list of only the even\
    \ numbers\n     >>> even_nums([2, 3, 4, 5, 6])\n     [2, 4, 6]\n*/\nlong[] even_nums(long[]\
    \ list) \n{\n    long[] evens = [];\n    foreach (num; list) \n    {\n       \
    \ if (num % 2 == 0) \n        {\n            evens ~= num;\n        }\n    }\n\
    \    return evens;\n}", "{\n    long divisor = n;\n    for (long i = divisor -\
    \ 1; i > 0; i--) \n    {\n        if (n % i == 0) \n        {\n            divisor\
    \ = i;\n            break;\n        }\n    }\n    return divisor;\n}", "{\n  \
    \  for (long i = n - 1; i > 0; i--)\n    {\n        if (n % i == 0)\n        {\n\
    \            return i;\n        }\n    }\n    return 0;\n}", "{\n    long largest;\n\
    \    long i;\n    i = n-1;\n    while (i >= 2)\n    {\n        if (n % i == 0)\n\
    \        {\n            largest = i;\n            break;\n        }\n        i--;\n\
    \    }\n    return largest;\n}", "{\n    for ( long i = 2L; i < n; i++ ) \n  \
    \  {\n        if ( n % i == 0L ) \n        {\n            n = n / i;\n       \
    \     return largest_divisor(n);\n        }\n    }\n    return n;\n}", "{\n  \
    \  // Two divisors: n, n-1 and n-2\n    for (long i = n - 1; i > 0; i--)\n   \
    \ {\n        // Check if it divides evenly\n        if ((n % i) == 0)\n      \
    \  {\n            return i;\n        }\n    }\n    return 1;\n}", "{\n\t//Check\
    \ if the number is prime, if so, return it,\n\t//  because it will be the largest\
    \ factor\n\tforeach(i; 0 .. n) {\n\t\tif(isPrime(i) && (n % i == 0)) {\n\t\t\t\
    return i;\n\t\t}\n\t}\n\treturn 0;\n}", "{\n    if (n <= 1L)\n        return 1L;\n\
    \    long max_divisor = 1L;\n    long max_i = (long)sqrt(n);\n    foreach (i;\
    \ 2L .. max_i + 1L) \n    {\n        if (n % i == 0L)\n            max_divisor\
    \ = i;\n    }\n    return max_divisor;\n}\n ", "{\n    long d = 2L;\n    while\
    \ (d < n) {\n        if (n % d == 0L) {\n            return n / d;\n        }\n\
    \        d += 1L;\n    }\n    return 1L;\n}\n/*\n For a given number n, find the\
    \ sum of all primes smaller than n.\n    >>> sum_of_primes(10L)\n    17L\n   \
    \ \n*/\nlong sum_of_primes(long n) \n{\n    long sum = 0L;\n    long k = 2L;\n\
    \    while (k < n) {\n        if (is_prime(k)) {\n            sum += k;\n    \
    \    }\n        k += 1L;\n    }\n    return sum;\n}\n/*\n For a given number n,\
    \ find the sum of the first n fibonacci numbers.\n    >>> sum_of_fibonacci(3L)\n\
    \    4L\n    \n*/\nlong sum_of_fibonacci(long n) \n{\n    if (n == 0L) {\n   \
    \     return 0L;\n    }\n    long a = 0L;\n    long b = 1L;\n    long k = 1L;\n\
    \    long sum = a + b;\n    while (k < n) {\n        b = a + b;\n        a = b\
    \ - a;\n        sum += b;\n        k += 1L;\n    }\n    return sum;\n}\n/*\n For\
    \ a given number n, find the sum of the first n factorials.\n    >>> sum_of_factorials(3L)\n\
    \    9L\n    \n*/\nlong sum_of_factorials(long n) \n{\n    long sum = 0L;\n  \
    \  long k = 1L;\n    while (k <= n) {\n        sum += factorial(k);\n        k\
    \ += 1L;\n    }\n    return sum;\n}\n/*\n For a given number n, find the sum of\
    \ the first n squares.\n    >>> sum_of_squares(3L)\n    14L\n    \n*/\nlong sum_of_squares(long\
    \ n) \n{\n    long sum = 0L;\n    long", "{\n    for (long d = n-1; d > 0; d--)\
    \ \n    {\n        if (n % d == 0) \n        {\n            return d;\n      \
    \  }\n    }\n    return n;\n}", "{\n    if (n % 2L == 0L) \n    {\n        return\
    \ largest_divisor(n / 2L) * 2L;\n    }\n    for (long i = 3L; i <= sqrt(n); i\
    \ += 2L) \n    {\n        if (n % i == 0L) \n        {\n            return largest_divisor(n\
    \ / i) * i;\n        }\n    }\n    return n;\n}", "{\n    long largest = 0L;\n\
    \    for (long i = 1L; i <= n; i++)\n    {\n        if (n % i == 0)\n        {\n\
    \            largest = i;\n        }\n    }\n    return largest;\n}\n/*\nFizz\
    \ Buzz\n    >>> [fizz_buzz(i) for i in range(20)]\n    [1, 2, 'Fizz', 4, 'Buzz',\
    \ 'Fizz', 7, 8, 'Fizz', 'Buzz', 11, 'Fizz', 13, 14, 'FizzBuzz', 16, 17, 'Fizz',\
    \ 19, 'Buzz']\n*/\nstring fizz_buzz(long n) \n{\n    if (n % 15 == 0)\n    {\n\
    \        return \"FizzBuzz\";\n    }\n    else if (n % 3 == 0)\n    {\n      \
    \  return \"Fizz\";\n    }\n    else if (n % 5 == 0)\n    {\n        return \"\
    Buzz\";\n    }\n    else\n    {\n        return str(n);\n    }\n}\n/*\nWrite a\
    \ function translate() that will translate a text into \"r\xF6varspr\xE5ket\"\
    \ (Swedish for \"robber's language\"). That is, double every consonant and place\
    \ an occurrence of \"o\" in between. For example, translate(\"this is fun\") should\
    \ return the string \"tothohisos isos fofunon\".\n    >>> translate(\"this is\
    \ fun\")\n    'tothohisos isos fofunon'\n*/\nstring translate(string text) \n\
    {\n    string result = \"\";\n    for (char c : text)\n    {\n        if (c ==\
    \ ' ')\n        {\n            result += ' ';\n        }\n        else if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n          \
    \  result += c;\n        }\n        else\n        {\n            result += c;\n\
    \            result += 'o';\n            result += c;\n        }\n    }\n    return\
    \ result;\n}\n/*\nWrite a function sum() and a function multiply() that sums and\
    \ multiplies (respectively) all", "{\n    long largest_divisor = 0L;\n    long\
    \ i = 2L;\n    while (i < n) \n    {\n        if ((n % i) == 0L) \n        {\n\
    \            largest_divisor = i;\n        }\n        i += 1L;\n    }\n    return\
    \ largest_divisor;\n}\n// @exclude", "{\n    long largest_divisor = 2L;\n    for\
    \ ( long i = 3L; i < n; i += 2L )\n    {\n        if ( 0L == n % i ) \n      \
    \  {\n            largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n\
    }", "{\n    foreach (long i; 0..(n+1)/2)\n    {\n        if (n % i == 0)\n   \
    \     {\n            return i;\n        }\n    }\n    return 1;\n}", "{\n    auto\
    \ m = long(0);\n    while (true) {\n        auto i = long(m+1);\n        if (n\
    \ % i == 0) {\n            m = i;\n        } else {\n            break;\n    \
    \    }\n    }\n    return m;\n}", "{\n    long i;\n    for (i = n - 1; i > 0;\
    \ i--) \n    {\n        if (n % i == 0) \n        {\n            return i;\n \
    \       }\n    }\n    return -1;\n}", "{\n    if (n < 2)\n        return 0;\n\
    \    for (long i = sqrt(n); i > 1; i--)\n        if (n % i == 0)\n           \
    \ return i;\n    return 1;\n}", "{\n  foreach (i; 1..n-1) \n  {\n    if (n % i\
    \ == 0) \n    {\n      return i;\n    }\n  }\n  return 1;\n}", "{\n    long i;\n\
    \    long largest;\n    i = n - 1;\n    largest = 1;\n    while (i > 1) \n   \
    \ {\n        if (mod(n, i) == 0) \n        {\n            largest = i;\n     \
    \       break;\n        }\n        i = i - 1;\n    }\n    return largest;\n}",
  "{\n\tauto a = n;\n\tfor (auto i = 2L; i < n; i++) \n\t{\n\t\twhile (n % i == 0)\
    \ \n\t\t{\n\t\t\tn /= i;\n\t\t}\n\t}\n\tassert(n != 1);\n\treturn a / n;\n}",
  "{\n    long max = 0L;\n    for (long i = 1L; i < n; i++)\n    {\n        if (n\
    \ % i == 0L) max = i;\n    }\n    return max;\n}", "{\n    for (long i = n - 1;\
    \ i > 0; i--) \n    {\n        if (n % i == 0) \n        {\n            return\
    \ i;\n        }\n    }\n}", "{\n    long largest = n;\n    foreach (i; 1 .. n)\n\
    \    {\n        if(n % i == 0 && largest < i)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}", "{\n    long divisor = n;\n\
    \    while (divisor > 1) {\n        if (n % divisor == 0) {\n            return\
    \ divisor;\n        }\n        divisor -= 1;\n    }\n    return divisor;\n}",
  "{\n    auto a = long(1);\n    while (a < n) \n    {\n        if (n % a == 0) \n\
    \        {\n            return a;\n        }\n        a++;\n    }\n    return\
    \ a;\n}\n/*\n Given a string and a char, return the number of times the character\
    \ occurs in the string\n    >>> count_char(\"Hello\", 'l')\n    2\n*/\nlong count_char(string\
    \ s, char c) \n{\n    auto result = long(0);\n    for (a in s) \n    {\n     \
    \   if (a == c) \n        {\n            result++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long divisor;\n    divisor = 2L;\n    while (n % divisor\
    \ != 0L) \n    {\n        divisor = divisor + 1L;\n    }\n    return divisor;\n\
    }", "{\n    foreach (p; 2L .. sqrt(n) + 1L) \n    {\n        if (n % p == 0L)\
    \ \n        {\n            return n / p;\n        }\n    }\n    return 1L;\n}\n\
    ```\nI define a function `largest_divisor` which takes a number of type `long`\
    \ and returns a number of type `long`. \nThe body of the function uses the `foreach`\
    \ keyword to iterate over the range `2L .. sqrt(n) + 1L` and return the result.\
    \ \nIf `n` is not divisible by `p`, then the loop continues on to the next iteration.\
    \ \nIf `n` is divisible by `p`, then the function returns `n / p`. \nThe `L` suffix\
    \ after `2L` is a type suffix indicating the literal is of type `long`.\nThe function\
    \ `largest_divisor` is called in the unit test written in the `unittest` block.",
  "{\n    long largest = 1;\n    for (long x = 2; x < (n/2)+1; x++)\n    {\n     \
    \   if (n % x == 0)\n        {\n            largest = x;\n        }\n    }\n \
    \   return largest;\n}\n/*\n Find the largest divisor of n that is also a prime\
    \ number.\n    >>> largest_prime_divisor(15L)\n    5L\n*/\nlong largest_prime_divisor(long\
    \ n) \n{\n    long largest = 1;\n    for (long x = 2; x < (n/2)+1; x++)\n    {\n\
    \        if (n % x == 0)\n        {\n            if (is_prime(x))\n          \
    \  {\n                largest = x;\n            }\n        }\n    }\n    return\
    \ largest;\n}\n// Predicate function to test if a number is prime", "{\n    if\
    \ (n == 0L) return 0L;\n    long result = n;\n    for (long i = 2L; i < n; i++)\
    \ \n    {\n        if (n % i == 0L) \n        {\n            result = i;\n   \
    \     }\n    }\n    return result;\n}\n/*\nFind the largest number that is equal\
    \ to the sum of the squares of its digits\n    >>> largest_digit_sum_square(100L)\n\
    \    99L\n*/\nlong largest_digit_sum_square(long x) \n{\n    long result = 0L;\n\
    \    for (long i = 1L; i <= x; i++) \n    {\n        if (sum_of_squares_of_digits(i)\
    \ == i) \n        {\n            result = i;\n        }\n    }\n    return result;\n\
    }\n/*\nFor a given number n, return the sum of its digits squared\n    >>> sum_of_squares_of_digits(13L)\n\
    \    10L\n*/\nlong sum_of_squares_of_digits(long n) \n{\n    if (n < 0L) \n  \
    \  {\n        return sum_of_squares_of_digits(-n);\n    }\n    if (n < 10L) \n\
    \    {\n        return n * n;\n    }\n    return (n % 10L) * (n % 10L) + sum_of_squares_of_digits(n\
    \ / 10L);\n}\n/*\nFind the sum of all the even valued terms of the Fibonacci series\
    \ whose values do not exceed four million\n    >>> sum_even_fibonacci(4000000L)\n\
    \    4613732L\n*/\nlong sum_even_fibonacci(long n) \n{\n    long first = 1L;\n\
    \    long second = 2L;\n    long even_sum = 2L;\n    while (first + second <=\
    \ n) \n    {\n        long next = first + second;\n        if (next % 2L == 0L)\
    \ \n        {\n            even_sum += next;\n        }\n        first = second;\n\
    \        second = next;\n    }", "{\n    long largest = 0L;\n    foreach (i; 1L\
    \ .. n)\n    {\n        if (n % i == 0L)\n        {\n            largest = i;\n\
    \        }\n    }\n    return largest;\n}", "{\n    foreach (immutable i; [2 ..\
    \ n/2])\n        if (n % i == 0) return n/i;\n    return 1;\n}", "{\n    long\
    \ largest_d = 1L;\n    for ( long d = 2L; d < n/2; d += 1L )\n    {\n        if\
    \ ( n % d == 0 )\n        {\n            largest_d = d;\n        }\n    }\n  \
    \  return largest_d;\n}", "{\n    long i = 2L;\n    while (i < n) \n    {\n  \
    \      if (n % i == 0L) \n        {\n            return n / i;\n        }\n  \
    \      i++;\n    }\n    return 1L;\n}\n/*\nThe length of a string is number of\
    \ characters in it\n    >>> string_length(\"hello\")\n    5\n*/\nlong string_length(const(char)*\
    \ str) \n{\n    long n = 0L;\n    foreach (c; str) \n    {\n        n++;\n   \
    \ }\n    return n;\n}\n/*\n Find the closest point to a given point. Return the\
    \ index of the closest point and the distance\n*/\ntuple!(long, long) closest_point(long\
    \ point_x, long point_y, long[] points_x, long[] points_y) \n{\n    long index\
    \ = 0L;\n    long distance = 999999999L;\n    long n = 0L;\n    foreach (x; points_x)\
    \ \n    {\n        long x_diff = point_x - x;\n        long y_diff = point_y -\
    \ points_y[n];\n        long this_distance = abs(x_diff) + abs(y_diff);\n    \
    \    if (this_distance < distance) \n        {\n            index = n;\n     \
    \       distance = this_distance;\n        }\n        n++;\n    }\n    return\
    \ (index, distance);\n}\n/*\n Return the highest number in a list\n    >>> highest_number([1,\
    \ 5, 2, 3, 4])\n    5\n*/\nlong highest_number(long[] numbers) \n{\n    long max\
    \ = numbers[0];\n    foreach (num; numbers) \n    {\n        if (num > max) \n\
    \        {\n            max = num;\n        }\n    }\n    return max;\n}\n/*\n\
    \ Return the sum of a list of numbers\n    >>> add_numbers([1, 2, 3, 4])\n   \
    \ 10\n*/\nlong add_numbers(long[] numbers) \n{\n    long sum = 0L;\n    foreach\
    \ (num; numbers) \n    {\n        sum += num;", "{\n    int i;\n    for (i = (int)sqrt(n);\
    \ i >= 1; i--) \n    {\n        if (n % i == 0) \n        {\n            return\
    \ (long)i;\n        }\n    }\n    return (long)i;\n}", "{\n    // n must be a\
    \ positive number\n    assert(n>0);\n    // Start from 2 (the smallest prime number)\n\
    \    for (int i = 2; i < n; i++) \n    {\n        // Check if i divides n\n  \
    \      if (n % i == 0) \n        {\n            // If yes, then update n and i\n\
    \            n = n / i;\n            i = i - 1;\n        }\n    }\n    return\
    \ n;\n}\n/*\n WAP to print all numbers from 1 to 100. But for multiples of 3 print\
    \ \u201CFizz\u201D instead of the number and for the multiples of 5 print \u201C\
    Buzz\u201D. For numbers which are multiples of both 3 and 5 print \u201CFizzBuzz\u201D\
    .\n*/", "{\n    long k;\n    foreach (k; 0 .. n)\n    {\n        if (n % k ==\
    \ 0)\n        {\n            return k;\n        }\n    }\n    return 0;\n}", "{\n\
    \    long max = sqrt(n) + 1;\n    long largest_factor = 1;\n    for (long i =\
    \ 2; i < max; i++) \n    {\n        if (n % i == 0) \n        {\n            largest_factor\
    \ = i;\n        }\n    }\n    return largest_factor;\n}\n ", "{\n    long i =\
    \ 2L;\n    long lim = sqrt(n);\n    for (; i < lim; i++) \n    {\n        if (n\
    \ % i == 0L) \n        {\n            return n / i;\n        }\n    }\n    return\
    \ 1L;\n}\n/*\n Given n, generate the nth prime number\n >>> nth_prime(1)\n 2\n\
    \ >>> nth_prime(2)\n 3\n >>> nth_prime(5)\n 11\n*/\nlong nth_prime(int n) \n{\n\
    \    long prime = 2L;\n    foreach (int i; 0 .. n) \n    {\n        prime = next_prime(prime);\n\
    \    }\n    return prime;\n}\n/*\n Given n, generate the next prime number\n \n\
    \ Note, on my system this is extremely slow\n \n >>> next_prime(2)\n 3\n >>> next_prime(3)\n\
    \ 5\n*/\nlong next_prime(long n) \n{\n    if (n == 2L) \n    {\n        return\
    \ 3L;\n    }\n    if (n % 2L == 0L) \n    {\n        n++;\n    }\n    for (; !is_prime(n);\
    \ n += 2L) ;\n    return n;\n}", "{\n    return (n <= 2L ? 1L : n / 2L + 1L);\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
