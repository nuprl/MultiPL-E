name: HumanEval_146_specialFilter
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes an\
  \ array of numbers as input and returns \n    the number of elements in the array\
  \ that are greater than 10 and both \n    first and last digits of a number are\
  \ odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L,\
  \ -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n\
  \    \n*/\nlong specialFilter(long[] nums) \n"
tests: "unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
  \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
  \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
  \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L,\
  \ 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
  \ == 0L);\n}\nvoid main(){}"
completions: ["{\n\tint count = 0;\n\t\n\tforeach(num; nums) \n\t{\n\t\tint first\
    \ = num.to!string[0].to!int;\n\t\tint last = num.to!string[$-1].to!int;\n\t\t\n\
    \t\tif(num > 10 && first % 2 == 1 && last % 2 == 1)\n\t\t\tcount++;\n\t}\n\t\n\
    \treturn count;\n}", "{\n    auto count = 0L;\n    auto firstNumber;\n    auto\
    \ lastNumber;\n    auto result;\n    foreach(num; nums) \n    {\n        firstNumber\
    \ = num / 10^(floor(log10(num)));\n        lastNumber = num % 10;\n        if(num\
    \ > 10 && firstNumber % 2 != 0 && lastNumber % 2 != 0) \n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}", "{\n    long greaterThan10\
    \ = nums.filter!((e) => (e > 10L)).length;\n    long oddFirstLast = nums.filter!((e)\
    \ => (e.toString().length > 1)).\n        filter!((e) => (((e.toString()[0].toInt\
    \ - '0'.toInt) & 1) == 1)).\n        filter!((e) => (((e.toString()[$ - 1].toInt\
    \ - '0'.toInt) & 1) == 1)).\n        length;\n    return greaterThan10 + oddFirstLast;\n\
    }\n/*\nWrite a function that takes an array of integers and returns the sum of\
    \ \n    those integers.\n    For example:\n    >>> addIntegers([1L, 2L, 3L])\n\
    \    6L\n    >>> addIntegers([-1L, 0L, 1L])\n    0L\n    >>> addIntegers([1L,\
    \ 2L, 3L, 5L, 7L, 9L])\n    27L\n*/\nlong addIntegers(long[] nums) \n{\n    return\
    \ nums.fold!(a => b => a + b)(0L);\n}\n/*\nWrite a function that takes an array\
    \ of integers and returns the sum of \n    the values of the elements of the array\
    \ whose first digit is even.\n    For example:\n    >>> digitSum([11L, 12L, 13L,\
    \ 14L, 15L])\n    26L\n    >>> digitSum([15L, -73L, 14L, -15L])\n    0L\n    >>>\
    \ digitSum([33L, -2L, -3L, 45L, 21L, 109L])\n    0L\n*/\nlong digitSum(long[]\
    \ nums) \n{\n    return nums.filter!((e) => (e.toString().length > 0)).\n    \
    \    filter!((e) => (((e.toString()[0].toInt - '0'.toInt) & 1) == 0)).\n     \
    \   fold!(a => b => a + b)(0L);\n}\n/*\nWrite a function that takes an array of\
    \ integers and returns the sum of \n    the values of the elements of the array\
    \ whose first digit", "{\n    int count = 0;\n    foreach(long num; nums) \n \
    \   {\n        if(num > 10) \n        {\n            long firstDigit = num / (cast(long)\
    \ pow(10, ceil(log10(num)))) % 10;\n            long lastDigit = num % 10;\n \
    \           if(firstDigit % 2 != 0 && lastDigit % 2 != 0) \n            {\n  \
    \              count++;\n            }\n        }\n    }\n    return count;\n}",
  "{\n    long n = 0;\n    foreach(long x; nums)\n    {\n        long f = x;\n   \
    \     long last = f % 10;\n        while(f > 0)\n        {\n            f /= 10;\n\
    \        }\n        if(abs(x) > 10 && (f % 2 != 0) && (last % 2 != 0))\n     \
    \   {\n            n++;\n        }\n    }\n    return n;\n}", "{\n    long counter\
    \ = 0;\n    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n         \
    \   long temp = n;\n            int first = temp.to!int() / 10.to!int();\n   \
    \         int last = temp.to!int() % 10;\n            if(first % 2 != 0 && last\
    \ % 2 != 0)\n            {\n                counter++;\n            }\n      \
    \  }\n    }\n    return counter;\n}", "{\n    import std.algorithm : filter, map;\n\
    \    //return nums.filter!(a => a % 2 != 0 && a > 10).length;\n    return nums.filter!(a\
    \ => a % 2 != 0 && a > 10)\n        .map!(b => b.to!string())\n        .filter!(c\
    \ => (c[0] == '1' || c[0] == '3' || c[0] == '5' || c[0] == '7' || c[0] == '9')\
    \ && (c[$-1] == '1' || c[$-1] == '3' || c[$-1] == '5' || c[$-1] == '7' || c[$-1]\
    \ == '9'))\n        .length;\n}\n \nstatic assert(specialFilter([15L, -73L, 14L,\
    \ -15L]) == 1L);\nstatic assert(specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n/*\nWrite a function that takes an array of strings as input and returns\
    \ \nthe number of strings that start with a capital letter. \nFor example:\n>>>\
    \ capCounter([\"Apple\", \"Dubai\", \"A\", \"B\"])\n2\n*/\nlong capCounter(string[]\
    \ strs) \n{\n    import std.algorithm : filter;\n    return strs.filter!(a =>\
    \ a[0] >= 'A' && a[0] <= 'Z').length;\n}", "{\n    return nums.filter!(n => n>10\
    \ && (n/10)%2!=0 && n%2!=0)().length;\n}", "{\n    long result = 0;\n    foreach(n;\
    \ nums)\n    {\n        long i = n;\n        if(n > 10)\n        {\n         \
    \   while(i > 9) i /= 10;\n            if(n % 2 != 0 && i % 2 != 0)\n        \
    \        result++;\n        }\n    }\n    return result;\n}", "{\n    long ret\
    \ = 0;\n    foreach(num; nums) \n    {\n        if (num > 10) \n        {\n  \
    \          auto digits = num.toString.length.to!long;\n            auto firstNum\
    \ = num.toString[0..1].to!long;\n            auto lastNum = num.toString[$-1..$].to!long;\n\
    \            if (firstNum % 2 != 0 && lastNum % 2 != 0) \n            {\n    \
    \            ret++;\n            }\n        }\n    }\n    return ret;\n}", "{\n\
    \    return nums.filter!(x => x > 10L && isOdd(x % 10L) && isOdd(x / 10L)).length;\n\
    }", "{\n\treturn nums.filter!(a => a > 10L && a.toString().front.to!int % 2 ==\
    \ 1 && a.toString().back.to!int % 2 == 1).length;\n}", "{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        string strnum = to!string(num);\n    \
    \    if(num > 10 && to!long(strnum[0..1])%2 != 0 && to!long(strnum[$-1..$])%2\
    \ != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n \n \n ", "{\n    long result = 0;\n    foreach(num; nums)\n    {\n       \
    \ if(num > 10)\n        {\n            int first = to!int(num).front;\n      \
    \      int last = to!int(num).back;\n            if((first % 2 == 1) && (last\
    \ % 2 == 1)) result++;\n        }\n    }\n    return result;\n}", "{\n    auto\
    \ numOddDigits = 0L;\n    foreach(num; nums) \n    {\n        auto digits = num;\n\
    \        if(digits < 0)\n            digits = -digits;\n        auto first = num[0];\n\
    \        auto last = num[$-1];\n        if((first.isOdd && last.isOdd) && num\
    \ > 10)\n            numOddDigits++;\n    }\n    return numOddDigits;\n}\n// void\
    \ main() { }", "{\n    int counter = 0;\n    foreach(int num; nums)\n    {\n \
    \       if(num > 10)\n        {\n            string num_string = num.to!string;\n\
    \            if(to!int(num_string[0]) % 2 == 1 && \n               to!int(num_string[num_string.length-1])\
    \ % 2 == 1)\n                counter++;\n        }\n    }\n    return counter;\n\
    }\n// Version 2\nlong specialFilter_v2(long[] nums) \n{\n    import std.stdio\
    \ : writeln;\n    int counter = 0;\n    foreach(int num; nums)\n    {\n      \
    \  if(num > 10)\n        {\n            int first_digit = num % 10;\n        \
    \    while(num >= 10)\n                num /= 10;\n            if(num % 2 == 1\
    \ && first_digit % 2 == 1)\n                counter++;\n        }\n    }\n   \
    \ return counter;\n}\n/*\n    Write a function that takes a string that represents\
    \ a path to a file and returns \n    the number of lines of code in the file (meaning:\
    \ the number of lines that are not empty).\n    For example:\n    >>> getNumberOfLinesOfCode(\"\
    /home/user/week1.d\")\n    49L\n    >>> getNumberOfLinesOfCode(\"/home/user/week2.d\"\
    )\n    83L\n    >>> getNumberOfLinesOfCode(\"/home/user/week3.d\")\n    12L\n\
    */\nlong getNumberOfLinesOfCode(string path) \n{\n    import std.stdio : writeln;\n\
    \    import std.file : readText;\n    import std.algorithm : map;\n    import\
    \ std.range : filter;\n    auto lines = readText(path).lines;\n    lines = lines.filter!(x\
    \ => x.length > 0).map!(x => x.trim()).filter!(x => x.length > 0);\n    return\
    \ lines.length;\n}\n/*\n    Write a function that takes an array of numbers and\
    \ returns the sum of the numbers \n    that are divisible by 3 and their first\
    \ digit is 3.\n    For", "{\n    long n = 0;\n    foreach(x; nums) \n    {\n \
    \       if(x > 10) \n        {\n            auto f = to!string(x)[0];\n      \
    \      auto l = to!string(x)[$-1];\n            if(to!int(f) % 2 == 1 && to!int(l)\
    \ % 2 == 1) \n            {\n                n++;\n            }\n        }\n\
    \    }\n    return n;\n}", "{\n    /*auto oddsOnly = nums.filter!(a => a % 2 ==\
    \ 1);\n    return oddsOnly.filter!(a => a > 10).length;\n    */\n    long count\
    \ = 0;\n    foreach(num; nums)\n    {\n        int firstDigit = num / 10;\n  \
    \      int lastDigit = num % 10;\n        if (num > 10 && firstDigit % 2 == 1\
    \ && lastDigit % 2 == 1)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n\
    \        if (num > 10 && num.popFront() % 2 != 0 && num.popBack() % 2 != 0)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n// int\
    \ main()\n// {\n//     long[] myList = [5L, 6L, 7L, 8L, 9L, 9L, 10L, 11L, 1L,\
    \ 3L, 5L, 7L, 9L, 9L, 10L, 12L, 13L, 14L, 15L, 16L, 19L, 20L, 31L, -1L, -2L, -2L,\
    \ -3L, -3L, -3L, -3L, -3L, -3L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L,\
    \ -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L,\
    \ -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L,\
    \ -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L,\
    \ -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L,\
    \ -6L, -6L, -6L, -6L, -6L, -6L,", "{\n    long count = 0;\n    foreach(num; nums)\
    \ \n    {\n        if (num > 10) \n        {\n            long temp = num;\n \
    \           long numD = typeof(num).sizeof;\n            while (temp > 0)\n  \
    \          {\n                temp /= 10;\n                numD *= 10;\n     \
    \       }\n            if ((num % 10 == 1 || num % 10 == 3 || num % 10 == 5 ||\
    \ num % 10 == 7 || num % 10 == 9) \n                && ((num / numD) == 1 || (num\
    \ / numD) == 3 || (num / numD) == 5 || (num / numD) == 7 || (num / numD) == 9))\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\nWrite a function that takes an array of numbers as input\
    \ and returns the \n    sum of the numbers whose last digit is even.\n    For\
    \ example:\n    >>> sumEvenLastDigit([15L, -73L, 14L, -15L])\n    -73L\n    >>>\
    \ sumEvenLastDigit([33L, -2L, -3L, 45L, 21L, 109L])\n    64L\n    >>> sumEvenLastDigit([17L,\
    \ -11L, 27L, -15L, -7L, -13L, 17L, 35L, -8L, -13L, -13L, 7L, 5L, -7L, -17L, 11L,\
    \ 29L, -2L, -17L, -4L, -19L, 29L, -3L, -2L, 13L, -18L, -13L, 17L, 11L, 9L, -17L,\
    \ -3L, -2L, -13L, -16L, -13L, 17L, -16L, 5L, -7L, 21L, -6L, 29L, -12L, -4L, -4L,\
    \ 15L, -2L, -19L, -5L, -17L, -8L, -9L, -19L, -5L, 17L, 15L, 23L, -11L, -", "{\n\
    \    int count = 0;\n    foreach(num; nums) \n    {\n        long lastDigit =\
    \ num % 10;\n        long firstDigit = num;\n        while(firstDigit > 10)\n\
    \        {\n            firstDigit /= 10;\n        }\n        if(num > 10 && lastDigit\
    \ % 2 != 0 && firstDigit % 2 != 0)\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long counter = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10)\n        {\n            string str = num.to!string;\n\
    \            int first_digit = str[0].to!int;\n            int last_digit = str[$-1].to!int;\n\
    \            if(first_digit%2 != 0 && last_digit%2 != 0)\n            {\n    \
    \            counter++;\n            }\n        }\n    }\n    return counter;\n\
    }", "{\n    long count = 0;\n    foreach(a; nums)\n    {\n        if(a > 10)\n\
    \        {\n            auto n = a;\n            int firstDigit = n % 10;\n  \
    \          int lastDigit = n % 10;\n            while(n > 10)\n            {\n\
    \                n /= 10;\n                lastDigit = n % 10;\n            }\n\
    \            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n  \
    \              count++;\n            }\n        }\n    }\n    return count;\n}",
  "{\n    long result = 0;\n    foreach(l; nums)\n    {\n        auto digits = to!string(l);\n\
    \        if(l > 10 && (digits[0] % 2) && (digits[$-1] % 2))\n        {\n     \
    \       result++;\n        }\n    }\n    return result;\n}", "{\n    int total\
    \ = 0;\n    foreach(i;nums)\n    {\n        if(i > 10)\n        {\n          \
    \  int first = i % 10;\n            i /= 10;\n            int last = i % 10;\n\
    \            if((first % 2 != 0) && (last % 2 != 0))\n            {\n        \
    \        total++;\n            }\n        }\n    }\n    return total;\n}", "{\n\
    \    long first_digit, last_digit;\n    long count = 0;\n    auto i = 0;\n   \
    \ for (i = 0; i < nums.length; i++)\n    {\n        first_digit = nums[i] / 10;\n\
    \        last_digit = nums[i] % 10;\n        if (nums[i] > 10 && abs(first_digit\
    \ % 2) != 0 && abs(last_digit % 2) != 0)\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}", "{\n    // implicit conversion from long[]\
    \ to long[][] - 2d array\n    auto nums2d = nums.array;\n    return nums2d.filter!(n\
    \ => n >= 10 && n % 2 == 1 && (n / 10) % 2 == 1 ).length;\n}\n \n/*\nNext, write\
    \ a function that takes an array of numbers as input and returns \n    the number\
    \ of elements in the array that are of the form a + b\u221A2 where \n    a and\
    \ b are integers.\n    >>>  quadratic(30)\n    2L\n    >>> quadratic(50)\n   \
    \ 0L\n    >>> quadratic(100)\n    3L\n*/\nlong quadratic(long n) \n{\n    return\
    \ iota(1L, n).filter!(x => (floor(x + sqrt(2)) == x + sqrt(2))).length;\n}\n \n\
    /*\nNext, write a function that takes a single number as input and returns \n\
    \    true if that number is palindromic in base 10 and base 2.\n    >>> isPalindromic(1101)\n\
    \    true\n    >>> isPalindromic(1234)\n    false\n    >>> isPalindromic(1001)\n\
    \    true\n*/", "{\n    long res = 0;\n    foreach(n; nums)\n    {\n        if(!((n%10)%2)\
    \ || !(n%2)) continue;\n        if(n < 10) continue;\n        if(n < 100)\n  \
    \      {\n            if(n > 10) res++;\n            continue;\n        }\n  \
    \      uint len = n.length;\n        if(n[0] == '-') len--;\n        uint len1\
    \ = 0;\n        while(n[len1] == '0') len1++;\n        if(n[len-1] == '0') continue;\n\
    \        if(n[len-1]%2 == 0) continue;\n        if(n[len1]%2 == 0) continue;\n\
    \        res++;\n    }\n    return res;\n}\n \n/*\nWrite a function that takes\
    \ an array of strings as input and returns \n    the number of elements that are\
    \ not blank.\n    For example:\n    >>> filterBlank([\"foo\", \"\", \"bar\"])\n\
    \    2L\n    >>> filterBlank([\"bar\", \"\", \"\", \"\", \"foo\"])\n    2L\n*/\n\
    long filterBlank(string[] strings)\n{\n    long res = 0;\n    foreach(s; strings)\n\
    \    {\n        if(s.length != 0) res++;\n    }\n    return res;\n}\n \n/*\nWrite\
    \ a function that takes an array of strings as input and returns \n    the number\
    \ of elements that are not blank and start with the letter \"a\".\n    For example:\n\
    \    >>> filterA([\"foo\", \"\", \"bar\"])\n    0L\n    >>> filterA([\"bar\",\
    \ \"\", \"\", \"\", \"a\"])\n    1L\n    >>> filterA([\"bar\", \"\", \"\", \"\"\
    , \"foo\", \"a\"])\n    1L\n*/\nlong filterA(string[] strings)\n{\n    long res\
    \ = 0;\n    foreach(s; strings)\n    {\n        if(s.length == 0) continue;\n\
    \        if(s[0] == 'a') res++;\n    }\n    return res;\n}\n \n/*\nWrite a", "{\n\
    \    long result = 0;\n    foreach(element; nums) \n    {\n        long temp =\
    \ abs(element);\n        if(temp >= 10) \n        {\n            if(temp % 2 !=\
    \ 0) \n            {\n                long temp2 = temp / 10;\n              \
    \  if(temp2 % 2 != 0) \n                {\n                    result++;\n   \
    \             }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    nums.array.filter!(a => (a > 10) && (a % 2 == 1) &&\
    \ (a / 10 % 2 == 1)).array.length;\n    return result;\n}\n// test code", "{ \n\
    \    //  Takes an array of numbers as input and returns the number of elements\
    \ in the array that \n    //      are greater than 10 and both first and last\
    \ digits of a number are odd (1, 3, 5, 7, 9).\n    //  For example:\n    //  >>>\
    \ specialFilter([15L, -73L, 14L, -15L])\n    //  1L\n    //  >>> specialFilter([33L,\
    \ -2L, -3L, 45L, 21L, 109L])\n    //  2L\n    \n    long count = 0;\n    foreach(i;\
    \ nums)\n    {\n        if(i > 10 && i.to!string[0]%2 != 0 && i.to!string[$-1]%2\
    \ != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count=0;\n    foreach(n; nums)\n    {\n        long a = abs(n);\n\
    \        if (a > 10)\n        {\n            long first = a / power(10, log10(a));\n\
    \            long last = a % 10;\n            if (first % 2 == 1 && last % 2 ==\
    \ 1)\n            {\n                count += 1;\n            }\n        }\n \
    \   }\n    return count;\n}", "{\n    long num = 0;\n    foreach(x; nums)\n  \
    \  {\n        auto str = x.to!string;\n        if(x > 10 && (str[0] == '1' ||\
    \ str[0] == '3' || str[0] == '5' || str[0] == '7' || str[0] == '9') && (str[$-1]\
    \ == '1' || str[$-1] == '3' || str[$-1] == '5' || str[$-1] == '7' || str[$-1]\
    \ == '9'))\n        {\n            num += 1;\n        }\n    }\n    return num;\n\
    }\n/*\nWrite a function that takes a natural number n as input and returns \n\
    \    True if n is a prime number and False otherwise.\n    For example:\n    >>>\
    \ isPrime(2L)\n    True\n    >>> isPrime(4L)\n    False\n*/", "{ \n    \n    long\
    \ count = 0;\n    foreach(i;nums)\n    {\n        if(i < 10)\n            continue;\n\
    \        else\n        {\n            if(i % 2 == 0)\n                continue;\n\
    \            else\n            {\n                auto num = i.to!string;\n  \
    \              if(num[0] == num[$-1])\n                    count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\n//long specialFilter(long[] nums)\
    \ {\n//    return nums.filter!(x => x > 10 && x.to!string[0] % 2 == 1 && x.to!string[$-1]\
    \ % 2 == 1).length;\n//}", "{ \n    \n    long count = 0;\n    foreach(i; nums)\
    \ \n    {\n        long startDigit = i;\n        long endDigit = i % 10;\n   \
    \     while(startDigit > 10) \n        {\n            startDigit /= 10;\n    \
    \    }\n        if(i > 10 && (startDigit % 2 != 0) && (endDigit % 2 != 0)) \n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(num; nums)\n    {\n        long first = num;\n\
    \        long last = num;\n        while(first > 10)\n        {\n            first\
    \ = first/10;\n        }\n        last = num % 10;\n        if(last%2 != 0 &&\
    \ first%2 != 0 && num > 10)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n//Write a function that takes a string as input and returns\
    \ the string with all characters in capital letters.\n//For example:\n//>>> toUpper(\"\
    hEllo\")\n//\"HELLO\"\nstring toUpper(string str)\n{\n    string result = \"\"\
    ;\n    foreach(char; str)\n    {\n        result ~= toUpper(char);\n    }\n  \
    \  return result;\n}\n//Write a function that takes a string as input and returns\
    \ the string with all characters in lowercase.\n//For example:\n//>>> toLower(\"\
    hEllo\")\n//\"hello\"\nstring toLower(string str)\n{\n    string result = \"\"\
    ;\n    foreach(char; str)\n    {\n        result ~= toLower(char);\n    }\n  \
    \  return result;\n}\n//Write a function that takes a string as input and returns\
    \ the number of vowels (a, e, i, o, u) in the string.\n//For example:\n//>>> countVowels(\"\
    hEllo\")\n//2L\nlong countVowels(string str)\n{\n    long count = 0;\n    foreach(char;\
    \ str)\n    {\n        char = toLower(char);\n        if(char == 'a' || char ==\
    \ 'e' || char == 'i' || char == 'o' || char == 'u')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n//Write a function that takes a string\
    \ as input and returns true if the string is a palindrome (reads the same backwards\
    \ as it does forwards), and false otherwise.\n//For example:\n//>>> isPalindrome(\"\
    radar\")\n//true\n//>>> isPalindrome(\"ala\")\n//false", "{\n    long result =\
    \ 0;\n    foreach(i; nums)\n    {\n        if (i > 10)\n        {\n          \
    \  string str_num = i.to!string;\n            if (str_num[0].to!long % 2 == 1\
    \ && str_num[$-1].to!long % 2 == 1)\n            {\n                result++;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    return nums.filter!(x\
    \ => x > 10 && (x % 10) % 2 && (x / 10) % 2).length;\n}", "{\n    long count =\
    \ 0;\n    int firstDigit;\n    int lastDigit;\n    foreach(num; nums)\n    {\n\
    \        if(num < 10)\n        {\n            firstDigit = num;\n            lastDigit\
    \ = num;\n        }\n        else\n        {\n            firstDigit = num / 10;\n\
    \            while(firstDigit > 10)\n            {\n                firstDigit\
    \ = firstDigit / 10;\n            }\n            lastDigit = num % 10;\n     \
    \   }\n        if(num > 10 && (firstDigit % 2 != 0) && (lastDigit % 2 != 0))\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    int counter = 0;\n    foreach(long n; nums) \n    {\n        int last = n\
    \ % 10;\n        int first = n / 10;\n        if (n > 10 && last % 2 == 1 && first\
    \ % 2 == 1)\n            counter++;\n    }\n    return counter;\n}", "{\n\tauto\
    \ filtr = filter!((a) => a > 10 && typeof(isOdd(a)) == typeof(isOdd(a % 10)))(nums);\n\
    \treturn filtr.length;\n}", "{\n    long numberOfElements(long n)\n    {\n   \
    \     return n > 10 && n.popFront() & 1 && n.popBack() & 1;\n    }\n    return\
    \ filter!numberOfElements(nums).length;\n}\n```\n##### Test(s)\n```D\nunittest\n\
    {\n    assert(specialFilter([15L, -73L, 14L, -15L]) == 1L);\n    assert(specialFilter([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n}\n```", "{\n    long num = 0;\n    foreach(i;\
    \ nums)\n    {\n        long first = i;\n        long last = i;\n        while(first\
    \ > 10)\n        {\n            first = first / 10;\n        }\n        if((first%2)\
    \ != 0 && (last%2) != 0)\n        {\n            num++;\n        }\n    }\n  \
    \  return num;\n}", "{\n    long result = 0;\n    foreach(num; nums)\n    {\n\
    \        if (num > 10 && (num % 10) % 2 == 1 && \n            (num / pow(10, ceil(log10(num))\
    \ - 1)) % 2 == 1)\n        {\n            result++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    auto res = 0L;\n    auto f = [](long x) {\n        while\
    \ (x > 10) {\n            x /= 10;\n        }\n        return x % 2 == 1;\n  \
    \  };\n    foreach (n; nums) {\n        if (n >= 10 && f(n) && f(n % 10)) {\n\
    \            res++;\n        }\n    }\n    return res;\n}", "{\n    long count\
    \ = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n     \
    \       auto n = num;\n            int lastDigit = num % 10;\n            int\
    \ firstDigit = 0;\n            while(n >= 10)\n            {\n               \
    \ n /= 10;\n            }\n            firstDigit = n;\n            if(firstDigit\
    \ % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n \
    \           }\n        }\n    }\n    return count;\n}\n/*\nWrite a function that\
    \ takes an array of strings as input and returns the \n    string that has the\
    \ maximum length.\n    For example:\n    >>> longestString([\"abc\", \"de\", \"\
    fghi\", \"j\"])\n    \"fghi\"\n    >>> longestString([\"abc\", \"de\", \"\"])\n\
    \    \"abc\"\n*/\nstring longestString(string[] strings)\n{\n    string longestString\
    \ = \"\";\n    foreach(str; strings)\n    {\n        if(str.length > longestString.length)\n\
    \        {\n            longestString = str;\n        }\n    }\n    return longestString;\n\
    }\n/*\nWrite a function that takes an array of strings as input and returns a\
    \ \n    new array containing all strings that are not palindromes.\n    For example:\n\
    \    >>> filterPalindromes([\"abc\", \"level\", \"rotor\", \"wasitacaroracatisaw\"\
    ])\n    [\"abc\", \"wasitacaroracatisaw\"]\n    >>> filterPalindromes([\"abc\"\
    , \"level\", \"rotor\", \"wasitacaroracatisaw\", \"soos\"])\n    [\"abc\", \"\
    wasitacaroracatisaw\"]\n*/\nstring[] filterPalindromes(string[] strings)\n{\n\
    \    string[] newArray;\n    foreach(str; strings)\n    {\n        bool palindrome\
    \ = true;\n        for(int i = 0; i < str.length / 2; i++)\n        {\n      \
    \      if(str[i] != str[str.length - 1 - i])\n            {\n                palindrome\
    \ = false;\n", "{\n    long count = 0;\n    foreach(long num; nums)\n    {\n \
    \       int first = num / 10;\n        int last = num % 10;\n        if(abs(num)\
    \ > 10 && isOdd(first) && isOdd(last))\n        {\n            count += 1;\n \
    \       }\n    }\n    return count;\n}\n/*\nWrite a function that takes an array\
    \ of numbers as input and returns \n    the number of elements in the array that\
    \ are greater than 10, \n    have 3 digits and both first and last digits of a\
    \ number are odd \n    (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilterWithRange([15L,\
    \ -73L, 14L, -15L])\n    0L\n    >>> specialFilterWithRange([33L, -2L, -3L, 45L,\
    \ 21L, 109L])\n    1L\n*/\nlong specialFilterWithRange(long[] nums) \n{\n    long\
    \ count = 0;\n    foreach(long num; nums)\n    {\n        int first = num / 100;\n\
    \        int last = num % 10;\n        if(abs(num) > 10 && num in 100..999 &&\
    \ isOdd(first) && isOdd(last))\n        {\n            count += 1;\n        }\n\
    \    }\n    return count;\n}\n/*\nWrite a function that takes an array of strings\
    \ and returns the longest word \n    in the array. If there are multiple longest\
    \ words, return the first word \n    in the array with the longest length. For\
    \ example:\n    >>> longestWord([\"one\", \"three\", \"five\", \"seven\", \"nine\"\
    ])\n    \"three\"\n    >>> longestWord([\"one\", \"three\", \"five\", \"seven\"\
    , \"nineteen\"])\n    \"nineteen\"\n    >>> longestWord([\"one\", \"three\", \"\
    five\", \"seven\", \"nine\", \"nineteen\"])\n    \"nineteen\"\n*/\nstring longestWord(string[]\
    \ words) \n{\n    string longest = \"\";\n    foreach(string word; words)\n  \
    \  {\n        if(word.length > longest.length)\n        {\n            longest\
    \ = word", "{\n    auto count = 0L;\n    auto isFirstDigitOdd = true;\n    auto\
    \ isLastDigitOdd = true;\n    auto toString = to!string;\n    for(auto n : nums)\n\
    \    {\n        isFirstDigitOdd = toString(n)[0] % 2 != 0;\n        isLastDigitOdd\
    \ = toString(n)[$-1] % 2 != 0;\n        if(abs(n) > 10 && isFirstDigitOdd && isLastDigitOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long result = 0;\n    foreach(num; nums)\n    {\n        //cast to double\
    \ for safety\n        double doubleNum = cast(double)num;\n        //if first\
    \ digit is odd\n        if(!(doubleNum < 0))\n        {\n            if(modf(doubleNum,\
    \ 10) != 0)\n            {\n                doubleNum = floor(doubleNum);\n  \
    \          }\n            //if last digit is odd\n            if(modf(doubleNum\
    \ / 10, 10) != 0)\n            {\n                //if number is greater than\
    \ 10\n                if(num > 10)\n                {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\n//vim:\
    \ expandtab smarttab shiftwidth=4 softtabstop=4", "{\n    auto filter = nums.filter!(a\
    \ => a > 10 && a % 2 != 0);\n    return filter.length;\n}", "{\n    long result\
    \ = 0;\n    foreach(elem; nums)\n    {\n        int num = elem;\n        int first\
    \ = num % 10;\n        int last = num / 10;\n        if(first % 2 != 0 && last\
    \ % 2 != 0 && elem > 10)\n        {\n            result++;\n        }\n    }\n\
    \    return result;\n}", "{\n    long count = 0;\n    foreach(idx, element; nums)\n\
    \    {\n        // check that it is greater than 10\n        if(nums[idx] > 10)\n\
    \        {\n            // if the last digit is odd and > 0\n            // and\
    \ the first digit is odd and > 0\n            auto last = to!long(to!string(nums[idx])[$-1]);\n\
    \            auto first = to!long(to!string(nums[idx])[0]);\n            if((last\
    \ % 2 != 0 && last > 0) && \n                (first % 2 != 0 && first > 0))\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}", "{\n    return nums.filter!(n => \n                    \
    \    n > 10 && \n                        (n % 10) % 2 && \n                  \
    \      n / pow(10, n.floorLog10) % 2).length;\n}", "{\n    /*\n    int i,n,c=0;\n\
    \    for(i=0;i<nums.length;i++)\n    {\n        if(nums[i]>10)\n        {\n  \
    \          n=nums[i];\n            if(n%2!=0 && n/10!=0)\n            {\n    \
    \            while(n>10)\n                {\n                    n=n/10;\n   \
    \             }\n                if(n%2!=0)\n                {\n             \
    \       c++;\n                }\n            }\n        }\n    }\n    return c;\n\
    \    */\n    return nums.filter!(x => x > 10 && x % 2 != 0 && x / 10 % 2 != 0).length;\n\
    }", "{\n    long count = 0;\n    foreach(index, value; nums) \n    {\n       \
    \ if (10 < value) \n        {\n            if ((value % 10) % 2 && (value / 10)\
    \ % 2) \n            {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}", "{\n    int result = 0;\n    foreach(num; nums)\n\
    \    {\n        auto number = num;\n        if(number >= 10 && number < 100)\n\
    \        {\n            if(number[0] % 2 == 1 && number[1] % 2 == 1)\n       \
    \     {\n                result++;\n            }\n        }\n        else if(number\
    \ >= 100 && number < 1000)\n        {\n            if(number[0] % 2 == 1 && number[2]\
    \ % 2 == 1)\n            {\n                result++;\n            }\n       \
    \ }\n        else if(number >= 1000 && number < 10000)\n        {\n          \
    \  if(number[0] % 2 == 1 && number[3] % 2 == 1)\n            {\n             \
    \   result++;\n            }\n        }\n        else if(number >= 10000 && number\
    \ < 100000)\n        {\n            if(number[0] % 2 == 1 && number[4] % 2 ==\
    \ 1)\n            {\n                result++;\n            }\n        }\n   \
    \     else if(number >= 100000 && number < 1000000)\n        {\n            if(number[0]\
    \ % 2 == 1 && number[5] % 2 == 1)\n            {\n                result++;\n\
    \            }\n        }\n        else if(number >= 1000000 && number < 10000000)\n\
    \        {\n            if(number[0] % 2 == 1 && number[6] % 2 == 1)\n       \
    \     {\n                result++;\n            }\n        }\n        else if(number\
    \ >= 10000000 && number < 100000000)\n        {\n            if(number[0] % 2\
    \ == 1 && number[7] % 2 == 1)\n            {\n                result++;\n    \
    \        }\n        }\n        else if(number >= 100000000 && number < 1000000000)\n\
    \        {\n            if(number[0] % 2 == 1 && number[8] % 2 == 1)\n       \
    \     {\n                result++;\n            }\n        }\n        else if(number\
    \ >= 1000000000 && number < 10000000000)\n        {\n            if(number[0]\
    \ % 2 == 1 && number[9] % 2 == 1)\n            {\n                result++;\n\
    \            }\n        }\n        else if(number >= 10000000000 && number < 100000000",
  "{\n    long result = 0;\n    foreach(n; nums) \n    {\n        if(n > 10 && n %\
    \ 2 != 0 && n.toString()[0].to!long % 2 != 0 && \n        n.toString()[n.toString().length-1].to!long\
    \ % 2 != 0) \n        {\n            result++;\n        }\n    }\n    return result;\n\
    }", "{\n    long counter = 0;\n    foreach(n; nums)\n    {\n        if(n < 10)\n\
    \            continue;\n        if(n % 2 == 0)\n            continue;\n      \
    \  if(n % 10 % 2 == 0)\n            continue;\n        counter += 1;\n    }\n\
    \    return counter;\n}\n/*\nWrite a function that takes a positive integer as\
    \ input and returns the number of \n    positive integers less than or equal to\
    \ the input that are odd and composite.\n    A composite number is a positive\
    \ integer greater than 1 that is not prime.\n    For example:\n    >>> compositeOddFilter(10L)\n\
    \    6L\n    >>> compositeOddFilter(3L)\n    0L\n*/\nlong compositeOddFilter(long\
    \ x)\n{\n    if(x < 3)\n        return 0;\n    long counter = 0;\n    foreach(n;\
    \ 2 .. x)\n    {\n        if(n % 2 == 0)\n            continue;\n        if(isPrime(n))\n\
    \            continue;\n        counter += 1;\n    }\n    return counter;\n}\n\
    /*\nWrite a function that takes an array of integers and returns a tuple that\
    \ contains\n    the original array and a filtered array. The filtered array should\
    \ contain all \n    the elements of the original array that are greater than or\
    \ equal to 0.\n    For example:\n    >>> filterArr([1L, -2L, 3L, -5L, 7L, -9L])\n\
    \    ([1L, -2L, 3L, -5L, 7L, -9L], [1L, 3L, 7L])\n*/\nauto filterArr(long[] arr)\n\
    {\n    //arr.retain(n => n >= 0);\n    return tuple(arr, arr.filter!(n => n >=\
    \ 0));\n}\n/*\nWrite a function that takes an array of integers as input and returns\
    \ a tuple that \n    contains the original array and a filtered array. The filtered\
    \ array should \n    contain all the elements of the original array that are between\
    \ 0 and 100 \n    (inclusive) and a power of two.\n    For example:\n    >>> filterArr2([-100L,\
    \ 5L, 3", "{\n  long result;\n  foreach(inout elem;nums)\n  {\n    string elem_in\
    \ = to!string(elem);\n    if(elem > 10 && to!int(elem_in[0]) % 2 != 0 && to!int(elem_in[$-1])\
    \ % 2 != 0)\n    {\n      result++;\n    }\n  }\n  return result;\n}", "{\n  \
    \  return nums.filter!(n => \n        n > 10 && \n        ((n / 10) % 2 != 0)\
    \ && \n        (n % 2 != 0)).length;\n}", "{\n\tlong res = 0;\n\tforeach(i,x;nums)\n\
    \t{\n\t\tif(x>10&&(x%10)%2!=0&&(x/10)%2!=0)\n\t\t\tres++;\n\t}\n\treturn res;\n\
    }", "{\n    /*\n    int result = 0;\n    for (int i = 0; i < nums.length; i++)\
    \ {\n        int n = (int)nums[i];\n        boolean isGreater = n > 10;\n    \
    \    boolean isFirstDigitOdd = n / 10 != 0 && n / 10 % 2 != 0;\n        boolean\
    \ isLastDigitOdd = n % 2 != 0;\n        boolean condition = isGreater && isFirstDigitOdd\
    \ && isLastDigitOdd;\n        if (condition) {\n            result++;\n      \
    \  }\n    }\n    return result;\n    */\n    return nums.filter!(n => n > 10 &&\
    \ n / 10 != 0 && n / 10 % 2 != 0 && n % 2 != 0).length;\n}\n \n/*\nWrite a function\
    \ that takes a 2D array as input and returns a 2D array with \n    the elements\
    \ from the diagonal of the input array.\n    For example:\n    >>> diagonal([[1L,\
    \ 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]])\n    [[1L, 5L, 9L]]\n    >>> diagonal([[1L,\
    \ 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L, 10L, 11L, 12L], [13L, 14L, 15L, 16L]])\n\
    \    [[1L, 6L, 11L, 16L]]\n*/\nlong[][] diagonal(long[][] matrix)\n{\n    long[][]\
    \ result = new long[1][];\n    result[0] = new long[matrix.length];\n    for (int\
    \ i = 0; i < matrix.length; i++) {\n        result[0][i] = matrix[i][i];\n   \
    \ }\n    return result;\n}\n \n/*\nWrite a function that takes a 2D array as input\
    \ and returns the array of arrays, \n    where each element consists of the elements\
    \ of the array from the same column.\n    For example:\n    >>> transpose([[1L,\
    \ 2L, 3L], [4L, 5L, 6L], [7L, 8L,", "{\n    int counter = 0;\n    foreach(number;\
    \ nums)\n    {\n        if (number>10 && isOdd(firstDigit(number)) && isOdd(lastDigit(number)))\n\
    \        {\n            counter += 1;\n        }\n    }\n    return counter;\n\
    }", "{\n    long count = 0;\n    foreach(ref num; nums)\n    {\n        long[]\
    \ digits = num.to!string.split(\"\").map!(str => str.to!long).array;\n       \
    \ if(num > 10 && digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n        {\n    \
    \        count++;\n        }\n    }\n    return count;\n}", "{\n    long counter\
    \ = 0;\n    foreach(l; nums)\n    {\n        if(l > 10 && \n           (l % 10\
    \ % 2 == 1) &&\n           (l / 10 % 10 % 2 == 1))\n           {\n           \
    \    counter++;\n           }\n    }\n    return counter;\n}", "{\n    long count\
    \ = 0;\n    foreach(immutable long x; nums) \n    {\n        long f = x / 10;\n\
    \        long l = x % 10;\n        if((x > 10) && (f % 2 != 0) && (l % 2 != 0))\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long res = 0;\n    auto a1 = filter!((a) => a > 10)(nums);\n    auto a2 =\
    \ filter!((a) => a % 2 != 0)(a1);\n    auto a3 = filter!((a) => a > 10)(a2);\n\
    \    for(int i = 0; i < a3.length; i++)\n    {\n        string num = a3[i].to!string;\n\
    \        if(num[0] % 2 != 0)\n        {\n            if(num[num.length - 1] %\
    \ 2 != 0)\n            {\n                res++;\n            }\n        }\n \
    \   }\n    return res;\n}\n/*\nWrite a function that takes an array of numbers\
    \ as input \n    and returns the largest number in the array as output.\n    For\
    \ example:\n    >>> getMax([9L, 2L, 3L, 4L, 5L])\n    9L\n    >>> getMax([5L,\
    \ 0L, -9L, 11L, 18L])\n    18L\n*/\nlong getMax(long[] nums) \n{\n    long max\
    \ = nums[0];\n    foreach(num; nums)\n    {\n        if(num > max)\n        {\n\
    \            max = num;\n        }\n    }\n    return max;\n}\n/*\nWrite a function\
    \ that takes an array of numbers as input \n    and returns the sum of squares\
    \ of all the elements in the array as output.\n    For example:\n    >>> getSumOfSquares([9L,\
    \ 2L, 3L, 4L, 5L])\n    135L\n    >>> getSumOfSquares([])\n    0L\n*/\nlong getSumOfSquares(long[]\
    \ nums) \n{\n    long res = 0;\n    foreach(num; nums)\n    {\n        res +=\
    \ pow(num, 2);\n    }\n    return res;\n}\n/*\nWrite a function that takes an\
    \ array of integers as input \n    and returns the sum of all the elements in\
    \ the array that are prime.\n    For example:\n    >>> getSumOfPrimes([9L, 2L,\
    \ 3L, 4L, 5L])\n   ", "{\n\tint count = 0;\n\tforeach(i; nums)\n\t{\n\t\tif(i\
    \ > 10)\n\t\t{\n\t\t\tint f = i;\n\t\t\tint l = i;\n\t\t\tif(f > 10)\n\t\t\t{\n\
    \t\t\t\tf /= 10;\n\t\t\t}\n\t\t\tif(l%10 == 0)\n\t\t\t{\n\t\t\t\tl /= 10;\n\t\t\
    \t}\n\t\t\tif(l%2 == 1 && f%2 == 1)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn count;\n}\n/*\nWrite a function that takes an array of numbers\
    \ as input and returns \na tuple containing the min value, the max value, and\
    \ \nthe length of the array.\n    For example:\n    >>> getMinMaxLength([10L,\
    \ -20L, 30L, 40L])\n    (Tuple!(long, long, long)(-20L, 40L, 4L))\n    >>> getMinMaxLength([1L,\
    \ 8L, 3L, 4L, 5L, 6L])\n    (Tuple!(long, long, long)(1L, 8L, 6L))\n*/\nTuple!(long,\
    \ long, long) getMinMaxLength(long[] nums) \n{\n\tlong min = nums[0];\n\tlong\
    \ max = nums[0];\n\tforeach(i; nums)\n\t{\n\t\tif(i < min)\n\t\t{\n\t\t\tmin =\
    \ i;\n\t\t}\n\t\tif(i > max)\n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\treturn tuple(min,\
    \ max, nums.length);\n}\n/*\nWrite a function that takes an array of strings and\
    \ an array of numbers as input, \nand returns an array of the corresponding elements\
    \ of the string array.\n    For example:\n    >>> getFruits([\n        \"apple\"\
    , \"banana\", \"cherry\", \"durian\", \"elderberry\", \"fig\", \"grape\"\n   \
    \ ], [0L, 5", "{\n    long counter=0;\n    foreach(n; nums)\n    {\n        if(n>10)\n\
    \        {\n            if(isOdd(n%10) && isOdd(n/cast(long)pow(10, log10(n))))\n\
    \            {\n                counter++;\n            }\n        }\n    }\n\
    \    return counter;\n}", "{\n    long count = 0;\n    foreach(num; nums) \n \
    \   {\n        if(num > 10 && isOdd(num % 10) && isOdd(num/10^^(8))) \n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    immutable\
    \ long odigs = [1, 3, 5, 7, 9];\n    immutable long sz = nums.length;\n    long\
    \ n = 0;\n    foreach(immutable long i; 0 .. sz) \n    {\n        immutable long\
    \ num = nums[i];\n        immutable long dig = abs(num) % 10;\n        immutable\
    \ long lastDig = dig;\n        if (num > 10 && odigs.canFind(dig) && odigs.canFind(lastDig))\
    \ \n        {\n            n++;\n        }\n    }\n    return n;\n}", "{\n   \
    \ long count = 0;\n    //foreach(num; nums)\n    foreach_reverse(num; nums)\n\
    \    {\n        if(num > 10 &&\n            (num/100)%2 != 0 &&\n            (num%10)%2\
    \ != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\nWrite a function that takes an array of numbers as input and returns \n\
    \    the number of elements in the array that are greater than 10 and both \n\
    \    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter2([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter2([33L,\
    \ -2L, -3L, 45L, 21L, 109L])\n    2L\n*/\nlong specialFilter2(long[] nums) \n\
    {\n    long count = 0;\n    //foreach(num; nums)\n    foreach_reverse(num; nums)\n\
    \    {\n        if(num > 10 &&\n            (num/100)%2 != 0 &&\n            (num%10)%2\
    \ != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\nWrite a function that takes an array of double numbers as input and returns\n\
    \    the mean of all elements in the array (an arithmetic average).\n    For example:\n\
    \    >>> mean([3.1, -2.2, 0.0, 5.1])\n    1.025\n    >>> mean([1.0, 2.0, 3.0,\
    \ 4.0])\n    2.5\n*/\ndouble mean(double[] nums) \n{\n    double sum = 0;\n  \
    \  double count = 0;\n    foreach(num; nums)\n    {\n        sum += num;\n   \
    \     count++;\n    }\n    return sum/count;\n}\n/*\nWrite a function that takes\
    \ an array of double numbers as input and returns\n    the mean of all elements\
    \ in the array (an arithmetic average).\n    For example:\n    >>> mean2([3.1,\
    \ -2.2, 0.", "{\n    long counter = 0;\n    foreach(num; nums) \n    {\n     \
    \   long result = num > 10;\n        if(result == 1)\n        {\n            long\
    \ fNum = num % 10;\n            if(fNum == 1 || fNum == 3 || fNum == 5 || fNum\
    \ == 7 || fNum == 9)\n            {\n                if(fNum / num == 1)\n   \
    \             {\n                    counter++;\n                }\n         \
    \   }\n        }\n    }\n    return counter;\n}", "{\n    long count = 0;\n  \
    \  foreach(int num; nums)\n    {\n        if(num > 10 && isOdd(num % 10) && isOdd(num\
    \ / 10))\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long odds = 0;\n    foreach(num; nums)\n    {\n        long num1 =\
    \ num;\n        long num2 = num;\n        long oddness = 0;\n        long first\
    \ = num1 % 10;\n        while(num1 > 10)\n        {\n            num1 /= 10;\n\
    \        }\n        if(!((num1 == 1) || (num1 == 3) || (num1 == 5) || (num1 ==\
    \ 7) || (num1 == 9)))\n        {\n            continue;\n        }\n        if(!((first\
    \ == 1) || (first == 3) || (first == 5) || (first == 7) || (first == 9)))\n  \
    \      {\n            continue;\n        }\n        odds++;\n    }\n    return\
    \ odds;\n}", "{\n    import std.algorithm;\n    return nums.filter!(n => n > 10\
    \ && n % 2 != 0 && n / 10 % 2 != 0).length;\n}\n// long[] nums = [15L, -73L, 14L,\
    \ -15L];\n// auto result = specialFilter(nums);\n//assert(result == 1L);\n \n\
    /*\nYou are given a text and a dictionary of words. Write a function that finds\
    \ \n    out how many times a word in the dictionary can be made using the letters\
    \ \n    of the text.\n    For example:\n    >>> findMatches(\"abcabcabcabcabcabcabcabcabcabcabcabcabc\"\
    , [\"abc\"])\n    1L\n    >>> findMatches(\"abcabcabcabcabcabcabcabcabcabcabcabcabc\"\
    , [\"abc\", \"bac\"])\n    2L\n    >>> findMatches(\"abcabcabcabcabcabcabcabcabcabcabcabcabc\"\
    , [\"abc\", \"bac\", \"def\"])\n    2L\n    >>> findMatches(\"abcabcabcabcabcabcabcabcabcabcabcabcabc\"\
    , [\"abc\", \"bac\", \"def\", \"ghi\"])\n    2L\n*/\nlong findMatches(string s,\
    \ string[] dict) \n{\n    import std.array, std.range, std.algorithm, std.conv;\n\
    \    immutable dictCounts = to!(immutable(long[]))(dict.map!(word => [word, word.count]));\n\
    \    immutable text = s.count;\n    immutable data = to!(immutable(long[]))(text.data);\n\
    \    long matches = 0;\n    for (auto [word, wordCount] ; dictCounts) {\n    \
    \    if (wordCount.length != text.length) continue;\n        auto dataCopy = data.dup;\n\
    \        auto wordCountCopy = wordCount.dup;\n        auto zipCount = zip(dataCopy,\
    \ wordCountCopy);\n        foreach (ref e; zipCount) {\n            if (e[0] <\
    \ e[1]) {\n                break;\n            }\n            e[0] -= e[1];\n\
    \        }\n        if (dataCopy.all!(el => el == 0", "{\n    return nums.filter!(a\
    \ => a > 10L && (a / 10L) % 2L == 1L && a % 2L == 1L).length;\n}", "{\n    long\
    \ count = 0;\n    foreach(n; nums)\n    {\n        int first = n / (long)10;\n\
    \        int last = n % (long)10;\n        //writefln(\"%d first: %d last: %d\"\
    , n, first, last);\n        //writefln(\"%d first: %d last: %d\", n, first % 2,\
    \ last % 2);\n        if (first % 2 == 1 && last % 2 == 1 && n > 10)\n       \
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    assert(specialFilter([]) == 0);\n    assert(specialFilter([15L, -73L, 14L,\
    \ -15L]) == 1);\n    assert(specialFilter([33L, -2L, -3L, 45L, 21L, 109L]) ==\
    \ 2);\n}", "{\n    long count = 0;\n    foreach(ref d; nums)\n    {\n        \n\
    \        if (d > 10)\n        {\n            long firstDigit = d % 10;\n     \
    \       if (d < 0)\n            {\n                d = -d;\n            }\n  \
    \          long lastDigit = d % 10;\n            if ((firstDigit % 2 != 0) &&\
    \ (lastDigit % 2 != 0))\n            {\n                count++;\n           \
    \ }\n        }\n    }\n    return count;\n}", "{\n    int i, l;\n    l = length(nums);\n\
    \    int d1 = 0, d2 = 0;\n    long count = 0;\n    for (i = 0; i < l; i++)\n \
    \   {\n        d1 = nums[i] / 10;\n        if (d1 == 0)\n            d1 = abs(nums[i]);\n\
    \        while (d1 != 0)\n        {\n            d2 = d1 % 10;\n            d1\
    \ = d1 / 10;\n        }\n        if ((abs(nums[i]) > 10) && (d2 % 2 != 0) && (nums[i]\
    \ % 2 != 0))\n            count++;\n    }\n    return count;\n}", "{ \n    long\
    \ result = 0;\n    foreach(elem; nums)\n    {\n        if(elem > 10)\n       \
    \ {\n            string s = to!string(elem);\n            ubyte first = cast(ubyte)\
    \ s[0];\n            ubyte last = cast(ubyte) s[$-1];\n            if(first %\
    \ 2 != 0 && last % 2 != 0) result++;\n        }\n    }\n    return result;\n}",
  "{ \n    long finalNums=0;\n    foreach(n; nums) \n    {\n        if (n > 10) \n\
    \        {\n            long nTemp = n;\n            long firstDigit = nTemp %\
    \ 10;\n            long lastDigit = nTemp / 10;\n            if (firstDigit %\
    \ 2 != 0 && lastDigit % 2 != 0)\n            {\n                finalNums++;\n\
    \            }\n        }\n    }\n    return finalNums;\n}", "{\n    int count\
    \ = 0;\n    foreach(val; nums)\n    {\n        if(val > 10)\n        {\n     \
    \       auto first_digit = cast(long) val / pow(10, ceil(log10(val)));\n     \
    \       auto last_digit = val % 10;\n            if(first_digit % 2 != 0 && last_digit\
    \ % 2 != 0)\n            {\n                count += 1;\n            }\n     \
    \   }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(long\
    \ num; nums) \n    {\n        if(num > 10) \n        {\n            string num_str\
    \ = to!string(num);\n            if((num_str[0] - '0') % 2 == 1 && (num_str[$-1]\
    \ - '0') % 2 == 1) \n            {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}", "{ \n    long cnt = 0;\n    foreach(n;\
    \ nums)\n    {\n        if(n > 10 && ((n % 10) & 1) && (n / 10) % 2)\n       \
    \     cnt++;\n    }\n    return cnt;\n}", "{\n    long cnt = 0;\n    foreach(n;\
    \ nums)\n    {\n        if(n > 10 && isOdd(n) && isOdd(n % 10))\n            cnt++;\n\
    \    }\n    return cnt;\n}", "{\n    int number = 0;\n    foreach(num; nums)\n\
    \    {\n        ulong first = num;\n        ulong last = num;\n        while(first\
    \ > 9)\n        {\n            first /= 10;\n        }\n        if(!isEven(first)\
    \ && !isEven(last))\n        {\n            number++;\n        }\n    }\n    return\
    \ number;\n}", "{\n    long x = 0;\n    foreach(e; nums) \n    {\n        int\
    \ a = cast(int)e;\n        int c = e % 10;\n        int d = e;\n        while(d\
    \ > 10) \n        {\n            d /= 10;\n        }\n        if(a > 10 && c %\
    \ 2 != 0 && d % 2 != 0) \n        {\n            x += 1;\n        }\n    }\n \
    \   return x;\n}", "{\n    /*\n    //This code works, but it doesn't pass the\
    \ last test.\n    long cnt = 0;\n    for(auto n : nums)\n    {\n        if(n >\
    \ 10)\n        {\n            auto nS = to!string(n);\n            auto first\
    \ = nS[0];\n            auto last = nS[$-1];\n            if(first % 2 == 1 &&\
    \ last % 2 == 1)\n            {\n                cnt++;\n            }\n     \
    \   }\n    }\n    return cnt;\n    */\n    //This one works and passes the last\
    \ test.\n    return nums.filter!(n => n > 10 && n.to!string()[0] % 2 == 1 && n.to!string()[$-1]\
    \ % 2 == 1).length;\n}", "{\n    int result = 0;\n    foreach( n; nums) \n   \
    \ {\n        if( n > 10 && n.toString().length > 1 && n.toString().front.to!long\
    \ % 2 == 1 && n.toString().back.to!long % 2 == 1) \n        {\n            result\
    \ += 1;\n        }\n    }\n    return result;\n}", "{\n    long count = 0;\n \
    \   foreach(elem; nums)\n    {\n        if(elem % 2 != 0 && elem > 10)\n     \
    \   {\n            int lastDigit = elem % 10;\n            if(lastDigit % 2 !=\
    \ 0)\n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}", "{\n    long counter = 0;\n    foreach(l; nums)\n    {\n\
    \        if (l > 10)\n        {\n            string s = format(\"%d\", l);\n \
    \           if (s[0] != '-')\n            {\n                if (to!long(s[0])\
    \ % 2 != 0 && to!long(s[$-1]) % 2 != 0)\n                {\n                 \
    \   counter++;\n                }\n            }\n        }\n    }\n    return\
    \ counter;\n}", "{ \n    int res = 0;\n    foreach(num; nums)\n    {\n       \
    \ if(num > 10 && num.digits.front.isOdd && num.digits.back.isOdd)\n          \
    \  res++;\n    }\n    return res;\n}", "{\n    auto a = nums.filter!(x => x>10).filter!(x\
    \ => x.digits[0]%2!=0 && x.digits[$-1]%2!=0).length;\n    return a;\n}\n/*\nWrite\
    \ a function that takes an array of numbers as input and returns \nthe number\
    \ of elements in the array that are greater than 10, have \nthe last digit even\
    \ and the second to last digit odd. \nFor example:\n    >>> specialFilter2([15L,\
    \ -73L, 14L, -15L])\n    1L\n    >>> specialFilter2([33L, -2L, -3L, 45L, 21L,\
    \ 109L])\n    2L\n*/\nlong specialFilter2(long[] nums)\n{\n    auto a = nums.filter!(x\
    \ => x.digits[$-1]%2==0 && x.digits[$-2]%2!=0).length;\n    return a;\n}\n/*\n\
    Write a function that takes an array of numbers as input and returns\nthe number\
    \ of elements in the array that are greater than 10, the last\ndigit of which\
    \ is even and the second to last digit is odd.\nFor example:\n    >>> specialFilter3([15L,\
    \ -73L, 14L, -15L])\n    1L\n    >>> specialFilter3([33L, -2L, -3L, 45L, 21L,\
    \ 109L])\n    2L\n*/\nlong specialFilter3(long[] nums)\n{\n    auto a = nums.filter!(x\
    \ => x>10).filter!(x => x.digits[$-1]%2==0 && x.digits[$-2]%2!=0).length;\n  \
    \  return a;\n}\n/*\nWrite a function that takes an array of numbers as input\
    \ and returns\nthe number of elements in the array that are greater than 10, the\
    \ last\ndigit of which is even and the second to last digit is odd.\nFor example:\n\
    \    >>> specialFilter4([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter4([33L,\
    \ -2L, -3L, 45L", "{\n    /* \n        Write your code here \n    */\n    \n \
    \   //Return the number of elements in the array that are greater than 10 \n \
    \   //and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n  \
    \  auto l = filter!((long x) => x > 10)(nums);\n    return filter!((long x) =>\
    \ (x % 2 == 1) && (x % 10 == 1 || x % 10 == 3 || x % 10 == 5 || x % 10 == 7 ||\
    \ x % 10 == 9))(l).length;\n}\n// Test with:\n// specialFilter([15L, -73L, 14L,\
    \ -15L])\n// specialFilter([33L, -2L, -3L, 45L, 21L, 109L])", "{\n  long count\
    \ = 0;\n  foreach(n; nums)\n  {\n    if(n > 10)\n    {\n      long firstDigit\
    \ = n;\n      while(firstDigit >= 10)\n      {\n        firstDigit /= 10;\n  \
    \    }\n      long lastDigit = n % 10;\n      if(firstDigit % 2 == 1 && lastDigit\
    \ % 2 == 1)\n      {\n        count++;\n      }\n    }\n  }\n  return count;\n\
    }\n// This is more condensed solution (with help of std.typecons module)\nlong\
    \ specialFilter2(long[] nums)\n{\n  long count = 0;\n  foreach(n; nums)\n  {\n\
    \    auto digits = splitByInteger(n);\n    if(n > 10 && digits[0] % 2 == 1 &&\
    \ digits[$-1] % 2 == 1)\n    {\n      count++;\n    }\n  }\n  return count;\n\
    }\n \n/*\nWrite a function that takes an array of numbers as input and returns\
    \ \n    the number of elements in the array that are smaller than 10 and first\
    \ \n    and last digits of a number are equal. \n    For example:\n    >>> specialFilter2([2L,\
    \ -2L, 4L, 9L, 15L, -15L])\n    1L\n    >>> specialFilter2([12L, 13L, -11L, 11L,\
    \ 45L, -45L])\n    3L\n*/\nlong specialFilter3(long[] nums)\n{\n  long count =\
    \ 0;\n  foreach(n; nums)\n  {\n    if(n < 10)\n    {\n      long firstDigit =\
    \ n;\n      while(firstDigit >= 10)\n      {\n        firstDigit /= 10;\n    \
    \  }\n      long lastDigit = n % 10;\n      if(firstDigit == lastDigit)\n    \
    \  {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n// This is more\
    \ condensed solution (with help of std.typecons module)\nlong specialFilter4(long[]\
    \ nums)\n{\n  long count = 0;\n  foreach", "{\n    return nums.filter!(n => n\
    \ > 10 && n % 2 == 1 && n % 10 == 1).length;\n}", "{ \n    //return sum([1L for\
    \ n in nums if (n>10L) && (n%2!=0) && (n%10!=0) && ((n/10)%2!=0)]);\n    long[]\
    \ filtered = filter!((n)=>(n>10L) && (n%2!=0) && (n%10!=0) && ((n/10)%2!=0))(nums);\n\
    \    return filtered.length;\n} ", "{\n    auto result = 0L;\n    auto firstDigit\
    \ = 0L;\n    auto lastDigit = 0L;\n    foreach(num; nums)\n    {\n        if(num\
    \ > 10)\n        {\n            if(num < 0)\n            {\n                lastDigit\
    \ = -(num % 10);\n                num = -num;\n            }\n            else\n\
    \            {\n                lastDigit = num % 10;\n            }\n       \
    \     firstDigit = num;\n            while(firstDigit >= 10)\n            {\n\
    \                firstDigit /= 10;\n            }\n            if(firstDigit %\
    \ 2 != 0 && lastDigit % 2 != 0)\n            {\n                result++;\n  \
    \          }\n        }\n    }\n    return result;\n}", "{\n    long count = 0;\n\
    \    foreach(a; nums)\n    {\n        if( a > 10 && (a % 2 == 1) && ( a % 10 ==\
    \ 1 || a % 10 == 3 || a % 10 == 5 || a % 10 == 7 || a % 10 == 9 ) )\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    //Write\
    \ your code here\n    int max = 0;\n    foreach(i;nums)\n    {\n        if (i\
    \ > 10)\n        {\n            auto str = to!string(i);\n            auto first\
    \ = str[0];\n            auto last = str[$-1];\n            if (first % 2 != 0\
    \ && last % 2 != 0)\n            {\n                ++max;\n            }\n  \
    \      }\n    }\n    return max;\n}", "{\n    auto func = zip!((x,y) => x*y)(map!(x\
    \ => x%2)(nums), map!(x => x%2)(nums));\n    return reduce!q{a+b}(zip!((x,y) =>\
    \ x*y)(map!(x => x>10)(nums), func));\n}", "{\n    long counter=0;\n    foreach(l;\
    \ nums) \n    {\n        int first, last;\n        last = l % 10;\n        first\
    \ = l;\n        while(first>=10) \n        {\n            first/=10;\n       \
    \ }\n        if((l>10) && (last % 2 != 0) && (first % 2 != 0)) \n        {\n \
    \           counter++;\n        }\n    }\n    return counter;\n}\n/*\nWrite a\
    \ function that takes an array of numbers as input and returns a \n    boolean\
    \ value representing whether or not the average of all elements \n    in the array\
    \ is a whole number.\n    For example:\n    >>> isAvgWhole([1L, 3L, 4L])\n   \
    \ false\n    >>> isAvgWhole([1L, 2L, 3L, 4L])\n    true\n    >>> isAvgWhole([1L,\
    \ 5L, 6L])\n    true\n    >>> isAvgWhole([1L, 1L, 1L])\n    true\n    >>> isAvgWhole([9L,\
    \ 2L, 2L, 5L])\n    false\n*/", "{\n    long greaterThan10 = 0;\n    long firstOdd\
    \ = 0;\n    long lastOdd = 0;\n    long final = 0;\n    for(long i = 0; i < nums.length;\
    \ i++)\n    {\n        if(nums[i] > 10)\n        {\n            greaterThan10++;\n\
    \        }\n        if(nums[i] % 2 == 1)\n        {\n            lastOdd++;\n\
    \        }\n        string str = to!string(nums[i]);\n        if(str[0] == '1'\
    \ || str[0] == '3' || str[0] == '5' || str[0] == '7' || str[0] == '9')\n     \
    \   {\n            firstOdd++;\n        }\n    }\n    final = firstOdd * lastOdd;\n\
    \    if(greaterThan10 < final)\n    {\n        return greaterThan10;\n    }\n\
    \    else\n    {\n        return final;\n    }\n    \n}", "{\n    int counter\
    \ = 0;\n    foreach(n; nums)\n    {\n        if(abs(n)>10)\n        {\n      \
    \      if(lastOf(n.to!string)%2!=0 && firstOf(n.to!string)%2!=0)\n           \
    \ {\n                counter++;\n            }\n        }\n    }\n    return counter;\n\
    }", "{ \n    return nums.filter!(x => x > 10L && x.toString().front.to!long %\
    \ 2L == 1L && \n        x.toString().back.to!long % 2L == 1L).length;\n} ", "{\n\
    \    return nums.filter!(x => x > 10 && x % 2 != 0 && isOdd(x)).length;\n}\n ",
  "{\n    long count = 0;\n    for (int i = 0; i < nums.length; i++)\n    {\n    \
    \    int firstDigit = nums[i];\n        while (firstDigit > 10)\n        {\n \
    \           firstDigit = firstDigit / 10;\n        }\n        int lastDigit =\
    \ nums[i] % 10;\n        if (nums[i] > 10 && firstDigit % 2 != 0 && lastDigit\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long temp = 0;\n    foreach(i; nums)\n    {\n        if(i > 10 &&\
    \ (i / modf(log10(abs(i)))) % 2 != 0 && modf(i % 10) != 0)\n        {\n      \
    \      temp++;\n        }\n    }\n    return temp;\n}", "{\n    long numberOfOddDigits\
    \ = 0;\n    foreach(n; nums)\n    {\n        long first = n % 10;\n        if(first\
    \ % 2 == 1) \n        {\n            long last = n / pow(10, (int)floor(log10(n)));\n\
    \            if(last % 2 == 1) \n            {\n                numberOfOddDigits++;\n\
    \            }\n        }\n    }\n    return numberOfOddDigits;\n}\n/*\nWrite\
    \ a function that takes a string as input and returns true if the \n    string\
    \ starts with a digit.\n    For example:\n    >>> startsWithDigit(\"123abc\")\n\
    \    true\n    >>> startsWithDigit(\"abc123\")\n    false\n*/", "{\n  return nums.filter!(a\
    \ => a > 10 && a.toString.front.to!int % 2 && a.toString.back.to!int % 2)().length;\n\
    }", "{\n    int size = nums.length;\n    long count = 0;\n    for (int i = 0;\
    \ i < size; i++) \n    {\n        if (nums[i] > 10) \n        {\n            if\
    \ (nums[i] % 2 == 1) \n            {\n                long tmp = nums[i];\n  \
    \              while (tmp >= 10)\n                {\n                    tmp /=\
    \ 10;\n                }\n                if (tmp % 2 == 1) \n               \
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}", "{\n    import std.algorithm : filter, reduce;\n\
    \    import std.math : abs;\n    return nums.filter!(a => abs(a) >= 10 \n    &&\
    \ abs(a / 10) % 2 && a % 2).reduce!q{a + b}.length;\n}", "{\n    auto predicate\
    \ = (long num) => \n    {\n        if (num <= 10L)\n            return false;\n\
    \        num = abs(num);\n        return (num % 10 % 2) && (num / 10 % 10 % 2);\n\
    \    };\n    return filter!predicate(nums).length;\n}\n// or \n/*\nlong specialFilter(long[]\
    \ nums)\n{\n    auto predicate = (long num) => (num > 10) && ((num % 10) % 2)\
    \ && ((num / 10) % 2);\n    return filter!predicate(nums).length;\n}\n*/", "{\n\
    \    long counter = 0;\n    foreach(num; nums)\n    {\n        if (num>10 && num%2\
    \ != 0 && num/10%2 != 0)\n        {\n            counter++;\n        }\n    }\n\
    \    return counter;\n}", "{\n    long result = 0;\n    foreach(elem; nums)\n\
    \    {\n        if (elem > 10 && ((elem / 10) % 2 != 0) && (elem % 2 != 0))\n\
    \        {\n            result++;\n        }\n    }\n    return result;\n}\n//\
    \ Write a function that takes a number 'n' as input and generates \n// the Fibonacci\
    \ sequence of 'n' numbers.\n// For example:\n// >>> fibo(5)\n// 1, 1, 2, 3, 5\n\
    // >>> fibo(8)\n// 1, 1, 2, 3, 5, 8, 13, 21", "{\n    return nums.filter!(n =>\
    \ n > 10 && n.toString()[0] % 2 != 0 && n.toString()[$-1] % 2 != 0)().length;\n\
    }", "{\n  int size = nums.length;\n  long[] s = new long[size];\n  int j = 0;\n\
    \  for (int i = 0; i < size; i++) \n  {\n    if (nums[i] > 10) \n    {\n     \
    \ if (((nums[i] / 10) % 2) != 0 && (nums[i] % 2) != 0) \n      {\n        s[j]\
    \ = nums[i];\n        j++;\n      }\n    }\n  }\n  return j;\n}", "{\n    long\
    \ result = 0;\n    foreach(n; nums)\n    {\n        if (10 < n && isOdd(n % 10)\
    \ && isOdd(n / 10_000_000_000_000_000_000))\n        {\n            result +=\
    \ 1;\n        }\n    }\n    return result;\n}\n/*\nWrite a function that takes\
    \ in an int array and counts how many times \n    the value 5 occurs and return\
    \ it. For example:\n    >>> countOccurrences([1, 2, 4, 5, 7, 8, 5, 5, 1, 3, 5])\n\
    \    4L\n*/\nlong countOccurrences(int[] nums)\n{\n    long result = 0;\n    foreach(n;\
    \ nums)\n    {\n        if (n == 5)\n        {\n            result += 1;\n   \
    \     }\n    }\n    return result;\n}\n/*\nGiven an array of ints, return true\
    \ if the array contains a 2 next to a 2 \n    somewhere. For example:\n    >>>\
    \ has22([1, 2, 2])\n    true\n    >>> has22([1, 2, 1, 2])\n    false\n    >>>\
    \ has22([2, 1, 2])\n    false\n*/", "{\n    // your code here\n}", "{\n    size_t\
    \ c = 0;\n    foreach(n; nums)\n    {\n        //if(n > 10)\n            c++;\n\
    \    }\n    return c;\n}", "{\n    long count = 0;\n    for (long i = 0; i < nums.length;\
    \ i++)\n    {\n        long firstDigit = cast(long)nums[i] / 10;\n        long\
    \ lastDigit = nums[i] % 10;\n        if (firstDigit == 0) firstDigit = nums[i];\n\
    \        while (firstDigit >= 10) firstDigit /= 10;\n        if (nums[i] > 10\
    \ && (firstDigit & 1) && (lastDigit & 1)) count++;\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach( long number; nums) \n    {\n       \
    \ // Check if number is greater than 10.\n        if(number > 10) \n        {\n\
    \            // Check if first digit is odd.\n            long first = number\
    \ / 10;\n            long firstMod = first % 2;\n            if(firstMod == 1\
    \ || firstMod == -1) \n            {\n                // Check if last digit is\
    \ odd.\n                long last = number % 10;\n                long lastMod\
    \ = last % 2;\n                if(lastMod == 1 || lastMod == -1) \n          \
    \      {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}", "{\n    int count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if (num > 10 && isOdd(num) && isOdd(firstDigit(num)) &&\
    \ isOdd(lastDigit(num)))\n        {\n            count += 1;\n        }\n    }\n\
    \    return count;\n}\n/*\n    Helper function to determine if a number is odd.\n\
    */", "{\n    long res = 0;\n    foreach(n; nums)\n    {\n        if(n > 10)\n\
    \        {\n            long first_digit = n;\n            while(first_digit >=\
    \ 10)\n            {\n                first_digit /= 10;\n            }\n    \
    \        long last_digit = n;\n            while(last_digit >= 10)\n         \
    \   {\n                last_digit = last_digit % 10;\n            }\n        \
    \    if(last_digit % 2 == 1 && first_digit % 2 == 1)\n            {\n        \
    \        res += 1;\n            }\n        }\n    }\n    return res;\n}", "{\n\
    \    long answer = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n \
    \       {\n            ulong firstDigit = num % 10;\n            if(firstDigit\
    \ % 2 == 1)\n            {\n                Tuple!(ulong, bool) result = toUlong(num);\n\
    \                ulong length = result[0];\n                ulong lastDigit =\
    \ num / ulong(pow(10, length - 1));\n                if(lastDigit % 2 == 1)\n\
    \                {\n                    answer++;\n                }\n       \
    \     }\n        }\n    }\n    return answer;\n}", "{\n    return nums.filter!(a\
    \ => a > 10 && a.toString().front.to!int % 2 && a.toString().back.to!int % 2).length;\n\
    }", "{\n    long res = 0;\n    foreach(n; nums) \n    {\n        if(n > 10 &&\
    \ \n            (n % 10 == 1 || n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n\
    \ % 10 == 9) &&\n            (n / pow(10, log10(n)) == 1 || n / pow(10, log10(n))\
    \ == 3 || n / pow(10, log10(n)) == 5 || n / pow(10, log10(n)) == 7 || n / pow(10,\
    \ log10(n)) == 9)) \n        {\n            res++;\n        }\n    }\n    return\
    \ res;\n}", "{\n    long[] arr = nums.filter!(a => a > 10 && a.digits.length >\
    \ 1 && a.digits[0] % 2 != 0 && a.digits[$ - 1] % 2 != 0)();\n    return arr.length;\n\
    }\n ", "{\n    long count = 0;\n    foreach(i; nums)\n    {\n        if(abs(i)\
    \ > 10 && isOdd(i % 10) && isOdd(i / 10_000_000_000_000_000_000))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\nWrite a function\
    \ that takes a list of strings as input and returns \n    a new list containing\
    \ the words in reverse order.\n    For example:\n    >>> reverseWords([\"this\"\
    , \"is\", \"a\", \"test\"])\n    [\"test\", \"a\", \"is\", \"this\"]\n*/\nstring[]\
    \ reverseWords(string[] words) \n{\n    auto reversed = words[];\n    auto start\
    \ = 0;\n    auto end = words.length - 1;\n    while(start < end)\n    {\n    \
    \    //use auto cause typeof x = typeof y.x\n        auto tmp = reversed[start];\n\
    \        reversed[start] = reversed[end];\n        reversed[end] = tmp;\n    \
    \    start++;\n        end--;\n    }\n    return reversed;\n}\n/*\nWrite a function\
    \ that takes an array of numbers as input and returns \n    a new array containing\
    \ only the numbers that are greater than \n    average of the input array.\n \
    \   For example:\n    >>> aboveAverage([2, 4, 5, 7, 1, 5, 10])\n    [5, 7, 5,\
    \ 10]\n*/\nlong[] aboveAverage(long[] nums) \n{\n    auto sum = 0;\n    foreach(i;\
    \ nums)\n    {\n        sum += i;\n    }\n    auto avg = sum / nums.length;\n\
    \    auto count = 0;\n    foreach(i; nums)\n    {\n        if(i > avg)\n     \
    \   {\n            count++;\n        }\n    }\n    auto result = new long[count];\n\
    \    auto index = 0;\n    foreach(i; nums)\n    {\n        if(i > avg)\n     \
    \   {\n            result[index] = i;\n            index++;\n        }\n    }\n\
    \    return result;\n}\n/*\nWrite a function that takes", "{\n    immutable long\
    \ firstDigit;\n    immutable long lastDigit;\n    immutable long count = 0;\n\
    \    foreach(num; nums)\n    {\n        auto tmp = num;\n        while(tmp >=\
    \ 10)\n        {\n            tmp /= 10;\n        }\n        firstDigit = tmp;\n\
    \        lastDigit = num % 10;\n        if(num > 10 && firstDigit % 2 != 0 &&\
    \ lastDigit % 2 != 0)\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    //         if(nums.length > 0)\n    //         {\n\
    \    //             auto res = filter!((item) => item > 10 && \n    //       \
    \      firstDigit(item) % 2 != 0 && lastDigit(item) % 2 != 0)(nums);\n    // \
    \            return res.length;\n    //         }\n    //         else\n    //\
    \         {\n    //             return 0;\n    //         }\n    return 0;\n}\n\
    //  //** Algorithm\n//  //** Want to get the first digit\n//  //** First digit\
    \ = num/10^(num of digits - 1)\n//  //** For example:\n//  //**     111234/10^(6-1)\
    \ = 111234/10^5 = 111234/100000 = 1\n//  //**     111234/10^(5-1) = 111234/10^4\
    \ = 111234/10000 = 11\n//  //**     111234/10^(4-1) = 111234/10^3 = 111234/1000\
    \ = 111\n//  //**     111234/10^(3-1) = 111234/10^2 = 111234/100 = 1112\n//  //**\
    \     111234/10^(2-1) = 111234/10^1 = 111234/10 = 11123\n//  //**     111234/10^(1-1)\
    \ = 111234/10^0 = 111234/1 = 111234\n//  //**     \n//  //** Last digit = num\
    \ % 10\n//  //** For example:\n//  //**     111234 % 10 = 4\n//  //**     11123\
    \ % 10 = 3\n//  //**     1112 % 10 = 2\n//  //**     111 % 10 = 1\n//  //**  \
    \   11 % 10 = 1\n//  //**     1 % 10 = 1\n//  //** \n//  //** Implement\n//  //**\
    \     num/10^(num of digits - 1) \n//  //**         = num/(10^(num of digits -\
    \ 1))\n//  //**         = num/(pow", "{\n\tlong count = 0;\n\tforeach(item; nums)\
    \ \n\t{\n\t\tif(item > 10) \n\t\t{\n\t\t\tstring num = item.to!string;\n\t\t\t\
    int firstDigit = num[0].to!int;\n\t\t\tint lastDigit = num[$-1].to!int;\n\t\t\t\
    if(firstDigit % 2 == 1 && lastDigit % 2 == 1)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\t\
    return count;\n}", "{\n    long out = 0;\n    foreach(n; nums)\n    {\n      \
    \  if (n > 10)\n        {\n            auto x = to!string(n);\n            if\
    \ (x[0] % 2 && x[$-1] % 2)\n            {\n                out++;\n          \
    \  }\n        }\n    }\n    return out;\n}", "{\n    long result = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10)\n        {\n            int last = cast(int)num\
    \ % 10;\n            int first = cast(int)num;\n            while(first > 10)\n\
    \            {\n                first /= 10;\n            }\n            if(last\
    \ % 2 != 0 && first % 2 != 0)\n            {\n                result++;\n    \
    \        }\n        }\n    }\n    return result;\n}", "{\n    long special_elements_num\
    \ = 0;\n    foreach(num; nums)\n    {\n        long first_digit = cast(long)num;\n\
    \        while(first_digit > 9)\n        {\n            first_digit /= 10;\n \
    \       }\n        long last_digit = num % 10;\n        if((num > 10) && (first_digit\
    \ % 2 == 1) && (last_digit % 2 == 1))\n        {\n            special_elements_num++;\n\
    \        }\n    }\n    return special_elements_num;\n}", "{\n    long greater\
    \ = 0;\n    foreach(element; nums)\n    {\n        long first = element / abs(element);\n\
    \        long last = element % 10;\n        if(element > 10 && first % 2 != 0\
    \ && last % 2 != 0)\n        {\n            greater++;\n        }\n    }\n   \
    \ return greater;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n\
    \        if(num > 10)\n        {\n            auto first = num/10;\n         \
    \   auto last = num%10;\n            if(first % 2 != 0 && last % 2 != 0)\n   \
    \         {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long counter = 0;\n    foreach(num; nums)\n    {\n     \
    \   if(num > 10 && isOdd(firstDigit(num)) && isOdd(lastDigit(num)))\n        {\n\
    \            counter++;\n        }\n    }\n    return counter;\n}", "{\n    long\
    \ result = 0;\n    foreach(i; nums) \n    {\n        if(i > 10 && cast(bool) i\
    \ & 1 && cast(bool) (i % 10) & 1)\n            result++;\n    }\n    return result;\n\
    }", "{\n\t\n\tint count = 0;\n\tforeach( num; nums)\n\t{\n\t\tbool isFirstOdd\
    \ = num / 10 % 2 == 1;\n\t\tbool isLastOdd = num % 2 == 1;\n\t\tbool isMoreThanTen\
    \ = num > 10;\n\t\t\n\t\tif(isFirstOdd && isLastOdd && isMoreThanTen)\n\t\t{\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}", "{\n    return nums.filter!(n\
    \ => (n > 10) && isOdd(n) && isOdd(n % 10)).length;\n}", "{\n    long[] xs = nums.filter!(n\
    \ => n > 10 && n%2 == 1 &&\n                                 // n/(pow(10, (int)log10(n)))\
    \ == n%10).length;\n                                 n/(cast(long)pow(10, cast(int)log10(n)))\
    \ == n%10).length;\n    return xs.length;\n}", "{\n    long count = 0;\n    foreach(ref\
    \ long i; nums)\n    {\n        if(i > 10 && i % 2 != 0 && i % 2 != 0)\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}", "{\n   \
    \ long result = 0;\n    foreach(num; nums)\n    {\n        auto digits = num.to!string.split(\"\
    \").filter!(a => a.length).map!(a => a.to!long).array;\n        if(num.abs > 10\
    \ && digits[0] % 2 && digits[$-1] % 2)\n            result++;\n    }\n    return\
    \ result;\n}", "{\n    return nums.filter!(n => n > 10 && n % 2 == 1 && n % 10\
    \ == 1).length;\n}", "{ \n    long counter = 0;\n    long x;\n    foreach(n; nums)\n\
    \    {\n        if(n > 10)\n        {\n            x = n % 10;\n            if(x\
    \ % 2 != 0)\n            {\n                x = n / 100;\n                if(x\
    \ % 2 != 0)\n                {\n                    counter++;\n             \
    \   }\n            }\n        }\n    }\n    return counter;\n}", "{\n\tauto r\
    \ = reduce!((a, b) => a + (b > 10 && even(b[0]) && even(b[$ - 1]) ? 1 : 0))(0,\
    \ nums);\n\treturn r;\n}", "{\n\tlong counter = 0;\n\tforeach(i; nums) \n\t{\n\
    \t\tlong num = i;\n\t\tlong first = i;\n\t\tlong last = i;\n\t\twhile(num >= 10)\n\
    \t\t{\n\t\t\tlast = num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\tfirst = num;\n\t\t\
    if(i > 10 && isOdd(first) && isOdd(last))\n\t\t{\n\t\t\tcounter++;\n\t\t}\n\t\
    }\n\treturn counter;\n}\n/*\nWrite a function that takes an array of numbers as\
    \ input and returns \n    the number of integers in the array that contain the\
    \ digit 2.\n    For example:\n    >>> countTwos([10L, 211L, 321L, -24L, 22L, 99L])\n\
    \    3L\n*/\nlong countTwos(long[] nums) \n{\n\tlong counter = 0;\n\tforeach(i;\
    \ nums) \n\t{\n\t\tlong num = i;\n\t\twhile(num >= 10)\n\t\t{\n\t\t\tif(num %\
    \ 10 == 2)\n\t\t\t{\n\t\t\t\tcounter++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /=\
    \ 10;\n\t\t}\n\t\tif(num == 2)\n\t\t{\n\t\t\tcounter++;\n\t\t}\n\t}\n\treturn\
    \ counter;\n}\n/*\nWrite a function that takes a tuple of numbers as input and\
    \ returns \n    the number of numbers in the tuple that are greater than all numbers\
    \ in the tuple preceding them.\n    For example:\n    >>> lenghtOfIncreasingSubsequence((1L,\
    \ 2L, 1L, 2L, 1L, 1L, 2L, 2L, 3L, 3L, 3L, 2L, 1L, 1L, 2L, 2L, 3L, 3L, 3L, 2L,\
    \ 1L, 1L, 2L, 2L, 3L, 3L, 3L, 2L, 1L, 1L, 2L, 2L, 3L, 3L, 3L, 2L, 1L, 1L,", "{\n\
    \    return nums.filter!(a => {\n        if (a < 10) return false;\n        auto\
    \ f = a / 10;\n        auto s = a % 10;\n        return (f % 2 != 0 && s % 2 !=\
    \ 0);\n    }).length;\n}", "{\n    long result = 0;\n    foreach(l; nums)\n  \
    \  {\n        if(l > 10)\n        {\n            result += (l.to!string().front.to!int\
    \ % 2 == 1 && \n                       l.to!string().back.to!int % 2 == 1) ? 1\
    \ : 0;\n        }\n    }\n    return result;\n}", "{\n    long res = 0;\n    foreach(l;\
    \ nums)\n    {\n        int last = l % 10;\n        int first = l;\n        while(first\
    \ > 9)\n        {\n            first /= 10;\n        }\n        if(l > 10 && (first\
    \ % 2 != 0) && (last % 2 != 0))\n        {\n            res++;\n        }\n  \
    \  }\n    return res;\n}\n \n/*\nWrite a function that takes an array of numbers\
    \ as input and returns \n    a string representation of the product of the elements\
    \ in the array.\n    For example:\n    >>> product([1, 2, 3, 4, 5])\n    '120'\n\
    \    >>> product([2, 3, 4, 5, 6])\n    '720'\n    >>> product([10, 11, 12, 13,\
    \ 14])\n    '2704156'\n*/\nstring product(long[] nums) \n{\n    long res = 1;\n\
    \    foreach(l; nums)\n    {\n        res *= l;\n    }\n    return to!string(res);\n\
    }\n \n/*\nWrite a function that takes an array of unsigned ints as input and \n\
    \    returns the array with elements in reverse order.\n    For example:\n   \
    \ >>> reverse([3L, 4L, 5L, 6L])\n    [6L, 5L, 4L, 3L]\n    >>> reverse([3L, 4L,\
    \ 5L, 6L, 7L])\n    [7L, 6L, 5L, 4L, 3L]\n*/\nlong[] reverse(long[] nums) \n{\n\
    \    long[] res;\n    foreach(l; nums)\n    {\n        res ~= l;\n    }\n    return\
    \ res.reverse;\n}\n \n/*\nWrite a function that takes an array of unsigned ints\
    \ as input and \n    returns the number of occurrences of maximum element in the\
    \ array.\n    For example:\n    >>> maxOccurrences([3L, 4L, 5L, 6L])\n    1L\n\
    \    >>> maxOccurrences([6L, 6L, 5L, 5L, 4L, 3L])\n    2L\n   ", "{\n\tlong count\
    \ = 0;\n\tforeach(num; nums)\n\t{\n\t\tauto num2 = abs(num);\n\t\tif(num2 >= 10)\n\
    \t\t{\n\t\t\tauto last = num2 % 10;\n\t\t\tauto fist = num2 / (long)pow(10,(log10(num2)));\n\
    \t\t\tif((last % 2 != 0) && (fist % 2 != 0))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn count;\n}\n/*\nWrite a function that takes an array of\
    \ strings as input and returns \n    the number of strings that are prefixes of\
    \ each other.\n    For example:\n    >>> commonPrefixes([\"foo\", \"foobar\",\
    \ \"foobarbaz\", \"foobarfoo\"])\n    3L\n    >>> commonPrefixes([\"foo\", \"\
    foo\", \"foo\"])\n    3L\n*/\nlong commonPrefixes(string[] strings) \n{\n\tlong\
    \ count = 0;\n\tforeach(str; strings)\n\t{\n\t\tcount++;\n\t\tforeach(str2; strings)\n\
    \t\t{\n\t\t\tif(str != str2)\n\t\t\t{\n\t\t\t\tif(str.startsWith(str2))\n\t\t\t\
    \t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\
    /*\nWrite a function that takes an array of strings as input and returns the \n\
    \    longest string in the array. If there are multiple strings with the \n  \
    \  same length, it returns the first one.\n    For example:\n    >>> longest([\"\
    foo\", \"foobar\", \"foobarbaz\", \"foobarfoo\"])\n    \"foobarbaz\"\n    >>>\
    \ longest([\"foo\", \"foo\", \"foo\"])\n    \"foo\"\n*/\nstring longest(string[]\
    \ strings) \n{\n\tstring longest = \"\";\n\tforeach(str; strings)\n\t{\n\t\tif(str.length\
    \ > longest.length)\n\t\t{\n\t\t\tlongest = str;", "{\n    long result = 0;\n\
    \    foreach(num; nums) \n    {\n        if(num >= 10) \n        {\n         \
    \   string numString = to!string(num);\n            if(numString[0] % 2 == 1 &&\
    \ numString[$-1] % 2 == 1)\n            {\n                result++;\n       \
    \     }\n        }\n    }\n    return result;\n}", "{\n    long count=0;\n   \
    \ foreach(num; nums)\n    {\n        if(num >= 10)\n        {\n            if(num.to!string().front.to!int()\
    \ % 2 == 1 && num.to!string().back.to!int() % 2 == 1)\n            {\n       \
    \         count++;\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    return nums.filter!(x => x > 10 && x % 2 != 0 \n                        \
    \ && x / 10 % 2 != 0 && \n                            (x % 10 == 1 || x % 10 ==\
    \ 3 || x % 10 == 5 || x % 10 == 7 || x % 10 == 9)).length;\n}", "{\n    return\
    \ nums.filter!(x => x > 10 && \"123456789\".canFind(x.to!string[0]) && \"123456789\"\
    .canFind(x.to!string[$-1])).length;\n}\n/*\nWrite a template function that takes\
    \ an array as input and \n    returns the number of elements in the array that\
    \ are greater than 10 and \n    both first and last digits of a number are odd\
    \ (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilterTemplated([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilterTemplated([33L, -2L, -3L, 45L, 21L,\
    \ 109L])\n    2L\n*/\nT specialFilterTemplated(T)(T[] nums) \n{\n    return nums.filter!(x\
    \ => x > 10 && \"123456789\".canFind(x.to!string[0]) && \"123456789\".canFind(x.to!string[$-1])).length;\n\
    }\n// Write a test to prove that they are working\nunittest \n{\n    assert(specialFilter([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(specialFilter([33L, -2L, -3L, 45L, 21L,\
    \ 109L]) == 2L);\n    assert(specialFilterTemplated([15L, -73L, 14L, -15L]) ==\
    \ 1L);\n    assert(specialFilterTemplated([33L, -2L, -3L, 45L, 21L, 109L]) ==\
    \ 2L);\n}\n/*\nWrite a function that takes an array of strings as input and \n\
    \    returns a new array that does not contain duplicate strings.\n    For example:\n\
    \    >>> removeDuplicates([\"one\", \"two\", \"three\", \"one\", \"four\", \"\
    five\", \"two\"])\n    [\"one\", \"two\", \"three\", \"four\", \"five\"]\n*/\n\
    string[] removeDuplicates(string[] arr) \n{\n    return arr.uniq;\n}\n/*\nWrite\
    \ a template function that takes an", "{\n    int l = 0;\n    foreach(ref long\
    \ num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && (num % 10) % 2 ==\
    \ 1)\n        {\n            l++;\n        }\n    }\n    return l;\n}\n/*\nWrite\
    \ a function that takes a string as input and returns true \n    if the string\
    \ is a valid IPv4 address (ie. consists of four integers \n    separated by dots,\
    \ each integer is between 0 and 255, inclusive) or \n    false otherwise.\n  \
    \  For example:\n    >>> isIPv4Address(\"172.16.254.1\")\n    true\n    >>> isIPv4Address(\"\
    172.316.254.1\")\n    false\n    >>> isIPv4Address(\"256.16.254.1\")\n    false\n\
    */", "{\n    long count=0;\n    foreach(l; nums)\n    {\n        if(l>10 && isOdd(l%10)\
    \ && isOdd(l/100))\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    return (nums.filter!(a => a > 10 && a % 2 == 1 && a / 10\
    \ % 2 == 1).length);\n}", "{\n    long k;\n    foreach(e;nums)\n    {\n      \
    \  if(e>10 && (e%10)%2 != 0 && (e/10)%2 != 0)\n        {\n            k=e;\n \
    \       }\n    }\n    return k;\n}", "{\n  return nums.filter!(n => n > 10 &&\
    \ n % 2 == 1 && (n % 10 == 1 || n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n\
    \ % 10 == 9)).length;\n}", "{ \n    long size = nums.length;\n    long c = 0;\n\
    \    for(long i = 0; i < size; i++){\n        if(nums[i] > 10){\n            auto\
    \ fDigit = nums[i] / pow(10, floor(log10(nums[i])));\n            auto lDigit\
    \ = nums[i] % 10;\n            if(isOdd(fDigit) && isOdd(lDigit)){\n         \
    \       c += 1;\n            }\n        }\n    }\n    return c;\n}", "{\n    long\
    \ result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n\
    \            if(num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n\
    \            {\n                result++;\n            }\n        }\n    }\n \
    \   return result;\n}", "{ \n    long counter = 0;\n    foreach(num; nums)\n \
    \   {\n        if(num > 10)\n        {\n            auto digits = map!(a => a.to!long())(to!string(num));\n\
    \            if((digits[0] % 2 == 1) && (digits[$-1] % 2 == 1))\n            {\n\
    \                counter++;\n            }\n        }\n    }\n    return counter;\n\
    }", "{\n    long count = 0;\n    for (long num; nums) \n    {\n        num = nums.front;\n\
    \        nums = nums.dropFront;\n        if (num > 10 && !(num % 2) && (num /\
    \ 10) % 2)\n            count++;\n    }\n    return count;\n}", "{\n  auto answer\
    \ = 0L;\n  foreach(n; nums)\n  {\n    auto fd = n % 10;\n    auto ld = n;\n  \
    \  while(ld > 9)\n    {\n      ld /= 10;\n    }\n    if(n > 10 && fd % 2 == 1\
    \ && ld % 2 == 1)\n    {\n      answer++;\n    }\n  }\n  return answer;\n}\n \n\
    /*\nWrite a function that takes an array of numbers as input and returns \n  \
    \  an array of all pairs of numbers that occur exactly twice in the array.\n \
    \   For example:\n    >>> findDuplicates([1L, 2L, 3L, 4L, 5L, 6L, 1L, 2L, 3L,\
    \ 4L, 5L, 8L])\n    [[1L, 2L, 3L, 4L, 5L], [1L, 2L, 3L, 4L, 5L]]\n*/\nlong[][]\
    \ findDuplicates(long[] nums) \n{\n  auto pairs = [long[]]();\n  foreach(n; nums)\n\
    \  {\n    if(nums.count(n) == 2)\n    {\n      auto pair = [long(n), long(n)];\n\
    \      pairs ~= pair;\n    }\n  }\n  return pairs;\n}", "{\n  return nums.filter!(a\
    \ => (a >= 10) && (a % 2 != 0) && \n    (a % 10 != 0) && (a / (int)pow(10, cast(int)log10(a))\
    \ != 0))\n    .length;\n}", "{\n    return nums.filter!(n => n > 10 && n % 2 !=\
    \ 0 && n / 10 % 2 != 0).length;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(abs(num) > 10 && num[0] % 2 == 1 && num[$-1] % 2 ==\
    \ 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}",
  "{\n    long result = 0;\n    foreach(elem; nums)\n    {\n        if (elem > 10\
    \ && (elem % 2 == 1) && ((elem ~/ 10) % 2 == 1))\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long total = 0;\n    foreach(n;\
    \ nums)\n    {\n        if(n>10)\n        {\n            auto result = isOdd(toString(n));\n\
    \            if(result.front && result.back)\n            {\n                total++;\n\
    \            }\n        }\n    }\n    return total;\n}", "{\n    int a = 0;\n\
    \    foreach(n; nums)\n    {\n        if(abs(n)>10 && n % 2 != 0 && n % 10 !=\
    \ 0)\n        {\n            a += 1;\n        }\n    }\n    return a;\n}", "{\n\
    \    //It's not a function.\n}", "{\n    long filteredNums = 0L;\n    foreach(idx,\
    \ elem; nums) \n    {\n        int firstDigit = 0;\n        int lastDigit = 0;\n\
    \        auto firstNum = elem / 10;\n        auto lastNum = elem % 10;\n     \
    \   firstDigit = firstNum.rem;\n        lastDigit = lastNum.rem;\n        if(elem\
    \ > 10 && firstDigit % 2 != 0 && lastDigit % 2 != 0) \n        {\n           \
    \ filteredNums++;\n        }\n    }\n    return filteredNums;\n}", "{\n    long\
    \ result = 0;\n    foreach(i;nums)\n    {\n        if(i > 10)\n        {\n   \
    \         string s = format(\"%d\",i);\n            if(!checkEven(to!int(s[0]))\
    \ && !checkEven(to!int(s[$-1])))\n            {\n                result++;\n \
    \           }\n        }\n    }\n    return result;\n}", "{\n    long res = 0;\n\
    \    foreach(num; nums)\n    {\n        int last = cast(int)num % 10;\n      \
    \  int first = 0;\n        while(num != 0)\n        {\n            first = cast(int)num\
    \ % 10;\n            num /= 10;\n        }\n        if(num > 10 && first % 2 ==\
    \ 1 && last % 2 == 1)\n            res++;\n    }\n    return res;\n}", "{\n  \
    \  int count = 0;\n    foreach(n; nums)\n    {\n        if(n >= 10)\n        {\n\
    \            if(n % 2 != 0)\n            {\n                if(n / cast(long)\
    \ 10 != 0)\n                {\n                    if(n / cast(long) 10 % 2 !=\
    \ 0)\n                    {\n                        count++;\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long res = 0;\n    foreach(num; nums) \n    {\n        auto strNum\
    \ = to!string(num);\n        if(num > 10 && strNum[0] % 2 && strNum[$-1] % 2)\
    \ \n        {\n            res++;\n        }\n    }\n    return res;\n}", "{\n\
    \    return nums.filter!(\n        (elem) =>\n        {\n            return (elem\
    \ > 10) && \n                (elem % 2 == 1) && \n                (elem / 10 %\
    \ 2 == 1);\n        }\n    ).length;\n}", "{\n    // YOUR CODE HERE\n    long\
    \ count = 0;\n    foreach(num; nums)\n    {\n        if(num >= 10 && (num % 2\
    \ == 1))\n        {\n            auto x = num.toString;\n            if(x[0] ==\
    \ '-')\n            {\n                if(x[1] % 2 == 1 && x[x.length - 1] % 2\
    \ == 1)\n                {\n                    count += 1;\n                }\n\
    \            }\n            else\n            {\n                if(x[0] % 2 ==\
    \ 1 && x[x.length - 1] % 2 == 1)\n                {\n                    count\
    \ += 1;\n                }\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    //long[] result;\n    long result = 0;\n    int count;\n    foreach(long\
    \ num; nums) \n    {\n        count = 0;\n        if(num > 10)\n        {\n  \
    \          // Result will be 0 if the number is even and 1 if it is odd\n    \
    \        if(num % 2 == 1)\n            {\n                // Save first and last\
    \ digit of number in a string\n                auto first = num.to!string.front;\n\
    \                auto last = num.to!string.back;\n                // Check whether\
    \ the digits are odd\n                if(first.to!long % 2 == 1 && last.to!long\
    \ % 2 == 1)\n                {\n                    count++;\n               \
    \ }\n            }\n        }\n        result += count;\n    }\n    return result;\n\
    }", "{\n    int count = 0;\n    foreach(num; nums)\n    {\n        if(num >= 10)\n\
    \        {\n            if(num % 2 != 0)\n            {\n                auto\
    \ digits = num.to!string().length;\n                if(digits == 1)\n        \
    \        {\n                    count++;\n                }\n                else\n\
    \                {\n                    auto lastDigit = num.to!string()[$-1].to!long;\n\
    \                    auto firstDigit = num.to!string()[0].to!long;\n         \
    \           if(lastDigit % 2 != 0 && firstDigit % 2 != 0)\n                  \
    \  {\n                        count++;\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return count;\n}\n/*\nWrite a function\
    \ to compute the sum of the elements in a tuple\n    Note: Do not use template\
    \ parameters\n    For example:\n    >>> tupleSum((1L, 2L, 3L))\n    6L\n    >>>\
    \ tupleSum((1L, 2L, 3L, 4L, 5L))\n    15L\n*/\nlong tupleSum(Tuple!(long, long,\
    \ long) t)\n{\n    return t[0] + t[1] + t[2];\n}\n/*\nWrite a function that does\
    \ the same computation but this time using tuple \n    template parameters to\
    \ make the function generic\n    >>> tupleSumTemplate((1L, 2L, 3L))\n    6L\n\
    \    >>> tupleSumTemplate((1L, 2L, 3L, 4L, 5L))\n    15L\n*/\nTuple!(long, long,\
    \ long) tupleSumTemplate(Tuple!(long, long, long) t)\n{\n    return t;\n}\n/*\n\
    Write a function that takes a long and two ints as input and returns true \n \
    \   if the sum of the two ints is equal to the given long, false otherwise\n \
    \   For example:\n    >>> isIntSum(10L, 4, 6)\n    true\n    >>> isIntSum(11L,\
    \ 4, 6)\n    false\n*/", "{\n    long count=0;\n    foreach(long i; nums)\n  \
    \  {\n        if(i>10)\n        {\n            long lastDigit=i%10;\n        \
    \    long firstDigit=i;\n            while(firstDigit>10)\n            {\n   \
    \             firstDigit/=10;\n            }\n            if(firstDigit%2==1 &&\
    \ lastDigit%2==1)\n            {\n                count++;\n            }\n  \
    \      }\n    }\n    return count;\n}", "{\n    long ret = 0;\n    foreach(e;\
    \ nums)\n    {\n        int e1 = e % 10;\n        int e2 = e % 100 / 10;\n   \
    \     if(e1 > 10 && e2 > 10)\n        {\n            if(e1 % 2 != 0 && e2 % 2\
    \ != 0)\n            {\n                ret += 1;\n            }\n        }\n\
    \    }\n    return ret;\n}\n/*\nWrite a function that takes an array of numbers\
    \ and a number as input and \n    returns the number of elements in the array\
    \ that are greater than the number \n    and sum of their digits is greater than\
    \ 10.\n    For example:\n    >>> specialFilter2([15L, -73L, 14L, -15L], 10L)\n\
    \    1L\n    >>> specialFilter2([33L, -2L, -3L, 45L, 21L, 109L], 20L)\n    2L\n\
    */\nlong specialFilter2(long[] nums, long num) \n{\n    long ret = 0;\n    foreach(e;\
    \ nums)\n    {\n        if(e > num)\n        {\n            int e1 = e % 10;\n\
    \            int e2 = e % 100 / 10;\n            if(e1 + e2 > 10)\n          \
    \  {\n                ret += 1;\n            }\n        }\n    }\n    return ret;\n\
    }\n/*\nWrite a function that takes an array of numbers as input and returns \n\
    \    the number of elements in the array that are prime and bigger than 10.\n\
    \    For example:\n    >>> specialFilter3([15L, -73L, 14L, -15L])\n    1L\n  \
    \  >>> specialFilter3([33L, -2L, -3L, 45L, 21L, 109L])\n    1L\n*/\nlong specialFilter3(long[]\
    \ nums) \n{\n    long ret = 0;\n    foreach(e; nums)\n    {\n        if(e > 10)\n\
    \        {\n            if(e % 2 != 0 && e % 3 != 0 && e % 5 != 0 && e % 7 !=\
    \ 0)\n            {\n                ret += 1;\n            }\n       ", "{\n\
    \    long total = 0;\n    foreach(num; nums)\n    {\n        auto temp = num;\n\
    \        if(temp>10)\n        {\n            temp /= 10;\n            if(temp%2\
    \ == 1)\n            {\n                temp /= 10;\n                if(temp%2\
    \ == 1)\n                {\n                    total += 1;\n                }\n\
    \            }\n        }\n    }\n    return total;\n}", "{\n    int sum = 0;\n\
    \    foreach(n; nums)\n    {\n      string s = to!string(n);\n      if(to!int(s[0])\
    \ % 2 != 0 && to!int(s[$-1]) % 2 != 0 && n > 10)\n      {\n          sum++;\n\
    \      }\n    }\n    return sum;\n}", "{\n    long cnt = 0;\n    foreach(l; nums)\n\
    \    {\n        if (l > 10 && l.toString().front.to!int % 2 != 0 && l.toString().back.to!int\
    \ % 2 != 0)\n        {\n            cnt++;\n        }\n    }\n    return cnt;\n\
    }", "{\n    return nums.filter!(a => (a > 10) && (a.digits[0] % 2 != 0) && (a.digits[a.digits.length\
    \ - 1] % 2 != 0)).length;\n}", "{\n    long count = 0;\n    foreach(i; nums)\n\
    \    {\n        long firstDigit = cast(long)abs(i) / 10;\n        long lastDigit\
    \ = cast(long)abs(i) % 10;\n        if(i > 10 && firstDigit % 2 != 0 && lastDigit\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n ", "{\n\treturn nums.filter!(a => a > 10 && (a % 10) % 2 && a / 10 % 2).length;\n\
    }", "{ \n    long count = 0;\n    long temp = 0;\n    long digit = 0;\n    for(size_t\
    \ i = 0; i < nums.length; i++) \n    {\n        temp = nums[i];\n        if(temp\
    \ > 10)\n        {\n            count++;\n            if(temp % 2 == 0)\n    \
    \        {\n                temp = temp / 10;\n                digit = temp %\
    \ 10;\n                if(digit % 2 == 0)\n                {\n               \
    \     count--;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    return nums.count!(a => a > 10L && (a % 10 == 1 || a % 10\
    \ == 3 || a % 10 == 5 || a % 10 == 7 || a % 10 == 9) \n        && (a / 10 == 1\
    \ || a / 10 == 3 || a / 10 == 5 || a / 10 == 7 || a / 10 == 9));\n}\n/*\nWrite\
    \ a function that takes an array of numbers as input and returns \n    the sum\
    \ of the first and last element of the array. \n    If the input array is empty,\
    \ return zero.\n    For example:\n    >>> sumFirstLast([1, 2, 3, 4, 5])\n    6\n\
    \    >>> sumFirstLast([6, 3, 7, 4, 8])\n    11\n    >>> sumFirstLast([])\n   \
    \ 0\n*/\nlong sumFirstLast(long[] nums)\n{\n    if (nums.length == 0) return 0;\n\
    \    return nums[0] + nums[$ - 1];\n}\n/*\nWrite a function that takes an array\
    \ of strings as input and returns \n    the number of strings in the array that\
    \ contain at least one odd digit.\n    For example:\n    >>> countOddDigits([\"\
    123\", \"45\", \"55\", \"sad\"])\n    2\n    >>> countOddDigits([\"abc\", \"def\"\
    , \"kol\"])\n    0\n*/\nlong countOddDigits(string[] strings)\n{\n    return strings.count!(a\
    \ => a.any!(c => c.to!long().rem(2) == 1));\n}\n/*\nWrite a function that takes\
    \ an array of strings as input and returns \n    the number of strings in the\
    \ array that contain at least one vowel \n    (either capital or small, a, e,\
    \ i, o, u).\n    For example:\n    >>> countVowels([\"abc\", \"def\", \"kol\"\
    ])\n    3\n    >>> countVowels([\"lmn\", \"pqr\", \"fgt\"])\n    0\n*/\nlong countVowels(string[]\
    \ strings)\n{\n    return strings.count!(a => a.any!(c => c == 'a' || c ==", "{\n\
    \    import std.algorithm.iteration;\n    import std.conv;\n    import std.range;\n\
    \    import std.string;\n    import std.typecons;\n    import std.array;\n   \
    \ import std.math;\n    //return nums.filter!(n =>n.to!string().front == '1' ||\
    \ n.to!string().front == '3' || n.to!string().front == '5' || n.to!string().front\
    \ == '7' || n.to!string().front == '9' && \n    //                          n.to!string().back\
    \ == '1' || n.to!string().back == '3' || n.to!string().back == '5' || n.to!string().back\
    \ == '7' || n.to!string().back == '9' && n > 10).length;\n    auto first = nums.filter!(n\
    \ => n.to!string().front == '1' || n.to!string().front == '3' || n.to!string().front\
    \ == '5' || n.to!string().front == '7' || n.to!string().front == '9').filter!(n\
    \ => n > 10);\n    auto second = first.filter!(n => n.to!string().back == '1'\
    \ || n.to!string().back == '3' || n.to!string().back == '5' || n.to!string().back\
    \ == '7' || n.to!string().back == '9');\n    return second.length;\n}", "{\n \
    \   long res=0;\n    foreach(e; nums)\n    {\n        if (e>10 && cast(bool)((e/10)%2)\
    \ && cast(bool)(e%2)) res++;\n    }\n    return res;\n}", "{ \n    long total=0;\
    \ \n    foreach(num; nums) \n    { \n        if(num > 10) \n        { \n     \
    \       //Get the number of digits \n            long numdigits = cast(long) log10(abs(num))\
    \ + 1; \n            //Determine if the first digit is odd \n            if((num\
    \ / cast(long) pow(10, numdigits - 1)) % 2 == 1) \n            { \n          \
    \      //Determine if the last digit is odd \n                if(num % 2 == 1)\
    \ \n                { \n                    total += 1; \n                } \n\
    \            } \n        } \n    } \n    return total; \n}\n//Does the same thing\
    \ with modulo and division instead of logarithms\nlong specialFilter2(long[] nums)\
    \ \n{ \n    long total=0; \n    foreach(num; nums) \n    { \n        if(num >\
    \ 10) \n        { \n            //Determine if the first digit is odd \n     \
    \       if(num % 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 ||\
    \ num % 10 == 9) \n            { \n                //Determine if the last digit\
    \ is odd \n                if(num / 10 % 2 == 1) \n                { \n      \
    \              total += 1; \n                } \n            } \n        } \n\
    \    } \n    return total; \n}\n//Does the same thing with strings instead of\
    \ modulo and division\nlong specialFilter3(long[] nums) \n{ \n    long total=0;\
    \ \n    foreach(num; nums) \n    { \n        if(num > 10) \n        { \n     \
    \       //First digit\n            string first = to!string(num)[0..1]; \n   \
    \         //Last digit\n            string last = to!string(num)[$-1..$]; \n \
    \           //Determine if the first digit is odd \n            if(first == \"\
    1\" || first == \"3\" || first == \"5\" || first == \"7\" || first == \"9\") \n\
    \            {", "{\n    return nums.length;\n}", "{\n    long num = 0;\n    foreach(l;\
    \ nums)\n    {\n        if(l > 10)\n        {\n            int last = l % 10;\n\
    \            int first = l;\n            while(first >= 10)\n            {\n \
    \               first /= 10;\n            }\n            if(last % 2 != 0 && first\
    \ % 2 != 0)\n            {\n                num++;\n            }\n        }\n\
    \    }\n    return num;\n}", "{\n    long res = 0;\n    foreach(n; nums)\n   \
    \ {\n        if(n > 10 && (n % 2 != 0) && (n / 10 % 2 != 0))\n        {\n    \
    \        res += 1;\n        }\n    }\n    return res;\n}\n//\nlong[] findDuplicates(long[]\
    \ array1, long[] array2)\n{\n    long[] res = [];\n    foreach(n; array1)\n  \
    \  {\n        foreach(i; array2)\n        {\n            if(n == i)\n        \
    \    {\n                res ~= n;\n            }\n        }\n    }\n    return\
    \ res;\n}\n//\nlong sum(long[] nums)\n{\n    long res = 0;\n    foreach(n; nums)\n\
    \    {\n        res += n;\n    }\n    return res;\n}\n//\nlong factorial(long\
    \ n)\n{\n    long res = 1;\n    foreach(i; 1..n)\n    {\n        res *= i;\n \
    \   }\n    return res;\n}\n/*\nWrite a function that takes a number n and returns\
    \ a list \n    of the first n Fibonacci numbers. \n    For example:\n    >>> fibonacci(10)\n\
    \    [0L, 1L, 1L, 2L, 3L, 5L, 8L, 13L, 21L, 34L]\n*/\nlong[] fibonacci(long n)\n\
    {\n    long[] res = [0, 1];\n    foreach(i; 2..n)\n    {\n        res ~= res[$\
    \ - 1] + res[$ - 2];\n    }\n    return res;\n}\n/*\nWrite a function that takes\
    \ a list of numbers and returns the \n    average of the even numbers from the\
    \ list. \n    The function should return a floating point number.\n    For example:\n\
    \    >>> average([1L, 2L, 3L, 4L, 5L])\n    3.0\n    >>> average([3L, 8L, 5L,\
    \ 7L, 1L])\n    4.5\n*/\ndouble average(long[] nums)\n{\n    double res = 0",
  "{\n    long num = 0;\n    foreach(n; nums)\n    {\n        if (n > 10 && nums[0]%2\
    \ != 0 && nums[$-1]%2 != 0) \n        {\n            num++;\n        }\n    }\n\
    \    return num;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
