name: HumanEval_146_specialFilter
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes an\
  \ array of numbers as input and returns \n    the number of elements in the array\
  \ that are greater than 10 and both \n    first and last digits of a number are\
  \ odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L,\
  \ -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n\
  \    \n*/\nlong specialFilter(long[] nums) \n"
tests: "unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
  \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
  \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
  \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L,\
  \ 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
  \ == 0L);\n}\nvoid main(){}"
completions: ["{\n\tint count = 0;\n\t\n\tforeach(num; nums) \n\t{\n\t\tint first\
    \ = num.to!string[0].to!int;\n\t\tint last = num.to!string[$-1].to!int;\n\t\t\n\
    \t\tif(num > 10 && first % 2 == 1 && last % 2 == 1)\n\t\t\tcount++;\n\t}\n\t\n\
    \treturn count;\n}", "{\n    auto count = 0L;\n    auto firstNumber;\n    auto\
    \ lastNumber;\n    auto result;\n    foreach(num; nums) \n    {\n        firstNumber\
    \ = num / 10^(floor(log10(num)));\n        lastNumber = num % 10;\n        if(num\
    \ > 10 && firstNumber % 2 != 0 && lastNumber % 2 != 0) \n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}", "{\n    long greaterThan10\
    \ = nums.filter!((e) => (e > 10L)).length;\n    long oddFirstLast = nums.filter!((e)\
    \ => (e.toString().length > 1)).\n        filter!((e) => (((e.toString()[0].toInt\
    \ - '0'.toInt) & 1) == 1)).\n        filter!((e) => (((e.toString()[$ - 1].toInt\
    \ - '0'.toInt) & 1) == 1)).\n        length;\n    return greaterThan10 + oddFirstLast;\n\
    }\n/*\nWrite a function that takes an array of integers and returns the sum of\
    \ \n    those integers.\n    For example:\n    >>> addIntegers([1L, 2L, 3L])\n\
    \    6L\n    >>> addIntegers([-1L, 0L, 1L])\n    0L\n    >>> addIntegers([1L,\
    \ 2L, 3L, 5L, 7L, 9L])\n    27L\n*/\nlong addIntegers(long[] nums) \n{\n    return\
    \ nums.fold!(a => b => a + b)(0L);\n}\n/*\nWrite a function that takes an array\
    \ of integers and returns the sum of \n    the values of the elements of the array\
    \ whose first digit is even.\n    For example:\n    >>> digitSum([11L, 12L, 13L,\
    \ 14L, 15L])\n    26L\n    >>> digitSum([15L, -73L, 14L, -15L])\n    0L\n    >>>\
    \ digitSum([33L, -2L, -3L, 45L, 21L, 109L])\n    0L\n*/\nlong digitSum(long[]\
    \ nums) \n{\n    return nums.filter!((e) => (e.toString().length > 0)).\n    \
    \    filter!((e) => (((e.toString()[0].toInt - '0'.toInt) & 1) == 0)).\n     \
    \   fold!(a => b => a + b)(0L);\n}\n/*\nWrite a function that takes an array of\
    \ integers and returns the sum of \n    the values of the elements of the array\
    \ whose first digit", "{\n    int count = 0;\n    foreach(long num; nums) \n \
    \   {\n        if(num > 10) \n        {\n            long firstDigit = num / (cast(long)\
    \ pow(10, ceil(log10(num)))) % 10;\n            long lastDigit = num % 10;\n \
    \           if(firstDigit % 2 != 0 && lastDigit % 2 != 0) \n            {\n  \
    \              count++;\n            }\n        }\n    }\n    return count;\n}",
  "{\n    long n = 0;\n    foreach(long x; nums)\n    {\n        long f = x;\n   \
    \     long last = f % 10;\n        while(f > 0)\n        {\n            f /= 10;\n\
    \        }\n        if(abs(x) > 10 && (f % 2 != 0) && (last % 2 != 0))\n     \
    \   {\n            n++;\n        }\n    }\n    return n;\n}", "{\n    long counter\
    \ = 0;\n    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n         \
    \   long temp = n;\n            int first = temp.to!int() / 10.to!int();\n   \
    \         int last = temp.to!int() % 10;\n            if(first % 2 != 0 && last\
    \ % 2 != 0)\n            {\n                counter++;\n            }\n      \
    \  }\n    }\n    return counter;\n}", "{\n    import std.algorithm : filter, map;\n\
    \    //return nums.filter!(a => a % 2 != 0 && a > 10).length;\n    return nums.filter!(a\
    \ => a % 2 != 0 && a > 10)\n        .map!(b => b.to!string())\n        .filter!(c\
    \ => (c[0] == '1' || c[0] == '3' || c[0] == '5' || c[0] == '7' || c[0] == '9')\
    \ && (c[$-1] == '1' || c[$-1] == '3' || c[$-1] == '5' || c[$-1] == '7' || c[$-1]\
    \ == '9'))\n        .length;\n}\n \nstatic assert(specialFilter([15L, -73L, 14L,\
    \ -15L]) == 1L);\nstatic assert(specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n/*\nWrite a function that takes an array of strings as input and returns\
    \ \nthe number of strings that start with a capital letter. \nFor example:\n>>>\
    \ capCounter([\"Apple\", \"Dubai\", \"A\", \"B\"])\n2\n*/\nlong capCounter(string[]\
    \ strs) \n{\n    import std.algorithm : filter;\n    return strs.filter!(a =>\
    \ a[0] >= 'A' && a[0] <= 'Z').length;\n}", "{\n    return nums.filter!(n => n>10\
    \ && (n/10)%2!=0 && n%2!=0)().length;\n}", "{\n    long result = 0;\n    foreach(n;\
    \ nums)\n    {\n        long i = n;\n        if(n > 10)\n        {\n         \
    \   while(i > 9) i /= 10;\n            if(n % 2 != 0 && i % 2 != 0)\n        \
    \        result++;\n        }\n    }\n    return result;\n}", "{\n    long ret\
    \ = 0;\n    foreach(num; nums) \n    {\n        if (num > 10) \n        {\n  \
    \          auto digits = num.toString.length.to!long;\n            auto firstNum\
    \ = num.toString[0..1].to!long;\n            auto lastNum = num.toString[$-1..$].to!long;\n\
    \            if (firstNum % 2 != 0 && lastNum % 2 != 0) \n            {\n    \
    \            ret++;\n            }\n        }\n    }\n    return ret;\n}", "{\n\
    \    return nums.filter!(x => x > 10L && isOdd(x % 10L) && isOdd(x / 10L)).length;\n\
    }", "{\n\treturn nums.filter!(a => a > 10L && a.toString().front.to!int % 2 ==\
    \ 1 && a.toString().back.to!int % 2 == 1).length;\n}", "{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        string strnum = to!string(num);\n    \
    \    if(num > 10 && to!long(strnum[0..1])%2 != 0 && to!long(strnum[$-1..$])%2\
    \ != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n \n \n ", "{\n    long result = 0;\n    foreach(num; nums)\n    {\n       \
    \ if(num > 10)\n        {\n            int first = to!int(num).front;\n      \
    \      int last = to!int(num).back;\n            if((first % 2 == 1) && (last\
    \ % 2 == 1)) result++;\n        }\n    }\n    return result;\n}", "{\n    auto\
    \ numOddDigits = 0L;\n    foreach(num; nums) \n    {\n        auto digits = num;\n\
    \        if(digits < 0)\n            digits = -digits;\n        auto first = num[0];\n\
    \        auto last = num[$-1];\n        if((first.isOdd && last.isOdd) && num\
    \ > 10)\n            numOddDigits++;\n    }\n    return numOddDigits;\n}\n// void\
    \ main() { }", "{\n    int counter = 0;\n    foreach(int num; nums)\n    {\n \
    \       if(num > 10)\n        {\n            string num_string = num.to!string;\n\
    \            if(to!int(num_string[0]) % 2 == 1 && \n               to!int(num_string[num_string.length-1])\
    \ % 2 == 1)\n                counter++;\n        }\n    }\n    return counter;\n\
    }\n// Version 2\nlong specialFilter_v2(long[] nums) \n{\n    import std.stdio\
    \ : writeln;\n    int counter = 0;\n    foreach(int num; nums)\n    {\n      \
    \  if(num > 10)\n        {\n            int first_digit = num % 10;\n        \
    \    while(num >= 10)\n                num /= 10;\n            if(num % 2 == 1\
    \ && first_digit % 2 == 1)\n                counter++;\n        }\n    }\n   \
    \ return counter;\n}\n/*\n    Write a function that takes a string that represents\
    \ a path to a file and returns \n    the number of lines of code in the file (meaning:\
    \ the number of lines that are not empty).\n    For example:\n    >>> getNumberOfLinesOfCode(\"\
    /home/user/week1.d\")\n    49L\n    >>> getNumberOfLinesOfCode(\"/home/user/week2.d\"\
    )\n    83L\n    >>> getNumberOfLinesOfCode(\"/home/user/week3.d\")\n    12L\n\
    */\nlong getNumberOfLinesOfCode(string path) \n{\n    import std.stdio : writeln;\n\
    \    import std.file : readText;\n    import std.algorithm : map;\n    import\
    \ std.range : filter;\n    auto lines = readText(path).lines;\n    lines = lines.filter!(x\
    \ => x.length > 0).map!(x => x.trim()).filter!(x => x.length > 0);\n    return\
    \ lines.length;\n}\n/*\n    Write a function that takes an array of numbers and\
    \ returns the sum of the numbers \n    that are divisible by 3 and their first\
    \ digit is 3.\n    For", "{\n    long n = 0;\n    foreach(x; nums) \n    {\n \
    \       if(x > 10) \n        {\n            auto f = to!string(x)[0];\n      \
    \      auto l = to!string(x)[$-1];\n            if(to!int(f) % 2 == 1 && to!int(l)\
    \ % 2 == 1) \n            {\n                n++;\n            }\n        }\n\
    \    }\n    return n;\n}", "{\n    /*auto oddsOnly = nums.filter!(a => a % 2 ==\
    \ 1);\n    return oddsOnly.filter!(a => a > 10).length;\n    */\n    long count\
    \ = 0;\n    foreach(num; nums)\n    {\n        int firstDigit = num / 10;\n  \
    \      int lastDigit = num % 10;\n        if (num > 10 && firstDigit % 2 == 1\
    \ && lastDigit % 2 == 1)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n\
    \        if (num > 10 && num.popFront() % 2 != 0 && num.popBack() % 2 != 0)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n// int\
    \ main()\n// {\n//     long[] myList = [5L, 6L, 7L, 8L, 9L, 9L, 10L, 11L, 1L,\
    \ 3L, 5L, 7L, 9L, 9L, 10L, 12L, 13L, 14L, 15L, 16L, 19L, 20L, 31L, -1L, -2L, -2L,\
    \ -3L, -3L, -3L, -3L, -3L, -3L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L,\
    \ -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L,\
    \ -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L,\
    \ -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L,\
    \ -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L,\
    \ -6L, -6L, -6L, -6L, -6L, -6L,", "{\n    long count = 0;\n    foreach(num; nums)\
    \ \n    {\n        if (num > 10) \n        {\n            long temp = num;\n \
    \           long numD = typeof(num).sizeof;\n            while (temp > 0)\n  \
    \          {\n                temp /= 10;\n                numD *= 10;\n     \
    \       }\n            if ((num % 10 == 1 || num % 10 == 3 || num % 10 == 5 ||\
    \ num % 10 == 7 || num % 10 == 9) \n                && ((num / numD) == 1 || (num\
    \ / numD) == 3 || (num / numD) == 5 || (num / numD) == 7 || (num / numD) == 9))\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\nWrite a function that takes an array of numbers as input\
    \ and returns the \n    sum of the numbers whose last digit is even.\n    For\
    \ example:\n    >>> sumEvenLastDigit([15L, -73L, 14L, -15L])\n    -73L\n    >>>\
    \ sumEvenLastDigit([33L, -2L, -3L, 45L, 21L, 109L])\n    64L\n    >>> sumEvenLastDigit([17L,\
    \ -11L, 27L, -15L, -7L, -13L, 17L, 35L, -8L, -13L, -13L, 7L, 5L, -7L, -17L, 11L,\
    \ 29L, -2L, -17L, -4L, -19L, 29L, -3L, -2L, 13L, -18L, -13L, 17L, 11L, 9L, -17L,\
    \ -3L, -2L, -13L, -16L, -13L, 17L, -16L, 5L, -7L, 21L, -6L, 29L, -12L, -4L, -4L,\
    \ 15L, -2L, -19L, -5L, -17L, -8L, -9L, -19L, -5L, 17L, 15L, 23L, -11L, -"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
