name: HumanEval_12_longest
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    alias\
    \ longest = strings[0];\n    foreach (string s; strings)\n    {\n        if (s.length\
    \ > longest.length)\n            longest = s;\n    }\n    return longest;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7is0acph.d(18): Error: alias `longest` cannot alias an expression\
    \ `strings[0]`\\n/tmp/tmp7is0acph.d(17): Error: cannot implicitly convert expression\
    \ `null` of type `typeof(null)` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp7is0acph.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = Nullable!(string).init;\n    foreach(str;\
    \ strings)\n    {\n        if(!longest.isNull && str.length > longest.get.length)\n\
    \        {\n            longest = Nullable!(string).init;\n            longest.get\
    \ = str;\n        }\n        else if(longest.isNull)\n        {\n            longest.get\
    \ = str;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxyeh16is.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x455519]\\n??:? void tmpxyeh16is.__unittest_L31_C1()\
    \ [0x44154a]\\n??:? void tmpxyeh16is.__modtest() [0x453028]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e38f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454b46]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459d39]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459dc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459cc5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454b1d]\\n??:? runModuleUnitTests [0x45e165]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4564a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x45642b]\\n??:? _d_run_main [0x456396]\\n??:? main [0x4530fb]\\\
    n??:? __libc_start_main [0xd195a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    return !strings.empty ? strings.maxElement!(a => a.length)\
    \ : null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzh0m7s6v.d(16): Error: no property `empty` for type `string[]`\\\
    n/tmp/tmpzh0m7s6v.d(16): Error: no property `maxElement` for type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzh0m7s6v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    import std.algorithm.sorting : sort;\n    if (strings.length\
    \ == 0)\n        return null;\n    sort(strings);\n    return strings[$-1];\n\
    }\nstring s = longest([]);\nassert(s is null);\ns = longest([\"a\", \"b\", \"\
    c\"]);\nassert(s == \"c\");\ns = longest([\"a\", \"bb\", \"ccc\"]);\nassert(s\
    \ == \"ccc\");\n \n// Sort in descending order\ns = longest([\"c\", \"b\", \"\
    a\"]);\nassert(s == \"c\");\n \n// First in case of multiple maxs\ns = longest([\"\
    aa\", \"b\", \"c\"]);\nassert(s == \"aa\");\n \n// All equal length\ns = longest([\"\
    a\", \"b\", \"c\"]);\nassert(s == \"a\");\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmc4wdwwk.d(23): Error: declaration expected, not `assert`\\n/tmp/tmpmc4wdwwk.d(24):\
    \ Error: no identifier for declarator `s`\\n/tmp/tmpmc4wdwwk.d(24): Error: declaration\
    \ expected, not `=`\\n/tmp/tmpmc4wdwwk.d(25): Error: declaration expected, not\
    \ `assert`\\n/tmp/tmpmc4wdwwk.d(26): Error: no identifier for declarator `s`\\\
    n/tmp/tmpmc4wdwwk.d(26): Error: declaration expected, not `=`\\n/tmp/tmpmc4wdwwk.d(27):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpmc4wdwwk.d(30): Error: no\
    \ identifier for declarator `s`\\n/tmp/tmpmc4wdwwk.d(30): Error: declaration expected,\
    \ not `=`\\n/tmp/tmpmc4wdwwk.d(31): Error: declaration expected, not `assert`\\\
    n/tmp/tmpmc4wdwwk.d(34): Error: no identifier for declarator `s`\\n/tmp/tmpmc4wdwwk.d(34):\
    \ Error: declaration expected, not `=`\\n/tmp/tmpmc4wdwwk.d(35): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpmc4wdwwk.d(38): Error: no identifier for declarator\
    \ `s`\\n/tmp/tmpmc4wdwwk.d(38): Error: declaration expected, not `=`\\n/tmp/tmpmc4wdwwk.d(39):\
    \ Error: declaration expected, not `assert`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmc4wdwwk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    size_t max_length = 0;\n    Nullable!(string) result = null;\n\
    \    foreach (string s; strings)\n    {\n        if (s.length > max_length)\n\
    \        {\n            max_length = s.length;\n            result = s;\n    \
    \    }\n    }\n    return result;\n}\n/*\n    Out of two strings, return the longer\
    \ one. Return the first one in case of a tie.\n    >>> longest_two(\"a\", \"b\"\
    )\n    \"a\"\n    >>> longest_two(\"abc\", \"ab\")\n    \"abc\"\n*/\nstring longest_two(string\
    \ a, string b)\n{\n    return (a.length > b.length) ? a : b;\n}\n/*\n    Out of\
    \ an array of strings, return the shortest one. Return the first one in case of\n\
    \    multiple strings of the same length. Return null in case the input array\
    \ is empty.\n    >>> shortest([])\n    None\n    >>> shortest([\"a\", \"b\", \"\
    c\"])\n    \"a\"\n    >>> shortest([\"a\", \"bb\", \"ccc\"])\n    \"a\"\n*/\n\
    Nullable!(string) shortest(string[] strings)\n{\n    size_t min_length = size_t.max;\n\
    \    Nullable!(string) result = null;\n    foreach (string s; strings)\n    {\n\
    \        if (s.length < min_length)\n        {\n            min_length = s.length;\n\
    \            result = s;\n        }\n    }\n    return result;\n}\n/*\n    Out\
    \ of two strings, return the shorter one. Return the first one in case of a tie.\n\
    \    >>> shortest_two(\"a\", \"b\")\n    \"a\"\n    >>> shortest_two(\"abc\",\
    \ \"ab\")\n    \"ab\"\n*/\nstring shortest_two(string a, string b)\n{\n    return\
    \ (a.length < b.length) ? a : b;\n}\n/*\n    Split the string s around the given\
    \ character and return the resulting array of strings.\n    >>> split(\"abcd\"\
    , 'c')\n    [\"ab\", \"d\"]\n    >>> split(\"abcd\", 'b')\n\nunittest\n{\n   \
    \ alias candidate = longest;\n\n{\n        auto result = candidate([]);\n    \
    \    assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"\
    y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmf3h6gq5.d(74): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmf3h6gq5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int longestLength = 0;\n    Nullable!(string) longestString\
    \ = null;\n    foreach(string testString; strings)\n    {\n        if(testString.length\
    \ > longestLength)\n        {\n            longestLength = testString.length;\n\
    \            longestString = testString;\n        }\n    }\n    return longestString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9nj9_hfe.d(22): Error: cannot implicitly convert expression `testString.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9nj9_hfe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longString = Nullable!(string).init;\n \
    \   foreach(str; strings)\n    {\n        if(longString.isNull || str.length >\
    \ longString.get.length)\n        {\n            longString = Nullable!(string).from(str);\n\
    \        }\n    }\n    return longString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptyoh45ap.d(21): Error: no property `from` for type `Nullable!string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptyoh45ap.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    size_t\
    \ longestLen = 0;\n    Nullable!(string) longestStr = null;\n    foreach (str;\
    \ strings) \n    {\n        size_t len = str.length;\n        if (len > longestLen)\
    \ \n        {\n            longestLen = len;\n            longestStr = str;\n\
    \        }\n    }\n    return longestStr;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmye01jry.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmye01jry.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint maxLength = 0;\n\tNullable!(string) result = null;\n\tforeach(str;\
    \ strings)\n\t{\n\t\tif(str.length > maxLength)\n\t\t{\n\t\t\tmaxLength = str.length;\n\
    \t\t\tresult = str;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv6buz_ee.d(22): Error: cannot implicitly convert expression `str.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpv6buz_ee.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) ret;\n    foreach(i, ref elem; strings)\n\
    \    {\n        if(!elem.length) continue;\n        if(!ret.isNull && ret.value.length\
    \ > elem.length) continue;\n        ret = elem;\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvqjdd9bg.d(20): Error: no property `value` for type `Nullable!string`,\
    \ did you mean `std.typecons.Nullable!string.Nullable._value`?\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvqjdd9bg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) result = null;\n    foreach(string item;\
    \ strings)\n    {\n        if(item.length > result.ptr.length) \n        {\n \
    \           result = item;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmajoszya.d(19): Error: no property `length` for type `immutable(char)*`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmajoszya.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = null;\n    foreach(str; strings)\n\
    \    {\n        if (str.length > longest.length) \n        {\n            longest\
    \ = new Nullable!(string)(str);\n        }\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4l1_7dix.d(21): Error: template `std.typecons.Nullable!string.Nullable.opAssign`\
    \ cannot deduce function from argument types `!()(Nullable!string*)`, candidates\
    \ are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(2804):\
    \        `std.typecons.Nullable!string.Nullable.opAssign()(T value)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4l1_7dix.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) \n    {\n        return null;\n \
    \   }\n    else\n    {\n        auto longest = max(strings.map!(a => a.length));\n\
    \        foreach (str; strings) \n        {\n            if (str.length == longest)\
    \ \n            {\n                return str;\n            }\n        }\n   \
    \ }\n}\n/*\n This function takes an array of strings and returns the result of\
    \ concatenating each element of the array with itself.\n    >>> double_all([\"\
    a\", \"b\", \"c\"])\n    [\"aa\", \"bb\", \"cc\"]\n    >>> double_all([])\n  \
    \  []\n*/\nstring[] double_all(string[] strings) \n{\n    auto result = new string[];\n\
    \    foreach (s; strings) \n    {\n        result ~= s ~ s;\n    }\n    return\
    \ result;\n}\n/*\n    This function takes two arrays of strings and returns a\
    \ new array that contains the elements in the first array\n    whose lengths are\
    \ longer than the lengths of the elements in the second array.\n    >>> longer_than_all([\"\
    a\", \"ab\", \"abc\"], [\"b\", \"bb\", \"bbb\"])\n    [\"abc\"]\n    >>> longer_than_all([\"\
    ab\", \"bb\", \"bbb\"], [\"a\", \"ab\", \"abc\"])\n    [\"bbb\"]\n    >>> longer_than_all([\"\
    a\", \"ab\", \"abc\"], [\"b\", \"bb\", \"bbb\"])\n    [\"abc\"]\n    >>> longer_than_all([],\
    \ [\"b\", \"bb\", \"bbb\"])\n    []\n    >>> longer_than_all([\"a\", \"ab\", \"\
    abc\"], [])\n    [\"a\", \"ab\", \"abc\"]\n*/\nstring[] longer_than_all(string[]\
    \ strings, string[] strings2) \n{\n    auto result = new string[];\n    foreach\
    \ (s; strings) \n    {\n        bool longer = true;\n        foreach (s2; strings2)\
    \ \n        {\n            if (s.length <= s2.length) \n            {\n      \
    \          longer = false;\n            }\n        }\n        if (\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjkzjeq4r.d(76): Error: expression expected, not `unittest`\\\
    n/tmp/tmpjkzjeq4r.d(77): Error: found `{` when expecting `)`\\n/tmp/tmpjkzjeq4r.d(96):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjkzjeq4r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    import\
    \ std.algorithm : max;\n    import std.typecons : Nullable;\n    Nullable!(string)\
    \ max = Nullable!(string)(strings[0]);\n    foreach (string s; strings) \n   \
    \ {\n        Nullable!(string) null_s = Nullable!(string)(s);\n        if (null_s\
    \ > max)\n            max = null_s;\n    }\n    return max;\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwvko81rh.d(20): Error: declaration `tmpwvko81rh.longest.max`\
    \ is already defined\\n/tmp/tmpwvko81rh.d(24): Error: void has no value\\n/tmp/tmpwvko81rh.d(24):\
    \ Error: incompatible types for `(null_s) > (max(T...)(T args) if (T.length >=\
    \ 2))`: `Nullable!string` and `void`\\n/tmp/tmpwvko81rh.d(25): Error: not a property\
    \ max(T...)(T args) if (T.length >= 2)\\n/tmp/tmpwvko81rh.d(27): Error: template\
    \ `max(T...)(T args) if (T.length >= 2)` has no type\\n/tmp/tmpwvko81rh.d(17):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvko81rh.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    auto maxSize\
    \ = strings[0].length;\n    int posMax = 0;\n    foreach (i, s; strings) \n  \
    \  {\n        if (s.length > maxSize) \n        {\n            maxSize = s.length;\n\
    \            posMax = i;\n        }\n    }\n    return strings[posMax];\n}\n/*\n\
    \    Given array of integers, return its square.\n    >>> square([])\n    []\n\
    \    >>> square([0, 1, 2, 3, 4])\n    [0, 1, 4, 9, 16]\n*/\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw9pz1smb.d(25): Error: cannot implicitly convert expression `i`\
    \ of type `ulong` to `int`\\n/tmp/tmpw9pz1smb.d(17): Error: cannot implicitly\
    \ convert expression `null` of type `typeof(null)` to `Nullable!string`\\n/tmp/tmpw9pz1smb.d(28):\
    \ Error: cannot implicitly convert expression `strings[cast(ulong)posMax]` of\
    \ type `string` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpw9pz1smb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) return null;\n    auto longest =\
    \ strings[0];\n    foreach (string s; strings)\n    {\n        if (s.length >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\n/*\n\
    \ Convert a string to a double. Returns null if the string is not a valid double.\n\
    \    >>> toDouble(\"1.0\")\n    1.0\n    >>> toDouble(\"invalid\")\n    None\n\
    */\nNullable!(double) toDouble(string text) \n{\n    import std.conv;\n    try\n\
    \    {\n        return to!double(text);\n    }\n    catch(Exception)\n    {\n\
    \        return null;\n    }\n}\n/*\n Write a function which takes an array of\
    \ double and returns the sum.\n Return null if the array is empty.\n    >>> sumOfDouble([])\n\
    \    None\n    >>> sumOfDouble([1.0, 2.0, 3.0])\n    6.0\n*/\nNullable!(double)\
    \ sumOfDouble(double[] doubles) \n{\n    if (doubles.length == 0) return null;\n\
    \    auto sum = 0.0;\n    foreach (double d; doubles)\n    {\n        sum += d;\n\
    \    }\n    return sum;\n}\n/*\n Find the first string in an array which starts\
    \ with a given string.\n Return null if no such string is found.\n    >>> findStartsWith([\"\
    a\", \"b\", \"ab\"], \"a\")\n    \"a\"\n    >>> findStartsWith([\"a\", \"b\",\
    \ \"ab\"], \"b\")\n    \"b\"\n    >>> findStartsWith([\"a\", \"b\", \"ab\"], \"\
    abc\")\n    None\n*/\nNullable!(string) findStartsWith(string[] strings, string\
    \ search) \n{\n    foreach (string s; strings)\n    {\n        if (s.startsWith(search))\n\
    \            return s;\n    }\n    return null;\n}\n/*\n Write a function that\
    \ takes a string, and returns a new string with all the vowels removed.\n    >>>\
    \ removeVowels(\"hello\")\n    \"hll\"\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkcxmcuhr.d(81): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkcxmcuhr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) result = null;\n    size_t maxLength = 0;\n\
    \    foreach (string str; strings)\n    {\n        if (str.length > maxLength)\n\
    \        {\n            maxLength = str.length;\n            result = str;\n \
    \       }\n    }\n    return result;\n}\n/*\n     In the given array, find the\
    \ element with the minimal value. \n     Return null in case the input array is\
    \ empty.\n    >>> min([])\n    None\n    >>> min([1,2,3])\n    1\n    >>> min([9,2,3])\n\
    \    2\n*/\nNullable!(int) min(int[] arr)\n{\n    Nullable!(int) result = null;\n\
    \    int minValue = max!int;\n    foreach (int a; arr)\n    {\n        if (a <\
    \ minValue)\n        {\n            minValue = a;\n            result = a;\n \
    \       }\n    }\n    return result;\n}\n/*\n Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return null in case the input array is empty.\n    >>> shortest([])\n\
    \    None\n    >>> shortest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> shortest([\"\
    a\", \"bb\", \"ccc\"])\n    \"a\"\n*/\nNullable!(string) shortest(string[] strings)\n\
    {\n    Nullable!(string) result = null;\n    size_t minLength = max!size_t;\n\
    \    foreach (string str; strings)\n    {\n        if (str.length < minLength)\n\
    \        {\n            minLength = str.length;\n            result = str;\n \
    \       }\n    }\n    return result;\n}\n/*\n    Given a list of strings, return\
    \ a list of all strings that\n    are palindromes (case insensitive).\n    >>>\
    \ palindromes([\"a\", \"b\", \"c\"])\n    []\n    >>> palindromes([\"a\", \"b\"\
    , \"CdC\"])\n    [\"CdC\"]\n    >>> palindromes([\"a\", \"\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6oo3dt0y.d(76): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6oo3dt0y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) result = null;\n    if (strings.length ==\
    \ 0)\n        return result;\n    result = strings[0];\n    foreach (i, s; strings)\n\
    \    {\n        if (s.length > result.idup.length)\n            result = s;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph452x0us.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x455671]\\n??:? void tmph452x0us.__unittest_L27_C1()\
    \ [0x44154f]\\n??:? void tmph452x0us.__modtest() [0x45317c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x45e4e7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x454c9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x459e91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x459f20]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x459e1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x454c75]\\n??:? runModuleUnitTests [0x45e2bd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4565fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x456583]\\n??:? _d_run_main [0x4564ee]\\n??:? main [0x45324f]\\\
    n??:? __libc_start_main [0x4bbb7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tif (strings.length == 0)\n\t\treturn null;\n\treturn strings.reduce!((x,\
    \ y) => x.length > y.length ? x : y);\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw9j6vk47.d(18): Error: no property `reduce` for type `string[]`\\\
    n/tmp/tmpw9j6vk47.d(17): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!string`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpw9j6vk47.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Out of array of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return null in case the input array is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) result = null;\n    foreach(string str;\
    \ strings) \n    {\n        if(result.isNull || str.length > result.get.length)\
    \ \n        {\n            result = str;\n        }\n    }\n    return result;\n\
    }\n/*\n    Out of array of strings, return the shortest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return null in case\
    \ the input array is empty.\n    >>> shortest([])\n    None\n    >>> shortest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> shortest([\"a\", \"bb\", \"ccc\"])\n \
    \   \"a\"\n*/\nNullable!(string) shortest(string[] strings) \n{\n    Nullable!(string)\
    \ result = null;\n    foreach(string str; strings) \n    {\n        if(result.isNull\
    \ || str.length < result.get.length) \n        {\n            result = str;\n\
    \        }\n    }\n    return result;\n}\n/*\n    Out of array of strings, return\
    \ the average length of strings. Ignore nulls.\n    >>> averageLength([\"a\",\
    \ \"bb\", \"ccc\"])\n    2.0\n    >>> averageLength([\"a\", \"\", \"ccc\"])\n\
    \    2.0\n    >>> averageLength([\"a\", null, \"ccc\"])\n    2.0\n*/\ndouble averageLength(string[]\
    \ strings) \n{\n    int sum = 0;\n    int count = 0;\n    foreach(string str;\
    \ strings) \n    {\n        if(str) \n        {\n            sum += str.length;\n\
    \            count++;\n        }\n    }\n    return cast(double)sum / count;\n\
    }\n/*\n    Out of array of strings, return the word that has the highest sum of\
    \ letters' positions\n    in the alphabet. Return the first one in case of multiple\
    \ words with the same sum.\n    Return null in case the input array is empty.\n\
    \    >>> alphabeticalSum([\"a\", \"bb\", \"ccc\"])\n    \"a\"\n    >>> alphabeticalSum([\"\
    a\", \"b\", \"c\"])\n    \"\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb_90_grp.d(71): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb_90_grp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
