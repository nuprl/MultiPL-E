name: HumanEval_94_skjkasdkd
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nYou are given an array of integers.\n\
  \    You need to find the largest prime value and return the sum of its digits.\n\
  \n    Examples:\n    >>> skjkasdkd([0L, 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L,\
  \ 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L, 324L, 4L, 3L])\n    10L\n    >>> skjkasdkd([1L,\
  \ 0L, 1L, 8L, 2L, 4597L, 2L, 1L, 3L, 40L, 1L, 2L, 1L, 2L, 4L, 2L, 5L, 1L])\n   \
  \ 25L\n    >>> skjkasdkd([1L, 3L, 1L, 32L, 5107L, 34L, 83278L, 109L, 163L, 23L,\
  \ 2323L, 32L, 30L, 1L, 9L, 3L])\n    13L\n    >>> skjkasdkd([0L, 724L, 32L, 71L,\
  \ 99L, 32L, 6L, 0L, 5L, 91L, 83L, 0L, 5L, 6L])\n    11L\n    >>> skjkasdkd([0L,\
  \ 81L, 12L, 3L, 1L, 21L])\n    3L\n    >>> skjkasdkd([0L, 8L, 1L, 2L, 1L, 7L])\n\
  \    7L\n    \n*/\nlong skjkasdkd(long[] lst) \n"
tests: "unittest\n{\n    alias candidate = skjkasdkd;\n\n    assert(candidate([0L,\
  \ 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L, 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L, 324L,\
  \ 4L, 3L]) == 10L);\n    assert(candidate([1L, 0L, 1L, 8L, 2L, 4597L, 2L, 1L, 3L,\
  \ 40L, 1L, 2L, 1L, 2L, 4L, 2L, 5L, 1L]) == 25L);\n    assert(candidate([1L, 3L,\
  \ 1L, 32L, 5107L, 34L, 83278L, 109L, 163L, 23L, 2323L, 32L, 30L, 1L, 9L, 3L]) ==\
  \ 13L);\n    assert(candidate([0L, 724L, 32L, 71L, 99L, 32L, 6L, 0L, 5L, 91L, 83L,\
  \ 0L, 5L, 6L]) == 11L);\n    assert(candidate([0L, 81L, 12L, 3L, 1L, 21L]) == 3L);\n\
  \    assert(candidate([0L, 8L, 1L, 2L, 1L, 7L]) == 7L);\n    assert(candidate([8191L])\
  \ == 19L);\n    assert(candidate([8191L, 123456L, 127L, 7L]) == 19L);\n    assert(candidate([127L,\
  \ 97L, 8192L]) == 10L);\n}\nvoid main(){}"
completions: ["{\n    auto suma = 0L;\n    auto lenList = lst.length;\n    auto max\
    \ = lst[0];\n    foreach(i; lst)\n    {\n        if(i > max)\n        {\n    \
    \        max = i;\n        }\n    }\n    auto max_items = [];\n    foreach(i;\
    \ lst)\n    {\n        if(i == max)\n        {\n            max_items ~= i;\n\
    \        }\n    }\n    auto sum_primes = 0L;\n    foreach(i; max_items)\n    {\n\
    \        auto counter = 0L;\n        foreach(q; i.iota)\n        {\n         \
    \   if(i % q == 0)\n            {\n                counter++;\n            }\n\
    \        }\n        if(counter == 2)\n        {\n            sum_primes += i;\n\
    \        }\n    }\n    auto sum_items = [];\n    auto x = 0L;\n    auto j = 0L;\n\
    \    auto max_prime = 0L;\n    foreach(i; sum_primes.iota)\n    {\n        if(sum_primes\
    \ % i == 0)\n        {\n            x++;\n        }\n    }\n    if(x == 2)\n \
    \   {\n        max_prime = sum_primes;\n    }\n    foreach(i; max_prime.iota)\n\
    \    {\n        if(max_prime % i == 0)\n        {\n            sum_items ~= i;\n\
    \        }\n    }\n    return sum_items.sum;\n}", "{\n    long highestPrime =\
    \ 0L;\n    long sum = 0L;\n    foreach(int i; lst)\n    {\n        if(isPrime(i))\n\
    \        {\n            highestPrime = max(highestPrime, i);\n        }\n    }\n\
    \    foreach(elem; highestPrime.to!string)\n    {\n        if(elem.isDigit)\n\
    \        {\n            sum += elem.to!long;\n        }\n    }\n    return sum;\n\
    }", "{\n    if (lst.empty)\n        return 0L;\n    return lst.map!q{to!long(q.stringof.strip(\"\
    L\"))}.filter!isprime.max.sum.dopromotion!long;\n}", "{\n    long itr,maxPrime=2,sum=0,lastDigit,fact=1;\n\
    \    foreach(itr;lst)\n    {\n        fact=1;\n        foreach(itr;2..itr)\n \
    \       {\n            if(itr%itr==0)\n            {\n                fact=0;\n\
    \                break;\n            }\n        }\n        if(fact==1)\n     \
    \   {\n            if(itr>maxPrime)\n            {\n                maxPrime=itr;\n\
    \            }\n        }\n    }\n    while(maxPrime>0)\n    {\n        lastDigit=maxPrime%10;\n\
    \        sum+=lastDigit;\n        maxPrime/=10;\n    }\n    return sum;\n}\n/*\n\
    \    You are given a string s and another integer k, and you need to return the\
    \ string of the k most frequent characters of s.", "{\n  return lst.filter!(i\
    \ => i > 0 && lst.filter!(n => n % i == 0).length == 2).reduce!max.digits.reduce!add.digits.reduce!add;\n\
    }", "{\n    long result;\n    long highestPrime = 0L;\n    for (long n : lst)\n\
    \    {\n        bool isPrime = true;\n        for (long i = 2L; i <= n / 2L; i\
    \ += 1L)\n        {\n            if (n % i == 0L)\n            {\n           \
    \     isPrime = false;\n                break;\n            }\n        }\n   \
    \     if (isPrime && n > highestPrime)\n        {\n            highestPrime =\
    \ n;\n        }\n    }\n    string a = to!string(highestPrime);\n    result =\
    \ 0L;\n    foreach (char c; a)\n    {\n        result += c - '0';\n    }\n   \
    \ return result;\n}", "{\n    return lst.map!(a => map!(b => a % b == 0L).until!(c\
    \ => c == 0L).length).max.sum;\n}", "{\n    long max_prime = 0L;\n    for (long\
    \ i = 0L; i < lst.length; i++)\n    {\n        if (isPrime(lst[i]) && lst[i] >\
    \ max_prime)\n        {\n            max_prime = lst[i];\n        }\n    }\n \
    \   long sum = 0L;\n    while (max_prime > 0L)\n    {\n        sum += max_prime\
    \ % 10L;\n        max_prime /= 10L;\n    }\n    return sum;\n}", "{\n  import\
    \ std.algorithm.comparison : max;\n  long[] primes = [2L, 3L, 5L, 7L, 11L, 13L,\
    \ 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L,\
    \ 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L,\
    \ 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L,\
    \ 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L,\
    \ 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L,\
    \ 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L,\
    \ 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L,\
    \ 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L,\
    \ 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L,\
    \ 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L,\
    \ 811L, 821L, 823L, 827L,", "{\n    return 0L;\n}", "{\n    auto s = lst.sum();\n\
    \    auto l = max(lst);\n    return (s + l).digits().sum();\n}\nstatic assert(skjkasdkd([0L,\
    \ 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L, 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L,\
    \ 324L, 4L, 3L]) == 10L);\nstatic assert(skjkasdkd([1L, 0L, 1L, 8L, 2L, 4597L,\
    \ 2L, 1L, 3L, 40L, 1L, 2L, 1L, 2L, 4L, 2L, 5L, 1L]) == 25L);\nstatic assert(skjkasdkd([1L,\
    \ 3L, 1L, 32L, 5107L, 34L, 83278L, 109L, 163L, 23L, 2323L, 32L, 30L, 1L, 9L, 3L])\
    \ == 13L);\nstatic assert(skjkasdkd([0L, 724L, 32L, 71L, 99L, 32L, 6L, 0L, 5L,\
    \ 91L, 83L, 0L, 5L, 6L]) == 11L);\nstatic assert(skjkasdkd([0L, 81L, 12L, 3L,\
    \ 1L, 21L]) == 3L);\nstatic assert(skjkasdkd([0L, 8L, 1L, 2L, 1L, 7L]) == 7L);",
  "{\n    bool ck(long n) \n    {\n        if (n < 2) \n        {\n            return\
    \ false;\n        }\n        auto m = int(sqrt(n));\n        for (long x = 2;\
    \ x <= m; x++) \n        {\n            if (n % x == 0) \n            {\n    \
    \            return false;\n            }\n        }\n        return true;\n \
    \   }\n    long sum_digits(long x) \n    {\n        return to!string(x).reduce!((a,\
    \ b) => a + b - '0').to!long;\n    }\n    long f = lst.filter!(a => ck(a)).max;\n\
    \    return sum_digits(f);\n}", "{\n    long l = 0L;\n    foreach(item; lst) \n\
    \    {\n        if(item == 0L) \n        {\n            continue;\n        }\n\
    \        if(item % 2L == 0L) \n        {\n            l += sumDigits(item);\n\
    \            continue;\n        }\n        long d = 3L;\n        long max = sqrt(item);\n\
    \        while(d <= max) \n        {\n            if(item % d == 0L) \n      \
    \      {\n                l += sumDigits(item);\n                break;\n    \
    \        }\n            d += 2L;\n        }\n        if(d > max) \n        {\n\
    \            l += sumDigits(item);\n        }\n    }\n    return l;\n}\nlong sumDigits(long\
    \ a) \n{\n    long l = 0L;\n    while(a > 0L) \n    {\n        l += a % 10L;\n\
    \        a /= 10L;\n    }\n    return l;\n}", "{\n    long max = 0L;\n    long[]\
    \ primes = prime.take!(10_000);\n    long x;\n    foreach(l; lst) \n    {\n  \
    \      x = l;\n        while(x > 1) \n        {\n            foreach(prime; primes)\
    \ \n            {\n                if(x % prime == 0) \n                {\n  \
    \                  if(prime > max) \n                    {\n                 \
    \       max = prime;\n                    }\n                    x /= prime;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return max.to!string.sum;\n}", "{\n    long maxVal = 0L;\n    bool primes[]\
    \ = sieve(lst.max());\n    foreach(index, item; lst)\n    {\n        // maxVal\
    \ = max(item, maxVal);\n        if(primes[item])\n        {\n            maxVal\
    \ = max(item, maxVal);\n        }\n    }\n    return sumOfDigits(maxVal);\n}",
  "{\n   return lst.map!((a) => (a == 0) ? 1 : a).reduce!(std.algorithm.max)(a =>\
    \ b => (a == b) ? 0 : (isPrime(a) && isPrime(b)) ? a : 0).map!(to!ulong).reduce!(std.algorithm.max)(a\
    \ => b => (a != 0) ? a : b).tupleof.reduce!((a, b) => a + b);\n}", "{\n    long[]\
    \ primeArray = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L,\
    \ 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L,\
    \ 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L,\
    \ 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L,\
    \ 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L,\
    \ 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L,\
    \ 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L,\
    \ 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L,\
    \ 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L,\
    \ 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L,\
    \ 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L,\
    \ 853L, 857", "{\n    long prime_values = 0L;\n    long j = 0L;\n    foreach(x;\
    \ lst)\n    {\n        for(long i = 2L; i <= x; i++)\n        {\n            if(x\
    \ % i == 0L)\n            {\n                break;\n            }\n         \
    \   else if(i == x - 1L)\n            {\n                prime_values = x;\n \
    \           }\n        }\n    }\n    foreach(i; prime_values.to!string)\n    {\n\
    \        j += i.to!long;\n    }\n    return j;\n}", "{\n    long n = 0L;\n   \
    \ long max = 0L;\n    foreach(a; lst)\n    {\n        n = 0L;\n        int i =\
    \ 2;\n        while(a != 0)\n        {\n            while(a % i == 0)\n      \
    \      {\n                a /= i;\n                ++n;\n            }\n     \
    \       ++i;\n        }\n        if(n > max)\n        {\n            max = n;\n\
    \        }\n    }\n    return max;\n}", "{\n    import std.math : isPrime;\n \
    \   // 1. get largest prime\n    long max = 0L;\n    foreach(n; lst)\n    {\n\
    \        if(isPrime(n) && n > max)\n        {\n            max = n;\n        }\n\
    \    }\n    // 2. sum the digits in the largest prime\n    long sum = 0L;\n  \
    \  foreach(n; max.to!string)\n    {\n        sum += (long)(n.to!int - '0'.to!int);\n\
    \    }\n    return sum;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
