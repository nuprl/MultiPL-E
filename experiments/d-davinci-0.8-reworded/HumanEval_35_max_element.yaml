name: HumanEval_35_max_element
language: d
prompt: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
  \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
  \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n"
tests: "unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
  \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
  \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
completions: ["{\n  long max=l[0];\n  foreach(e; l) \n  {\n    if(e>max) max=e;\n\
    \  }\n  return max;\n}", "{\n    long max = -LONG_MAX;\n    foreach(i; l)\n  \
    \  {\n        if(i > max)\n        {\n            max = i;\n        }\n    }\n\
    \    return max;\n}", "{\n    long max=l[0];\n    foreach(e; l)\n    {\n     \
    \   if(e>max)\n        {\n            max=e;\n        }\n    }\n    return max;\n\
    }", "{\n    long max_element = l[0];\n    foreach(long a; l) \n    {\n       \
    \ if (a > max_element) \n        {\n            max_element = a;\n        }\n\
    \    }\n    return max_element;\n}", "{\n    long max = l[0];\n    foreach(i;\
    \ l) \n    {\n        if (max < i) \n        {\n            max = i;\n       \
    \ }\n    }\n    return max;\n}\n \n/*\nReturn sum of all elements in the array.\n\
    \    >>> array_sum([1L, 1L, 1L])\n    3L\n    >>> array_sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    164L\n    \n*/\nlong array_sum(long[]\
    \ l) \n{\n    long sum = 0;\n    foreach(i; l) \n    {\n        sum += i;\n  \
    \  }\n    return sum;\n}\n \n/*\nReturn all indices of the given element in the\
    \ array.\n    >>> find_all(4L, [5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L,\
    \ 4L, 4L, 4L])\n    [11L, 12L, 13L]\n    \n*/\nlong[] find_all(long t, long[]\
    \ a) \n{\n    long[] ans = [];\n    foreach(i; a) \n    {\n        if (i == t)\
    \ \n        {\n            ans ~= i;\n        }\n    }\n    return ans;\n}\n \n\
    /*\nReturn index of the first occurrence of the given element in the array.\n\
    \    >>> find(4L, [5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L, 4L, 4L, 4L])\n\
    \    11L\n    \n*/\nlong find(long t, long[] a) \n{\n    foreach(i; a) \n    {\n\
    \        if (i == t) \n        {\n            return i;\n        }\n    }\n  \
    \  return -1;\n}\n \n/*\nReturn the most frequent element in the array.\n    >>>\
    \ most_frequent([5L, 3L", "{\n    long max = l[0];\n    foreach(num; l) {\n  \
    \      if (num > max) {\n            max = num;\n        }\n    }\n    return\
    \ max;\n}\n/*\nReturn minimum element in the array.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min\
    \ = l[0];\n    foreach(num; l) {\n        if (num < min) {\n            min =\
    \ num;\n        }\n    }\n    return min;\n}\n/*\nReturn median element in the\
    \ array.\n    >>> median_element([1L, 2L, 3L])\n    2L\n    >>> median_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    2L\n*/\nlong median_element(long[]\
    \ l) \n{\n    long[] sorted = l.dup;\n    sort(sorted);\n    if (sorted.length\
    \ % 2 == 0) {\n        return sorted[(sorted.length / 2) - 1];\n    } else {\n\
    \        return sorted[sorted.length / 2];\n    }\n}\n/*\nReturn population standard\
    \ deviation of the array.\n    >>> stddev([1L, 2L, 3L])\n    1.0\n    >>> stddev([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    42.097058892\n    \n*/\n\
    double stddev(long[] l) \n{\n    long sum = 0;\n    foreach(num; l) {\n      \
    \  sum += num;\n    }\n    long mean = sum / l.length;\n    long[] squares = new\
    \ long[l.length];\n    foreach(i, num", "{\n  long m = l[0];\n  for (int i = 1;\
    \ i < l.length; i++) \n  {\n    if (l[i] > m) \n    {\n      m = l[i];\n    }\n\
    \  }\n  return m;\n}", "{\n    long max = l[0];\n    foreach(i; l)\n    {\n  \
    \      if(i > max)\n        {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}\n/*\nReturn minimum element in the array.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min\
    \ = l[0];\n    foreach(i; l)\n    {\n        if(i < min)\n        {\n        \
    \    min = i;\n        }\n    }\n    return min;\n}\n/*\nReturn the absolute value\
    \ of a number.\n    >>> long abs(long l)\n    >>> abs(1L)\n    1L\n    >>> abs(-1L)\n\
    \    1L\n*/\nlong abs(long l)\n{\n    if(l >= 0)\n    {\n        return l;\n \
    \   }\n    else\n    {\n        return -l;\n    }\n}\n/*\nCalculate the square\
    \ root of a number.\n    >>> sqrt(1L)\n    1L\n    >>> sqrt(4L)\n    2L\n    >>>\
    \ sqrt(9L)\n    3L\n    >>> sqrt(16L)\n    4L\n*/\nlong sqrt(long l)\n{\n    long\
    \ root = l / 2;\n    long square = root * root;\n    if(square == l)\n    {\n\
    \        return root;\n    }\n    else\n    {\n        while(true)\n        {\n\
    \            root = (root + l / root) / 2;\n            if(abs(square - l) < 5)\n\
    \            {\n                return root;\n            }\n            square\
    \ = root * root;\n        }\n    }\n}\n/*\nCounts the number of times a value\
    \ appears in the array.\n    >>> count(1L, [1L, 1L, 1L, 2L, 2L", "{\n\tlong max\
    \ = l[0];\n\tforeach(element; l)\n\t{\n\t\tif(element > max)\n\t\t{\n\t\t\tmax\
    \ = element;\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn maximum element in the\
    \ array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tforeach(element; l)\n\t{\n\t\tif(element < min)\n\
    \t\t{\n\t\t\tmin = element;\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn index of\
    \ minimum element in the array.\n    >>> min_index([1L, 2L, 3L])\n    0L\n   \
    \ >>> min_index([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    10L\n\
    */\nlong min_index(long[] l) \n{\n\tlong index = 0;\n\tlong min = l[0];\n\tforeach(element;\
    \ l)\n\t{\n\t\tif(element < min)\n\t\t{\n\t\t\tmin = element;\n\t\t\tindex = cast(long)element.index;\n\
    \t\t}\n\t}\n\treturn index;\n}\n/*\nCheck that elements in the array are in ascending\
    \ order.\n    >>> is_sorted([1L, 2L, 3L])\n    true\n    >>> is_sorted([3L, 2L,\
    \ 1L])\n    false\n    >>> is_sorted([1L, 1L, 1L])\n    true\n*/", "{\n    long\
    \ max = l[0];\n    foreach(long x; l)\n    {\n        if(x > max)\n        {\n\
    \            max = x;\n        }\n    }\n    return max;\n}", "{\n    long max\
    \ = l[0];\n    for (uint i = 1; i < l.length; i++) \n    {\n        if (l[i] >\
    \ max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }", "{\n    long max=l[0];\n    foreach(e; l[1..$])\n    {\n      if(e>max)\n\
    \      {\n        max=e;\n      }\n    }\n    return max;\n}", "{\n    long val\
    \ = l[0];\n    foreach(item; l)\n    {\n        if(item > val)\n        {\n  \
    \          val = item;\n        }\n    }\n    return val;\n}\n/*\nReturn maximum\
    \ element in the array, and its index.\n    >>> max_element_idx([1L, 2L, 3L])\n\
    \    (3L, 2)\n    >>> max_element_idx([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    (123L, 8)\n*/\nlong max_element_idx(long[] l) \n{\n    long\
    \ val = l[0];\n    long idx = 0;\n    long cnt = 0;\n    foreach(item; l)\n  \
    \  {\n        if(item > val)\n        {\n            val = item;\n           \
    \ idx = cnt;\n        }\n        cnt++;\n    }\n    return val;\n}\n/*\nReturn\
    \ maximum element in the array, and its index.\n    >>> max_element_idx([1.0,\
    \ 2.0, 3.0])\n    (3.0, 2)\n    >>> max_element_idx([5.0, 3.0, -5.0, 2.0, -3.0,\
    \ 3.0, 9.0, 0.0, 123.0, 1.0, -10.0])\n    (123.0, 8)\n*/\nlong max_element_idx(double[]\
    \ l) \n{\n    double val = l[0];\n    long idx = 0;\n    long cnt = 0;\n    foreach(item;\
    \ l)\n    {\n        if(item > val)\n        {\n            val = item;\n    \
    \        idx = cnt;\n        }\n        cnt++;\n    }\n    return val;\n}\n/*\n\
    Return minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n\
    \    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L,", "{\n    long max = l[0];\n \
    \   foreach(i; l)\n    {\n        if(i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}", "{\n    long max = l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (l[i] > max)\n        {\n     \
    \       max = l[i];\n        }\n    }\n    return max;\n}", "{\n    long tmp=0L;\n\
    \    foreach(long i; l)\n    {\n        if(i>tmp)\n            tmp=i;\n    }\n\
    \    return tmp;\n}", "{\n\tif (l.length == 0) {\n\t\treturn 0;\n\t}\n\telse {\n\
    \t\treturn max(l);\n\t}\n}", "{\n    long max = 0L;\n    long i = 0L;\n    for\
    \ (; \n         i < l.length; \n         i++) \n    {\n        if (l[i] > max)\
    \ \n        {\n            max = l[i];\n        }\n    }\n    return max;\n}",
  "{\n\tlong max = 0;\n\t\n\tforeach(elem; l) \n\t{\n\t\tif(elem > max) \n\t\t{\n\t\
    \t\tmax = elem;\n\t\t}\n\t}\n\t\n\treturn max;\n}", "{\n    if (l.length == 0)\n\
    \        return long.min;\n    long max = l[0];\n    foreach (long m; l)\n   \
    \ {\n        if (m > max)\n            max = m;\n    }\n    return max;\n}\n/*\n\
    Return minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n\
    \    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong min_element(long[] l) \n{\n    if (l.length == 0)\n   \
    \     return long.max;\n    long min = l[0];\n    foreach (long m; l)\n    {\n\
    \        if (m < min)\n            min = m;\n    }\n    return min;\n}\n/*\nReturn\
    \ max element in the array and its index\n    >>> max_element_with_index([1L,\
    \ 2L, 3L])\n    (3L, 2L)\n    >>> max_element_with_index([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    (123L, 8L)\n    \n*/\nauto max_element_with_index(long[]\
    \ l) \n{\n    if (l.length == 0)\n        return tuple(long.min, 0L);\n    long\
    \ index = 0L;\n    long max = l[0];\n    foreach (i, m; l)\n    {\n        if\
    \ (m > max)\n        {\n            max = m;\n            index = i;\n       \
    \ }\n    }\n    return tuple(max, index);\n}\n/*\nReturn min element in the array\
    \ and its index\n    >>> min_element_with_index([1L, 2L, 3L])\n    (1L, 0L)\n\
    \    >>> min_element_with_index([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
