name: HumanEval_20_find_closest_elements
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    double min = double.max;\n    size_t minIndex = 0;\n    size_t len\
    \ = numbers.length;\n    for (size_t i = 0; i < len; i++) \n    {\n        if\
    \ (i + 1 < len) \n        {\n            double newDiff = abs(numbers[i] - numbers[i\
    \ + 1]);\n            if (newDiff < min) \n            {\n                min\
    \ = newDiff;\n                minIndex = i;\n            }\n        }\n    }\n\
    \    return tuple(numbers[minIndex], numbers[minIndex + 1]);\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5pi_th8n.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e15]\\n??:? void tmp5pi_th8n.__unittest_L31_C1()\
    \ [0x428e81]\\n??:? void tmp5pi_th8n.__modtest() [0x42987c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb27]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da36]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43235d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43280c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4322e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da0d]\\n??:? runModuleUnitTests [0x42e8fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a25f]\\n??:? _d_run_main [0x42a1ca]\\n??:? main [0x42988f]\\\
    n??:? __libc_start_main [0x1b136554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float[] args = numbers[1..$];\n    float smallest_diff = args[0] -\
    \ numbers[0];\n    float[] smallest_tuple = [numbers[0], args[0]];\n    float\
    \ smallest_diff_abs = abs(smallest_diff);\n    for (size_t i = 0; i < numbers.length\
    \ - 1; i++) \n    {\n        for (size_t j = i + 1; j < numbers.length; j++) \n\
    \        {\n            float diff = numbers[i] - numbers[j];\n            float\
    \ diff_abs = abs(diff);\n            if (diff_abs < smallest_diff_abs) \n    \
    \        {\n                smallest_diff = diff;\n                smallest_diff_abs\
    \ = diff_abs;\n                smallest_tuple = [numbers[i], numbers[j]];\n  \
    \          }\n        }\n    }\n    float[] sorted_tuple = sort(smallest_tuple);\n\
    \    return tuple(sorted_tuple[0], sorted_tuple[1]);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzefeeqqj.d(32): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzefeeqqj.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float diff = 99999;\n    float lower = 99999;\n    float higher = 99999;\n\
    \    int i = 0;\n    foreach(float x; numbers) \n    {\n        if(i != numbers.length-1)\
    \ \n        {\n            float newdiff = abs(x - numbers[i+1]);\n          \
    \  if(newdiff < diff) \n            {\n                diff = newdiff;\n     \
    \           lower = min(x, numbers[i+1]);\n                higher = max(x, numbers[i+1]);\n\
    \            }\n        }\n        i++;\n    }\n    return tuple(lower, higher);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5aun7bdn.d(26): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmp5aun7bdn.d(27): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp5aun7bdn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float minDist = float.infinity;\n    Tuple!(float, float) result =\
    \ tuple(0.0, 0.0);\n    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n\
    \        {\n            if(i != j)\n            {\n                float dist\
    \ = abs(a - b);\n                if(dist < minDist)\n                {\n     \
    \               minDist = dist;\n                    result = tuple(min(a, b),\
    \ max(a, b));\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprabsbc3e.d(26): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmprabsbc3e.d(26): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmprabsbc3e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    int n = numbers.length;\n    float[]\
    \ distance = new float[n];\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbjtbbi5z.d(17): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbjtbbi5z.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    //asume that numbers is not empty\n    float min = abs(numbers[0] -\
    \ numbers[1]);\n    float num1 = numbers[0];\n    float num2 = numbers[1];\n \
    \   int size = numbers.length;\n    for (int i = 0; i < size - 1; i++)\n    {\n\
    \        for (int j = i + 1; j < size; j++)\n        {\n            float temp\
    \ = abs(numbers[i] - numbers[j]);\n            if (temp < min)\n            {\n\
    \                min = temp;\n                num1 = numbers[i];\n           \
    \     num2 = numbers[j];\n            }\n        }\n    }\n    if (num1 > num2)\n\
    \    {\n        float temp = num1;\n        num1 = num2;\n        num2 = temp;\n\
    \    }\n    return tuple(num1, num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdzq7gg_p.d(18): Error: cannot implicitly convert expression `numbers.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpdzq7gg_p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{ \n    auto diff_max = 1.0e20;\n    auto diff_min = 1.0e20;\n    auto diff_max_min\
    \ = 1.0e20;\n    float num1 = 0.0;\n    float num2 = 0.0;\n    float num1_max\
    \ = 0.0;\n    float num2_max = 0.0;\n    float num1_min = 0.0;\n    float num2_min\
    \ = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = 0; j < numbers.length; j++)\n        {\n            if (i != j)\n      \
    \      {\n                diff_max = max(numbers[i], numbers[j]);\n          \
    \      diff_min = min(numbers[i], numbers[j]);\n                if ((diff_max\
    \ - diff_min) < diff_max_min)\n                {\n                    diff_max_min\
    \ = diff_max - diff_min;\n                    num1_max = numbers[i];\n       \
    \             num2_max = numbers[j];\n                    num1_min = numbers[i];\n\
    \                    num2_min = numbers[j];\n                }\n            }\n\
    \        }\n    }\n    return tuple(num1_min, num2_min);\n}\nunittest\n{\n   \
    \ alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps3g1absp.d(29): Error: undefined identifier `max`, did you mean\
    \ function `fmax`?\\n/tmp/tmps3g1absp.d(30): Error: undefined identifier `min`,\
    \ did you mean function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmps3g1absp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float small_difference = float.max;\n    float a = 0.0;\n    float\
    \ b = 0.0;\n    foreach(i, num; numbers) \n    {\n        // start at the next\
    \ element, stop when we have looked at all elements\n        foreach_i (j, end)\
    \ \n        {\n            if (j > i) \n            {\n                // for\
    \ each pair of numbers calculate the difference\n                float difference\
    \ = abs(num - numbers[j]);\n                // if this difference is less than\
    \ the previous minimum, update the minimum\n                if (difference < small_difference)\
    \ \n                {\n                    small_difference = difference;\n  \
    \                  a = num;\n                    b = numbers[j];\n           \
    \     }\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxp7_gag9.d(21): Error: found `{` when expecting `;` following\
    \ statement\\n/tmp/tmpxp7_gag9.d(36): Error: declaration expected, not `return`\\\
    n/tmp/tmpxp7_gag9.d(37): Error: unrecognized declaration\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpxp7_gag9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_distance = 1000000.0;\n    Tuple!(float, float) closest_elements;\n\
    \    foreach(i, number; numbers)\n    {\n        foreach(j, other_number; numbers)\n\
    \        {\n            if(other_number > number)\n            {\n           \
    \     float distance = other_number - number;\n                if(distance < min_distance)\n\
    \                {\n                    min_distance = distance;\n           \
    \         closest_elements = tuple(number, other_number);\n                }\n\
    \            }\n        }\n    }\n    return closest_elements;\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjc9khuz1.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f2d]\\n??:? void tmpjc9khuz1.__unittest_L33_C1()\
    \ [0x428edd]\\n??:? void tmpjc9khuz1.__modtest() [0x429994]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ee93]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dda2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4326c9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432b78]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432655]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dd79]\\n??:? runModuleUnitTests [0x42ec69]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a408]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a38f]\\n??:? _d_run_main [0x42a2fa]\\n??:? main [0x4299a7]\\\
    n??:? __libc_start_main [0xa7720554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float closest = 1000;\n    float[] result = null;\n    foreach(float\
    \ element1; numbers)\n    {\n        foreach(float element2; numbers)\n      \
    \  {\n            if(element1 == element2) continue;\n            float distance\
    \ = abs(element1 - element2);\n            if(distance < closest)\n          \
    \  {\n                closest = distance;\n                result = [element1,\
    \ element2];\n            }\n        }\n    }\n    return tuple(result[0], result[1]);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphglqmoxc.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e5d]\\n??:? void tmphglqmoxc.__unittest_L31_C1()\
    \ [0x428ecd]\\n??:? void tmphglqmoxc.__modtest() [0x4298c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da7e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323a5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432854]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432331]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da55]\\n??:? runModuleUnitTests [0x42e945]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a320]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2a7]\\n??:? _d_run_main [0x42a212]\\n??:? main [0x4298db]\\\
    n??:? __libc_start_main [0x5d155554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float minDistance = DBL_MAX;\n  \
    \  Tuple!(float, float) result;\n    for (int i = 0; i < numbers.length - 1; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float dist = abs(numbers[i] - numbers[j]);\n            if (dist < minDistance)\n\
    \            {\n                minDistance = dist;\n                result =\
    \ tuple(numbers[i], numbers[j]);\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpncd59wzb.d(15): Error: undefined identifier `DBL_MAX`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpncd59wzb.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float diff;\n    float mindiff = INFINITY;\n    int i = 0;\n    int\
    \ j = 1;\n    for (i = 0; i < numbers.length - 1; i++)\n    {\n        for (j\
    \ = i + 1; j < numbers.length; j++)\n        {\n            diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < mindiff)\n            {\n           \
    \     mindiff = diff;\n            }\n        }\n    }\n    float ret1;\n    float\
    \ ret2;\n    for (i = 0; i < numbers.length - 1; i++)\n    {\n        for (j =\
    \ i + 1; j < numbers.length; j++)\n        {\n            diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff == mindiff)\n            {\n          \
    \      ret1 = numbers[i];\n                ret2 = numbers[j];\n              \
    \  return tuple(ret1, ret2);\n            }\n        }\n    }\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsi4qt92n.d(15): Error: undefined identifier `INFINITY`\\n/tmp/tmpsi4qt92n.d(12):\
    \ Error: function `tmpsi4qt92n.find_closest_elements` no `return exp;` or `assert(0);`\
    \ at end of function\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsi4qt92n.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    auto closest = tuple(2.0f, 2.0f);\n    foreach(n1; 0 .. numbers.length\
    \ - 1)\n    {\n        foreach(n2; n1 + 1 .. numbers.length)\n        {\n    \
    \        auto diff = abs(numbers[n1] - numbers[n2]);\n            if(abs(closest[0]\
    \ - closest[1]) > diff)\n            {\n                closest = tuple(numbers[n1],\
    \ numbers[n2]);\n            }\n        }\n    }\n    return closest;\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppriyo7wh.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a005]\\n??:? void tmppriyo7wh.__unittest_L28_C1()\
    \ [0x428fa9]\\n??:? void tmppriyo7wh.__modtest() [0x429a6c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42f003]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42df12]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432839]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432ce8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4327c5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dee9]\\n??:? runModuleUnitTests [0x42edd9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a554]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a4db]\\n??:? _d_run_main [0x42a446]\\n??:? main [0x429a7f]\\\
    n??:? __libc_start_main [0xb3291554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length>=2);\n    float smaller = numbers[0];\n    float\
    \ larger = numbers[1];\n    float small = abs(numbers[0]-numbers[1]);\n    for(int\
    \ i=0;i<numbers.length;i++)\n    {\n        for(int j=i+1;j<numbers.length;j++)\n\
    \        {\n            if(abs(numbers[i]-numbers[j])<small)\n            {\n\
    \                small = abs(numbers[i]-numbers[j]);\n                smaller\
    \ = numbers[i];\n                larger = numbers[j];\n            }\n       \
    \ }\n    }\n    return tuple(smaller,larger);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj9tv43sa.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a001]\\n??:? void tmpj9tv43sa.__unittest_L32_C1()\
    \ [0x428fb9]\\n??:? void tmpj9tv43sa.__modtest() [0x4299b4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ed13]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dc22]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432549]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329f8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4324d5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dbf9]\\n??:? runModuleUnitTests [0x42eae9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a4c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a44b]\\n??:? _d_run_main [0x42a3b6]\\n??:? main [0x4299c7]\\\
    n??:? __libc_start_main [0x1fbee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ minDiff = 1.0e20;\n    float max = numbers[0];\n    foreach(i, ref e; numbers)\
    \ \n    {\n        if (e < min) \n        {\n            min = e;\n        }\n\
    \        if (e > max) \n        {\n            max = e;\n        }\n        if\
    \ (i > 0) \n        {\n            float diff = abs(e - numbers[i - 1]);\n   \
    \         if (diff < minDiff) \n            {\n                minDiff = diff;\n\
    \            }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjjrk2d_v.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f39]\\n??:? void tmpjjrk2d_v.__unittest_L39_C1()\
    \ [0x428ef5]\\n??:? void tmpjjrk2d_v.__modtest() [0x4298f0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db5a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432481]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432930]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43240d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db31]\\n??:? runModuleUnitTests [0x42ea21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a383]\\n??:? _d_run_main [0x42a2ee]\\n??:? main [0x429903]\\\
    n??:? __libc_start_main [0x6f13a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_distance = numbers[1] - numbers[0];\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (size_t i = 1; i < numbers.length; i++)\n\
    \    {\n        float distance = abs(numbers[i] - numbers[i - 1]);\n        if\
    \ (distance < min_distance)\n        {\n            min_distance = distance;\n\
    \            a = numbers[i - 1];\n            b = numbers[i];\n        }\n   \
    \ }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0h3mzm7i.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e85]\\n??:? void tmp0h3mzm7i.__unittest_L29_C1()\
    \ [0x428ef1]\\n??:? void tmp0h3mzm7i.__modtest() [0x4298ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb97]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42daa6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43287c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432359]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da7d]\\n??:? runModuleUnitTests [0x42e96d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a348]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2cf]\\n??:? _d_run_main [0x42a23a]\\n??:? main [0x4298ff]\\\
    n??:? __libc_start_main [0xe323b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float diff = 0.0;\n    float minDiff = abs(numbers[0] - numbers[1]);\n\
    \    size_t index = 0;\n    for (size_t i = 0; i < numbers.length - 1; i++) \n\
    \    {\n        diff = abs(numbers[i] - numbers[i + 1]);\n        if (diff < minDiff)\
    \ \n        {\n            minDiff = diff;\n            index = i;\n        }\n\
    \    }\n    return tuple(numbers[index], numbers[index + 1]);\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5cae273m.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e45]\\n??:? void tmp5cae273m.__unittest_L28_C1()\
    \ [0x428eb5]\\n??:? void tmp5cae273m.__modtest() [0x4298b0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb57]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da66]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43238d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43283c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432319]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da3d]\\n??:? runModuleUnitTests [0x42e92d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a308]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a28f]\\n??:? _d_run_main [0x42a1fa]\\n??:? main [0x4298c3]\\\
    n??:? __libc_start_main [0x49a7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_difference = std.float.infinity;\n\
    \    int min_difference_index = 0;\n    for (int i = 0; i < numbers.length - 1;\
    \ i++)\n    {\n        float abs_difference = abs(numbers[i] - numbers[i + 1]);\n\
    \        if (abs_difference < min_difference)\n        {\n            min_difference\
    \ = abs_difference;\n            min_difference_index = i;\n        }\n    }\n\
    \    return tuple(numbers[min_difference_index], numbers[min_difference_index\
    \ + 1]);\n}\n \n/*\nFrom a supplied array of strings, remove those that contain\
    \ duplicate characters.\n    >>> remove_duplicate_characters([\"hello\", \"world\"\
    , \"goodbye\", \"mars\"])\n    [\"world\", \"mars\"]\n    >>> remove_duplicate_characters([\"\
    hello\", \"world\", \"goodbye\", \"mars\", \"goodbye\", \"world\"])\n    [\"mars\"\
    ]\n*/\nstring[] remove_duplicate_characters(string[] words)\n{\n    HashSet!(string)\
    \ unique_words = new HashSet!(string)();\n    foreach (word; words)\n    {\n \
    \       unique_words.insert(word);\n    }\n    string[] unique_words_array = unique_words.byKey().array;\n\
    \    for (int i = 0; i < unique_words_array.length; i++)\n    {\n        for (int\
    \ j = 0; j < unique_words_array[i].length; j++)\n        {\n            char char1\
    \ = unique_words_array[i][j];\n            for (int k = j + 1; k < unique_words_array[i].length;\
    \ k++)\n            {\n                char char2 = unique_words_array[i][k];\n\
    \                if (char1 == char2)\n                {\n                    unique_words_array[i]\
    \ = \"\";\n                }\n            }\n        }\n    }\n    return unique_words_array.filter!(a\
    \ => a != \"\");\n}\n \n/*\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoqme24gq.d(15): Error: identifier expected following `.`, not\
    \ `float`\\n/tmp/tmpoqme24gq.d(62): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoqme24gq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    Tuple!(float, float) result;\n    float min_difference = 1e20;\n  \
    \  for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1;\
    \ j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_difference)\n            {\n    \
    \            min_difference = diff;\n                result = tuple(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpterez4m3.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fd5]\\n??:? void tmpterez4m3.__unittest_L30_C1()\
    \ [0x428f7d]\\n??:? void tmpterez4m3.__modtest() [0x429a40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42efd3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dee2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432809]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432cb8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432795]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42deb9]\\n??:? runModuleUnitTests [0x42eda9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a524]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a4ab]\\n??:? _d_run_main [0x42a416]\\n??:? main [0x429a53]\\\
    n??:? __libc_start_main [0x24c05554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    Tuple!(float, float) output;\n    double temp = 1000000;\n    foreach(i,\
    \ element; numbers)\n    {\n        foreach(j, secondElement; numbers)\n     \
    \   {\n            if(j != i)\n            {\n                if(abs(element -\
    \ secondElement) < temp)\n                {\n                    output = tuple(element,\
    \ secondElement);\n                    temp = abs(element - secondElement);\n\
    \                }\n            }\n        }\n    }\n    return output;\n}\n/*\n\
    Print the elements in the range [low, high).\n>>> print_range(1,4)\n>>> 1 2 3\n\
    */\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdnd_v8bb.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fc5]\\n??:? void tmpdnd_v8bb.__unittest_L37_C1()\
    \ [0x428f6d]\\n??:? void tmpdnd_v8bb.__modtest() [0x429a30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ef4f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42de5e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432785]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432c34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432711]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42de35]\\n??:? runModuleUnitTests [0x42ed25]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a4a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a427]\\n??:? _d_run_main [0x42a392]\\n??:? main [0x429a43]\\\
    n??:? __libc_start_main [0xb52af554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
