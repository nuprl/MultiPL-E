name: HumanEval_131_digits
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nGiven a positive integer n, return\
  \ the product of the odd digits.\n    Return 0 if all digits are even.\n    For\
  \ example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n    >>> digits(235L)\n\
  \    15L\n    \n*/\nlong digits(long n) \n"
tests: "unittest\n{\n    alias candidate = digits;\n\n    assert(candidate(5L) ==\
  \ 5L);\n    assert(candidate(54L) == 5L);\n    assert(candidate(120L) == 1L);\n\
  \    assert(candidate(5014L) == 5L);\n    assert(candidate(98765L) == 315L);\n \
  \   assert(candidate(5576543L) == 2625L);\n    assert(candidate(2468L) == 0L);\n\
  }\nvoid main(){}"
completions: ["{\n    long product = 1L;\n    while (n > 0) \n    {\n        long\
    \ digit = n % 10;\n        if (digit % 2 == 1) \n        {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    return product;\n}", "{\n\
    \    if (n < 10) return (n % 2) ? n : 0;\n    auto r = digits(n / 10);\n    if\
    \ (r == 0) return 0;\n    return (n % 2) ? r * (n % 10) : r;\n}\n/*\nGiven two\
    \ non-negative integers n and k,\ncompute the binomial coefficient \"n choose\
    \ k\".\n    For example:\n    >>> binomial(3L, 1L)\n    3L\n    >>> binomial(3L,\
    \ 2L)\n    3L\n    >>> binomial(3L, 3L)\n    1L\n    >>> binomial(5L, 3L)\n  \
    \  10L\n*/\nlong binomial(long n, long k) \n{\n    long r = 1;\n    foreach (long\
    \ i; 0L .. k) r *= n - i;\n    foreach (long i; 1L .. k) r /= i;\n    return r;\n\
    }\n/*\nReturn true if n is a power of two.\n    For example:\n    >>> powerOfTwo(1L)\n\
    \    true\n    >>> powerOfTwo(2L)\n    true\n    >>> powerOfTwo(4L)\n    true\n\
    \    >>> powerOfTwo(10L)\n    false\n*/", "{\n    long result=1;\n    long[] arr\
    \ =  n.toString().toLongArray;\n    foreach(index, value; arr)\n    {\n      \
    \  if(value % 2 == 1)\n        {\n            result = result * value;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long result = 1L;\n    while (n\
    \ > 0) {\n        long digit = n % 10;\n        if (digit % 2 == 1) {\n      \
    \      result *= digit;\n        }\n        n /= 10;\n    }\n    return result;\n\
    }", "{\n    if (n < 10)\n    {\n        return (n % 2) * n;\n    }\n    return\
    \ digits(n / 10) * (n % 2) * (n % 10);\n}", "{\n    if (n < 0) return 0;\n   \
    \ long res = 1;\n    while (n != 0) {\n        n = n / 10;\n        res *= n %\
    \ 10;\n    }\n    return res;\n}", "{\n    bool found = false;\n    long multiplier\
    \ = 1;\n    long current = n;\n    long divisor = 10;\n    while (current > 0)\n\
    \    {\n        long quotient = current / divisor;\n        long remainder = current\
    \ % divisor;\n        if (remainder & 1)\n        {\n            found = true;\n\
    \            multiplier *= remainder;\n        }\n        current = quotient;\n\
    \    }\n    return found ? multiplier : 0;\n}", "{\n    long ret = 1;\n    foreach(d;\
    \ n.digits) \n    {\n        if (d % 2 == 1) \n        {\n            ret *= d;\n\
    \        }\n    }\n    return ret;\n}\n/*\nGiven a positive integer n, return\
    \ the sum of all odd digits.\n    Return 0 if all digits are even.\n    For example:\n\
    \    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n    >>> digits(235L)\n\
    \    7L\n*/\nlong oddDigits(long n) \n{\n    long ret = 0;\n    foreach(d; n.digits)\
    \ \n    {\n        if (d % 2 == 1) \n        {\n            ret += d;\n      \
    \  }\n    }\n    return ret;\n}\n/*\nReturn a tuple of two values: the first is\
    \ an int representing the number of\n    digits that are odd, and the second is\
    \ an int representing the number of\n    digits that are even.\n    For example:\n\
    \    >>> digits(1L)\n    (1, 0)\n    >>> digits(4L)\n    (0, 1)\n    >>> digits(235L)\n\
    \    (2, 1)\n*/\nTuple!(int, int) countDigits(long n) \n{\n    int odd = 0;\n\
    \    int even = 0;\n    foreach(d; n.digits) \n    {\n        if (d % 2 == 1)\
    \ \n        {\n            odd++;\n        }\n        else \n        {\n     \
    \       even++;\n        }\n    }\n    return tuple(odd, even);\n}\n/*\nGiven\
    \ a positive integer n, return the sum of the product of the odd digits\n    and\
    \ the sum of the even digits.\n    For example:\n    >>> digits(1L)\n    1L\n\
    \    >>> digits(4L)\n    4L\n    >>> digits(235L)\n    23L\n*/\nlong productSum(long\
    \ n) \n{\n    int odd = 0;\n    int even = 0;\n    foreach(d; n.digits) \n   \
    \ {\n        if (d % 2 == 1", "{\n\tmixin DigitsFn!n;\n\treturn reduce_odd_digits();\n\
    }", "{\n    long prod = 1L;\n    while (n > 0) {\n        prod *= (n % 10) % 2\
    \ == 1 ? n % 10 : 1;\n        n /= 10;\n    }\n    return prod;\n}", "{\n    return\
    \ 0;\n}", "{\n    long result = 1L;\n    // Gather the odd digits of n.\n    while\
    \ (n > 0L) {\n        int digit = n % 10;\n        if (digit % 2 != 0) {\n   \
    \         result *= digit;\n        }\n        n /= 10;\n    }\n    return result;\n\
    }", "{\n    long p = 1;\n    while (n != 0) \n    {\n        int d = cast(int)n\
    \ % 10;\n        if (d % 2 != 0)\n            p *= d;\n        n /= 10;\n    }\n\
    \    return p;\n}", "{\n    auto s = to!string(n);\n    long res = 1;\n    for\
    \ (auto e : s) \n    {\n        if(e.isDigit)\n        {\n            long d =\
    \ cast(long)e - 48;\n            if(d % 2 == 1)\n            {\n             \
    \   res *= d;\n            }\n        }\n    }\n    return res;\n}", "{\n    long\
    \ sum = 1;\n    int digit = 0;\n    while (n != 0)\n    {\n        digit = n %\
    \ 10;\n        if (digit % 2 != 0)\n        {\n            sum *= digit;\n   \
    \     }\n        n /= 10;\n    }\n    return sum;\n}", "{\n\t\n\t// TODO: implement\n\
    \tlong a=0;\n\tlong k=1;\n\t//long g=a/10;\n\tif(n==0)\n\treturn 0;\n\telse\n\t\
    while(n>0)\n\t{\n\t\t//g=n%10;\n\t\tif(n%2==1)\n\t\t{\n\t\t\ta=a+n%10;\n\t\t\t\
    k=k*(n%10);\n\t\t}\n\t\tn=n/10;\n\t}\n\treturn k;\n\t\n}\n//long gcd(long x, long\
    \ y) \n//{\n\t// TODO: implement\n//\tlong a=min(x,y);\n//\tlong b=max(x,y);\n\
    //\tlong r=1;\n//\twhile(r!=0)\n//\t{\n//\t\tr=b%a;\n//\t\tb=a;\n//\t\ta=r;\n\
    //\t}\n//\treturn b;\n//}", "{\n\tauto r = n;\n\tlong result = 1;\n\t\n\twhile(\
    \ r > 0 )\n\t{\n\t\tlong digit = r % 10;\n\t\tif( digit % 2 == 1 )\n\t\t\tresult\
    \ *= digit;\n\t\tr /= 10;\n\t}\n\t\n\treturn result;\n}", "{\n\tlong N = n;\n\t\
    long out = 1;\n\twhile (N != 0)\n\t{\n\t\tn = N % 10;\n\t\tif (n % 2 != 0)\n\t\
    \t{\n\t\t\tout *= n;\n\t\t}\n\t\tN /= 10;\n\t}\n\treturn out;\n}", "{\n    long\
    \ k = 0;\n    int i = 0;\n    do \n    {\n        if (n % 2 != 0) \n        {\n\
    \            k += std.math.pow(10, i) * (n % 10);\n            i++;\n        }\n\
    \        n /= 10;\n    } while (n != 0);\n    return k;\n}\n/*\nGiven a positive\
    \ integer n, return the total number of odd digits.\n    Return 0 if all digits\
    \ are even.\n    For example:\n    >>> odds(1L)\n    1L\n    >>> odds(4L)\n  \
    \  0L\n    >>> odds(235L)\n    2L\n    \n*/\nlong odds(long n) \n{\n    long k\
    \ = 0;\n    do \n    {\n        if (n % 2 != 0) \n        {\n            k++;\n\
    \        }\n        n /= 10;\n    } while (n != 0);\n    return k;\n}\n/*\nGiven\
    \ a positive integer n, return the total number of digits.\n    For example:\n\
    \    >>> num_digits(1L)\n    1L\n    >>> num_digits(4L)\n    1L\n    >>> num_digits(235L)\n\
    \    3L\n*/\nlong num_digits(long n) \n{\n    long k = 0;\n    do \n    {\n  \
    \      k++;\n        n /= 10;\n    } while (n != 0);\n    return k;\n}\n/*\nGiven\
    \ a positive integer n, return a list of digits (in reverse order).\n    For example:\n\
    \    >>> to_list(1L)\n    []\n    >>> to_list(4L)\n    [4L]\n    >>> to_list(235L)\n\
    \    [5L, 3L, 2L]\n*/\nimmutable(long)[] to_list(long n) \n{\n    long[] r;\n\
    \    do \n    {\n        r ~= n % 10;\n        n /= 10;\n    } while (n != 0);\n\
    \    return r;\n}\n/*\nGiven a list of digits l, return the corresponding number.\n\
    \    For example:\n    >>>", "{\n    /*int answer = 0;\n    int c = 0;\n    if\
    \ (n == 0) {\n        return 0;\n    }\n    while (n > 0) {\n        int i = n\
    \ % 10;\n        if (i % 2 != 0) {\n            answer = answer + i * (int)pow(10,\
    \ c);\n            c++;\n        }\n        n = n / 10;\n    }\n    return answer;*/\n\
    \    return (n == 0) ? 0 : digits(n / 10) * 10 + (n % 2 != 0) ? n % 10 : 0;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
