name: HumanEval_23_strlen
language: d
prompt: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\"\
  )\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
  \ \n"
tests: "unittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
  \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
  ) == 9L);\n}\nvoid main(){}"
completions: ["{\n    return string.length;\n}", "{\n    return string.length;\n}\n\
    /*\n    Return zero if given string is empty\n    >>> iszero(\"\")\n    true\n\
    \    >>> iszero(\"abc\")\n    false\n*/", "{\n    long length = 0;\n    for (long\
    \ i = 0; string[i] != '\\0'; i++) \n    {\n        length++;\n    }\n    return\
    \ length;\n}", "{\n    return cast(long)string.length;\n}", "{\n    long len =\
    \ 0;\n    char[] chars = string.toCharArray();\n    while(chars[len] != '\\0')\n\
    \        len++;\n    return len;\n}\n// Test function", "{\n\tlong length = 0;\n\
    \twhile(length < string.length && string[length] != '\\0')\n\t{\n\t\tlength++;\n\
    \t}\n\treturn length;\n}", "{\n\tlong len;\n\tfor (len = 0; string[len]; len++);\n\
    \treturn len;\n}", "{\n    long len = 0;\n    foreach(c; string) \n    {\n   \
    \     len++;\n    }\n    return len;\n}\n/*\n Return true if given string starts\
    \ with given prefix\n    >>> startswith(\"\", \"\")\n    true\n    >>> startswith(\"\
    abc\", \"\")\n    true\n    >>> startswith(\"abc\", \"a\")\n    true\n    >>>\
    \ startswith(\"abc\", \"ab\")\n    true\n    >>> startswith(\"abc\", \"abc\")\n\
    \    true\n    >>> startswith(\"abc\", \"abcd\")\n    false\n    >>> startswith(\"\
    abc\", \"b\")\n    false\n    >>> startswith(\"abc\", \"bc\")\n    false\n   \
    \ >>> startswith(\"abc\", \"c\")\n    false\n*/", "{\n    long len;\n    foreach(ch;\
    \ string)\n        len++;\n    return len;\n}", "{\n    return string.length;\n\
    }", "{\n    char* c = cast(char*) string;\n    char* ret = c;\n    while(*c) \n\
    \    {\n        c++;\n    }\n    return c - ret;\n}", "{\n  return string.length;\n\
    }\n/*", "{\n\tlong length = 0;\n\tforeach(char c; string) \n\t{\n\t\tlength++;\n\
    \t}\n\treturn length;\n}", "{\n    long len;\n    foreach(c; string)\n       \
    \ len++;\n    return len;\n}", "{\n    long result = 0;\n    while (string[result]\
    \ != '\\0') \n    {\n        result++;\n    }\n    return result;\n}\n/*\n Return\
    \ index of first occurrence of string needle in string haystack\n or -1 if not\
    \ found\n    >>> strstr(\"abc\", \"a\")\n    0L\n    >>> strstr(\"abc\", \"b\"\
    )\n    1L\n    >>> strstr(\"abc\", \"c\")\n    2L\n    >>> strstr(\"abc\", \"\"\
    )\n    0L\n    >>> strstr(\"abc\", \"d\")\n    -1L\n*/\nlong strstr(string haystack,\
    \ string needle) \n{\n    long needleLen = strlen(needle);\n    long haystackLen\
    \ = strlen(haystack);\n    for (long i = 0; i < haystackLen; i++) \n    {\n  \
    \      if (haystack[i] == needle[0]) \n        {\n            for (long j = 0;\
    \ j < needleLen; j++) \n            {\n                if (needle[j] != haystack[i\
    \ + j]) \n                {\n                    break;\n                }\n \
    \               if (j == needleLen - 1) \n                {\n                \
    \    return i;\n                }\n            }\n        }\n    }\n    return\
    \ -1;\n}\n/*\n Return substring of string s, starting at index start and of length\
    \ len\n    >>> substr(\"abc\", 0, 1)\n    \"a\"\n    >>> substr(\"abc\", 1, 2)\n\
    \    \"bc\"\n    >>> substr(\"abc\", 1, 3)\n    \"bc\"\n    >>> substr(\"abc\"\
    , 0, 3)\n    \"abc\"\n    >>> substr(\"abc\", 0, 4)\n    \"abc\"\n    >>> substr(\"\
    abc\", 1, 0)\n    \"\"\n    >>> substr(\"abc\", 3, 0)\n    \"\"\n    >>> substr(\"\
    abc\", 4, 0)\n    \"\"\n    >>> substr(\"abc\", 0, -1)\n    \"\"\n    >>> substr(\"\
    abc\", -1, 1)\n    \"\"\n*/\nstring substr(string s, long start, long len) \n\
    {\n    long sLen = strlen(s);\n    if (start", "{\n  long length = 0;\n  while(string[length]\
    \ != '\\0')\n  {\n    length++;\n  }\n  return length;\n}", "{\n    return cast(long)\
    \ string.length;\n}", "{\n    int i = 0;\n    for (i = 0; string[i] != '\\0';\
    \ i++)\n    {}\n    return i;\n}", "{\n    return string.length;\n}", "{\n   \
    \ return std.file.byChunk(string, \"r\").length;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
