language: d
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    //return std.algorithm.sort(arr, (a, b) => cast(int)ones(a) ==\
    \ cast(int)ones(b) ? a < b : ones(a) < ones(b));\n    return arr.sort!((a, b)\
    \ => cast(int)ones(a) == cast(int)ones(b) ? a < b : ones(a) < ones(b));\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqnxji_zr.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqnxji_zr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto comparer = (long a, long b)\n    {\n        auto binA = to!string(a,\
    \ 2);\n        auto binB = to!string(b, 2);\n        if (count(binA, '1') < count(binB,\
    \ '1'))\n            return -1;\n        else if (count(binA, '1') > count(binB,\
    \ '1'))\n            return 1;\n        else if (a < b)\n            return -1;\n\
    \        else if (a > b)\n            return 1;\n        else\n            return\
    \ 0;\n    };\n    sort(arr, comparer);\n    return arr;\n}\nunittest\n{\n    alias\
    \ candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L,\
    \ -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L,\
    \ 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L,\
    \ 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L,\
    \ 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L,\
    \ 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplf46u872.d(22): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmplf46u872.d(23): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmplf46u872.d(24): Error: undefined identifier `count`

    /tmp/tmplf46u872.d(24): Error: undefined identifier `count`

    /tmp/tmplf46u872.d(26): Error: undefined identifier `count`

    /tmp/tmplf46u872.d(26): Error: undefined identifier `count`

    /tmp/tmplf46u872.d(35): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplf46u872.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return quicksort(arr);\n}\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L,\
    \ 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L,\
    \ -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L, 4L, 5L,\
    \ 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n\
    \    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n\
    \    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n  \
    \  assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkh6d1fgd.d(20): Error: undefined identifier `quicksort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkh6d1fgd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    int[] ones = new int[arr.length];\n    int[] zeros = new int[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++) {\n        long binary = arr[i];\n \
    \       int count = 0;\n        while (binary > 0) {\n            if (binary %\
    \ 2 == 1) {\n                count++;\n            }\n            binary /= 2;\n\
    \        }\n        ones[i] = count;\n        zeros[i] = arr[i];\n    }\n    long[]\
    \ result = new long[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n\
    \        int minIndex = minIndex(ones);\n        result[i] = zeros[minIndex];\n\
    \        ones[minIndex] = int.max;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L])\
    \ == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) ==\
    \ [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L,\
    \ 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfa_xfdv8.d(32): Error: cannot implicitly convert expression `arr[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmpfa_xfdv8.d(36): Error: undefined identifier `minIndex`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa_xfdv8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto members = [] (long item) \n    {\n        int num_ones =\
    \ 0;\n        foreach( c; item.to!string())\n        {\n            if(c == '1')\n\
    \                num_ones++;\n        }\n        return tuple(num_ones, item);\n\
    \    };\n    return arr.map!members.sort.map!(tuple_typeof(arr[0], arr[0]).tupleof[1]);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptwwrcxjf.d(20): Error: found `item` when expecting `.` following
    long

    /tmp/tmptwwrcxjf.d(20): Error: found `)` when expecting identifier following `long`.

    /tmp/tmptwwrcxjf.d(21): Error: found `{` when expecting `,`

    /tmp/tmptwwrcxjf.d(22): Error: found `num_ones` when expecting `.` following int

    /tmp/tmptwwrcxjf.d(22): Error: found `=` when expecting identifier following `int`.

    /tmp/tmptwwrcxjf.d(22): Error: found `0` when expecting `,`

    /tmp/tmptwwrcxjf.d(22): Error: expression expected, not `;`

    /tmp/tmptwwrcxjf.d(23): Error: found `foreach` when expecting `,`

    /tmp/tmptwwrcxjf.d(23): Error: found `;` when expecting `)`

    /tmp/tmptwwrcxjf.d(23): Error: found `item` when expecting `,`

    /tmp/tmptwwrcxjf.d(24): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmptwwrcxjf.d(30): Error: declaration expected, not `return`

    /tmp/tmptwwrcxjf.d(31): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwwrcxjf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    arr.sort!(CompareByOnes)();\n    return arr;\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L])\
    \ == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) ==\
    \ [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L,\
    \ 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgrzfnemt.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgrzfnemt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    Tuple!(ulong,ulong)[] t;\n    foreach(i;arr)\n    {\n        ulong\
    \ b = i;\n        ulong count = 0;\n        while(b!=0)\n        {\n         \
    \   count += b & 1;\n            b = b >> 1;\n        }\n        t ~= tuple(count,i);\n\
    \    }\n    // sort by number of 1s in binary, then by decimal\n    t.sort!((e1,e2)=>e1[0]==e2[0]?e1[1]<e2[1]:e1[0]<e2[0]);\n\
    \    return t.map!(e=>e[1]).array;\n}\n```\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L,\
    \ 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L,\
    \ -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L, 4L, 5L,\
    \ 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n\
    \    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n\
    \    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n  \
    \  assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpykkf0rkh.d(36): Error: declaration expected, not `""`

    /tmp/tmpykkf0rkh.d(36): Error: unterminated string constant starting at /tmp/tmpykkf0rkh.d(36)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpykkf0rkh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    //arr.sort();\n    arr.sort!((int i1, int i2)\n    {\n       \
    \ return countOnes(i1) - countOnes(i2);\n    });\n    return arr;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiwb2lp0m.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiwb2lp0m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] ones = new long[arr.length];\n    long[] sorted = new long[arr.length];\n\
    \    auto arrTuple = new Tuple!(int, int)[arr.length];\n    foreach(int i, long\
    \ a; arr) {\n        int one = 0;\n        int sign = a < 0 ? -1 : 1;\n      \
    \  a *= sign;\n        while(a > 0) {\n            if(a & 1)\n               \
    \ one++;\n            a >>= 1;\n        }\n        ones[i] = one;\n        arrTuple[i]\
    \ = tuple(one, a * sign);\n    }\n    auto sortedTuple = insertionSort(arrTuple);\n\
    \    foreach(int i, tuple; sortedTuple) {\n        sorted[i] = tuple[1];\n   \
    \ }\n    return sorted;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n\
    \    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuguy39qf.d(33): Error: template `std.typecons.Tuple!(int, int).Tuple.opAssign`
    cannot deduce function from argument types `!()(Tuple!(int, long))`, candidates
    are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(898):        `std.typecons.Tuple!(int,
    int).Tuple.opAssign(R)(auto ref R rhs) if (areCompatibleTuples!(typeof(this),
    R, "="))`

    /tmp/tmpuguy39qf.d(35): Error: undefined identifier `insertionSort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuguy39qf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.dup.sort!((a, b) => {\n        if (a.countOnes == b.countOnes)\n\
    \            return a < b;\n        return a.countOnes < b.countOnes;\n    });\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu82w4k9x.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu82w4k9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    arr = arr.map!((x) => tuple(x, x.countOnes))\n        .map!((x)\
    \ => tuple(x[0], x[1], x[0].countOnes))\n        .sort!((x, y) =>\n        {\n\
    \            if (x[1] == y[1])\n                return x[0] > y[0];\n        \
    \    return x[1] > y[1];\n        }).map!((x) => x[0]).array;\n    return arr;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpih4qg2iy.d(20): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpih4qg2iy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    class Number\n    {\n        private long value;\n        private\
    \ int ones;\n        this(long value)\n        {\n            this.value = value;\n\
    \            ones = countOneBits(value);\n        }\n        long getValue()\n\
    \        {\n            return value;\n        }\n        int getOnes()\n    \
    \    {\n            return ones;\n        }\n    }\n    Number[] numbers = arr.map!(a\
    \ => new Number(a));\n    sort!((a, b) => \n    {\n        if (a.getOnes() ==\
    \ b.getOnes())\n            return a.getValue() < b.getValue();\n        return\
    \ a.getOnes() < b.getOnes();\n    })(numbers);\n    return numbers.map!(n => n.getValue()).array;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_cikp4lh.d(27): Error: undefined identifier `countOneBits`

    /tmp/tmp_cikp4lh.d(38): Error: no property `map` for type `long[]`

    /tmp/tmp_cikp4lh.d(39): Error: template instance `sort!((a, b) => ()

    {

    if (a.getOnes() == b.getOnes())

    return a.getValue() < b.getValue();

    return a.getOnes() < b.getOnes();

    }

    )` template `sort` is not defined, did you mean sqrt?

    /tmp/tmp_cikp4lh.d(45): Error: no property `map` for type `Number[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_cikp4lh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] sorted_array = arr.dup;\n    const bitmask = 1;\n    std.datetime.stopwatch\
    \ sw = new std.datetime.stopwatch;\n    sw.start;\n    sort(sorted_array.begin,\
    \ sorted_array.end, (a, b) =>\n    {\n        if (popCount(a & bitmask) < popCount(b\
    \ & bitmask)) return true;\n        if (popCount(a & bitmask) > popCount(b & bitmask))\
    \ return false;\n        if (a < b) return true;\n        return false;\n    });\n\
    \    sw.stop;\n    writeln(sw.peek.seconds);\n    return sorted_array;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_6dhwx1c.d(22): Error: undefined identifier `datetime` in package
    `std`

    /tmp/tmp_6dhwx1c.d(22): Error: undefined identifier `datetime` in package `std`

    /tmp/tmp_6dhwx1c.d(24): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp_6dhwx1c.d(32): Error: `writeln` is not defined, perhaps `import std.stdio;`
    is needed?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_6dhwx1c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.sorted!((a, b) => // sort array with lambda function\n\
    \    {\n        if(__ctfe) // workaround for DMD CTFE bug http://d.puremagic.com/issues/show_bug.cgi?id=7905\n\
    \        {\n            static if(a == -2 || b == -2)\n                return\
    \ a == -2 ? b > -2 : -2 > b;\n            static if(a == -3 || b == -3)\n    \
    \            return a == -3 ? b > -3 : -3 > b;\n            static if(a == -4\
    \ || b == -4)\n                return a == -4 ? b > -4 : -4 > b;\n           \
    \ static if(a == -5 || b == -5)\n                return a == -5 ? b > -5 : -5\
    \ > b;\n            static if(a == -6 || b == -6)\n                return a ==\
    \ -6 ? b > -6 : -6 > b;\n        }\n        if(a == 0) // zero -> first\n    \
    \        return false;\n        if(b == 0) // zero -> first\n            return\
    \ true;\n        static assert(a != 0 && b != 0);\n        static if(a > 0 &&\
    \ b > 0) // positive -> by ones, then by number\n        {\n            if(a ==\
    \ b)\n                return false;\n            int aOnes = 0;\n            int\
    \ bOnes = 0;\n            do\n            {\n                if(a & 1L)\n    \
    \                ++aOnes;\n                if(b & 1L)\n                    ++bOnes;\n\
    \                a = a >> 1;\n                b = b >> 1;\n            } while(a\
    \ != 0 || b != 0);\n            if(aOnes == bOnes)\n                return a <\
    \ b;\n            return aOnes < bOnes;\n        }\n        else if(a < 0 && b\
    \ < 0) // negative -> by number\n            return a > b;\n        else // one\
    \ positive, one negative -> negative -> first\n            return a < 0;\n   \
    \ });\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp70wmap7w.d(20): Error: no property `sorted` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp70wmap7w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n  auto list = arr.map!(a => tuple(countOnes(a), a));\n  list.sort!((e,\
    \ e2) => e[0] == e2[0] ? e[1] < e2[1] : e[0] < e2[0]);\n  return list.map!((e)\
    \ => e[1]).array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbcqv_dec.d(20): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbcqv_dec.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.sort!(x => x.clamp(0L, 1L).count, y => y)();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpby66td_p.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpby66td_p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] res = arr.dup;\n    res.sort!(a, b => \n    {\n       \
    \ if (a.countOnes != b.countOnes)\n            return a.countOnes < b.countOnes;\n\
    \        else\n            return a < b;\n    });\n    return res;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd7l5nm6c.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd7l5nm6c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.sort!((a, b) => \n    {\n        int[string] aa = a.toString(\"\
    2\").to!int[string];\n        int[string] bb = b.toString(\"2\").to!int[string];\n\
    \        return aa.countof('1') == bb.countof('1') ? a - b : aa.countof('1') -\
    \ bb.countof('1');\n    });\n}\n/*\n    static assert(sort_array([1L, 5L, 2L,\
    \ 3L, 4L]) == [1L, 2L, 3L, 4L, 5L]);\n    static assert(sort_array([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-6L, -5L, -4L, -3L, -2L]);\n    static assert(sort_array([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 3L, 4L]);\n*/\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr75bdot4.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr75bdot4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    if (arr.length < 2) \n        return arr;\n    \n    int[] ranks\
    \ = new int[arr.length];\n    int[] vals = new int[arr.length];\n    foreach (i,\
    \ elem; arr)\n    {\n        int rank = (cast(int) elem).countOnes;\n        int\
    \ j = i;\n        while (j > 0 && ranks[j - 1] == rank && vals[j - 1] > elem)\n\
    \        {\n            vals[j] = vals[j - 1];\n            j--;\n        }\n\
    \        ranks[j] = rank;\n        vals[j] = elem;\n    }\n    return vals;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppplctbvm.d(27): Error: no property `countOnes` for type `int`

    /tmp/tmppplctbvm.d(28): Error: cannot implicitly convert expression `i` of type
    `ulong` to `int`

    /tmp/tmppplctbvm.d(35): Error: cannot implicitly convert expression `elem` of
    type `long` to `int`

    /tmp/tmppplctbvm.d(37): Error: cannot implicitly convert expression `vals` of
    type `int[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppplctbvm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    //~ return arr;\n    //~ return arr.sort!((a, b) => a.countOneBits()\
    \ < b.countOneBits() ? -1 : 1);\n    return arr.sort!((a, b) =>\n    {\n     \
    \   auto ac = a.countOneBits();\n        auto bc = b.countOneBits();\n       \
    \ return ac < bc ? -1 : ac > bc ? 1 : 0;\n    });\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa6jl031u.d(22): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa6jl031u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n\t/*\n    arr.sort!((a, b) =>\n        {\n            string aa =\
    \ a.to!string, bb = b.to!string;\n            return aa.count!(\"1\") > bb.count!(\"\
    1\") ? 1 : aa.count!(\"1\") < bb.count!(\"1\") ? -1 : a > b ? 1 : a < b ? -1 :\
    \ 0;\n        });\n\treturn arr;\n\t*/\n\treturn std.algorithm.sort(arr, (long\
    \ a, long b)\n\t{\n\t\tstring aa = a.to!string, bb = b.to!string;\n\t\treturn\
    \ aa.count!(\"1\") > bb.count!(\"1\") ? 1 : aa.count!(\"1\") < bb.count!(\"1\"\
    ) ? -1 : a > b ? 1 : a < b ? -1 : 0;\n\t});\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt17k2y93.d(28): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt17k2y93.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n\tarr = sort!((a, b) => countOnes(a) == countOnes(b) ? a - b : countOnes(a)\
    \ - countOnes(b))(arr);\n\treturn arr;\n}\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L,\
    \ 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L,\
    \ -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L, 4L, 5L,\
    \ 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n\
    \    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n\
    \    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n  \
    \  assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi6p1h11o.d(20): Error: template instance `sort!((a, b) => countOnes(a)
    == countOnes(b) ? a - b : countOnes(a) - countOnes(b))` template `sort` is not
    defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi6p1h11o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    //return std.algorithm.sort(arr, (a, b) => [a.countOnes, a].cmp([b.countOnes,\
    \ b]));\n    //return std.algorithm.sort(arr, (a, b) => (a.countOnes, a).cmp((b.countOnes,\
    \ b)));\n    return std.algorithm.sort(arr, (a, b) => tuple(a.countOnes, a).cmp(tuple(b.countOnes,\
    \ b)));\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ebl12rh.d(22): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ebl12rh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n  auto sortByBinaryOnes = (a, b) => binaryOnes(a) == binaryOnes(b)\
    \ ? a - b : binaryOnes(a) - binaryOnes(b);\n  return arr.sort!sortByBinaryOnes;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz81htx40.d(20): Error: variable `tmpz81htx40.sort_array.sortByBinaryOnes`
    type `void` is inferred from initializer `(a, b) => binaryOnes(a) == binaryOnes(b)
    ? a - b : binaryOnes(a) - binaryOnes(b)`, and variables cannot be of type `void`

    /tmp/tmpz81htx40.d(20): Error: template lambda has no value

    /tmp/tmpz81htx40.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz81htx40.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{ \n    // code goes here\n    import std.algorithm;\n    alias uint\
    \ typeof(arr[0]).sizeof * 8;\n    auto v = arr.map!(a => tuple(a, binaryOneCount!uint(a)));\n\
    \    v.sort!((a, b) => (a[1] == b[1]) ? a[0] < b[0] : a[1] < b[1]);\n    return\
    \ v.map!(a => a[0]).array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqn4mcd9r.d(22): Error: no identifier for declarator `uint`

    /tmp/tmpqn4mcd9r.d(22): Error: semicolon expected to close `alias` declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqn4mcd9r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return sort(arr, (a, b) => \n    {\n        long cntA = countOnes(a);\n\
    \        long cntB = countOnes(b);\n        return cntA == cntB ? a - b : cntA\
    \ - cntB;\n    });\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp88esat_h.d(20): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp88esat_h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n  int[string] bin = arr.map!(a => to!string(a, 2)).assocArray;\n \
    \ int[] values = arr.sort!((a, b) => \n  {\n    auto binA = bin[to!string(a)];\n\
    \    auto binB = bin[to!string(b)];\n    return (binA.count!(c => c == '1') <\
    \ binB.count!(c => c == '1'))\n      || (binA.count!(c => c == '1') == binB.count!(c\
    \ => c == '1') && a < b);\n  });\n  return values.map!(a => to!long(a)).array;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp47qv585g.d(20): Error: no property `map` for type `long[]`

    /tmp/tmp47qv585g.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmp47qv585g.d(28): Error: no property `map` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp47qv585g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    struct Int\n    {\n        long ones;\n        long value;\n \
    \   }\n    Int[] ints = arr.map!(a => Int(bitCount(a), a)).array;\n    sort!((a,\
    \ b) => a.ones < b.ones || (a.ones == b.ones && a.value < b.value))(ints);\n \
    \   return ints.map!(i => i.value).array;\n}\n```\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeg92i1tw.d(29): Error: declaration expected, not `""`

    /tmp/tmpeg92i1tw.d(29): Error: unterminated string constant starting at /tmp/tmpeg92i1tw.d(29)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeg92i1tw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    dchar[][] res = arr.map!(a => to!string(a, 2)).\n        map!(a\
    \ => a.dup).\n        map!(a => a.length > 1 && a[0] == '0' ? a[1 .. $] : a).\n\
    \        map!(a => a.dup.idup).\n        array();\n    res.sort!((dchar[] a, dchar[]\
    \ b) =>\n        a.length != b.length ? a.length - b.length :\n        std.algorithm.lexicographicalCompare(a,\
    \ b));\n    auto r = map!(a => to!long(to!string(a)))(res);\n    return r.array();\n\
    }\n/*\n    assert(sort_array([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L, 5L]);\n\
    \    assert(sort_array([-2L, -3L, -4L, -5L, -6L]) == [-6L, -5L, -4L, -3L, -2L]);\n\
    \    assert(sort_array([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 3L, 4L]);\n    assert(sort_array([1L,\
    \ 0L, 2L, 2L, 1L, 0L, 0L, 2L, 1L, 1L, 1L, 2L, 2L, 0L, 0L, 1L, 2L, 2L, 0L, 1L,\
    \ 0L, 2L, 1L, 2L, 1L, 1L, 0L, 0L, 2L, 1L, 0L, 1L, 2L, 2L, 2L, 1L, 2L, 0L, 0L,\
    \ 0L, 2L, 1L, 1L, 2L, 1L, 2L, 2L, 0L, 1L, 1L, 0L, 0L, 0L, 2L, 1L, 1L, 0L, 2L,\
    \ 0L, 0L, 1L, 2L, 1L, 1L, 1L, 0L, 2L,\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsnn6i_js.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsnn6i_js.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    arr = arr.map!(i => i < 0 ? -i : i).array;\n    auto length =\
    \ arr.length;\n    if (length < 2)\n        return arr;\n    long[] result;\n\
    \    result.length = length;\n    size_t ones;\n    auto comp = (ref long a, ref\
    \ long b)\n    {\n        return (ones in bits(a).tupleof) == (ones in bits(b).tupleof)\n\
    \               ? a < b\n               : (ones in bits(a).tupleof) < (ones in\
    \ bits(b).tupleof);\n    };\n    //Tuple to use as bucket index\n    auto index\
    \ = (ones, index) => [ones, index];\n    //Tuple to use as bucket content\n  \
    \  auto content = (index, value) => [index, value];\n    //For each entry in arr,\
    \ sort it and store it in a tuple\n    auto sorted = arr.map!((i, ct) => content(ct,\
    \ i)).map!comp.sort;\n    //Tuple to use as heap entry\n    auto heap_entry =\
    \ (ct, ct2) => [sorted[ct][0], sorted[ct2][0]];\n    //Fill the result array using\
    \ the heap\n    auto heap = new Heap!comp(heap_entry);\n    foreach (ct; 0 ..\
    \ length)\n        heap.insert(index(ones, ct));\n    foreach (ct; 0 .. length)\n\
    \    {\n        auto [, i] = heap.popFront();\n        auto [, v] = sorted[i];\n\
    \        result[ct] = v;\n        if (i + 1 < length)\n            heap.insert(index(ones,\
    \ i + 1));\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfs_2t3sf.d(47): Error: basic type expected, not `[`

    /tmp/tmpfs_2t3sf.d(47): Error: expression expected, not `,`

    /tmp/tmpfs_2t3sf.d(47): Error: found `i` when expecting `]`

    /tmp/tmpfs_2t3sf.d(47): Error: no identifier for declarator `_error_[0]`

    /tmp/tmpfs_2t3sf.d(47): Error: found `]` instead of statement

    /tmp/tmpfs_2t3sf.d(48): Error: basic type expected, not `[`

    /tmp/tmpfs_2t3sf.d(48): Error: expression expected, not `,`

    /tmp/tmpfs_2t3sf.d(48): Error: found `v` when expecting `]`

    /tmp/tmpfs_2t3sf.d(48): Error: no identifier for declarator `_error_[0]`

    /tmp/tmpfs_2t3sf.d(48): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfs_2t3sf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    struct Bin\n    {\n        ulong bin;\n        long num;\n   \
    \ }\n    auto a = arr.dup;\n    a.sort!((a, b) => {\n            auto x = Bin(cast(ulong)a,\
    \ a);\n            auto y = Bin(cast(ulong)b, b);\n            if (a == b)\n \
    \               return 0;\n            if (x.bin.countOnes < y.bin.countOnes)\n\
    \                return -1;\n            if (x.bin.countOnes > y.bin.countOnes)\n\
    \                return 1;\n            return a < b ? -1 : 1;\n        });\n\
    \    return a;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbr4g__zm.d(26): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbr4g__zm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.dup.sort!((a, b) =>\n    {\n        if (a == b)\n \
    \           return 0;\n        int aa = a.countOnes, bb = b.countOnes;\n     \
    \   if (aa == bb)\n            return a > b ? 1 : -1;\n        return aa > bb\
    \ ? 1 : -1;\n    });\n}\n \n/*\n    By slac, but I had to add the -1. I guess\
    \ they considered the 0 case, or something.\n    Or I'm missing something.\n*/\n\
    long[] sort_array(long[] arr) \n{\n    return arr.sort!((a, b) => \n    {\n  \
    \      int aa = a.countOnes, bb = b.countOnes;\n        if (aa == bb)\n      \
    \      return a > b ? 1 : -1;\n        return aa > bb ? 1 : -1;\n    });\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L,\
    \ -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L,\
    \ 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp95gju45v.d(20): Error: no property `sort` for type `long[]`

    /tmp/tmp95gju45v.d(37): Error: no property `sort` for type `long[]`

    /tmp/tmp95gju45v.d(49): Error: `tmp95gju45v.sort_array` called with argument types
    `(long[])` matches both:

    /tmp/tmp95gju45v.d(18):     `tmp95gju45v.sort_array(long[] arr)`

    and:

    /tmp/tmp95gju45v.d(35):     `tmp95gju45v.sort_array(long[] arr)`

    /tmp/tmp95gju45v.d(50): Error: `tmp95gju45v.sort_array` called with argument types
    `(long[])` matches both:

    /tmp/tmp95gju45v.d(18):     `tmp95gju45v.sort_array(long[] arr)`

    and:

    /tmp/tmp95gju45v.d(35):     `tmp95gju45v.sort_array(long[] arr)`

    /tmp/tmp95gju45v.d(51): Error: `tmp95gju45v.sort_array` called with argument types
    `(long[])` matches both:

    /tmp/tmp95gju45v.d(18):     `tmp95gju45v.sort_array(long[] arr)`

    and:

    /tmp/tmp95gju45v.d(35):     `tmp95gju45v.sort_array(long[] arr)`

    /tmp/tmp95gju45v.d(52): Error: `tmp95gju45v.sort_array` called with argument types
    `(void[])` matches both:

    /tmp/tmp95gju45v.d(18):     `tmp95gju45v.sort_array'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    if (arr.length == 0) \n        return arr;\n    \n    ulong[]\
    \ ones = arr.map!(a => a >= 0 ? \n                            a.to!ulong.binaryOneCount()\
    \ : \n                            (a.to!ulong.binaryOneCount()+1UL)*-1UL);\n \
    \   \n    arr.sort!((a, b) => ((ones[a] == ones[b]) ? \n                     \
    \   (a.to!ulong).compare(b.to!ulong) : \n                        ones[a].compare(ones[b])));\n\
    \    \n    return arr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n\
    \    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp15a2keo2.d(23): Error: no property `map` for type `long[]`

    /tmp/tmp15a2keo2.d(27): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15a2keo2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    // Type alias to hold the value and the number of ones\n    alias\
    \ ones_tuple = Tuple!(long, int);\n    // Array of tuples\n    ones_tuple[] ones\
    \ = new ones_tuple[arr.length];\n    // Fill the array with tuples containing\
    \ the value and the number of ones\n    foreach(int i, ref value; arr)\n    {\n\
    \        ones[i] = tuple(value, count(value.toString!(\"%b\"))('1'));\n    }\n\
    \    // Sort the array of tuples based on the number of ones and the decimal value\n\
    \    std.algorithm.sort!((a, b) => (a[1] == b[1]) ? a[0] < b[0] : a[1] < b[1])(ones);\n\
    \    // Return the values\n    return ones.map!(a => a[0]).array;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpat7usda_.d(27): Error: undefined identifier `count`

    /tmp/tmpat7usda_.d(30): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpat7usda_.d(32): Error: no property `map` for type `Tuple!(long, int)[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpat7usda_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    // your code\n    long[] arrSorted = arr.dup;\n    arrSorted.sort!(\
    \ (a, b) => \n    {\n        long aOnes = count(a.to!string.binary.retro.filter!(\
    \ c => c == '1' ));\n        long bOnes = count(b.to!string.binary.retro.filter!(\
    \ c => c == '1' ));\n        return (aOnes == bOnes) ? a - b : aOnes - bOnes;\n\
    \    });\n    return arrSorted;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp94sb0vnk.d(22): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp94sb0vnk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.array\n        .sort!((a, b) => (a == b) ? 0 : (toUnsigned(a).countOnes()\
    \ == toUnsigned(b).countOnes()) ? a.compare(b) : toUnsigned(a).countOnes().compare(toUnsigned(b).countOnes()))\n\
    \        .array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptgny0ooa.d(20): Error: no property `array` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptgny0ooa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    arr.map!(a => a >= 0 ? tuple(a, a.countOnes) : tuple(a, -1))\n\
    \        .sort!((a, b) => a[1] > b[1] || (a[1] == b[1] && a[0] > b[0]))\n    \
    \    .map!(a => a[0]);\n    return arr;\n}\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L,\
    \ 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L,\
    \ -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L, 4L, 5L,\
    \ 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n\
    \    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n\
    \    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n  \
    \  assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf4idt966.d(20): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf4idt966.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    if (arr.length == 0) return arr;\n    static assert(arr.all!(a\
    \ => a >= 0));\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4i0tbzs1.d(22): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4i0tbzs1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.sort!((a, b) => (cast(int)a).countOneBits > (cast(int)b).countOneBits).sort!((a,\
    \ b) => a > b);\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpexr76ak2.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpexr76ak2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    int[] ones = new int[arr.length];\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        int count = 0;\n        for (int j = 0; j < 64; j++)\n\
    \        {\n            long mask = 1L << j;\n            if ((arr[i] & mask)\
    \ == mask)\n                count++;\n        }\n        ones[i] = count;\n  \
    \  }\n    //pairs!\n    auto arrType = typeof(arr);\n    auto[a, b] zipped = zip(ones,\
    \ arr);\n    assert(zipped.length == arr.length);\n    //now sort the pairs\n\
    \    auto[a, b] sorted = sort!((x, y) => x[0] < y[0] || (x[0] == y[0] && x[1]\
    \ < y[1]))(zipped);\n    assert(sorted.length == arr.length);\n    //now unzip\n\
    \    auto[a, b] unzipped = unzip(sorted);\n    //now add back to the arr\n   \
    \ assert(unzipped[1].length == arr.length);\n    return unzipped[1].array;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L,\
    \ -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L,\
    \ 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppsly55j3.d(34): Error: basic type expected, not `[`

    /tmp/tmppsly55j3.d(34): Error: found `,` when expecting `]`

    /tmp/tmppsly55j3.d(34): Error: semicolon expected, not `]`

    /tmp/tmppsly55j3.d(34): Error: found `]` instead of statement

    /tmp/tmppsly55j3.d(37): Error: basic type expected, not `[`

    /tmp/tmppsly55j3.d(37): Error: found `,` when expecting `]`

    /tmp/tmppsly55j3.d(37): Error: semicolon expected, not `]`

    /tmp/tmppsly55j3.d(37): Error: found `]` instead of statement

    /tmp/tmppsly55j3.d(40): Error: basic type expected, not `[`

    /tmp/tmppsly55j3.d(40): Error: found `,` when expecting `]`

    /tmp/tmppsly55j3.d(40): Error: semicolon expected, not `]`

    /tmp/tmppsly55j3.d(40): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppsly55j3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] binArr;\n    long[] decArr;\n    long[] resultArr;\n  \
    \  foreach(obj; arr)\n    {\n        writeln(obj);\n    }\n    foreach(obj; arr)\n\
    \    {\n        writeln(obj);\n    }\n    /*\n    binArr = arr.map!((obj) {return\
    \ obj.toString.length;});\n    decArr = arr.map!((obj) {return obj;});\n    sort(binArr);\n\
    \    sort(decArr);\n    resultArr = zip(binArr, decArr).map!((a) {return a[1];});\n\
    \    */\n    return arr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n\
    \    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp427ft9bs.d(25): Error: `writeln` is not defined, perhaps `import
    std.stdio;` is needed?

    /tmp/tmp427ft9bs.d(29): Error: `writeln` is not defined, perhaps `import std.stdio;`
    is needed?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp427ft9bs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n  return arr.sort!((a, b) { \n    int cmp = countOne(a) - countOne(b);\n\
    \    return cmp == 0 ? (int)a - (int)b : cmp;\n  });\n}\nunittest\n{\n    alias\
    \ candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L,\
    \ -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L,\
    \ 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L,\
    \ 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L,\
    \ 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L,\
    \ 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzxy1chtf.d(22): Error: C style cast illegal, use `cast(int)a`

    /tmp/tmpzxy1chtf.d(22): Error: C style cast illegal, use `cast(int)b`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzxy1chtf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.sort!((a, b) =>\n    {\n        long aones = a.countOnes;\n\
    \        long bones = b.countOnes;\n        return aones == bones\n          \
    \  ? a - b\n            : aones - bones;\n    });\n}\n```\nunittest\n{\n    alias\
    \ candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L,\
    \ -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L,\
    \ 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L,\
    \ 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L,\
    \ 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L,\
    \ 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpufc87_kb.d(29): Error: declaration expected, not `""`

    /tmp/tmpufc87_kb.d(29): Error: unterminated string constant starting at /tmp/tmpufc87_kb.d(29)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpufc87_kb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n\tauto a = arr.dup;\n\ta.sort!(x => x)();\n\treturn a;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbmllbeu0.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbmllbeu0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    if (arr.length == 0)\n        return arr;\n    \n    long[] sorted\
    \ = new long[arr.length];\n    copy(arr, sorted);\n    qsort(sorted);\n    return\
    \ sorted;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_3altpgn.d(24): Error: undefined identifier `copy`, did you mean
    function `cos`?

    /tmp/tmp_3altpgn.d(25): Error: undefined identifier `qsort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3altpgn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{ \n    int len = arr.length;\n    long[] sorted = new long[len];\n \
    \   int[] binary = new int[len];\n    int i = 0;\n    int min_ones;\n    int min_num;\n\
    \    int index;\n    int num_ones;\n    while(i < len)\n    {\n        binary[i]\
    \ = arr[i].to!string().count('1');\n        i++;\n    }\n    i = 0;\n    while(i\
    \ < len)\n    {\n        min_ones = binary[i];\n        min_num = arr[i];\n  \
    \      index = i;\n        for(int j = i; j < len; j++)\n        {\n         \
    \   num_ones = binary[j];\n            if(num_ones < min_ones)\n            {\n\
    \                min_ones = num_ones;\n                min_num = arr[j];\n   \
    \             index = j;\n            }\n            else if(num_ones == min_ones)\n\
    \            {\n                if(arr[j] < min_num)\n                {\n    \
    \                min_num = arr[j];\n                    index = j;\n         \
    \       }\n            }\n        }\n        sorted[i] = min_num;\n        arr[index]\
    \ = arr[i];\n        binary[index] = binary[i];\n        i++;\n    }\n    return\
    \ sorted;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphrykuhx5.d(20): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmphrykuhx5.d(30): Error: no property `to` for type `long`

    /tmp/tmphrykuhx5.d(37): Error: cannot implicitly convert expression `arr[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmphrykuhx5.d(45): Error: cannot implicitly convert expression `arr[cast(ulong)j]`
    of type `long` to `int`

    /tmp/tmphrykuhx5.d(52): Error: cannot implicitly convert expression `arr[cast(ulong)j]`
    of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphrykuhx5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto tuple = arr.map!(x => tuple(x, countOnes(x)));\n    tuple.sort!((a,\
    \ b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return tuple.map!(x\
    \ => x[0]).array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjftiylt5.d(20): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjftiylt5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n     auto r = arr.map!(a => tuple(a, a.popCount, __ctfe ? 0 : a.leadingZeros)).sort!((a,\
    \ b) => a[1] < b[1] || (a[1] == b[1] && a[2] < b[2]));\n     return r.map!(a =>\
    \ a[0]).array;\n}\n```\nunittest\n{\n    alias candidate = sort_array;\n\n   \
    \ assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc3w2zf83.d(23): Error: declaration expected, not `""`

    /tmp/tmpc3w2zf83.d(23): Error: unterminated string constant starting at /tmp/tmpc3w2zf83.d(23)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3w2zf83.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto max = arr.max();\n    auto newarr = arr.dup;\n    newarr.sort!((x,\
    \ y) => {\n        auto xcount = x.countOnes;\n        auto ycount = y.countOnes;\n\
    \        return xcount > ycount ? 1 :\n            xcount < ycount ? -1 :\n  \
    \          x > y ? 1 : -1;\n    });\n    return newarr;\n}\nunittest\n{\n    alias\
    \ candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L,\
    \ -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L,\
    \ 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L,\
    \ 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L,\
    \ 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L,\
    \ 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6s39n4qi.d(20): Error: no property `max` for type `long[]`

    /tmp/tmp6s39n4qi.d(22): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6s39n4qi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    alias Bin = typeof(arr[0].toString(2));\n    struct MyInt\n  \
    \  {\n        long value;\n        long one_count;\n        Bin bin;\n       \
    \ string toString()\n        {\n            return this.value.toString;\n    \
    \    }\n    }\n    MyInt[] list = new MyInt[];\n    foreach(x; arr)\n    {\n \
    \       Bin bin = x.toString(2);\n        MyInt num = MyInt(x, bin.count(\"1\"\
    ), bin);\n        list ~= num;\n    }\n    auto(a, b) =>\n    {\n        if(a.one_count\
    \ == b.one_count)\n        {\n            return a.value < b.value;\n        }\n\
    \        return a.one_count < b.one_count;\n    };\n    list.sort!(auto).array();\n\
    \    return arr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjquibnuk.d(38): Error: basic type expected, not `(`

    /tmp/tmpjquibnuk.d(38): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpjquibnuk.d(38): Error: no identifier for declarator `_error_(a, b)`

    /tmp/tmpjquibnuk.d(38): Error: semicolon expected following function declaration

    /tmp/tmpjquibnuk.d(38): Error: found `=>` instead of statement

    /tmp/tmpjquibnuk.d(44): Error: declaration expected, not `return`

    /tmp/tmpjquibnuk.d(45): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjquibnuk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    // Your code here\n    enum DecimalValue = DecimalValue;\n   \
    \ enum BinaryValue = BinaryValue;\n    struct DecimalAndBinary\n    {\n      \
    \  long DecimalValue;\n        long BinaryValue;\n    }\n    auto firstCompare\
    \ = (a, b) => a.BinaryValue > b.BinaryValue;\n    auto secondCompare = (a, b)\
    \ => a.DecimalValue > b.DecimalValue;\n    auto arrWithBinary = arr.map!(x =>\
    \ DecimalAndBinary(x, to!ulong(x)));\n    arrWithBinary.sort!(firstCompare);\n\
    \    arrWithBinary.sort!(secondCompare);\n    auto sortedArr = arrWithBinary.map!(x\
    \ => x.DecimalValue);\n    return sortedArr;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30j88upc.d(21): Error: undefined identifier `DecimalValue`

    /tmp/tmp30j88upc.d(22): Error: undefined identifier `BinaryValue`

    /tmp/tmp30j88upc.d(28): Error: variable `tmp30j88upc.sort_array.firstCompare`
    type `void` is inferred from initializer `(a, b) => a.BinaryValue > b.BinaryValue`,
    and variables cannot be of type `void`

    /tmp/tmp30j88upc.d(28): Error: template lambda has no value

    /tmp/tmp30j88upc.d(29): Error: variable `tmp30j88upc.sort_array.secondCompare`
    type `void` is inferred from initializer `(a, b) => a.DecimalValue > b.DecimalValue`,
    and variables cannot be of type `void`

    /tmp/tmp30j88upc.d(29): Error: template lambda has no value

    /tmp/tmp30j88upc.d(30): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30j88upc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    struct Holder\n    {\n        long a;\n        int i;\n    }\n\
    \    auto comp = (a, b) {\n        if (a.i < b.i)\n            return true;\n\
    \        else if (a.i > b.i)\n            return false;\n        else\n      \
    \      return a.a < b.a;\n    };\n    long[] res;\n    res.length = arr.length;\n\
    \    long[] temp;\n    temp.length = arr.length;\n    Holder[] holder;\n    holder.length\
    \ = arr.length;\n    for (long i = 0; i < arr.length; i++)\n    {\n        temp[i]\
    \ = arr[i];\n        holder[i].a = arr[i];\n        holder[i].i = 0;\n       \
    \ while (temp[i] != 0)\n        {\n            if (temp[i] % 2 == 1)\n       \
    \         holder[i].i++;\n            temp[i] /= 2;\n        }\n    }\n    std.algorithm.sort(holder,\
    \ comp);\n    for (long i = 0; i < arr.length; i++)\n        res[i] = holder[i].a;\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu1ak0cq2.d(25): Error: variable `tmpu1ak0cq2.sort_array.comp` type
    `void` is inferred from initializer `(a, b)

    {

    if (a.i < b.i)

    return true;

    else if (a.i > b.i)

    return false;

    else

    return a.a < b.a;

    }

    `, and variables cannot be of type `void`

    /tmp/tmpu1ak0cq2.d(25): Error: template lambda has no value

    /tmp/tmpu1ak0cq2.d(51): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu1ak0cq2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto a = arr.dup;\n    a.sort!((a, b) =>\n    {\n        import\
    \ std.format;\n        auto ans = format(\"%s\", to!string(a.to!ulong.binary)).split(\"\
    0\").reduce!((r, c) => r + c.length).length -\n            format(\"%s\", to!string(b.to!ulong.binary)).split(\"\
    0\").reduce!((r, c) => r + c.length).length;\n        if (ans == 0)\n        \
    \    ans = a - b;\n        return ans;\n    });\n    return a;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq70b5rvv.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq70b5rvv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.sort(l => tuple(l.countOneBits, l));\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_78k9m41.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_78k9m41.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    int[] nums = arr.map!( a => a.to!int ).array;\n    int[] sortedOnes;\n\
    \    int[] sortedVal;\n    alias pred = (a, b) => countOnes(a) < countOnes(b);\n\
    \    sortedOnes = nums.dup.shellSort!pred.array;\n    sortedVal = nums.dup.shellSort!((a,\
    \ b) => a < b).array;\n    for (int i = 0; i < sortedOnes.length; i++)\n    {\n\
    \        if (countOnes(sortedOnes[i]) == countOnes(sortedVal[i]))\n        {\n\
    \            continue;\n        }\n        else\n        {\n            sortedOnes[i]\
    \ = sortedVal[i];\n        }\n    }\n    return sortedOnes.map!( a => a.to!long\
    \ ).array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvy96d7e3.d(20): Error: no property `map` for type `long[]`

    /tmp/tmpvy96d7e3.d(24): Error: no property `shellSort` for type `int[]`

    /tmp/tmpvy96d7e3.d(25): Error: no property `shellSort` for type `int[]`

    /tmp/tmpvy96d7e3.d(28): Error: undefined identifier `countOnes`

    /tmp/tmpvy96d7e3.d(28): Error: undefined identifier `countOnes`

    /tmp/tmpvy96d7e3.d(37): Error: no property `map` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvy96d7e3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    // Type your code here\n    ulong[] array = new ulong[arr.length];\n\
    \    foreach(long i, index; arr)\n    {\n        ulong u = cast(ulong) i;\n  \
    \      array[index] = u;\n    }\n    return sortBits_u(array);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkvc6aalc.d(27): Error: undefined identifier `sortBits_u`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkvc6aalc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    int sz = arr.length;\n    ulong[] uarr = new ulong[sz];\n    for\
    \ (int i = 0; i < sz; i++)\n        uarr[i] = cast(ulong)arr[i];\n    \n    TypeTuple!(int,\
    \ ulong)[] nums = new TypeTuple!(int, ulong)[sz];\n    foreach (i, num; uarr)\n\
    \    {\n        ulong numm = num;\n        int ones = 0;\n        while (numm\
    \ > 0)\n        {\n            ones += cast(int)(numm & 1);\n            numm\
    \ >>= 1;\n        }\n        nums[i] = TypeTuple!(int, ulong)(ones, num);\n  \
    \  }\n    \n    nums.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] < b[1]));\n\
    \    \n    for (int i = 0; i < sz; i++)\n        uarr[i] = nums[i][1];\n    \n\
    \    for (int i = 0; i < sz; i++)\n        arr[i] = cast(long)uarr[i];\n    \n\
    \    return arr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpok2pkmg6.d(20): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmpok2pkmg6.d(25): Error: template instance `TypeTuple!(int, ulong)` template
    `TypeTuple` is not defined

    /tmp/tmpok2pkmg6.d(25): Error: template instance `TypeTuple!(int, ulong)` template
    `TypeTuple` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpok2pkmg6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    arr = arr.map!(x => typeof(return)(countOnesInNum(x), x)).sort().map!(x\
    \ => x[1]).array();\n    return arr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbxjrix37.d(20): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbxjrix37.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n  import std.algorithm;\n  import std.string;\n  import std.algorithm\
    \ : sort;\n  import std.array : array;\n  //return arr.sort!((a, b) => a.to!string.count('1')\
    \ < b.to!string.count('1') || a.to!string.count('1') == b.to!string.count('1')\
    \ && a < b);\n  return arr.sort!((a, b) => a.to!string.count('1') < b.to!string.count('1')\
    \ || a.to!string.count('1') == b.to!string.count('1') && a < b);\n  //return arr.sort!((a,\
    \ b) => cast(dchar)(a.to!string.count('1')) < cast(dchar)(b.to!string.count('1'))\
    \ || cast(dchar)(a.to!string.count('1')) == cast(dchar)(b.to!string.count('1'))\
    \ && a < b);\n}\n/*\ndef sort_array(arr):\n    return sorted(arr, key=lambda i:\
    \ (bin(i).count('1'), i))\n*/\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfxj_dwrc.d(25): Error: no property `to` for type `long`

    /tmp/tmpfxj_dwrc.d(25): Error: no property `to` for type `long`

    /tmp/tmpfxj_dwrc.d(25): Error: no property `to` for type `long`

    /tmp/tmpfxj_dwrc.d(25): Error: no property `to` for type `long`

    /tmp/tmpfxj_dwrc.d(25):        instantiated from here: `sort!((a, b) => a.to!string.count(''1'')
    < b.to!string.count(''1'') || a.to!string.count(''1'') == b.to!string.count(''1'')
    && (a < b), cast(SwapStrategy)0, long[])`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/sorting.d(1875):
    Error: static assert:  "Invalid predicate passed to sort: __lambda2"

    /tmp/tmpfxj_dwrc.d(25):        instantiated from here: `sort!((a, b) => a.to!string.count(''1'')
    < b.to!string.count(''1'') || a.to!string.count(''1'') == b.to!string.count(''1'')
    && (a < b), cast(SwapStrategy)0, long[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxj_dwrc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] result = arr.dup;\n    foreach(i, ref e; result)\n    {\n\
    \        if(e < 0)\n            e = -e;\n    }\n    sort(result, (x, y) => tuple(popCount(x),\
    \ x) < tuple(popCount(y), y));\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L,\
    \ -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L,\
    \ 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L,\
    \ 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L,\
    \ 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L,\
    \ 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprmc6xyz_.d(26): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprmc6xyz_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto result = arr.dup;\n    result.sort!((a, b) =>\n    {\n  \
    \      ulong ua = cast(ulong)a;\n        ulong ub = cast(ulong)b;\n        if\
    \ (popCount(ua) == popCount(ub))\n            return a - b;\n        return popCount(ua)\
    \ - popCount(ub);\n    });\n    return result;\n}\n/*\n    Other solutions\n \
    \   auto sort_array = (arr) => arr.copy.sort((a, b) => popCount(a) == popCount(b)\
    \ ? a - b : popCount(a) - popCount(b));\n    auto sort_array = (arr) => arr.sort((a,\
    \ b) => b == a ? 0 : popCount(a) == popCount(b) ? a - b : popCount(a) - popCount(b));\n\
    \    auto sort_array = (arr) => arr.sort((a, b) => popCount(a) == popCount(b)\
    \ ? a - b : popCount(a) - popCount(b));\n    auto sort_array = (arr) => arr.sort((a,\
    \ b) => popCount(a) == popCount(b) ? a - b : a < b ? -1 : 1);\n    auto sort_array\
    \ = (arr) => arr.sort((a, b) => popCount(a) == popCount(b) ? a - b : popCount(a)\
    \ - popCount(b));\n    auto sort_array = (arr) => arr.sort((a, b) => popCount(a)\
    \ == popCount(b) ? a - b : popCount(a) - popCount(b));\n    auto sort_array =\
    \ (arr) => arr.sort((a, b) => popCount(a) == popCount(b) ? a - b : popCount(a)\
    \ - popCount(b));\n    auto sort_array = (arr) => arr.sort((a, b) => popCount(a)\
    \ == popCount(b) ? a - b : popCount(a) - popCount(b));\n    auto sort_array =\
    \ (arr) => arr.sort((a, b) => popCount(a\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpell3t13n.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpell3t13n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] newArr = arr.dup;\n    sort!((a, b) => countOnes(a) < countOnes(b)\
    \ || (countOnes(a) == countOnes(b) && a < b))(newArr);\n    return newArr;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L,\
    \ -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L,\
    \ 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8uaqx3a.d(21): Error: template instance `sort!((a, b) => countOnes(a)
    < countOnes(b) || countOnes(a) == countOnes(b) && (a < b))` template `sort` is
    not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8uaqx3a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    /*\n        Work out the significant bit based on the largest\
    \ number\n        so we know how many iterations we're going to be doing.\n  \
    \  */\n    long largest = arr.max();\n    long sigBit = log2(largest).round;\n\
    \    long[] sorted = arr.dup;\n    long[] working = arr.dup;\n    long[] tmp =\
    \ new long[arr.length];\n    long[] bins = [1L, 2L, 4L, 8L, 16L, 32L, 64L, 128L,\
    \ 256L, 512L, 1024L, 2048L, 4096L, 8192L, 16384L, 32768L, 65536L, 131072L, 262144L,\
    \ 524288L, 1048576L, 2097152L, 4194304L, 8388608L, 16777216L, 33554432L, 67108864L,\
    \ 134217728L, 268435456L, 536870912L, 1073741824L, 2147483648L, 4294967296L, 8589934592L,\
    \ 17179869184L, 34359738368L, 68719476736L, 137438953472L, 274877906944L, 549755813888L,\
    \ 1099511627776L, 2199023255552L, 4398046511104L, 8796093022208L, 17592186044416L,\
    \ 35184372088832L, 70368744177664L, 140737488355328L, 281474976710656L, 562949953421312L,\
    \ 1125899906842624L, 2251799813685248L, 4503599627370496L, 9007199254740992L,\
    \ 18014398509481984L, 36028797018963968L, 72057594037927936L, 144115188075855872L,\
    \ 288230376151711744L, 576460752303423488L, 1152921504606846976L, 2305843009213693952L,\
    \ 4611686018427387904L, 9223372036854775808L];\n   \nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeowr2axn.d(29): Error: signed integer overflow

    /tmp/tmpeowr2axn.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeowr2axn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    Tuple!(int,int)[ ] tuples = new Tuple!(int,int)[ arr.length ];\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        tuples[i] = tuple(std.bitmanip.popCount(arr[i]),\
    \ arr[i]);\n    }\n    sort(tuples, (t1, t2) =>\n    {\n        if(t1[0] == t2[0])\n\
    \            return t1[1] - t2[1];\n        return t1[0] - t2[0];\n    });\n \
    \   long[] ret = new long[tuples.length];\n    for(int i = 0; i < tuples.length;\
    \ i++)\n    {\n        ret[i] = tuples[i][1];\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgi5b76l6.d(23): Error: undefined identifier `bitmanip` in package
    `std`

    /tmp/tmpgi5b76l6.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgi5b76l6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    size_t[] ones;\n    ones.length = arr.length;\n    for (size_t\
    \ i = 0; i < arr.length; i++)\n    {\n        ones[i] = countOnes(arr[i]);\n \
    \   }\n    sort!(i => ones[i], \"a < b\")(arr);\n    return arr;\n}\nsize_t countOnes(long\
    \ n)\n{\n    size_t counter = 0;\n    foreach(i; 0..64)\n    {\n        if (n\
    \ & 1 == 1)\n            counter++;\n        n = n >> 1;\n    }\n    return counter;\n\
    }\n/*\n    This is solution using tuple\n*/\nauto sort_array2(long[] arr)\n{\n\
    \    auto oneCount = arr.map!(n => tuple(n, countOnes(n)));\n    sort!((a, b)\
    \ => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]))(oneCount);\n    return oneCount.map!(t\
    \ => t[0]);\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5z4h4ckl.d(34): Error: `1 == 1` must be parenthesized when next
    to operator `&`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5z4h4ckl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.map!(a => typeof(a).init(a.countOneBits, a))\n    \
    \    .sort!((a, b) => a[0] < b[0] || a[0] == b[0] && a[1] < b[1])\n        .map!(a\
    \ => a[1]).array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdz2tfz58.d(20): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdz2tfz58.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    // This will be the array we return\n    long[] sortedArray =\
    \ new long[arr.length];\n    // This will be the struct we sort from\n    struct\
    \ numberOnes\n    {\n        long number;\n        long ones;\n    }\n    // This\
    \ will be the array we sort\n    numberOnes[] numberAndOnes = new numberOnes[arr.length];\n\
    \    //  Add the numbers and their number of ones to the array\n    for (int i\
    \ = 0; i < arr.length; i++)\n    {\n        numberAndOnes[i].number = arr[i];\n\
    \        numberAndOnes[i].ones = 0;\n        if (arr[i] >= 0)\n        {\n   \
    \         int number = cast(int) arr[i];\n            while (number != 0)\n  \
    \          {\n                numberAndOnes[i].ones += number & 1;\n         \
    \       number >>= 1;\n            }\n        }\n    }\n    // Sort the array\
    \ from low to high with the number of ones\n    sort(numberAndOnes);\n    // Add\
    \ the numbers to the sorted array\n    for (int i = 0; i < numberAndOnes.length;\
    \ i++)\n    {\n        sortedArray[i] = numberAndOnes[i].number;\n    }\n    return\
    \ sortedArray;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzktv_w09.d(46): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzktv_w09.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto f = (lhs, rhs) {\n        auto lhsCount = lhs.countOnes;\n\
    \        auto rhsCount = rhs.countOnes;\n        if (lhsCount == rhsCount) {\n\
    \            return lhs < rhs;\n        }\n        return lhsCount < rhsCount;\n\
    \    };\n    auto a = arr.sort(f);\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3x6p6kcw.d(20): Error: variable `tmp3x6p6kcw.sort_array.f` type
    `void` is inferred from initializer `(lhs, rhs)

    {

    auto lhsCount = lhs.countOnes;

    auto rhsCount = rhs.countOnes;

    if (lhsCount == rhsCount)

    {

    return lhs < rhs;

    }

    return lhsCount < rhsCount;

    }

    `, and variables cannot be of type `void`

    /tmp/tmp3x6p6kcw.d(20): Error: template lambda has no value

    /tmp/tmp3x6p6kcw.d(28): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3x6p6kcw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto compare = (long a, long b) {\n        long nAOnes = countOnes(a);\n\
    \        long nBOnes = countOnes(b);\n        return nAOnes == nBOnes ? a.compare(b)\
    \ : nAOnes.compare(nBOnes);\n    };\n    arr.sort(compare);\n    return arr;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfnj6moki.d(21): Error: undefined identifier `countOnes`

    /tmp/tmpfnj6moki.d(22): Error: undefined identifier `countOnes`

    /tmp/tmpfnj6moki.d(23): Error: no property `compare` for type `long`

    /tmp/tmpfnj6moki.d(23): Error: no property `compare` for type `long`

    /tmp/tmpfnj6moki.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfnj6moki.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    arr.sort!((a, b) {\n        if (a < 0)\n            return -1;\n\
    \        if (b < 0)\n            return 1;\n        auto aa = countOnes(a);\n\
    \        auto bb = countOnes(b);\n        if (aa < bb)\n            return -1;\n\
    \        if (aa > bb)\n            return 1;\n        return a < b ? -1 : 1;\n\
    \    });\n    return arr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpylt9wm46.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpylt9wm46.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    int[] mas1 = new int[arr.length];\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        mas1[i] = to!int(to!string(arr[i], 2).count(\"1\"));\n\
    \    }\n    int[] mas2 = arr.dup;\n    sort(mas1);\n    sort(mas2);\n    ulong[]\
    \ mas3 = new ulong[arr.length];\n    for (int i = 0; i < arr.length; i++)\n  \
    \  {\n        mas3[i] = arr[i];\n    }\n    sort(mas3);\n    tuple!(int, long)[]\
    \ mas4 = new tuple!(int, long)[arr.length];\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        mas4[i] = tuple(mas1[i], mas2[i]);\n    }\n    int count\
    \ = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        mas4[i] = tuple(mas1[i],\
    \ mas2[i]);\n        for (int j = 0; j < arr.length; j++)\n        {\n       \
    \     if (mas1[i] == mas1[j] && mas2[i] != mas2[j])\n            {\n         \
    \       count++;\n            }\n        }\n    }\n    long[] mas5 = new long[arr.length];\n\
    \    int[] mas6 = new int[arr.length];\n    if (count == 0)\n    {\n        mas5\
    \ = mas2;\n    }\n    else\n    {\n        for (int i = 0; i < arr.length; i++)\n\
    \        {\n            for (int j = 0; j < arr.length; j++)\n            {\n\
    \                if (mas4[i][0] == mas4[j][0] && mas4[i][1] != mas4[j][1])\n \
    \               {\n                    mas6[i] = to!int(mas4[i][0]);\n       \
    \             mas5[i] = mas4[i][1];\n                }\n            }\n      \
    \  }\n        for (int i =\nunittest\n{\n    alias candidate = sort_array;\n\n\
    \    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2_6ym6zc.d(71): Error: expression expected, not `unittest`

    /tmp/tmp2_6ym6zc.d(72): Error: semicolon expected, not `{`

    /tmp/tmp2_6ym6zc.d(84): Error: found `void` when expecting `;` following `for`
    condition

    /tmp/tmp2_6ym6zc.d(84): Error: found `{` when expecting `)`

    /tmp/tmp2_6ym6zc.d(84): Error: found `}` instead of statement

    /tmp/tmp2_6ym6zc.d(84): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_6ym6zc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.sort!((x, y) => \n    {\n        auto a = x.to!string(2),\
    \ b = y.to!string(2);\n        return a.count('1') == b.count('1') ? x < y : a.count('1')\
    \ < b.count('1');\n    });\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg6fbxcb_.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg6fbxcb_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[][] tmp = arr.map!(item => [item, item.countOnes()])();\n\
    \    tmp.sort!((x, y) => \n    (\n        x[1] < y[1] ? -1 :\n        x[1] > y[1]\
    \ ? 1 :\n        x[0] < y[0] ? -1 :\n        x[0] > y[0] ? 1 : 0\n    ));\n  \
    \  return tmp.map!(item => item[0])();\n}\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L,\
    \ 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L,\
    \ -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L, 4L, 5L,\
    \ 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n\
    \    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n\
    \    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n  \
    \  assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl26a6ymb.d(20): Error: no property `map` for type `long[]`

    /tmp/tmpl26a6ymb.d(21): Error: no property `sort` for type `long[][]`

    /tmp/tmpl26a6ymb.d(28): Error: no property `map` for type `long[][]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl26a6ymb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto pairs = zip(arr, arr.map!(a => bits(a).count));\n    return\
    \ pairs.sort(a => a[1]).map!(a => a[0]).array;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu800l3u7.d(20): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu800l3u7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto numbers = arr.map!(n => tuple(n, countOnes(n))).sort!((a,\
    \ b) => (a[1] < b[1] || (a[1] == b[1] && a[0] < b[0])));\n    return numbers.map!(a\
    \ => a[0]).array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyrld0c53.d(20): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyrld0c53.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    if (arr.length == 0) return arr;\n    arr = arr.dup;\n    uint\
    \ num_ones(ulong _x)\n    {\n        ulong x = _x;\n        ulong res = 0;\n \
    \       for (; x != 0; x >>= 1) res += (x & 1);\n        return res;\n    }\n\
    \    sort!((x, y) => num_ones(x) < num_ones(y) || (num_ones(x) == num_ones(y)\
    \ && x < y))(arr);\n    return arr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqm00xhmu.d(27): Error: cannot implicitly convert expression `res`
    of type `ulong` to `uint`

    /tmp/tmpqm00xhmu.d(29): Error: template instance `sort!((x, y) => num_ones(x)
    < num_ones(y) || num_ones(x) == num_ones(y) && (x < y))` template `sort` is not
    defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqm00xhmu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n  if (arr.length < 2)\n    return arr;\n  long[] ones = new long[arr.length];\n\
    \  foreach (index, item; arr)\n  {\n    ones[index] = item.countOnes;\n  }\n \
    \ return sort!((x, y) => x < y) (arr, ones);\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsczi9dd5.d(25): Error: no property `countOnes` for type `long`

    /tmp/tmpsczi9dd5.d(27): Error: template instance `sort!((x, y) => x < y)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsczi9dd5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return new typeof(arr).dup\n    (\n        arr\n        .map!(a\
    \ => tuple(a, count(a.to!string(2), '1')))\n        .sort!(a => a[1] == b[1] ?\
    \ a[0] > b[0] : a[1] > b[1])\n        .map!(a => a[0])\n    );\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt9ddylvy.d(20): Error: no property `dup` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt9ddylvy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto bit_set_tuple = zip(arr, map!(a => bitset(a))(arr));\n  \
    \  auto bit_set_tuple_by_ones = std.algorithm.sort!(\n        \"a.second.count()\
    \ < b.second.count() || a.second.count() == b.second.count() && a.first < b.first\"\
    )(bit_set_tuple);\n    return map!(a => a.first)(bit_set_tuple_by_ones);\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L,\
    \ -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L,\
    \ 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb5gk5quj.d(20): Error: undefined identifier `zip`

    /tmp/tmpb5gk5quj.d(21): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpb5gk5quj.d(23): Error: template instance `map!((a) => a.first)` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb5gk5quj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.sort!((a, b) { \n        if (count(a) == count(b))\
    \ \n            return a.compare(b);\n        return count(a).compare(count(b));\n\
    \    });\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyrni127n.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyrni127n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] res = arr.dup;\n    res.sort( (long a, long b) =>\n   \
    \ {\n        auto a_ones = std.bitmanip.countOnes( a );\n        auto b_ones =\
    \ std.bitmanip.countOnes( b );\n        return a_ones == b_ones ? a - b : a_ones\
    \ - b_ones;\n    });\n    return res;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpks8stx7v.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpks8stx7v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] result = new long[arr.length];\n    Tuple!(int, long)[]\
    \ tuples = new Tuple!(int, long)[arr.length];\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        int num = int.init;\n        long bits = arr[i];\n        while\
    \ (bits != 0) {\n            if ((bits & 1) == 1) num++;\n            bits >>=\
    \ 1;\n        }\n        tuples[i] = tuple(num, arr[i]);\n    }\n    tuples.sort!((a,\
    \ b) => a[0] > b[0] || (a[0] == b[0] && a[1] > b[1]));\n    foreach (i, t; tuples)\
    \ {\n        result[i] = t[1];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L])\
    \ == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) ==\
    \ [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L,\
    \ 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcg94792z.d(31): Error: no property `sort` for type `Tuple!(int,
    long)[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcg94792z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    //typeof(arr) res;\n    long[] res;\n    int cnt;\n    res = arr.dup;\n\
    \    size_t  len = res.length;\n    if (len == 0)\n        return res;\n    int[]\
    \ ones;\n    ones = new int[len];\n    foreach (int i, long e; arr)\n    {\n \
    \       cnt = 0;\n        foreach (byte b; cast(ubyte)e)\n        {\n        \
    \    cnt += (int)b & 1;\n        }\n        ones[i] = cnt;\n    }\n    //std.algorithm.sort!(\"\
    a == b ? a < b : x < y\")(res, ones);\n    std.algorithm.sort!((a, b) => a ==\
    \ b ? a < b : x < y)(res, ones);\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdw0u6p8g.d(34): Error: C style cast illegal, use `cast(int)b`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdw0u6p8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto positions = std.typecons.tuple(0L, 0L);\n    long[] init_arr\
    \ = arr.dup;\n    auto counter = positions[0];\n    foreach(num; arr) {\n    \
    \    // number, count, original_position\n        arr[counter] = std.typecons.tuple(num,\
    \ std.algorithm.count(std.to!string(binary(num)), \"1\"), counter);\n        counter++;\n\
    \    }\n    // Count ones and sort by them.\n    // If the count of ones are equal\
    \ then sort by the original value of the number.\n    // Also replace the value\
    \ back to the original value.\n    arr.sort!((a, b) => a[1] > b[1] || (a[1] ==\
    \ b[1] && init_arr[a[2]] > init_arr[b[2]]))\n        .map!(t => t[0]);\n    return\
    \ arr;\n}\n/*\n    This is a simple series where the \"nth\" term is defined as\
    \ the \n    nth term in the Fibonacci sequence where the first 2 numbers are 0\
    \ and 1.\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjailjzoh.d(35): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjailjzoh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    ulong[] uint_arr = new ulong[];\n    foreach(long e; arr)\n  \
    \  {\n        assert(e >= 0);\n        uint_arr ~= cast(ulong)e;\n    }\n    auto\
    \ p_arr = pack!((x, y) => ulong[x, y])(\n        uint_arr,\n        uint_arr.map!(num\
    \ => cast(ulong)Integer.toBinaryString(num).count('1'))\n    );\n    p_arr.sort!(\n\
    \        (x, y) => x[1] < y[1] || (x[1] == y[1] && x[0] < y[0])\n    );\n    return\
    \ p_arr.map!(x => cast(long)x[0]).array;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2rqjj8e8.d(26): Error: found `[` when expecting `.` following ulong

    /tmp/tmp2rqjj8e8.d(26): Error: found `]` when expecting `)` following template
    argument list

    /tmp/tmp2rqjj8e8.d(26): Error: semicolon expected following auto declaration,
    not `)`

    /tmp/tmp2rqjj8e8.d(26): Error: found `)` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2rqjj8e8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    sort!((a, b) => std.math.popCount(a) < std.math.popCount(b))(arr);\n\
    \    sort!((a, b) => std.math.popCount(a) == std.math.popCount(b) && a < b)(arr);\n\
    \    return arr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe47gm252.d(20): Error: template instance `sort!((a, b) => std.math.popCount(a)
    < std.math.popCount(b))` template `sort` is not defined, did you mean sqrt?

    /tmp/tmpe47gm252.d(21): Error: template instance `sort!((a, b) => std.math.popCount(a)
    == std.math.popCount(b) && (a < b))` template `sort` is not defined, did you mean
    sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe47gm252.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    size_t num_ones(long value)\n    {\n        size_t count = 0;\n\
    \        while (value != 0)\n        {\n            value &= value - 1;\n    \
    \        count++;\n        }\n        return count;\n    }\n    long[] ret = arr.dup;\n\
    \    std.algorithm.sort!(a => num_ones(a), (a, b) => a < b)(ret);\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr7sn0lfd.d(31): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr7sn0lfd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    struct type {\n        long val;\n        uint ones;\n    }\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L,\
    \ -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L,\
    \ 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptgklb7j6.d(24): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptgklb7j6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.dup.sort!((a, b) => \n    {\n        const long aa\
    \ = a, bb = b;\n        auto[aones, bones] = tuple(aa.countOnes, bb.countOnes);\n\
    \        if (aones != bones) return aones < bones;\n        return aa < bb;\n\
    \    });\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphk4kwcm4.d(23): Error: basic type expected, not `[`

    /tmp/tmphk4kwcm4.d(23): Error: found `,` when expecting `]`

    /tmp/tmphk4kwcm4.d(23): Error: semicolon expected, not `]`

    /tmp/tmphk4kwcm4.d(23): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphk4kwcm4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    qsort(arr);\n    return arr;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgzgiakm9.d(20): Error: undefined identifier `qsort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgzgiakm9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    struct SortNums\n    {\n        ulong num;\n        ulong numOnes;\n\
    \        this(ulong num) \n        {\n            this.num = num;\n          \
    \  numOnes = num.onesCount;\n        }\n        bool opEquals(SortNums rhs)\n\
    \        {\n            return num == rhs.num;\n        }\n        bool opCmp(SortNums\
    \ rhs)\n        {\n            if (numOnes == rhs.numOnes)\n                return\
    \ num < rhs.num;\n            return numOnes < rhs.numOnes;\n        }\n    }\n\
    \    long[] ret = new long[arr.length];\n    auto nums = arr.map!(n => SortNums(n));\n\
    \    nums.sort;\n    foreach (i, n; nums)\n        ret[i] = n.num;\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphsupaw2l.d(27): Error: no property `onesCount` for type `ulong`

    /tmp/tmphsupaw2l.d(41): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphsupaw2l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto bits = arr.map!(a => typeof(return)(a).countOnes());\n  \
    \  sort(arr, (a, b) => ((a > b) ? bits[a] - bits[b] : a - b));\n    return arr;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97qbc0cd.d(20): Error: no property `map` for type `long[]`

    /tmp/tmp97qbc0cd.d(21): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97qbc0cd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    const size_t n = arr.length;\n    if (n < 2)\n        return arr;\n\
    \    auto ones_counts = array(arr.length, (long i) => \n        arr[i] == 0 ?\
    \ 0 : \n        arr[i] < 0 ? -1 : \n        (int)(log2(arr[i]) + 1) - countOneBits(arr[i])\n\
    \    );\n    /*\n    for (int i = 0; i < arr.length; i++)\n    {\n        ones_counts[i]\
    \ = arr[i] == 0 ? 0 : \n            arr[i] < 0 ? -1 : \n            (int)(log2(arr[i])\
    \ + 1) - countOneBits(arr[i]);\n    }\n    */\n    auto swap_arr = [](long[] arr,\
    \ size_t i, size_t j)\n    {\n        if (i == j)\n            return;\n     \
    \   long temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n  \
    \  };\n    auto swap_ones_counts = [](long[] ones_counts, size_t i, size_t j)\n\
    \    {\n        if (i == j)\n            return;\n        long temp = ones_counts[i];\n\
    \        ones_counts[i] = ones_counts[j];\n        ones_counts[j] = temp;\n  \
    \  };\n    for (int i = 0; i < n - 1; i++)\n    {\n        for (int j = i + 1;\
    \ j < n; j++)\n        {\n            if (ones_counts[i] > ones_counts[j])\n \
    \           {\n                swap_arr(arr, i, j);\n                swap_ones_counts(ones_counts,\
    \ i, j);\n            }\n            else if (ones_counts[i] == ones_counts[j])\n\
    \            {\n                if (arr[i] > arr[j])\n                {\n    \
    \                swap_arr(arr, i, j);\n                    swap_ones_counts(ones_counts,\
    \ i, j);\n                }\nunittest\n{\n    alias candidate = sort_array;\n\n\
    \    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnv5r11na.d(26): Error: C style cast illegal, use `cast(int)(log2(arr[i])
    + 1)`

    /tmp/tmpnv5r11na.d(36): Error: found `[` when expecting `.` following long

    /tmp/tmpnv5r11na.d(36): Error: found `]` when expecting identifier following `long`.

    /tmp/tmpnv5r11na.d(36): Error: found `arr` when expecting `,`

    /tmp/tmpnv5r11na.d(36): Error: expression expected, not `,`

    /tmp/tmpnv5r11na.d(36): Error: found `size_t` when expecting `,`

    /tmp/tmpnv5r11na.d(36): Error: found `j` when expecting `,`

    /tmp/tmpnv5r11na.d(37): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpnv5r11na.d(43): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpnv5r11na.d(44): Error: found `[` when expecting `.` following long

    /tmp/tmpnv5r11na.d(44): Error: found `]` when expecting identifier following `long`.

    /tmp/tmpnv5r11na.d(44): Error: found `ones_counts` when expecting `,`

    /tmp/tmpnv5r11na.d(44): Error: expression expected, not `,`

    /tmp/tmpnv5r11na.d(44): Error: found `size_t` when expecting `,`

    /tmp/tmpnv5r11na.d(44): Error: found `j` when expecting `,`

    /tmp/tmpnv5r11na.d(45): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpnv5r11na.d(51): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpnv5r11na.d(68): Error: found `unittest` instead of statement

    /tmp/tmpnv5r11na.d(81): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpnv5r11na.d(81): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpnv5r11na.d(81): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnv5r11na.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    struct Tuple\n    {\n        size_t one_count;\n        long original_value;\n\
    \    }\n    Tuple[] array = new Tuple[arr.length];\n    for (size_t i = 0; i <\
    \ arr.length; i++)\n    {\n        Tuple t = tuple(bitCount(arr[i]), arr[i]);\n\
    \        array[i] = t;\n    }\n    quickSort(array);\n    long[] ret = new long[arr.length];\n\
    \    for (size_t i = 0; i < array.length; i++)\n    {\n        ret[i] = array[i].original_value;\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n\
    \    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptgezi3ad.d(28): Error: undefined identifier `bitCount`

    /tmp/tmptgezi3ad.d(31): Error: undefined identifier `quickSort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptgezi3ad.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] sortArr = new long[arr.length];\n    int[] bitArr = new\
    \ int[arr.length];\n    for (int i = 0; i < arr.length; i++)\n    {\n        int\
    \ count = 0;\n        long temp = arr[i];\n        if (temp < 0) temp *= -1;\n\
    \        while (temp != 0)\n        {\n            if (temp % 2 == 1) count++;\n\
    \            temp /= 2;\n        }\n        bitArr[i] = count;\n    }\n    //print(bitArr);\n\
    \    int index = 0;\n    while (index < bitArr.length)\n    {\n        int ones\
    \ = bitArr[index];\n        long[] temp = new long[arr.length];\n        int count\
    \ = 0;\n        for (int i = 0; i < bitArr.length; i++)\n        {\n         \
    \   if (bitArr[i] == ones)\n            {\n                temp[count] = arr[i];\n\
    \                count++;\n            }\n        }\n        //print(temp);\n\
    \        temp = temp.sort;\n        //print(temp);\n        for (int i = 0; i\
    \ < temp.length; i++)\n        {\n            if (temp[i] == 0) break;\n     \
    \       sortArr[index] = temp[i];\n            index++;\n        }\n    }\n  \
    \  return sortArr;\n}\n//zlib.codeplex.com\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L,\
    \ 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L,\
    \ -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L, 4L, 5L,\
    \ 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n\
    \    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n\
    \    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n  \
    \  assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr_vltag0.d(50): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr_vltag0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto r = arr.map!(a => tuple(a, a.binaryOneCount)).sort!((a, b)\
    \ => a[1] > b[1] || (a[1] == b[1] && a[0] > b[0]));\n    return r.map!(a => a[0]).array;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr2287mrn.d(20): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr2287mrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    arr.sort!((long lhs, long rhs) {\n        int r1 = cast(int)rhs;\n\
    \        int l1 = cast(int)lhs;\n        r1 = (r1 >> 1) & 0x55555555 | (r1 & 0x55555555)\
    \ << 1;\n        r1 = (r1 >> 2) & 0x33333333 | (r1 & 0x33333333) << 2;\n     \
    \   r1 = (r1 >> 4) & 0x0f0f0f0f | (r1 & 0x0f0f0f0f) << 4;\n        r1 = (r1 >>\
    \ 8) & 0x00ff00ff | (r1 & 0x00ff00ff) << 8;\n        r1 = (r1 >> 16) & 0x0000ffff\
    \ | (r1 & 0x0000ffff) << 16;\n        l1 = (l1 >> 1) & 0x55555555 | (l1 & 0x55555555)\
    \ << 1;\n        l1 = (l1 >> 2) & 0x33333333 | (l1 & 0x33333333) << 2;\n     \
    \   l1 = (l1 >> 4) & 0x0f0f0f0f | (l1 & 0x0f0f0f0f) << 4;\n        l1 = (l1 >>\
    \ 8) & 0x00ff00ff | (l1 & 0x00ff00ff) << 8;\n        l1 = (l1 >> 16) & 0x0000ffff\
    \ | (l1 & 0x0000ffff) << 16;\n        return r1.countOnes.cmp(l1.countOnes) ==\
    \ 0 ? lhs.cmp(rhs) : r1.countOnes.cmp(l1.countOnes);\n    });\n    return arr;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpku1etxkp.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpku1etxkp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    //var ones = map!((i) => popcount(i))(arr);\n    //var ret_arr = new\
    \ long[arr.length];\n    //auto p = zip(ones, arr);\n    //std.algorithm.sort!(\"\
    a.front > b.front || (a.front == b.front && a.back < b.back)\")(p);\n    //std.algorithm.copy(map!((i)\
    \ => i.back)(p), ret_arr);\n    //return ret_arr;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpck2isat5.d(18): Error: function `tmpck2isat5.sort_array` has no
    `return` statement, but is expected to return a value of type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpck2isat5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto r = arr.byKey!(a => typeof(a) == long ? a.countOneBits :\
    \ -1)();\n    foreach(k; r.keys.dup)\n    {\n        if(k == -1)\n        {\n\
    \            r.keys.remove(k);\n            r[k] = arr.filter!(a => typeof(a)\
    \ != long).sort();\n        }\n        else\n        {\n            r[k] = r[k].sort;\n\
    \        }\n    }\n    //writeln(r);\n    //writeln(r.values.array);\n    return\
    \ r.values.array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyb2bq49d.d(20): Error: found `?` when expecting `.` following long

    /tmp/tmpyb2bq49d.d(20): Error: found `:` when expecting `)` following template
    argument list

    /tmp/tmpyb2bq49d.d(20): Error: semicolon expected following auto declaration,
    not `)`

    /tmp/tmpyb2bq49d.d(20): Error: found `)` instead of statement

    /tmp/tmpyb2bq49d.d(26): Error: found `)` when expecting `.` following long

    /tmp/tmpyb2bq49d.d(26): Error: found `.` when expecting identifier following `long`.

    /tmp/tmpyb2bq49d.d(26): Error: found `sort` when expecting `)` following template
    argument list

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyb2bq49d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.sort!( (a, b) => \n    {\n        if (a < 0 || b <\
    \ 0)\n            return a < b;\n        long na = countOnes(a);\n        long\
    \ nb = countOnes(b);\n        return (na == nb ? a < b : na < nb);\n    });\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ya3zq8_.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ya3zq8_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[][] a = new long[arr.length][2];\n    for (int i = 0; i <\
    \ arr.length; i++)\n    {\n        a[i][0] = arr[i];\n        a[i][1] = countOnes(arr[i]);\n\
    \    }\n    a = a.sort();\n    return a.map!(x => x[0]).array;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph4yim5fq.d(20): Error: variable `arr` cannot be read at compile
    time

    /tmp/tmph4yim5fq.d(24): Error: undefined identifier `countOnes`

    /tmp/tmph4yim5fq.d(26): Error: no property `sort` for type `long[][]`

    /tmp/tmph4yim5fq.d(27): Error: no property `map` for type `long[][]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph4yim5fq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto it = arr.map!(elem => tuple(bitCount(elem), -elem)).enumerate();\n\
    \    it.sort!\"a[0] < b[0] || (a[0] == b[0] && a[1] > b[1])\";\n    return it.map!(elem\
    \ => -elem[1]).array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n \
    \   assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4a8clh3r.d(20): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4a8clh3r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] res = new long[arr.length];\n    long[] ones = new long[arr.length];\n\
    \    //long[] ones = new long[][arr.length];\n    bool[] ones_is_set = new bool[arr.length];\n\
    \    ulong[] zeros = new ulong[arr.length];\n    //ulong[] zeros = new ulong[][arr.length];\n\
    \    bool[] zeros_is_set = new bool[arr.length];\n    //bool[] zeros_is_set =\
    \ new bool[][arr.length];\n    ulong[] index = new ulong[arr.length];\n    //ulong[]\
    \ index = new ulong[][arr.length];\n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        //ones[i] = 0L;\n        //zeros[i] = 0UL;\n        ones_is_set[i]\
    \ = false;\n        zeros_is_set[i] = false;\n        res[i] = 0L;\n        index[i]\
    \ = 0UL;\n    }\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ < 0)\n        {\n            res[i] = arr[i];\n            continue;\n     \
    \   }\n        if (arr[i] == 0)\n        {\n            zeros[i] = 0UL;\n    \
    \        zeros_is_set[i] = true;\n            continue;\n        }\n        ulong\
    \ x = cast(ulong)arr[i];\n        ulong tmp = 0UL;\n        while (x > 0)\n  \
    \      {\n            if (x % 2 != 0)\n            {\n                tmp++;\n\
    \            }\n            x /= 2;\n        }\n        ones[i] = cast(long)tmp;\n\
    \        ones_is_set[i] = true;\n    }\n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        if (ones_is_set[i] == false)\n        {\n            continue;\n\
    \        }\n        for (int j = 0; j < arr.length; j++)\n\nunittest\n{\n    alias\
    \ candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L,\
    \ -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L,\
    \ 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L,\
    \ 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L,\
    \ 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L,\
    \ 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvtjwa5j0.d(73): Error: found `unittest` instead of statement

    /tmp/tmpvtjwa5j0.d(86): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvtjwa5j0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto sorted = arr.dup;\n    sort(sorted, (a, b) => cast(uint)a.binaryRepresentation.count('1')\
    \ < cast(uint)b.binaryRepresentation.count('1'));\n    sort(sorted, (a, b) =>\
    \ a < b);\n    return sorted;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz9x69qq1.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpz9x69qq1.d(22): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz9x69qq1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    //using custom sorting algorithm\n    //arr.sort!((a, b) => a.ones\
    \ > b.ones ? 1 : a.ones < b.ones ? -1 : a - b);\n    //using custom comparator\n\
    \    auto comp = (a, b) => a.ones > b.ones ? 1 : a.ones < b.ones ? -1 : a - b;\n\
    \    sort!comp(arr);\n    return arr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1n2u2hzh.d(23): Error: variable `tmp1n2u2hzh.sort_array.comp` type
    `void` is inferred from initializer `(a, b) => a.ones > b.ones ? 1 : a.ones <
    b.ones ? -1 : a - b`, and variables cannot be of type `void`

    /tmp/tmp1n2u2hzh.d(23): Error: template lambda has no value

    /tmp/tmp1n2u2hzh.d(24): Error: template instance `sort!comp` template `sort` is
    not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1n2u2hzh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    // Sort by number of ones (descending), then by value (ascending)\n\
    \    auto tuples = zip(arr, map!(a => format(\"%b\", a))(arr));\n    tuples.sort!((t1,\
    \ t2) => \n    {\n        if (t1[1].count('1') == t2[1].count('1'))\n        \
    \    return t1[0] < t2[0];\n        else\n            return t1[1].count('1')\
    \ > t2[1].count('1');\n    });\n    return tuples.map!(t => t[0])();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcpw8qgw6.d(21): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcpw8qgw6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto arrr = arr.dup;\n    auto pairArray = arr.map!(n => tuple(countOnes(n),\
    \ n));\n    sort(pairArray);\n    return pairArray.map!(n => n[1]).array;\n}\n\
    long countOnes(long n)\n{\n    long count = 0;\n    while(n != 0)\n    {\n   \
    \     if(n % 2 != 0)\n            count++;\n        n = n / 2;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3vvo99j1.d(21): Error: no property `map` for type `long[]`

    /tmp/tmp3vvo99j1.d(22): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3vvo99j1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] ones = new long[arr.length];\n    long[] sortedarr = new\
    \ long[arr.length];\n    int i = 0;\n    foreach(long a; arr) {\n        ones[i]\
    \ = std.bitmanip.countOnes(a);\n        sortedarr[i] = a;\n        i++;\n    }\n\
    \    std.algorithm.sort!((a, b) => ones[a] < ones[b] ||\n            (ones[a]\
    \ == ones[b] && sortedarr[a] < sortedarr[b]))(0L.iota);\n    return arr[sortedarr];\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkrjm0f5.d(24): Error: undefined identifier `bitmanip` in package
    `std`

    /tmp/tmpfkrjm0f5.d(28): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpfkrjm0f5.d(30): Error: cannot implicitly convert expression `sortedarr`
    of type `long[]` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkrjm0f5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto tuples_of_ones_and_numbers = zip(arr.map!(x => a => (a, count(x.to!string().filter(y\
    \ => y == '1')))), arr);\n    return tuples_of_ones_and_numbers.sort!q{a[0][1]\
    \ < b[0][1] || a[0][1] == b[0][1] && a[1] < b[1]}.map!q{a => a[1]}.array;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L,\
    \ -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L,\
    \ 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp850x7ja8.d(20): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp850x7ja8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    arr.sort!((a, b) => a.countOnes.unaryFun!\"--\".cmp(b.countOnes.unaryFun!\"\
    --\") \n                                              || a.unaryFun!\"--\".cmp(b.unaryFun!\"\
    --\"));\n    \n    return arr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpywg4fil8.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpywg4fil8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.enumerate.sort!((a, b) => \n        a.value.onesCount.compare(b.value.onesCount)\
    \ \n        || a.value.compare(b.value)).map!(x => x.value).array;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5d3nku07.d(20): Error: no property `enumerate` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5d3nku07.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] sorted_arr = arr.dup;\n    quickSort(sorted_arr, 0, arr.length);\n\
    \    return sorted_arr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n\
    \    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3i7td57u.d(21): Error: undefined identifier `quickSort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3i7td57u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    Tuple!(size_t, long)[] result = new Tuple!(size_t, long)[](arr.length);\n\
    \    foreach(size_t i, long elem; arr)\n    {\n        result[i] = tuple(countOnes(elem),\
    \ elem);\n    }\n    result.sort!((a, b) => (a[0] == b[0]) ? a[1] < b[1] : a[0]\
    \ < b[0]);\n    foreach(size_t i, ref Tuple!(size_t, long) elem; result)\n   \
    \ {\n        arr[i] = elem[1];\n    }\n    return arr;\n}\nsize_t countOnes(long\
    \ n)\n{\n    size_t count = 0;\n    for(long i = n; i != 0; i /= 2)\n    {\n \
    \       if(i % 2 == 1)\n        {\n            count++;\n        }\n    }\n  \
    \  return count;\n}\n//      Time Complexity: O(n * k * log(n * k))\n// Space\
    \ Complexity: O(n * k) where k is the greatest number of ones in a binary representation\
    \ of the numbers in the array\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp14epp1we.d(25): Error: no property `sort` for type `Tuple!(ulong,
    long)[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp14epp1we.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    const nums = arr.dup;\n    nums.sort(int a, int b) \n    {\n \
    \       if(a > b) \n        {\n            return 1;\n        } \n        else\
    \ if(a < b) \n        {\n            return -1;\n        } \n        else \n \
    \       {\n            return 0;\n        }\n    }\n    nums.sort((const int a,\
    \ const int b) \n    {\n        if(a > b) \n        {\n            return 1;\n\
    \        } \n        else if(a < b) \n        {\n            return -1;\n    \
    \    } \n        else \n        {\n            return 0;\n        }\n    });\n\
    \    // auto len = binarySearch(nums, 0, nums.length, 0);\n    return nums;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    // good luck!\n    long[][] a = new long[arr.length][2];\n   \
    \ int i = 0;\n    foreach(long n; arr)\n    {\n        ulong temp = cast(ulong)n;\n\
    \        int count = 0;\n        for(int i = 0; i < 32; i++)\n        {\n    \
    \        if(temp % 2L == 1L)\n                count++;\n            temp = temp\
    \ >> 1;\n        }\n        a[i][0] = count;\n        a[i][1] = n;\n        i++;\n\
    \    }\n    a.sort!(\"a[0] < b[0] || (a[0] == b[0] && a[1] < b[1])\");\n    foreach(ref\
    \ long[] aa; a)\n        aa[0] = aa[1];\n    return a.ptr;\n}\nunittest\n{\n \
    \   alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L])\
    \ == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) ==\
    \ [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L,\
    \ 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpznw88ww0.d(21): Error: variable `arr` cannot be read at compile
    time

    /tmp/tmpznw88ww0.d(27): Error: variable `i` is shadowing variable `tmpznw88ww0.sort_array.i`

    /tmp/tmpznw88ww0.d(37): Error: no property `sort` for type `long[][]`

    /tmp/tmpznw88ww0.d(40): Error: cannot implicitly convert expression `cast(long[]*)a`
    of type `long[]*` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpznw88ww0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    const int maxOnes = 20;\n    long[][] buckets = new long[maxOnes][];\n\
    \    long[] bucketCounts = new long[maxOnes];\n    int[] indices = new int[maxOnes];\n\
    \    auto isNegative = false;\n    long[] result = new long[arr.length];\n   \
    \ int i = 0;\n    foreach(elem; arr)\n    {\n        if(elem < 0)\n        {\n\
    \            isNegative = true;\n            elem = -elem;\n        }\n      \
    \  int ones = oneCount(elem);\n        if(buckets[ones] is null)\n        {\n\
    \            buckets[ones] = new long[arr.length];\n        }\n        buckets[ones][indices[ones]++]\
    \ = elem;\n    }\n    foreach(bucket; buckets)\n    {\n        if(bucket is null)\
    \ continue;\n        bucket = bucket[0..indices[i]];\n        std.algorithm.sort!(\"\
    a < b\")(bucket);\n        bucketCounts[i] = bucket.length;\n        ++i;\n  \
    \  }\n    i = 0;\n    foreach(bucket; buckets)\n    {\n        if(bucket is null)\
    \ continue;\n        foreach(elem; bucket)\n        {\n            result[i++]\
    \ = isNegative ? -elem : elem;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0fkuc0lz.d(21): Error: new can only create structs, dynamic arrays
    or class objects, not `long[20][]`''s

    /tmp/tmp0fkuc0lz.d(34): Error: undefined identifier `oneCount`

    /tmp/tmp0fkuc0lz.d(45): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0fkuc0lz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto tempArr = arr.dup;\n    tempArr.sort!((a, b) =>\n    {\n\
    \        auto aBin = a.to!string(2);\n        auto bBin = b.to!string(2);\n  \
    \      auto aOnes = aBin.count!((x) => x == '1');\n        auto bOnes = bBin.count!((x)\
    \ => x == '1');\n        return tuple(aOnes, a) < tuple(bOnes, b);\n    });\n\
    \    return tempArr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n  \
    \  assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3wc8bsnj.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3wc8bsnj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    arr = arr.dup;\n    sort(arr, (a, b) => \n    {\n        auto\
    \ binA = to!string(a, 2, '0');\n        auto binB = to!string(b, 2, '0');\n  \
    \      if (binA.count('1') == binB.count('1'))\n            return a - b;\n  \
    \      return binA.count('1') - binB.count('1');\n    });\n    return arr;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L,\
    \ -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L,\
    \ 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp36r0w65f.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36r0w65f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n\talias Pair = Tuple!(int, long);\n\tPair[] pairs = new Pair[arr.length];\n\
    \tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tpairs[i] = tuple(countOne(arr[i]),\
    \ arr[i]);\n\t}\n\treturn pairs.sort!((Pair a, Pair b) => (a[0] != b[0]) ? a[0]\
    \ < b[0] : a[1] < b[1]).map!(e => e[1]).array;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr2gvgc28.d(24): Error: undefined identifier `countOne`

    /tmp/tmpr2gvgc28.d(26): Error: no property `sort` for type `Tuple!(int, long)[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr2gvgc28.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n  // I really don't like this solution.\n  // It's not very efficient.\n\
    \  // It's not very readable.\n  // It's not very maintainable.\n  // It's not\
    \ very flexible.\n  // It's not very testable.\n  // It's not very DRY.\n  //\
    \ But I can't think of anything better.\n  // I'm pretty sure my language is to\
    \ blame.\n  // I'm tired of it.\n  // I'm tired of the Kata too.\n  // I'm tired\
    \ of my life.\n  return arr.sort!((a, b) =>\n  {\n    if (popcnt(a) == popcnt(b))\
    \ return a - b;\n    return popcnt(a) - popcnt(b);\n  });\n}\nunittest\n{\n  \
    \  alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L])\
    \ == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) ==\
    \ [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L,\
    \ 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu29y__vv.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu29y__vv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    // Your code here\n    // 1. sort by binary count\n    // 2. sort\
    \ by decimal value\n    auto cmp = (a, b) {\n        size_t sa = a.countOneBits;\n\
    \        size_t sb = b.countOneBits;\n        if (sa == sb) return a - b;\n  \
    \      return sa - sb;\n    };\n    sort(arr, cmp);\n    return arr;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg0ecmifa.d(23): Error: variable `tmpg0ecmifa.sort_array.cmp` type
    `void` is inferred from initializer `(a, b)

    {

    size_t sa = a.countOneBits;

    size_t sb = b.countOneBits;

    if (sa == sb)

    return a - b;

    return sa - sb;

    }

    `, and variables cannot be of type `void`

    /tmp/tmpg0ecmifa.d(23): Error: template lambda has no value

    /tmp/tmpg0ecmifa.d(29): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0ecmifa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto len = arr.length;\n    alias Pair = Tuple!(ulong, long);\n\
    \    long[] result = new long[len];\n    Pair[] intermediate = new Pair[len];\n\
    \    foreach(idx, item; arr)\n    {\n        ulong numOnes = countOnes(item);\n\
    \        intermediate[idx] = tuple(numOnes, item);\n    }\n    std.algorithm.sort!(\"\
    a[0] < b[0] || (a[0] == b[0] && a[1] < b[1])\")(intermediate);\n    foreach(idx,\
    \ item; intermediate)\n    {\n        result[idx] = item[1];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqaa0g3si.d(26): Error: undefined identifier `countOnes`

    /tmp/tmpqaa0g3si.d(29): Deprecation: package `std.algorithm` is not accessible
    here

    /tmp/tmpqaa0g3si.d(29): Error: undefined identifier `sort` in package `std.algorithm`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqaa0g3si.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n\tstruct node\n\t{\n\t\tuint bits;\n\t\tlong value;\n\t\t@property\
    \ uint bits()\n\t\t{\n\t\t\treturn this.bits;\n\t\t}\n\t\t@property long value()\n\
    \t\t{\n\t\t\treturn this.value;\n\t\t}\n\t\t@property bool opEquals(node b)\n\t\
    \t{\n\t\t\treturn this.bits == b.bits;\n\t\t}\n\t\t@property int opCmp(node b)\n\
    \t\t{\n\t\t\tif(this.bits == b.bits)\n\t\t\t\treturn this.value - b.value;\n\t\
    \t\treturn this.bits - b.bits;\n\t\t}\n\t\tnode(long value)\n\t\t{\n\t\t\tthis.value\
    \ = value;\n\t\t\tthis.bits = value.countOneBits;\n\t\t}\n\t}\n\tauto list = std.typecons.scalarArray(node,\
    \ arr.length);\n\tforeach(index, value; arr)\n\t\tlist[index] = node(value);\n\
    \tlist.sort;\n\tforeach(index, value; list)\n\t\tarr[index] = value.value;\n\t\
    return arr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8d_niqtm.d(42): Error: function declaration without return type.
    (Note that constructors are always named `this`)

    /tmp/tmp8d_niqtm.d(43): Error: no identifier for declarator `node(long value)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8d_niqtm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    Tuple!(long, long)[] arrTuple = new Tuple!(long, long)[];\n  \
    \  for (ulong i = 0; i < arr.length; i++)\n    {\n        arrTuple ~= tuple(arr[i],\
    \ binary_rep(arr[i]));\n    }\n    arrTuple.sort!((a, b) => (a[1] != b[1]) ? (a[1]\
    \ < b[1]) : (a[0] < b[0]));\n    return arrTuple.map!(a => a[0]).array;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9jv19c2a.d(20): Error: new can only create structs, dynamic arrays
    or class objects, not `Tuple!(long, long)[]`''s

    /tmp/tmp9jv19c2a.d(23): Error: undefined identifier `binary_rep`

    /tmp/tmp9jv19c2a.d(25): Error: no property `sort` for type `Tuple!(long, long)[]`

    /tmp/tmp9jv19c2a.d(26): Error: no property `map` for type `Tuple!(long, long)[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9jv19c2a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    //debug std.stdio.writeln(arr);\n    auto newArr = arr.dup;\n\
    \    newArr.sort!((l, r) {\n        auto ll = l.to!string(2);\n        auto rr\
    \ = r.to!string(2);\n        //debug std.stdio.writeln(ll, \" \", rr);\n     \
    \   if (ll.count(\"1\") != rr.count(\"1\")) {\n            return ll.count(\"\
    1\") - rr.count(\"1\");\n        }\n        return l-r;\n    });\n    return newArr;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpitwtp5bk.d(22): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpitwtp5bk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n  auto t = zip(arr,map!(a => countOnes(a))(arr));\n  t.sort((a,b)\
    \ => \n  {\n    if(a[1] == b[1])\n      return a[0] < b[0];\n    return a[1] <\
    \ b[1];\n  });\n  return map!(a => a[0])(t);\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppsw6z4qy.d(20): Error: undefined identifier `zip`

    /tmp/tmppsw6z4qy.d(27): Error: template instance `map!((a) => a[0])` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppsw6z4qy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto pred = (x, y) => (std.bitmanip.count_ones(x) < std.bitmanip.count_ones(y))\n\
    \        ? true\n        : (std.bitmanip.count_ones(x) > std.bitmanip.count_ones(y))\n\
    \            ? false\n            : (x < y);\n    return std.algorithm.sort!(pred)(arr);\n\
    }\n/*\n    Auto-evaluation, Don't worry\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf7lck243.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf7lck243.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.zip.sort!(\n        (a, b) => countOnes(a[0]) == countOnes(b[0])\n\
    \        ? a[0] - b[0]\n        : countOnes(a[0]) - countOnes(b[0])\n    ).map!(x\
    \ => x[0]).array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7arch0rz.d(20): Error: no property `zip` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7arch0rz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto result = arr.dup;\n    std.algorithm.sort!((a, b) => \n \
    \       (std.bitmanip.countOnes(a) == std.bitmanip.countOnes(b)) ? a < b : std.bitmanip.countOnes(a)\
    \ < std.bitmanip.countOnes(b)\n    )(result);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1482hwn5.d(21): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1482hwn5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    uint[] temp = new uint[arr.length];\n    uint[][] temp_tuples\
    \ = new uint[][](arr.length);\n    bool first = true;\n    int maxLength = 0;\n\
    \    foreach(uint i, ref long e; arr)\n    {\n        temp[i] = cast(uint)e;\n\
    \        temp_tuples[i] = new uint[2];\n        temp_tuples[i][0] = 0;\n     \
    \   temp_tuples[i][1] = cast(uint)e;\n        uint n = temp[i];\n        while(n\
    \ != 0)\n        {\n            n = n & (n - 1);\n            temp_tuples[i][0]++;\n\
    \        }\n        if(temp_tuples[i][0] > maxLength)\n            maxLength =\
    \ temp_tuples[i][0];\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        foreach(uint j; arr)\n        {\n            if(temp_tuples[j][0] ==\
    \ maxLength)\n            {\n                arr[i] = cast(long)temp_tuples[j][1];\n\
    \                temp_tuples[j][0] = 0;\n                break;\n            }\n\
    \        }\n        maxLength--;\n    }\n    return arr;\n}\nunittest\n{\n   \
    \ alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L])\
    \ == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) ==\
    \ [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L,\
    \ 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdphxldqk.d(41): Error: cannot implicitly convert expression `__r75[__key76]`
    of type `long` to `uint`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdphxldqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] count = new long[arr.length];\n    foreach(size_t i, long\
    \ val; arr)\n    {\n        count[i] = countOnes(val);\n    }\n    return zip(arr,\
    \ count).sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0])).map!(a\
    \ => a[0]).array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpun8trhcm.d(23): Error: undefined identifier `countOnes`

    /tmp/tmpun8trhcm.d(25): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpun8trhcm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long a, b;\n    foreach(immutable i, ref a; arr) {\n        foreach(immutable\
    \ j, immutable b; arr[i..$]) {\n            if(a > b) {\n                arr[i]\
    \ = b;\n                arr[j] = a;\n            }\n        }\n    }\n    return\
    \ arr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuk01hqtq.d(21): Error: variable `a` is shadowing variable `tmpuk01hqtq.sort_array.a`

    /tmp/tmpuk01hqtq.d(22): Error: variable `b` is shadowing variable `tmpuk01hqtq.sort_array.b`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuk01hqtq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto n = arr.dup;\n    long[] ones;\n    foreach(i; n)\n    {\n\
    \        ones ~= (i & -i).popCount;\n    }\n    auto tup = tuple(n, ones);\n \
    \   tup.sort!((a, b) => { if(a[1] == b[1]) return a[0] < b[0]; else return a[1]\
    \ < b[1]; })();\n    return tup[0];\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7p0pbxpf.d(24): Error: no property `popCount` for type `long`

    /tmp/tmp7p0pbxpf.d(27): Error: no property `sort` for type `Tuple!(long[], long[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7p0pbxpf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.map!(a => tuple(a, __ctfe(bits(a).countUntil('0'))))\n\
    \              .sort!((a, b) => a[1] < b[1] || a[1] == b[1] && a[0] < b[0])\n\
    \              .map!(a => a[0]).array;\n}\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L,\
    \ 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L,\
    \ -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L, 4L, 5L,\
    \ 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n\
    \    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n\
    \    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n  \
    \  assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ov69ena.d(20): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ov69ena.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n  arr.sort!((x, y) =>\n            mixin(\"return (countOnes(x) !=\
    \ countOnes(y)) ? countOnes(x) - countOnes(y) : x - y;\"));\n  return arr;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L,\
    \ -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L,\
    \ 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ubo1qn2.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ubo1qn2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n\t// Magic happens here!\n\t// bitCount works for the number of 1s\
    \ in the number\n\t// cmp is for comparing the number of 1s\n\treturn arr.sort!(a\
    \ => a.bitCount, cmp).array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo0koje02.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo0koje02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] bitCount = new long[arr.length];\n    // long[] absArr\
    \ = new long[arr.length];\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        bitCount[i] = std.bitop.popCount(arr[i]);\n        // absArr[i] = abs(arr[i]);\n\
    \    }\n    // Tuple!(size_t, size_t, size_t)[] sortable = new Tuple!(size_t,\
    \ size_t, size_t)[arr.length];\n    // for (size_t i = 0; i < sortable.length;\
    \ i++)\n    // {\n    //     sortable[i] = tuple(absArr[i], bitCount[i], i);\n\
    \    // }\n    // auto sorted = sort(sortable, (a, b) => a[1] > b[1] || (a[1]\
    \ == b[1] && a[0] > b[0]));\n    // auto res = new long[arr.length];\n    // for\
    \ (size_t i = 0; i < res.length; i++)\n    // {\n    //     res[i] = arr[sorted[i][2]];\n\
    \    // }\n    // return res;\n    long[] res = new long[arr.length];\n    size_t\
    \ index = 0;\n    while (index < arr.length)\n    {\n        bool inserted = false;\n\
    \        for (size_t i = 0; i < index; i++)\n        {\n            if (bitCount[index]\
    \ < bitCount[i] || (bitCount[index] == bitCount[i] && arr[index] < arr[i]))\n\
    \            {\n                for (size_t j = index; j > i; j--)\n         \
    \       {\n                    res[j] = res[j - 1];\n                }\n     \
    \           res[i] = arr[index];\n                inserted = true;\n         \
    \       break;\n            }\n        }\n        if (!inserted)\n        {\n\
    \            res[index] = arr[index];\n        }\n        index++;\n    }\n  \
    \  return res;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7dg4s73m.d(24): Error: undefined identifier `bitop` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7dg4s73m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    // This will use a Tuple to hold the long and the number of ones\n\
    \    // of its binary representation\n    auto tuples = new Tuple!(ulong, ulong)[];\n\
    \    foreach(x; arr)\n    {\n        ulong ones = 0;\n        for(ulong i = 0;\
    \ i < 64; i++)\n        {\n            if((x >> i) & 1) ones++;\n        }\n \
    \       tuples ~= tuple(x, ones);\n    }\n    // Sorts the tuples according to\
    \ the number of ones\n    // And if that is the same then according to the value\
    \ itself\n    // I didn't use the built-in sort function for the number of ones\n\
    \    // because it only supports int and floats, but that can be easily\n    //\
    \ changed using the std.algorithm.sort function\n    tuples.sort!((a, b) => a[1]\
    \ == b[1] ? a[0] < b[0] : a[1] < b[1]);\n    arr = tuples.map!(a => a[0]).array;\n\
    \    return arr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnu1pca9_.d(22): Error: new can only create structs, dynamic arrays
    or class objects, not `Tuple!(ulong, ulong)[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnu1pca9_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    // your code here\n    int[] key = new int[arr.length];\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        key[i] = int.max;\n    }\n    foreach(index,\
    \ num; arr)\n    {\n        int ones = 0;\n        while(num > 0)\n        {\n\
    \            ones += num & 1;\n            num >>= 1;\n        }\n        key[index]\
    \ = ones;\n    }\n    auto sortArr = arr.dup;\n    quickSort(sortArr, 0, arr.length\
    \ - 1, key);\n    return sortArr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5wr79hg.d(37): Error: undefined identifier `quickSort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5wr79hg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    int count;\n    long temp;\n    long[] tempArr;\n    long[] sortedArr;\n\
    \    long[] unsortedArr;\n    size_t i;\n    size_t j;\n    size_t k;\n    size_t\
    \ l;\n    size_t length;\n    bool state;\n    \n    length = arr.length;\n  \
    \  sortedArr = new long[length];\n    unsortedArr = new long[length];\n    tempArr\
    \ = new long[length];\n    k = 0;\n    l = 0;\n    count = 0;\n    i = 0;\n  \
    \  j = 0;\n    for (; i < length; i++) {\n        if (arr[i] < 0) {\n        \
    \    sortedArr[k] = arr[i];\n            k++;\n        } else {\n            unsortedArr[l]\
    \ = arr[i];\n            l++;\n        }\n    }\n    k = l;\n    l = 0;\n    for\
    \ (; l < k; l++) {\n        count = 0;\n        for (j = 0; j < 32; j++) {\n \
    \           state = (unsortedArr[l] & (1 << j)) != 0;\n            if (state)\
    \ {\n                count++;\n            }\n        }\n        tempArr[l] =\
    \ count;\n    }\n    state = true;\n    while (state) {\n        state = false;\n\
    \        for (i = 0; i < k - 1; i++) {\n            if (tempArr[i] > tempArr[i\
    \ + 1]) {\n                temp = tempArr[i];\n                tempArr[i] = tempArr[i\
    \ + 1];\n                tempArr[i + 1] = temp;\n                temp = unsortedArr[i];\n\
    \                unsortedArr[i] = unsortedArr[i + 1];\n                unsortedArr[i\
    \ + 1] = temp;\n                state = true;\n            }\n        }\n    }\n\
    \    state = true;\n    while (state) {\n        state = false;\n        for (i\
    \ = 0; i < k - 1; i++) {\n            if\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmparg0jnff.d(82): Error: found `unittest` when expecting `(`

    /tmp/tmparg0jnff.d(95): Error: found `void` when expecting `)`

    /tmp/tmparg0jnff.d(95): Error: found `{` when expecting `;` following statement

    /tmp/tmparg0jnff.d(95): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmparg0jnff.d(95): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmparg0jnff.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    /*sort(arr, (x, y) => countOnes(x) == countOnes(y) ? \n      \
    \                    cast(int)x - cast(int)y : \n                          countOnes(x)\
    \ - countOnes(y));\n    return arr;*/\n    return arr.sort!((a, b) => countOnes(a)\
    \ == countOnes(b) ? cast(int)a - cast(int)b : countOnes(a) - countOnes(b));\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8zwniqgq.d(24): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8zwniqgq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto key = (a) => {\n      string s = format(\"%b\", a);\n   \
    \   return tuple(s.count('1'), a);\n    };\n    return arr.sort!((a, b) => key(a)\
    \ > key(b));\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoh8ra3bc.d(20): Error: variable `tmpoh8ra3bc.sort_array.key` type
    `void` is inferred from initializer `(a) => ()

    {

    string s = format("%b", a);

    return tuple(s.count(''1''), a);

    }

    `, and variables cannot be of type `void`

    /tmp/tmpoh8ra3bc.d(20): Error: template lambda has no value

    /tmp/tmpoh8ra3bc.d(24): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoh8ra3bc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    // way too many conversions...\n    // long[] new_arr = arr.map!(x\
    \ => cast(long)std.conv.to!(string)(x)).map!(x => (x, countOnes(x))).sort!((x,\
    \ y) => x[1] > y[1] || (x[1] == y[1] && x[0] > y[0])).map!(x => cast(long)x[0]).array;\n\
    \    return arr.map!(x => cast(long)std.conv.to!(string)(x)).map!(x => (x, countOnes(x))).sort!((x,\
    \ y) => x[1] > y[1] || (x[1] == y[1] && x[0] > y[0])).map!(x => cast(long)x[0]).array;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3dnh8rli.d(22): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3dnh8rli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto result = arr.dup;\n    sort(result, (a, b) => popcount(a)\
    \ != popcount(b) ? popcount(a) - popcount(b) : a - b);\n    return result;\n}\n\
    /*\npublic static void main(String[] args) {\n    long[] a = {5L, 3L, 7L, 10L,\
    \ 14L};\n    System.out.println(Arrays.toString(sort_array(a)));\n}\n*/\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt79kb36c.d(21): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt79kb36c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    int len = arr.length;\n    auto xs = new ulong[len];\n    foreach(i,\
    \ v; arr)\n    {\n        xs[i] = v > 0 ? (ulong)v : (ulong)(-v);\n    }\n   \
    \ std.array.sort!((x, y) => x.countOnes > y.countOnes ||\n                   \
    \ (x.countOnes == y.countOnes && x > y))(xs);\n    foreach(i, v; arr)\n    {\n\
    \        arr[i] = v > 0 ? (long)xs[i] : -(long)xs[i];\n    }\n    return arr;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt8cv8uvb.d(24): Error: C style cast illegal, use `cast(ulong)v`

    /tmp/tmpt8cv8uvb.d(24): Error: C style cast illegal, use `cast(ulong)-v`

    /tmp/tmpt8cv8uvb.d(30): Error: C style cast illegal, use `cast(long)xs[i]`

    /tmp/tmpt8cv8uvb.d(30): Error: C style cast illegal, use `cast(long)xs[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt8cv8uvb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto p = tuple(arr.dup, arr.map!(x => x.countOne).dup);\n    p[0].sort!((a,\
    \ b) => p[1][a] < p[1][b] || p[1][a] == p[1][b] && a < b);\n    return p[0];\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtpn4lrp.d(20): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtpn4lrp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    // long[] a = to!(long[])(arr.sort!((int a, int b) => countOnes(a)\
    \ == countOnes(b) ? a.compare(b) : countOnes(a).compare(countOnes(b))));\n   \
    \ // return a;\n    return arr.sort!((int a, int b) => countOnes(a) == countOnes(b)\
    \ ? a.compare(b) : countOnes(a).compare(countOnes(b)));\n}\nunittest\n{\n    alias\
    \ candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L,\
    \ -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L,\
    \ 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L,\
    \ 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L,\
    \ 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L,\
    \ 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjj5wr6a6.d(22): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjj5wr6a6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    if (arr.length == 0)\n        return arr;\n    //quick sort\n\
    \    //let's make a tuple with the number, the number of ones in it's binary representation,\n\
    \    //and the position of the number in the original list\n    bool iseven(long\
    \ num) {\n        return to!bool(num & 1);\n    }\n    int binones(long num) {\n\
    \        int ones = 0;\n        while (num != 0) {\n            if (iseven(num))\n\
    \                ++ones;\n            num = num / 2;\n        }\n        return\
    \ ones;\n    }\n    auto p = zip(arr, map!(a => Tuple!(a, binones(a), iota(arr.length)))(arr))\n\
    \                .array;\n    //sort with the first element of the tuple and then\
    \ sort with the third\n    //element of the tuple\n    auto sorted = p.sort!((a,\
    \ b) => ((a[1] < b[1]) ? true :\n                                     ((a[1] ==\
    \ b[1]) ? a[2] < b[2] : false)));\n    //return the result as a array of longs\n\
    \    return sorted.map!(a => a[0]).array;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm1qmx4oi.d(26): Error: template instance `to!bool` template `to`
    is not defined, did you mean No?

    /tmp/tmpm1qmx4oi.d(37): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm1qmx4oi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    Tuple!(ulong, uint)[][] tmp;\n    tmp.length = arr.length;\n \
    \   foreach(i, val; arr)\n    {\n        if(val < 0)\n            tmp[i] = tuple(cast(ulong)\
    \ -val, popCount(-val));\n        else\n            tmp[i] = tuple(cast(ulong)\
    \ val, popCount(val));\n    }\n    tmp.sort;\n    foreach(i, val; tmp)\n    {\n\
    \        if(val[0] > ulong.max/2)\n            arr[i] = -cast(long) val[0];\n\
    \        else\n            arr[i] = cast(long) val[0];\n    }\n    return arr;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvcb0ervt.d(25): Error: undefined identifier `popCount`

    /tmp/tmpvcb0ervt.d(27): Error: undefined identifier `popCount`

    /tmp/tmpvcb0ervt.d(29): Error: no property `sort` for type `Tuple!(ulong, uint)[][]`

    /tmp/tmpvcb0ervt.d(32): Error: template `std.typecons.Tuple!(ulong, uint).Tuple.opCmp`
    cannot deduce function from argument types `!()(ulong)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(805):        `std.typecons.Tuple!(ulong,
    uint).Tuple.opCmp(R)(R rhs) if (areCompatibleTuples!(typeof(this), R, "<"))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(819):        `std.typecons.Tuple!(ulong,
    uint).Tuple.opCmp(R)(R rhs) if (areCompatibleTuples!(typeof(this), R, "<"))`

    /tmp/tmpvcb0ervt.d(33): Error: cannot implicitly convert expression `tuple(cast(long)val[0].__expand_field_0,
    cast(long)val[0].__expand_field_1)` of type `(ulong, uint)` to `long`

    /tmp/tmpvcb0ervt.d(35): Error: cannot implicitly convert expression `tuple(cast(long)val[0].__expand_field_0,
    cast(long)val[0].__expand_field_1)` of type `(ulong, uint)` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvcb0ervt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.sort!((a, b) => {\n        auto ab = a.count_ones,\
    \ bb = b.count_ones;\n        return ab < bb ? -1 : ab > bb ? 1 :\n          \
    \  a < b ? -1 : a > b ? 1 : 0;\n    });\n}\n/*\n    ----------------\n    v3 -\
    \ simple\n    ----------------\n    auto sort_array(long[] arr) {\n        return\
    \ arr.sort!((a, b) =>\n            a.count_ones == b.count_ones ?\n          \
    \      a < b ? -1 : a > b ? 1 : 0 :\n                a.count_ones < b.count_ones\
    \ ? -1 : 1\n        );\n    }\n*/\n/*\n    ----------------\n    v2 - elegant\n\
    \    ----------------\n    auto sort_array(long[] arr) {\n        return arr.sort!((a,\
    \ b) =>\n            a.count_ones == b.count_ones ?\n                a < b ? -1\
    \ : a > b ? 1 : 0 :\n                a.count_ones < b.count_ones ? -1 : 1\n  \
    \      );\n    }\n*/\n/*\n    ----------------\n    v1 - plain\n    ----------------\n\
    \    auto sort_array(long[] arr) {\n        return arr.sort!((a, b) =>\n     \
    \       a.count_ones == b.count_ones ?\n                a < b ? -1 : a > b ? 1\
    \ : 0 :\n                a.count_ones < b.count_ones ? -1 : 1\n        );\n  \
    \  }\n*/\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy5t9s6mb.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy5t9s6mb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n  if (arr.length == 0) return new long[0];\n  return sort!((x, y)\
    \ => x.bitCount < y.bitCount || (x.bitCount == y.bitCount && x < y))(arr);\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L,\
    \ -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L,\
    \ 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq270qgk_.d(21): Error: template instance `sort!((x, y) => x.bitCount
    < y.bitCount || x.bitCount == y.bitCount && (x < y))` template `sort` is not defined,
    did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq270qgk_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.sort!((a, b) => {\n        int a1s = countOnes(a);\n\
    \        int b1s = countOnes(b);\n        if (a1s == b1s) return a < b;\n    \
    \    return a1s < b1s;\n    });\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp00h_vjm8.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp00h_vjm8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    int cnt,i,j;\n    auto dArr = arr.dup;\n    for(i=0;i<arr.length;i++)\n\
    \    {\n        cnt = 0;\n        for(j=0;j<i;j++)\n        {\n            if(arr[i]<arr[j])\n\
    \            {\n                cnt++;\n            }\n        }\n        dArr[cnt]\
    \ = arr[i];\n    }\n    //for(i=0;i<arr.length;i++) writefln(\"%s\",dArr[i]);\n\
    \    return dArr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpljq2i9a7.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4299e1]

    ??:? void tmpljq2i9a7.__unittest_L37_C1() [0x4281e9]

    ??:? void tmpljq2i9a7.__modtest() [0x428958]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e5c3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42966a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b34d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42b3dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42b2d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429641]

    ??:? runModuleUnitTests [0x42e399]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429ef8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    ulong[] x;\n    x.length = arr.length;\n    foreach(i, xi; x)\n\
    \    {\n        ulong u = cast(ulong)arr[i];\n        xi = u;\n    }\n    return\
    \ sort!((n, m) => __sort_array_func(n, m, x))(arr);\n}\nlong __sort_array_func(long\
    \ n, long m, ulong[] x)\n{\n    if(n > m) return 1;\n    if(n < m) return -1;\n\
    \    ulong u = x[n];\n    ulong v = x[m];\n    return __sort_array_func2(u, v);\n\
    }\nlong __sort_array_func2(ulong u, ulong v)\n{\n    if(u > v) return 1;\n   \
    \ if(u < v) return -1;\n    return 0;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwhr1ndi4.d(43): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwhr1ndi4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.dup.sort!(a, b => a.countOnes != b.countOnes ? a.countOnes\
    \ - b.countOnes : a - b);\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpri4568kf.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpri4568kf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long maxVal = 0;\n    foreach(v; arr)\n    {\n        maxVal =\
    \ max(maxVal, v);\n    }\n    long[] ret = new long[arr.length];\n    long[] counts\
    \ = new long[maxVal+1];\n    foreach(v; arr)\n    {\n        if(v == 0)\n    \
    \    {\n            continue;\n        }\n        long temp = v;\n        long\
    \ bits = 0;\n        while(temp > 0)\n        {\n            bits += temp & 1;\n\
    \            temp >>= 1;\n        }\n        counts[bits]++;\n    }\n    long\
    \ runningSum = 0;\n    foreach(i, v; counts)\n    {\n        runningSum += v;\n\
    \        counts[i] = runningSum;\n    }\n    foreach(i, v; arr)\n    {\n     \
    \   if(v == 0)\n        {\n            ret[0] = 0;\n            continue;\n  \
    \      }\n        long temp = v;\n        long bits = 0;\n        while(temp >\
    \ 0)\n        {\n            bits += temp & 1;\n            temp >>= 1;\n    \
    \    }\n        ret[counts[bits]-1] = v;\n        counts[bits]--;\n    }\n   \
    \ return ret;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx5gmolys.d(23): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx5gmolys.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.array.sort!((a, b) =>\n    {\n        if (ones(a) ==\
    \ ones(b))\n            return a - b;\n        return ones(a) - ones(b);\n   \
    \ });\n}\nlong ones(long num)\n{\n    int count = 0;\n    for (int i = 0; i <\
    \ 8 * 8; i++)\n    {\n        if (num & (1L << i))\n            count++;\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n\
    \    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw1rleuw4.d(20): Error: no property `array` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw1rleuw4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    int temp1;\n    long temp2;\n    foreach(immutable j; 0 .. arr.length\
    \ - 1)\n    {\n        foreach(immutable i; 0 .. arr.length - 1)\n        {\n\
    \            if(i != arr.length - 1)\n            {\n                if(countOnes(arr[i])\
    \ > countOnes(arr[i + 1]))\n                {\n                    temp1 = countOnes(arr[i]);\n\
    \                    temp2 = arr[i];\n                    arr[i] = arr[i + 1];\n\
    \                    arr[i + 1] = temp2;\n                }\n                else\
    \ if(countOnes(arr[i]) == countOnes(arr[i + 1]))\n                {\n        \
    \            if(arr[i] > arr[i + 1])\n                    {\n                \
    \        temp1 = countOnes(arr[i]);\n                        temp2 = arr[i];\n\
    \                        arr[i] = arr[i + 1];\n                        arr[i +\
    \ 1] = temp2;\n                    }\n                }\n            }\n     \
    \   }\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpze6e6q14.d(28): Error: undefined identifier `countOnes`

    /tmp/tmpze6e6q14.d(28): Error: undefined identifier `countOnes`

    /tmp/tmpze6e6q14.d(30): Error: undefined identifier `countOnes`

    /tmp/tmpze6e6q14.d(35): Error: undefined identifier `countOnes`

    /tmp/tmpze6e6q14.d(35): Error: undefined identifier `countOnes`

    /tmp/tmpze6e6q14.d(39): Error: undefined identifier `countOnes`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpze6e6q14.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] ret;\n    int size = arr.length;\n    if (size == 0) return\
    \ ret;\n    ret.length = size;\n    struct sorted\n    {\n        long item;\n\
    \        int dec;\n        int ones;\n    }\n    // generate bit len and number\
    \ of 1's\n    sorted[] one_dec = new sorted[size];\n    foreach (i, ref val; arr)\n\
    \    {\n        one_dec[i].item = val;\n        if (val < 0)\n        {\n    \
    \        one_dec[i].dec = -1;\n            one_dec[i].ones = -1;\n        }\n\
    \        else\n        {\n            one_dec[i].dec = int(val);\n           \
    \ one_dec[i].ones = count(to!string(i, 2));\n        }\n    }\n    // sort by\
    \ number of 1's and then by dec\n    sort!((a, b) => a.ones < b.ones || (a.ones\
    \ == b.ones && a.dec < b.dec))(one_dec);\n    // copy the result back into the\
    \ array\n    foreach (i, ref val; ret)\n    {\n        ret[i] = one_dec[i].item;\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n\
    \    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwpk4e8h6.d(21): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmpwpk4e8h6.d(42): Error: cannot implicitly convert expression `val` of type
    `long` to `int`

    /tmp/tmpwpk4e8h6.d(43): Error: undefined identifier `count`

    /tmp/tmpwpk4e8h6.d(47): Error: template instance `sort!((a, b) => a.ones < b.ones
    || a.ones == b.ones && (a.dec < b.dec))` template `sort` is not defined, did you
    mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwpk4e8h6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    int n = arr.length;\n    int[] list = new int[n];\n    for (int\
    \ i = 0; i < n; i++)\n    {\n        list[i] = (int)arr[i];\n    }\n    list =\
    \ list.sort!((a, b) => (a < 0 ? a : a.countOnes) == (b < 0 ? b : b.countOnes)\
    \ ? a < b : (a < 0 ? a : a.countOnes) < (b < 0 ? b : b.countOnes)).array();\n\
    \    for (int i = 0; i < n; i++)\n    {\n        arr[i] = list[i];\n    }\n  \
    \  return arr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1rcylj8j.d(24): Error: C style cast illegal, use `cast(int)arr[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1rcylj8j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] bucket = new long[1_000_000];\n    foreach(e; arr) bucket[cast(int)e]++;\n\
    \    int counter = 0;\n    foreach(e; bucket) while(e-->0) arr[counter++] = cast(long)counter;\n\
    \    return arr;\n}\n/*\nunittest\n{\n    alias candidate = sort_array;\n\n  \
    \  assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6z8r3zvn.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6z8r3zvn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] temp = new long[arr.length];\n    temp[] = arr[];\n   \
    \ sort!((a, b) => countOnes(a) == countOnes(b) ? a < b : countOnes(a) < countOnes(b))(temp);\n\
    \    return temp;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz0ltn1cp.d(22): Error: template instance `sort!((a, b) => countOnes(a)
    == countOnes(b) ? a < b : countOnes(a) < countOnes(b))` template `sort` is not
    defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0ltn1cp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n  return arr.sort!((x, y) =>\n  {\n    if (x < 0)\n    {\n      return\
    \ y;\n    }\n    else if (y < 0)\n    {\n      return -1;\n    }\n    else\n \
    \   {\n      int xCount = 0;\n      int yCount = 0;\n      long xLong = x;\n \
    \     long yLong = y;\n      while (xLong > 0)\n      {\n        if (xLong % 2\
    \ == 1)\n        {\n          xCount++;\n        }\n        xLong = xLong / 2;\n\
    \      }\n      while (yLong > 0)\n      {\n        if (yLong % 2 == 1)\n    \
    \    {\n          yCount++;\n        }\n        yLong = yLong / 2;\n      }\n\
    \      return xCount < yCount ? -1 : \n             xCount > yCount ? 1 : \n \
    \            x < y ? -1 : \n             x > y ? 1 : \n             0;\n    }\n\
    \  });\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp489k1bw6.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp489k1bw6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    // sort based on the number of 1's in the binary representation\n\
    \    // of each element of the array.\n    // Tuple!(int, long) is the count of\
    \ 1's and the actual number\n    auto binArr = arr.map!(a => tuple(a.countOnes,\
    \ a));\n    // sort by count of 1's in descending order and then by the number\
    \ itself in ascending order\n    binArr.sort!((a, b) => b[0] < a[0] || (b[0] ==\
    \ a[0] && b[1] > a[1]));\n    // now just map to the number\n    return binArr.map!(a\
    \ => a[1]).array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsl2k3hl8.d(23): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsl2k3hl8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    const size_t size = arr.length;\n    if (size == 0) \n       \
    \ return arr;\n    \n    return arr.map!(a => tuple(a, bits(a)))\n          .sort!((a,\
    \ b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]))\n          .map!(a => a[0]).array;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn72qbpl0.d(24): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn72qbpl0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n  return arr.map!(a => tuple(a, count(a.toString(2).toCharArray(),\
    \ c => c == '1'))).sort!(tupleCompare).map!(t => t[0]).array;\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L])\
    \ == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) ==\
    \ [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L,\
    \ 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsxiq45ph.d(20): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsxiq45ph.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n  //long[] arr = arr;\n  long[] temp = arr;\n  long[] temp2 = arr;\n\
    \  long count = 0;\n  long[]  binary;\n  binary.length = 32;\n  long i, j;\n \
    \ long temp0, temp1;\n  for (i = 0; i < arr.length; i++)\n  {\n    temp0 = arr[i];\n\
    \    count = 0;\n    for (j = 0; j < 32; j++)\n    {\n      temp1 = temp0 % 2;\n\
    \      if (temp1 == 1)\n      {\n        count++;\n      }\n      temp0 = temp0\
    \ / 2;\n      binary[j] = temp1;\n    }\n    temp[i] = count;\n    temp2[i] =\
    \ arr[i];\n  }\n  long temp3;\n  for (i = 0; i < arr.length; i++)\n  {\n    for\
    \ (j = 0; j < arr.length; j++)\n    {\n      if (temp[i] < temp[j])\n      {\n\
    \        temp3 = temp[i];\n        temp[i] = temp[j];\n        temp[j] = temp3;\n\
    \        temp3 = temp2[i];\n        temp2[i] = temp2[j];\n        temp2[j] = temp3;\n\
    \      }\n      else if (temp[i] == temp[j])\n      {\n        if (temp2[i] <\
    \ temp2[j])\n        {\n          temp3 = temp[i];\n          temp[i] = temp[j];\n\
    \          temp[j] = temp3;\n          temp3 = temp2[i];\n          temp2[i] =\
    \ temp2[j];\n          temp2[j] = temp3;\n        }\n      }\n    }\n  }\n  return\
    \ temp2;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_p803fsc.d(79): unittest failure

    ----------------

    ??:? _d_unittestp [0x428cad]

    ??:? void tmp_p803fsc.__unittest_L75_C1() [0x428431]

    ??:? void tmp_p803fsc.__modtest() [0x428a2c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddff]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42cc92]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4320d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432580]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43205d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42cc69]

    ??:? runModuleUnitTests [0x42dbd5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429170]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n\t// type(T)\n\t// typeof(T)\n\t// T[]\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6m9tmmwr.d(23): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6m9tmmwr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    struct custom_sort\n    {\n        @property{\n            @returns{\
    \ r = 0; }\n        }\n        long one_count;\n        @property{\n         \
    \   @returns{ r = 1; }\n        }\n        long decimal_value;\n    }\n    //\
    \ Yay for D <3\n    int i = 0;\n    custom_sort[] temp = new custom_sort[arr.length];\n\
    \    foreach(val; arr)\n    {\n        temp[i].one_count = count_ones(val);\n\
    \        temp[i].decimal_value = val;\n        i++;\n    }\n    foreach(val; temp)\n\
    \    {\n        writeln(val.one_count);\n    }\n    // if (arr.empty)\n    //\
    \ {\n    //     return;\n    // }\n    auto cmp = (a, b) => (a.one_count == b.one_count)\
    \ ? a.decimal_value - b.decimal_value : a.one_count - b.one_count;\n    std.algorithm.sort(temp,\
    \ cmp);\n    i = 0;\n    foreach(val; temp)\n    {\n        arr[i] = val.decimal_value;\n\
    \        i++;\n    }\n    return arr;\n}\nlong count_ones(long n)\n{\n    long\
    \ count = 0;\n    while (n > 0)\n    {\n        count += n & 1;\n        n >>=\
    \ 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvy2qubwg.d(23): Error: no identifier for declarator `r`

    /tmp/tmpvy2qubwg.d(23): Error: declaration expected, not `=`

    /tmp/tmpvy2qubwg.d(27): Error: no identifier for declarator `r`

    /tmp/tmpvy2qubwg.d(27): Error: declaration expected, not `=`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvy2qubwg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return to!(long[])(arr.map!((x){\n        return tuple(x, countOnes(x),\
    \ x);\n    }).sort!((a, b){\n        auto [ x, onesX, decX ] = a;\n        auto\
    \ [ y, onesY, decY ] = b;\n        return onesX > onesY ? 1 : onesX < onesY ?\
    \ -1 : decX > decY ? 1 : decX < decY ? -1 : 0;\n    }).map!((a){\n        auto\
    \ [ x, ones, dec ] = a;\n        return x;\n    }));\n}\nunittest\n{\n    alias\
    \ candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L,\
    \ -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L,\
    \ 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L,\
    \ 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L,\
    \ 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L,\
    \ 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0z02b_pt.d(23): Error: basic type expected, not `[`

    /tmp/tmp0z02b_pt.d(23): Error: found `,` when expecting `]`

    /tmp/tmp0z02b_pt.d(23): Error: semicolon expected, not `]`

    /tmp/tmp0z02b_pt.d(23): Error: found `]` instead of statement

    /tmp/tmp0z02b_pt.d(24): Error: basic type expected, not `[`

    /tmp/tmp0z02b_pt.d(24): Error: found `,` when expecting `]`

    /tmp/tmp0z02b_pt.d(24): Error: semicolon expected, not `]`

    /tmp/tmp0z02b_pt.d(24): Error: found `]` instead of statement

    /tmp/tmp0z02b_pt.d(27): Error: basic type expected, not `[`

    /tmp/tmp0z02b_pt.d(27): Error: found `,` when expecting `]`

    /tmp/tmp0z02b_pt.d(27): Error: semicolon expected, not `]`

    /tmp/tmp0z02b_pt.d(27): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0z02b_pt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] y = new long[arr.length];\n    int[] bit_count = new int[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++) {\n        y[i] = arr[i];\n        bit_count[i]\
    \ = std.bitmanip.popCount(arr[i]);\n    }\n    std.algorithm.sort!((a, b) => typeof(std.bitmanip.popCount(a))\
    \ == typeof(std.bitmanip.popCount(b)) ? a < b : std.bitmanip.popCount(a) < std.bitmanip.popCount(b))(y);\n\
    \    return y;\n}\n//by davide\nlong[] sort_array2(long[] arr) \n{\n    long[]\
    \ y = new long[arr.length];\n    int[] bit_count = new int[arr.length];\n    for\
    \ (int i = 0; i < arr.length; i++) {\n        y[i] = arr[i];\n        bit_count[i]\
    \ = std.bitmanip.popCount(arr[i]);\n    }\n    std.algorithm.sort!((a, b) => \n\
    \    {\n        if (typeof(std.bitmanip.popCount(a)) == typeof(std.bitmanip.popCount(b)))\n\
    \            return a < b;\n        else \n            return std.bitmanip.popCount(a)\
    \ < std.bitmanip.popCount(b);\n    })(y);\n    return y;\n}\n//by giantpizza\n\
    long[] sort_array3(long[] arr) \n{\n    import std.algorithm.comparison : equal;\n\
    \    import std.algorithm.iteration : map;\n    import std.range : sort;\n   \
    \ import std.stdio : writeln;\n    import std.string : format;\n    return arr.sort!((a,\
    \ b) => {\n        auto bita = a.format(\"%b\").countUntil('1');\n        auto\
    \ bitb = b.format(\"%b\").countUntil('1');\n        if (equal(bita, bitb))\n \
    \          \nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp0454d3l.d(60): Error: found `unittest` instead of statement

    /tmp/tmpp0454d3l.d(73): Error: found `void` when expecting `)` following template
    argument list

    /tmp/tmpp0454d3l.d(73): Error: found `main` when expecting `;` following `return`
    statement

    /tmp/tmpp0454d3l.d(73): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmpp0454d3l.d(73): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp0454d3l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    /*\n        Split arr into two arrays:\n        - [ones_arr] with\
    \ its element binary representation with one or more ones.\n        - [non_ones_arr]\
    \ with other elements.\n        Sort ones_arr and non_ones_arr separately.\n \
    \       Then, merge the two arrays and return it.\n    */\n    // Split arr into\
    \ two arrays.\n    long[] ones_arr;\n    long[] non_ones_arr;\n    tuple(long[],\
    \ long[]) t = arr.partition!((x) { return std.bitmanip.popCount(x) > 0; });\n\
    \    ones_arr = t[0];\n    non_ones_arr = t[1];\n    // Sort ones_arr by number\
    \ of ones in binary representation.\n    ones_arr.sort!((a, b) {\n        // Count\
    \ number of ones in binary representation.\n        size_t a_ones = std.bitmanip.popCount(a);\n\
    \        size_t b_ones = std.bitmanip.popCount(b);\n        if (a_ones > b_ones)\n\
    \            return 1;\n        else if (a_ones < b_ones)\n            return\
    \ -1;\n        else\n            return a.compare(b);\n    });\n    // Sort non_ones_arr.\n\
    \    non_ones_arr.sort;\n    // Merge both arrays.\n    return ones_arr ~ non_ones_arr;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe0is7qgh.d(30): Error: found `[` when expecting `.` following long

    /tmp/tmpe0is7qgh.d(30): Error: found `]` when expecting identifier following `long`.

    /tmp/tmpe0is7qgh.d(30): Error: found `[` when expecting `.` following long

    /tmp/tmpe0is7qgh.d(30): Error: found `]` when expecting identifier following `long`.

    /tmp/tmpe0is7qgh.d(30): Error: found `t` when expecting `;` following statement

    /tmp/tmpe0is7qgh.d(30): Error: found `=` instead of statement

    /tmp/tmpe0is7qgh.d(30): Error: declaration expected, not `)`

    /tmp/tmpe0is7qgh.d(31): Error: no identifier for declarator `ones_arr`

    /tmp/tmpe0is7qgh.d(31): Error: declaration expected, not `=`

    /tmp/tmpe0is7qgh.d(32): Error: no identifier for declarator `non_ones_arr`

    /tmp/tmpe0is7qgh.d(32): Error: declaration expected, not `=`

    /tmp/tmpe0is7qgh.d(44): Error: no identifier for declarator `ones_arr.sort!((a,
    b)

    {

    size_t a_ones = std.bitmanip.popCount(a);

    size_t b_ones = std.bitmanip.popCount(b);

    if (a_ones > b_ones)

    return 1;

    else if (a_ones < b_ones)

    return '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    //long[] result = arr.dup;\n    return arr.sort!((a, b) {\n  \
    \      long val1 = popCount(a);\n        long val2 = popCount(b);\n        return\
    \ val1 < val2 ? -1 : val1 > val2 ? 1 : a < b ? -1 : a > b ? 1 : 0;\n    });\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6m4t1azh.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6m4t1azh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{ \n  return arr.sort!((a, b) {\n    auto aones = (a == 0) ? 0 : (typeof(a)\
    \ * a).popCount;\n    auto bones = (b == 0) ? 0 : (typeof(b) * b).popCount;\n\
    \    return (aones == bones) ? (a - b) : (aones - bones);\n  });\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpofngg4xq.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpofngg4xq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    arr.sort!((a, b) {\n        auto a_ones = a.countOnes;\n     \
    \   auto b_ones = b.countOnes;\n        return a_ones < b_ones || (a_ones == b_ones\
    \ && a < b);\n    });\n    return arr;\n}\n//\n//long[] sort_array(long[] arr)\
    \ \n//{\n//    arr.sort!((a, b) {\n//        auto a_ones = a.countOnes;\n//  \
    \      auto b_ones = b.countOnes;\n//        return a_ones < b_ones || (a_ones\
    \ == b_ones && a < b);\n//    });\n//    return arr;\n//}\n//\n//long[] sort_array(long[]\
    \ arr) \n//{\n//    arr.sort!((a, b) {\n//        auto a_ones = a.countOnes;\n\
    //        auto b_ones = b.countOnes;\n//        return a_ones < b_ones || (a_ones\
    \ == b_ones && a < b);\n//    });\n//    return arr;\n//}\n//\n//long[] sort_array(long[]\
    \ arr) \n//{\n//    arr.sort!((a, b) {\n//        auto a_ones = a.countOnes;\n\
    //        auto b_ones = b.countOnes;\n//        return a_ones < b_ones || (a_ones\
    \ == b_ones && a < b);\n//    });\n//    return arr;\n//}\n//\n//long[] sort_array(long[]\
    \ arr) \n//{\n//    arr.sort!((a, b) {\n//        auto a_ones = a.countOnes;\n\
    //        auto b_ones = b.countOnes;\n//        return a_ones < b_ones || (a_ones\
    \ == b_ones && a < b);\n//    });\n//    return arr;\n//}\n//\n//long[] sort_array(long[]\
    \ arr) \n//{\n//    arr.sort!((a, b) {\n//        auto a_ones = a.countOnes;\n\
    //        auto b\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp640ms2ir.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp640ms2ir.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    //foreach(i; arr)\n    //{\n    //    //printf(\"%s\\n\", i);\n   \
    \ //    if (i >= 0)\n    //    {\n    //        posArr ~= i;\n    //    }\n  \
    \  //    else if (i < 0)\n    //    {\n    //        negArr ~= i;\n    //    }\n\
    \    //}\n    //arraySort!(char[])(posArr);\n    //arraySort!(char[])(negArr);\n\
    \    //return posArr ~ negArr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx1d5bwn3.d(18): Error: function `tmpx1d5bwn3.sort_array` has no
    `return` statement, but is expected to return a value of type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx1d5bwn3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n  long[] newarr;\n  if(arr.length == 0)\n    return arr;\n  else if(arr.length\
    \ == 1)\n    return [arr[0]];\n  long[] tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjbii125h.d(26): Error: comma expected separating array initializers,
    not `unittest`

    /tmp/tmpjbii125h.d(27): Error: semicolon expected, not `{`

    /tmp/tmpjbii125h.d(39): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjbii125h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.map!((a) => tuple(a, a.to!string.count('1'))).sort!(\n\
    \        (a, b) => a[1] > b[1]\n        ?\n        1 : a[1] < b[1] ? -1 : a[0]\
    \ > b[0] ? 1 : a[0] < b[0] ? -1 : 0\n    ).map!((a) => a[0]).array;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiajtehf1.d(20): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiajtehf1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n\tauto comp = (l, r) =>\n\t{\n\t\tsize_t nl = countOnes(l);\n\t\t\
    size_t nr = countOnes(r);\n\t\treturn nl < nr ? -1\n\t\t\t: nl > nr ? 1\n\t\t\t\
    : l < r ? -1\n\t\t\t: l > r ? 1\n\t\t\t: 0;\n\t};\n\treturn arr.sort!comp;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L,\
    \ -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L,\
    \ 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpic_h88iu.d(20): Error: variable `tmpic_h88iu.sort_array.comp` type
    `void` is inferred from initializer `(l, r) => ()

    {

    size_t nl = countOnes(l);

    size_t nr = countOnes(r);

    return nl < nr ? -1 : nl > nr ? 1 : l < r ? -1 : l > r ? 1 : 0;

    }

    `, and variables cannot be of type `void`

    /tmp/tmpic_h88iu.d(20): Error: template lambda has no value

    /tmp/tmpic_h88iu.d(30): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpic_h88iu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    const int[] bits = arr.map!(n => n.countOnes()).array;\n    return\
    \ arr.sort!((a, b) => (bits[a] > bits[b]) ? 1 : (bits[a] < bits[b]) ? -1 : (a\
    \ > b) ? 1 : (a < b) ? -1 : 0);\n}\n/*\n    import std.algorithm;\n    int[] bits(long[]\
    \ arr) {\n        return arr.map!(n => n.countOnes()).array;\n    }\n    long[]\
    \ sort_array(long[] arr) {\n        return arr.sort!((a, b) => (bits(arr)[a] >\
    \ bits(arr)[b]) ? 1 : (bits(arr)[a] < bits(arr)[b]) ? -1 : (a > b) ? 1 : (a <\
    \ b) ? -1 : 0);\n    }\n*/\n/*\n    import std.algorithm;\n    long[] sort_array(long[]\
    \ arr) {\n        int[] bits = arr.map!(n => n.countOnes()).array;\n        return\
    \ arr.sort!((a, b) => (bits[a] > bits[b]) ? 1 : (bits[a] < bits[b]) ? -1 : (a\
    \ > b) ? 1 : (a < b) ? -1 : 0);\n    }\n*/\n/*\n    import std.algorithm;\n  \
    \  long[] sort_array(long[] arr) {\n        uint[] bits = arr.map!(n => n.countOnes()).array;\n\
    \        return arr.sort!((a, b) => (bits[a] > bits[b]) ? 1 : (bits[a] < bits[b])\
    \ ? -1 : (a > b) ? 1 : (a < b) ? -1 : 0);\n    }\n*/\n/*\n    import std.algorithm;\n\
    \    long[] sort_array(long[] arr) {\n        ulong[] bits = arr.map!(n => n.countOnes()).array;\n\
    \        return arr.sort!((a, b) => (bits[a] > bits[b]) ? 1 : (bits[a] < bits[\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L,\
    \ -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L,\
    \ 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1wgr2cbz.d(46): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wgr2cbz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto tuples = arr.map!(a => tuple(a, std.bitmanip.countOnes(a),\
    \ int.toString(a)));\n    tuples.sort!((t1, t2) => t1[1] < t2[1] || (t1[1] ==\
    \ t2[1] && t1[2] < t2[2]));\n    return tuples.map!(t => t[0]).array;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp89jznap8.d(20): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp89jznap8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto map = arr.map!(l => tuple(l, countOnes(l)));\n    map.sort!(a,\
    \ b => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return map.map!(x =>\
    \ x[0]).array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzwc69nz0.d(20): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzwc69nz0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    struct sorter\n    {\n        size_t oneCount;\n        long value;\n\
    \    }\n    auto sortfunc = (a, b) {\n        if (a.oneCount != b.oneCount)\n\
    \            return a.oneCount < b.oneCount;\n        return a.value < b.value;\n\
    \    };\n    auto arrLength = arr.length;\n    auto sarr = new sorter[](arrLength);\n\
    \    foreach (i, element; arr)\n    {\n        auto s = sorter(element);\n   \
    \     foreach (i; element)\n        {\n            if (i & 1)\n              \
    \  s.oneCount++;\n            i >>= 1;\n        }\n        sarr[i] = s;\n    }\n\
    \    std.algorithm.sort(sarr, sortfunc);\n    auto result = new long[](arrLength);\n\
    \    foreach (i, element; sarr)\n    {\n        result[i] = element.value;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt1nhc1mj.d(25): Error: variable `tmpt1nhc1mj.sort_array.sortfunc`
    type `void` is inferred from initializer `(a, b)

    {

    if (a.oneCount != b.oneCount)

    return a.oneCount < b.oneCount;

    return a.value < b.value;

    }

    `, and variables cannot be of type `void`

    /tmp/tmpt1nhc1mj.d(25): Error: template lambda has no value

    /tmp/tmpt1nhc1mj.d(35): Error: invalid `foreach` aggregate `element`

    /tmp/tmpt1nhc1mj.d(43): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt1nhc1mj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    /*\n        long[] result = new long[arr.length];\n        for\
    \ (int i = 0; i < arr.length; i++) {\n            if (arr[i] >= 0) {\n       \
    \         result[i] = arr[i];\n            } else {\n                result[arr.length\
    \ - i - 1] = arr[i];\n            }\n        }\n        return result;\n    */\n\
    \    const ulong[] arrUnsigned = cast(ulong[])arr;\n    sort!((a, b) => countOnes(a)\
    \ > countOnes(b) || (countOnes(a) == countOnes(b) && a > b))(arrUnsigned);\n \
    \   return cast(long[])arrUnsigned;\n}\nuint countOnes(in ulong number)\n{\n \
    \   //source: https://stackoverflow.com/questions/109023/how-to-count-the-number-of-set-bits-in-a-32-bit-integer\n\
    \    uint count = 0;\n    while (number != 0) {\n        count += (number & 1u);\n\
    \        number >>= 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9ryo7o89.d(32): Error: template instance `sort!((a, b) => countOnes(a)
    > countOnes(b) || countOnes(a) == countOnes(b) && (a > b))` template `sort` is
    not defined, did you mean sqrt?

    /tmp/tmp9ryo7o89.d(41): Error: cannot modify `const` expression `number`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ryo7o89.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n\tauto retArr = arr.sort;\n\treturn arr.sort!((a, b) {\n\t\tauto aOnes\
    \ = a.binaryRepresentation.count('1');\n\t\tauto bOnes = b.binaryRepresentation.count('1');\n\
    \t\tif (aOnes == bOnes)\n\t\t\treturn a - b;\n\t\treturn aOnes - bOnes;\n\t});\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdx_elv93.d(20): Error: no property `sort` for type `long[]`

    /tmp/tmpdx_elv93.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdx_elv93.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n  auto unique_ones = unique((\n    (arr.map!((a) => to!ubyte(ones(a)))).array).dup);\n\
    \  long[] sorted;\n  foreach(one; unique_ones)\n  {\n    long[] one_arr = (arr.filter!((a)\
    \ => to!ubyte(ones(a)) == one)).array;\n    auto one_arr_sorted = one_arr.sort!((a,\
    \ b) => a < b);\n    sorted ~= one_arr_sorted;\n  }\n  return sorted;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ca4t9_y.d(20): Error: undefined identifier `unique`, did you mean
    struct `Unique(T)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ca4t9_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    Tuple!(bool[], ulong[]) a = sort!(\n            (a, b) => \n \
    \               a[0].count!(i => i) == b[0].count!(i => i) ?\n               \
    \     a[1] < b[1] :\n                    a[0].count!(i => i) < b[0].count!(i =>\
    \ i)\n    )(\n        arr.map!(x => Tuple!(x.toBinaryString.map!(c => c == '1').array,\
    \ x))\n    );\n    return a.map!(b => b[1]);\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfosdckd8.d(20): Error: template instance `sort!((a, b) => a[0].count!((i)
    => i) == b[0].count!((i) => i) ? a[1] < b[1] : a[0].count!((i) => i) < b[0].count!((i)
    => i))` template `sort` is not defined, did you mean sqrt?

    /tmp/tmpfosdckd8.d(28): Error: no property `map` for type `Tuple!(bool[], ulong[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfosdckd8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    arr.sort!(a => (a >> 6) & 0x3F)();\n    return arr;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvkscn7xb.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkscn7xb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] result;\n    foreach(long number; arr)\n    {\n       \
    \ result ~= tuple(number, number.countOneBits);\n    }\n    sort(result);\n  \
    \  return result.map!(a => a[0]);\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23z8vqwu.d(23): Error: no property `countOneBits` for type `long`

    /tmp/tmp23z8vqwu.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp23z8vqwu.d(26): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23z8vqwu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    // create tuple of number and the binary string\n    arr = arr.map!(i\
    \ => tuple(i, to!string(i, 2)));\n    // sort by number of 1s and number\n   \
    \ arr.sort!(i => tuple(i[1].count('1'), i[0]));\n    // reverse array and return\n\
    \    return arr.map!(i => i[0]).reversed;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy72mm7pw.d(21): Error: no property `map` for type `long[]`

    /tmp/tmpy72mm7pw.d(23): Error: no property `sort` for type `long[]`

    /tmp/tmpy72mm7pw.d(25): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy72mm7pw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n\tmixin(std.algorithm.sort!(a => a.binaryRepresentation.count(true))(arr));\n\
    \treturn arr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpulf5srck.d(20): Error: undefined identifier `algorithm` in package
    `std`

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.array.map!(x => tuple(x, cast(ulong)x).retro).sort!((a,\
    \ b) =>\n    {\n        if (a[1] == b[1])\n            return a[0] < b[0];\n \
    \       else\n            return a[1] < b[1];\n    }).array.map!(x => x[0]);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4z4rnxpy.d(20): Error: no property `array` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4z4rnxpy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    //sort array\n    auto sorted_arr = arr.sort;\n    //check each\
    \ element of the array and see how many 1's it has\n    //then create a tuple2\n\
    \    //then sort the array by tuple2.field1\n    //return the array\n    auto\
    \ the_array = new Tuple2[](arr.length);\n    auto count;\n    foreach(index, value;\
    \ sorted_arr)\n    {\n        count = value.countOne();\n        the_array[index]\
    \ = tuple(count, value);\n    }\n    auto sorted_by_one = the_array.sort;\n  \
    \  //re-arrange the array to match the one in the example\n    auto sorted_by_one_rearranged\
    \ = new long[](arr.length);\n    foreach(index, value; sorted_by_one)\n    {\n\
    \        sorted_by_one_rearranged[index] = value.field2;\n    }\n    return sorted_by_one_rearranged;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4qzyrbd7.d(27): Error: no identifier for declarator `count`

    /tmp/tmp4qzyrbd7.d(27): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4qzyrbd7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n  auto arr2 = arr.dup;\n  auto arr3 = arr.dup;\n  sort!((a, b) =>\
    \ a < b);\n  sort!((a, b) => countOnes(a) < countOnes);\n  return arr;\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L,\
    \ 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L])\
    \ == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) ==\
    \ [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxxxcig3l.d(22): Error: template instance `sort!((a, b) => a < b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmpxxxcig3l.d(23): Error: template instance `sort!((a, b) => countOnes(a)
    < countOnes)` template `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxxxcig3l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{ \n    const int size = arr.length;\n    assert(size > 0);\n    if(size\
    \ == 1)\n    {\n        return arr;\n    }\n    // \n    static int countOnes(long\
    \ num) \n    {\n        int cnt = 0;\n        while(num > 0)\n        {\n    \
    \        if(num % 2 == 1)\n            {\n                cnt++;\n           \
    \ }\n            num /= 2;\n        }\n        return cnt;\n    }\n    // m_countBits\
    \ => [1, 2, 3, 2, 1]\n    int[] m_countBits = arr.map!(countOnes);\n    // m_isSameBits\
    \ => [false, false, false, true, true]\n    bool[] m_isSameBits = m_countBits.map!((e,\
    \ i) => \n    {\n        if(i > 0)\n        {\n            return m_countBits[i]\
    \ == m_countBits[i - 1];\n        }\n        return false;\n    });\n    // m_numbers\
    \ => [-2, -3, -4, -5, -6]\n    ulong[] m_numbers = arr.map!(to!ulong);\n    //\
    \ m_data => [0, 0, 0, 0, 0]\n    int[] m_data = [0, 0, 0, 0, 0];\n    // m_index\
    \ => [0, 1, 2, 3, 4]\n    int[] m_index = m_data.map!((_) => -1);\n    // m_maxes\
    \ => [1, 2, 3, 2, 1]\n    int[] m_maxes = [0, 0, 0, 0, 0];\n    int m_max = 0;\n\
    \    // m_isFirstSame => [false, false, false, true, true]\n    bool[] m_isFirstSame\
    \ = [false, false, false, false, false];\n    for(int i = 0; i < size; i++)\n\
    \    {\n        // m_max == 3\n        if(m_countBits[i] > m_max)\n        {\n\
    \            m_max = m\nunittest\n{\n    alias candidate = sort_array;\n\n   \
    \ assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdns6vay2.d(68): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpdns6vay2.d(81): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpdns6vay2.d(81): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpdns6vay2.d(81): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdns6vay2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.sort!q{\n        import std.string;\n        import\
    \ std.conv;\n        auto s = to!string(to!uint(a));\n        auto result = 0L;\n\
    \        foreach(i; s) result += i == '1' ? 1 : 0;\n        return result;\n \
    \   }();\n}\n// **************************************************************************\n\
    // **************************************************************************\n\
    // **************************************************************************\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L,\
    \ -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L,\
    \ 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
    \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
    \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
    \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
    \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
    \ 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnw7rp6ip.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnw7rp6ip.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    auto larr = arr.dup;\n    std.algorithm.sort!(\"a.count(true)\
    \ < b.count(true) || (a.count(true) == b.count(true) && a < b)\")(larr);\n   \
    \ return larr;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp77gm2648.d(21): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp77gm2648.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    static assert(arr.length >= 1 && arr.length <= 100);\n    auto\
    \ res = arr.map!((x) => typeof(return)(x, countOnes(x))).array;\n    res.sort!((a,\
    \ b) => a[1] == b[1] ? a[0] < b[0] : a[1] < b[1]);\n    return res.map!((x) =>\
    \ x[0]).array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
    \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L,\
    \ -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L,\
    \ 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n \
    \   assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_qgx6o72.d(20): Error: variable `arr` cannot be read at compile
    time

    /tmp/tmp_qgx6o72.d(20):        while evaluating: `static assert(arr.length >=
    1LU && (arr.length <= 100))`

    /tmp/tmp_qgx6o72.d(21): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_qgx6o72.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    return arr.dup.sort!((a, b) =>\n        (a ^ 0xFFFFFFFF) > (b\
    \ ^ 0xFFFFFFFF) ? 1 :\n        (a ^ 0xFFFFFFFF) < (b ^ 0xFFFFFFFF) ? -1 :\n  \
    \      a > b ? 1 : -1\n    );\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L,\
    \ -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L,\
    \ 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L,\
    \ 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L,\
    \ 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L,\
    \ 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L,\
    \ 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpizhqqi5k.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpizhqqi5k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
    \ to sort an array of non-negative integers according to\n    number of ones in\
    \ their binary representation in ascending order.\n    For similar number of ones,\
    \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
    \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L,\
    \ 0L, 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[]\
    \ arr) \n{\n    long[] res = new long[arr.length];\n    int j = 0;\n    foreach(int\
    \ i, ref long item; arr)\n    {\n        res[j] = item;\n        j++;\n    }\n\
    \    res.sort(binary_compare);\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L,\
    \ 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L,\
    \ -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L,\
    \ 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L,\
    \ 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L,\
    \ 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L,\
    \ 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L,\
    \ 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoog3eiy7.d(27): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoog3eiy7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
