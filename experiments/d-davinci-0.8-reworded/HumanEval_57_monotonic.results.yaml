name: HumanEval_57_monotonic
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    return\
    \ (l[1..$].zip(l[0..$-1]).every!((a, b) => a > b || a < b));\n}\n/*\nThis function\
    \ reads numbers from a file and writes it back to a file. It is based on\nstd.algorithm.map\
    \ to transform it to a new range.\n*/\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptzbnmy8a.d(15): Error: no property `zip` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptzbnmy8a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    bool found\
    \ = false;\n    foreach(int i, long e; l) \n    {\n        if (i != 0 && l[i -\
    \ 1] != e) \n        {\n            if (found) \n            {\n             \
    \   return false;\n            }\n            found = true;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmuajvha6.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282ed]\\n??:? void tmpmuajvha6.__unittest_L29_C1()\
    \ [0x427e04]\\n??:? void tmpmuajvha6.__modtest() [0x428070]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c36f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b202]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430395]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430844]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430321]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1d9]\\n??:? runModuleUnitTests [0x42c145]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428737]\\n??:? _d_run_main [0x4286a2]\\n??:? main [0x428083]\\\
    n??:? __libc_start_main [0xa472c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n  pure nothrow\
    \ @safe\n{\n  if (l.length <= 1) return true;\n  bool increasing = true;\n  bool\
    \ decreasing = true;\n  foreach (i, e; l[1..$])\n  {\n    if (e < l[i - 1]) increasing\
    \ = false;\n    if (e > l[i - 1]) decreasing = false;\n  }\n  return increasing\
    \ || decreasing;\n}\n/*\n{\n    return (l.length <= 1) ||\n        (l[0] < l[1]\
    \ && monotonic(l[1..$])) ||\n        (l[0] > l[1] && monotonic(l[1..$]));\n}\n\
    */\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpmq73jcr0.d(21): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428426]\\n??:? pure nothrow @safe bool tmpmq73jcr0.monotonic(long[])\
    \ [0x427db7]\\n??:? void tmpmq73jcr0.__unittest_L33_C1() [0x427e75]\\n??:? void\
    \ tmpmq73jcr0.__modtest() [0x4280f8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b28a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43041d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b261]\\n??:? runModuleUnitTests [0x42c1cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428838]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287bf]\\n??:? _d_run_main [0x42872a]\\n??:? main [0x42810b]\\\
    n??:? __libc_start_main [0x8758554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length\
    \ > 1)\n    {\n      long[] ll;\n      ll[] = l[0..l.length-1];\n      long[]\
    \ lr;\n      lr[] = l[1..l.length];\n      if (all!(a => b => a <= b)(ll[], lr[]))\n\
    \      {\n          if (all!(a => b => a >= b)(ll[], lr[]))\n          {\n   \
    \           return true;\n          }\n      }\n    }\n    return false;\n}\n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfxz2cj5p.d(21): Error: template instance `all!((a) => (b) =>\
    \ a <= b)` template `all` is not defined, did you mean ll?\\n/tmp/tmpfxz2cj5p.d(23):\
    \ Error: template instance `all!((a) => (b) => a >= b)` template `all` is not\
    \ defined, did you mean ll?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpfxz2cj5p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \nin \n{\n    return\
    \ l.length == 0 || \n    (!all!(i => l[i] <= l[i + 1]) && !all!(i => l[i] >= l[i\
    \ + 1]));\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv8pc2t98.d(13): Error: function `tmpv8pc2t98.monotonic` `in`\
    \ and `out` contracts can only appear without a body when they are virtual interface\
    \ functions or abstract\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpv8pc2t98.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    auto direction\
    \ = 0;\n    foreach (i, ref a; l) {\n        if (i == 0) {\n            continue;\n\
    \        }\n        if (direction == 0) {\n            if (a > l[i - 1]) {\n \
    \               direction = 1;\n            } else if (a < l[i - 1]) {\n     \
    \           direction = -1;\n            }\n        } else if (direction == 1)\
    \ {\n            if (a < l[i - 1]) {\n                return false;\n        \
    \    }\n        } else if (direction == -1) {\n            if (a > l[i - 1]) {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    auto res\
    \ = zip(l[0 .. $ - 1], l[1 .. $]);\n    foreach(res; (long a, long b))\n    {\n\
    \        if (a < b)\n        {\n            long[] temp_l;\n            foreach(res;\
    \ (long a, long b))\n            {\n                if (a > b)\n             \
    \   {\n                    return false;\n                }\n            }\n \
    \           return true;\n        }\n        else if (a > b)\n        {\n    \
    \        long[] temp_l;\n            foreach(res; (long a, long b))\n        \
    \    {\n                if (a < b)\n                {\n                    return\
    \ false;\n                }\n            }\n            return true;\n       \
    \ }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg6co2slx.d(16): Error: found `a` when expecting `.` following\
    \ long\\n/tmp/tmpg6co2slx.d(16): Error: found `,` when expecting identifier following\
    \ `long`.\\n/tmp/tmpg6co2slx.d(16): Error: found `long` when expecting `)`\\n/tmp/tmpg6co2slx.d(16):\
    \ Error: found `b` when expecting `)`\\n/tmp/tmpg6co2slx.d(16): Error: found `)`\
    \ instead of statement\\n/tmp/tmpg6co2slx.d(21): Error: found `a` when expecting\
    \ `.` following long\\n/tmp/tmpg6co2slx.d(21): Error: found `,` when expecting\
    \ identifier following `long`.\\n/tmp/tmpg6co2slx.d(21): Error: found `long` when\
    \ expecting `)`\\n/tmp/tmpg6co2slx.d(21): Error: found `b` when expecting `)`\\\
    n/tmp/tmpg6co2slx.d(21): Error: found `)` instead of statement\\n/tmp/tmpg6co2slx.d(27):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpg6co2slx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    return\
    \ isMonotonic(l[], (a, b) => a < b) ||\n           isMonotonic(l[], (a, b) =>\
    \ a > b);\n}\n \nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt_mw3xgf.d(15): Error: undefined identifier `isMonotonic`\\n/tmp/tmpt_mw3xgf.d(16):\
    \ Error: undefined identifier `isMonotonic`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpt_mw3xgf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    return\
    \ isMonotonic(l);\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmmen17we.d(15): Error: undefined identifier `isMonotonic`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmmen17we.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    return\
    \ is(typeof(l[]) == long[]);\n}\n/*\nReturn true is array elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  true\n    \n*/\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0wybllsj.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428255]\\n??:? void tmp0wybllsj.__unittest_L27_C1()\
    \ [0x427e07]\\n??:? void tmp0wybllsj.__modtest() [0x427fd8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c263]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0f6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0cd]\\n??:? runModuleUnitTests [0x42c039]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42862b]\\n??:? _d_run_main [0x428596]\\n??:? main [0x427feb]\\\
    n??:? __libc_start_main [0x5eb8f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    if(l.length\
    \ < 2) \n    {\n        return true;\n    } \n    else if(l[0] > l[1]) \n    {\n\
    \        auto flag = true;\n        foreach(index, val; l) \n        {\n     \
    \       if(index > 0) \n            {\n                if(l[index - 1] > l[index])\
    \ \n                {\n                    flag = true;\n                } \n\
    \                else \n                {\n                    flag = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return flag;\n    } \n    else \n    {\n        auto flag = true;\n    \
    \    foreach(index, val; l) \n        {\n            if(index > 0) \n        \
    \    {\n                if(l[index - 1] < l[index]) \n                {\n    \
    \                flag = true;\n                } \n                else \n   \
    \             {\n                    flag = false;\n                    break;\n\
    \                }\n            }\n        }\n        return flag;\n    }\n}\n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk5kexq4m.d(68): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42841d]\\n??:? void tmpk5kexq4m.__unittest_L60_C1()\
    \ [0x428071]\\n??:? void tmpk5kexq4m.__modtest() [0x42819c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c49f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b332]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304c5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430974]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430451]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b309]\\n??:? runModuleUnitTests [0x42c275]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428867]\\n??:? _d_run_main [0x4287d2]\\n??:? main [0x4281af]\\\
    n??:? __libc_start_main [0xc0f68554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n\tbool inc\
    \ = true;\n\tbool dec = true;\n\t\n\tfor (int i = 0; i < l.length - 1; i++)\n\t\
    {\n\t\tif (l[i] > l[i + 1])\n\t\t{\n\t\t\tinc = false;\n\t\t}\n\t\tif (l[i] <\
    \ l[i + 1])\n\t\t{\n\t\t\tdec = false;\n\t\t}\n\t}\n\t\n\treturn inc || dec;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n\tif (l.length\
    \ <= 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\timmutable inc = is(typeof(l[0]) ==\
    \ long);\n\tauto prev = l[0];\n\tforeach (cur; l[1 .. $]) \n\t{\n\t\tif (inc)\
    \ \n\t\t{\n\t\t\tif (cur < prev)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    } \n\t\telse \n\t\t{\n\t\t\tif (cur > prev)\n\t\t\t{\n\t\t\t\treturn false;\n\t\
    \t\t}\n\t\t}\n\t\tprev = cur;\n\t}\n\treturn true;\n}\n/*\nReturn the relative\
    \ height of pixels.\n    >>> heightmap([0, 1, 0, 2, 0, 2, 0, 1, 0])\n    [1, 0,\
    \ 1, 0, 1, 0, 1, 0, 1]\n    >>> heightmap([0, 1, 0, 2, 0, 2, 0, 1, 0])\n    [1,\
    \ 0, 1, 0, 1, 0, 1, 0, 1]\n*/\nlong[] heightmap(long[] ls) \n{\n\tlong[] res;\n\
    \tres.length = ls.length;\n\tforeach (immutable i, cur; ls) \n\t{\n\t\tres[i]\
    \ = cur;\n\t\tif (i > 0) \n\t\t{\n\t\t\tif (ls[i - 1] >= cur) \n\t\t\t{\n\t\t\t\
    \tres[i] = ls[i - 1] + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\n/*\nReturn a\
    \ list of pixels representing a mountain.\n    >>> mountain(2, 3)\n    [1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    >>> mountain(2, 3, peak_type='inverted_v')\n\
    \    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    >>> mountain(2, 3, peak_type='sp\n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr92_i8cl.d(66): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr92_i8cl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    return\
    \ monotonic(map!((x) => x[0])(l.zip(l[1..$])));\n}\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([0, 0, 0, 0])\n\
    \    true\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20,\
    \ 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \n*/\n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwxyuuyzf.d(15): Error: template instance `map!((x) => x[0])`\
    \ template `map` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpwxyuuyzf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n  bool cmp_asc\
    \ = true;\n  bool cmp_desc = true;\n  bool cmp = true;\n  long prev;\n  foreach(index,\
    \ elem; l)\n  {\n    if(index == 0)\n    {\n      prev = elem;\n      continue;\n\
    \    }\n    cmp_asc &= elem > prev;\n    cmp_desc &= elem < prev;\n    prev =\
    \ elem;\n  }\n  cmp = cmp_asc | cmp_desc;\n  return cmp;\n}\nunittest\n{\n   \
    \ alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpih80bydh.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282f5]\\n??:? void tmpih80bydh.__unittest_L33_C1()\
    \ [0x427f4d]\\n??:? void tmpih80bydh.__modtest() [0x428078]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c303]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b196]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430329]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b16d]\\n??:? runModuleUnitTests [0x42c0d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428744]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286cb]\\n??:? _d_run_main [0x428636]\\n??:? main [0x42808b]\\\
    n??:? __libc_start_main [0x4fd91554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    return\
    \ (l[$-1] > l[0]) == all!((l[0] > a) => (a))(l);\n}\n \n/*\nReturn true if array\
    \ elements are strictly increasing.\n    >>> strictly_increasing([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> strictly_increasing([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> strictly_increasing([4L, 1L, 0L, -10L])\n    false\n    \n*/\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj7w7_j84.d(15): Error: found `>` when expecting `)`\\n/tmp/tmpj7w7_j84.d(15):\
    \ Error: missing `{ ... }` for function literal\\n/tmp/tmpj7w7_j84.d(15): Error:\
    \ found `a` when expecting `)` following template argument list\\n/tmp/tmpj7w7_j84.d(15):\
    \ Error: found `)` when expecting `;` following `return` statement\\n/tmp/tmpj7w7_j84.d(15):\
    \ Error: found `=>` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpj7w7_j84.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n\tint count1=0;\n\
    \tint count2=0;\n\tforeach(i; 1..l.length) \n\t{\n\t\tif(l[i]>l[i-1])\n\t\t\t\
    count1++;\n\t\telse if(l[i]<l[i-1])\n\t\t\tcount2++;\n\t}\n\tif(count1==0||count2==0)\n\
    \t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    if (l.length<2)\
    \ return true;\n    enum bool increasing = l[0]<l[1];\n    for (long n=2; n<l.length;\
    \ n++) {\n        if (increasing) {\n            if (l[n-1]>l[n]) return false;\n\
    \        } else {\n            if (l[n-1]<l[n]) return false;\n        }\n   \
    \ }\n    return true;\n}\n \n/*\nReturn true if array is sorted.\n    >>> sorted([1L,\
    \ 2L, 3L, 4L])\n    true\n    >>> sorted([-9L, 10L, 100L, 4L])\n    false\n  \
    \  >>> sorted([1L, 4L, 0L, -10L])\n    false\n*/\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr36hju0p.d(16): Error: variable `l` cannot be read at compile\
    \ time\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr36hju0p.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (long i = 1; i < l.length; i++)\
    \ {\n        if (l[i - 1] > l[i]) {\n            increasing = false;\n       \
    \ }\n        if (l[i - 1] < l[i]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn true if the longest\
    \ monotonic subsequence of the array is increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n    \n\
    */\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    auto prev\
    \ = l[0];\n    auto increasing = true;\n    auto decreasing = true;\n    for (auto\
    \ current : l[1..$]) \n    {\n        if (current > prev) \n        {\n      \
    \      decreasing = false;\n        }\n        else if (current < prev) \n   \
    \     {\n            increasing = false;\n        }\n        prev = current;\n\
    \    }\n    return increasing || decreasing;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppuy2om3d.d(18): Error: no identifier for declarator `current`\\\
    n/tmp/tmppuy2om3d.d(18): Error: expression expected, not `:`\\n/tmp/tmppuy2om3d.d(18):\
    \ Error: found `l` when expecting `;` following `for` condition\\n/tmp/tmppuy2om3d.d(18):\
    \ Error: found `..` when expecting `,`\\n/tmp/tmppuy2om3d.d(18): Error: `$` is\
    \ valid only inside [] of index or slice\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmppuy2om3d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
