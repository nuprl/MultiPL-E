name: HumanEval_74_total_match
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that accepts\
  \ two arrays of strings and returns the array that has \n    total number of chars\
  \ in the all strings of the array less than the other array.\n\n    if the two arrays\
  \ have the same number of chars, return the first array.\n\n    Examples\n    >>>\
  \ total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
  , \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\"\
  , \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"\
  hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>>\
  \ total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \n\
  */\nstring[] total_match(string[] lst1, string[] lst2) \n"
tests: "unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
  \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
  hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
  , \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\",\
  \ \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
  ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
  ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
  hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
  \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
completions: ["{\n    int result = 0;\n    foreach(element; lst1)\n    {\n       \
    \ result += element.length;\n    }\n    int result2 = 0;\n    foreach(element;\
    \ lst2)\n    {\n        result2 += element.length;\n    }\n    if(result < result2)\
    \ return lst1;\n    else if(result > result2) return lst2;\n    else return lst1;\n\
    }", "{ \n    int l1 = 0;\n    foreach(i; lst1)\n    {\n        l1 += i.length;\n\
    \    }\n    int l2 = 0;\n    foreach(i; lst2)\n    {\n        l2 += i.length;\n\
    \    }\n    if(l1 > l2)\n    {\n        return lst2;\n    }\n    else\n    {\n\
    \        return lst1;\n    }\n    \n    \n}", "{\n    int lst1Total = 0;\n   \
    \ foreach(string s; lst1)\n    {\n        lst1Total += s.length;\n    }\n    int\
    \ lst2Total = 0;\n    foreach(string s; lst2)\n    {\n        lst2Total += s.length;\n\
    \    }\n    if(lst1Total == lst2Total)\n    {\n        return lst1;\n    }\n \
    \   else if(lst1Total < lst2Total)\n    {\n        return lst1;\n    }\n    else\n\
    \    {\n        return lst2;\n    }\n}", "{\n    auto rng1 = lst1.length;\n  \
    \  auto rng2 = lst2.length;\n    auto sz1 = 0;\n    auto sz2 = 0;\n    if (rng1\
    \ == 0 && rng2 == 0)\n    {\n        return [];\n    }\n    else\n    {\n    \
    \    if (rng1 == 0)\n        {\n            return lst2;\n        }\n        else\
    \ if (rng2 == 0)\n        {\n            return lst1;\n        }\n        else\n\
    \        {\n            for (auto i = 0; i < rng1; i++)\n            {\n     \
    \           sz1 += lst1[i].length;\n            }\n            for (auto i = 0;\
    \ i < rng2; i++)\n            {\n                sz2 += lst2[i].length;\n    \
    \        }\n            if (sz1 < sz2)\n            {\n                return\
    \ lst1;\n            }\n            else if (sz1 > sz2)\n            {\n     \
    \           return lst2;\n            }\n            else\n            {\n   \
    \             return lst1;\n            }\n        }\n    }\n}\n/*\n    Write\
    \ a function that accepts two arrays of numbers and returns the array \n    that\
    \ has min and max numbers in the array less than the other array.", "{\n    if(!lst1.length)\
    \ return lst1;\n    if(!lst2.length) return lst2;\n    auto len1 = lst1.map!(x\
    \ => x.length).reduce!(a, b => a + b);\n    auto len2 = lst2.map!(x => x.length).reduce!(a,\
    \ b => a + b);\n    return len1 < len2 ? lst1 : lst2;\n}", "{\n  // Your code\
    \ here.\n  int lst1_total = 0;\n  foreach(s; lst1)\n    lst1_total += s.length;\n\
    \  int lst2_total = 0;\n  foreach(s; lst2)\n    lst2_total += s.length;\n  return\
    \ (lst1_total < lst2_total) ? lst1 : lst2;\n}", "{\n    //write the code here\n\
    \    return lst1;\n}\n// ----- end of user code -----", "{\n    if (lst1.length\
    \ == 0 && lst2.length == 0)\n        return new string[0];\n    \n    int lst1_total\
    \ = 0;\n    int lst2_total = 0;\n    \n    foreach (str; lst1)\n        lst1_total\
    \ += str.length;\n    \n    foreach (str; lst2)\n        lst2_total += str.length;\n\
    \    \n    if (lst1_total == lst2_total)\n        return lst1;\n    else if (lst1_total\
    \ < lst2_total)\n        return lst1;\n    else\n        return lst2;\n}\n/*\n\
    \    Write a function that accepts two arrays of numbers, and returns the array\
    \ \n    with the largest sum of numbers.\n    if the two arrays have the same\
    \ sum, return the first array.", "{\n\tif (lst1.length == 0 && lst2.length ==\
    \ 0) return lst1;\n\tint count1 = 0;\n\tforeach (string st1; lst1) count1 += st1.length;\n\
    \tint count2 = 0;\n\tforeach (string st2; lst2) count2 += st2.length;\n\treturn\
    \ (count1 < count2) ? lst1 : lst2;\n}", "{\n    if(lst1.length == 0) \n    {\n\
    \        return lst1;\n    } \n    else if(lst2.length == 0) \n    {\n       \
    \ return lst2;\n    } \n    else if(lst1.length == lst2.length) \n    {\n    \
    \    return lst1;\n    } \n    else if(lst1.length > lst2.length) \n    {\n  \
    \      return lst2;\n    } \n    else \n    {\n        return lst1;\n    }\n}",
  "{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(x; lst1)\n    {\n        sum1\
    \ += x.length;\n    }\n    foreach(x; lst2)\n    {\n        sum2 += x.length;\n\
    \    }\n    if(sum1 < sum2)\n    {\n        return lst1;\n    }\n    else if(sum1\
    \ > sum2)\n    {\n        return lst2;\n    }\n    else\n    {\n        return\
    \ lst1;\n    }\n}", "{\n    if (lst1.length > lst2.length)\n        return lst2;\n\
    \    else if (lst1.length < lst2.length)\n        return lst1;\n    else if (lst1.length\
    \ == lst2.length)\n        return lst1;\n    else\n        return null;\n}", "{\n\
    \    int num1 = 0;\n    int num2 = 0;\n    foreach(element; lst1)\n    {\n   \
    \     num1 += element.length;\n    }\n    foreach(element; lst2)\n    {\n    \
    \    num2 += element.length;\n    }\n    return num1 < num2 ? lst1 : lst2;\n}",
  "{\n    string[] result;\n    if (lst1.length == 0) return lst1;\n    if (lst2.length\
    \ == 0) return lst2;\n    int tot1 = 0;\n    int tot2 = 0;\n    foreach (str;\
    \ lst1) {\n        tot1 += str.length;\n    }\n    foreach (str; lst2) {\n   \
    \     tot2 += str.length;\n    }\n    if (tot1 > tot2) {\n        result = lst2;\n\
    \    } else {\n        result = lst1;\n    }\n    return result;\n}", "{\n   \
    \ if(lst1.length == 0 && lst2.length == 0) return lst1;\n    int lst1Length =\
    \ 0;\n    int lst2Length = 0;\n    for(int i = 0; i < lst1.length; i++)\n    {\n\
    \        lst1Length += lst1[i].length;\n    }\n    for(int i = 0; i < lst2.length;\
    \ i++)\n    {\n        lst2Length += lst2[i].length;\n    }\n    if(lst1Length\
    \ == lst2Length) return lst1;\n    if(lst1Length < lst2Length) return lst1;\n\
    \    return lst2;\n}", "{\n    if(lst1.length == 0 && lst2.length == 0) \n   \
    \ {\n        return [];\n    }\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string\
    \ x; lst1) \n    {\n        sum1 += x.length;\n    }\n    foreach(string x; lst2)\
    \ \n    {\n        sum2 += x.length;\n    }\n    if(sum1 == sum2) \n    {\n  \
    \      return lst1;\n    }\n    else if(sum1 < sum2) \n    {\n        return lst1;\n\
    \    }\n    else \n    {\n        return lst2;\n    }\n}\n// test", "{\n    int\
    \ lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string str; lst1)\n  \
    \  {\n        lst1_total += str.length;\n    }\n    foreach(string str; lst2)\n\
    \    {\n        lst2_total += str.length;\n    }\n    return lst1_total > lst2_total\
    \ ? lst2 : lst1;\n}", "{\n    /*\n    int cnt1 = 0;\n    int cnt2 = 0;\n    foreach(string\
    \ x; lst1)\n    {\n        cnt1 += x.length;\n    }\n    foreach(string x; lst2)\n\
    \    {\n        cnt2 += x.length;\n    }\n    if(cnt1 > cnt2)\n    {\n       \
    \ return lst2;\n    }\n    return lst1;\n    */\n    int cnt1 = map!((x) => x.length)(lst1).reduce!((a,b)\
    \ => a+b)();\n    int cnt2 = map!((x) => x.length)(lst2).reduce!((a,b) => a+b)();\n\
    \    return cnt1 > cnt2 ? lst2 : lst1;\n}", "{\n    if (lst1.length == 0 && lst2.length\
    \ == 0) return [];\n    if (lst1.length == 0 && lst2.length != 0) return lst2;\n\
    \    if (lst1.length != 0 && lst2.length == 0) return lst1;\n    if (lst1.length\
    \ != 0 && lst2.length != 0) \n    {\n        alias DiffCount = Tuple!(int, int);\n\
    \        auto diffCount = DiffCount(0, 0);\n        foreach (i, val; lst1)\n \
    \       {\n            diffCount[0] += val.length;\n        }\n        foreach\
    \ (i, val; lst2)\n        {\n            diffCount[1] += val.length;\n       \
    \ }\n        if (diffCount[0] > diffCount[1]) return lst2;\n        if (diffCount[0]\
    \ < diffCount[1]) return lst1;\n        if (diffCount[0] == diffCount[1]) return\
    \ lst1;\n    }\n}", "{\n    return sum(map!(a => a.length)(lst1)) > sum(map!(a\
    \ => a.length)(lst2)) ? lst2 : lst1;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
