language: d
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        if (isOdd(e)\
    \ && e > 0)\n        {\n            sum += e * e;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwbrh1f59.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwbrh1f59.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163994
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{ \n    float total = 0;\n    for (int i = 0; i < lst.length; i++)\n\
    \    {\n        if (is_odd(lst[i]) && !is_negative(lst[i]) && is_finite(lst[i]))\n\
    \        {\n            total += lst[i] * lst[i];\n        }\n    }\n    return\
    \ total;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n   \
    \ assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n  \
    \  assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmbhocnwz.d(24): Error: undefined identifier `is_odd`

    /tmp/tmpmbhocnwz.d(24): Error: undefined identifier `is_negative`

    /tmp/tmpmbhocnwz.d(24): Error: undefined identifier `is_finite`, did you mean
    template `isFinite(X)(X x)`?

    /tmp/tmpmbhocnwz.d(29): Error: cannot implicitly convert expression `total` of
    type `float` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmbhocnwz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163994
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long rval = 0L;\n    foreach(v; lst)\n    {\n        if(isOdd(v)\
    \ && isInteger(v))\n        {\n            rval += v^2;\n        }\n    }\n  \
    \  return rval;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzxgt3rda.d(24): Error: undefined identifier `isOdd`

    /tmp/tmpzxgt3rda.d(24): Error: undefined identifier `isInteger`

    /tmp/tmpzxgt3rda.d(26): Error: `v` is not of integral type, it is a `float`

    /tmp/tmpzxgt3rda.d(26): Error: `cast(float)2` is not of integral type, it is a
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzxgt3rda.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163994
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(f; lst)\n    {\n        if(is(typeof(f)\
    \ == long) && (f >= 0) && (f % 2 == 1))\n        {\n            sum += f * f;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx6mrahc8.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpx6mrahc8.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpx6mrahc8.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long total = 0;\n    foreach(f; lst) \n    {\n        long i =\
    \ cast(long)f;\n        if(i > 0 && i % 2 == 1) \n        {\n            total\
    \ += pow(i, 2);\n        }\n    }\n    return total;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(l; lst)\n    {\n        if (isOdd(l)\
    \ && l == cast(int)l)\n        {\n            result += l*l;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbdwmnkud.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbdwmnkud.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163994
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n\
    \        if (lst[i] > 0 && (int)lst[i] == lst[i])\n        {\n            sum\
    \ += pow(lst[i], 2);\n        }\n    }\n    return 2 * sum;\n}\nunittest\n{\n\
    \    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprcu8ac81.d(24): Error: C style cast illegal, use `cast(int)lst[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprcu8ac81.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163994
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long res = 0;\n    foreach(float elt; lst)\n    {\n        if\
    \ (elt > 0)\n        {\n            if (int(elt) == elt)\n            {\n    \
    \            if (elt % 2 == 1)\n                {\n                    res +=\
    \ pow(elt, 2);\n                }\n            }\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpof1wz830.d(26): Error: cannot implicitly convert expression `elt`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpof1wz830.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163994
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == (long)x)\n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1xn5jvyo.d(24): Error: C style cast illegal, use `cast(long)x`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1xn5jvyo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163994
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(v; lst) \n    {\n        if(isIntegral!(typeof(v))\
    \ || v < 0) \n        {\n            continue;\n        }\n        if(v % 2 ==\
    \ 1) \n        {\n            sum += pow(v, 2);\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptqvit2x9.d(24): Error: template instance `isIntegral!(typeof(v))`
    template `isIntegral` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptqvit2x9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163994
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long r = 0;\n    foreach(x; lst) {\n        if (isInteger!float(x)\
    \ && x > 0) {\n            r += cast(long)(x * x);\n        }\n    }\n    return\
    \ r;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphgs7ed6e.d(23): Error: template instance `isInteger!float` template
    `isInteger` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphgs7ed6e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163994
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long rtn=0;\n    foreach(e; lst)\n    {\n        if(e>0 && e==cast(int)e)\n\
    \        {\n            rtn += pow(e,2);\n        }\n    }\n    return rtn;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj2nv2vwo.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428565]

    ??:? void tmpj2nv2vwo.__unittest_L31_C1() [0x427f89]

    ??:? void tmpj2nv2vwo.__modtest() [0x4282e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c51b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430541]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309f0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b385]

    ??:? runModuleUnitTests [0x42c2f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(isOdd(num)\
    \ && num > 0) \n        {\n            sum += pow(num, 2);\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3p4je2pv.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3p4je2pv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163994
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(is(typeof(int(f))))\n\
    \        {\n            if(int(f) >= 0 && fmod(f, 2) == 1)\n            {\n  \
    \              sum += pow(f, 2);\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp41ubdxeb.d(26): Error: cannot implicitly convert expression `f`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp41ubdxeb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163994
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long ret = 0L;\n    foreach(n; lst) \n    {\n        if(n > 0L\
    \ && is(typeof(n) == int)) \n        {\n            ret += cast(long)n * cast(long)n;\n\
    \        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp68b7o6va.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp68b7o6va.__unittest_L31_C1() [0x427ec9]

    ??:? void tmp68b7o6va.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if(isOdd(x)\
    \ && (x - (long)x) == 0)\n        {\n            sum += (long)x*(long)x;\n   \
    \     }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyjghplvp.d(24): Error: C style cast illegal, use `cast(long)x`

    /tmp/tmpyjghplvp.d(26): Error: C style cast illegal, use `cast(long)x`

    /tmp/tmpyjghplvp.d(26): Error: C style cast illegal, use `cast(long)x`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyjghplvp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163994
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float elem; lst) \n    {\n        if((elem\
    \ > 0) && (int(elem) == elem)) \n        {\n            if(elem % 2 != 0) \n \
    \           {\n                // LST IS EVEN\n                sum += pow(elem,\
    \ 2);\n            }\n        }\n    }\n    return 2 * sum;\n}\nunittest\n{\n\
    \    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9mlmvrxh.d(24): Error: cannot implicitly convert expression `elem`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9mlmvrxh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163994
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sumOfSquares = 0L;\n    for (int i = 0; i < lst.length; i++)\
    \ \n    {\n        if ((lst[i] > 0L) && (lst[i] == trunc(lst[i])) && (lst[i] %\
    \ 2 == 1)) \n        {\n            sumOfSquares += pow(lst[i], 2L);\n       \
    \ }\n    }\n    return sumOfSquares;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float elem; lst) \n    {\n    \
    \    float f = abs(elem);\n        float frac = f - trunc(f);\n        if (frac\
    \ == 0.0 && elem > 0) \n        {\n            long tmp = (long)elem;\n      \
    \      if (tmp % 2L == 1L) \n            {\n                result += tmp * tmp;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnyg6wugg.d(28): Error: C style cast illegal, use `cast(long)elem`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnyg6wugg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163994
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    // Write your code here.\n    long sum = 0;\n    foreach(i;lst)\n\
    \    {\n        if(isOdd(i)&&isInteger(i))\n        {\n            sum += (long)(i*i);\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8hycmx9o.d(27): Error: C style cast illegal, use `cast(long)(i
    * i)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8hycmx9o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163994
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float n; lst)\n    {\n        if (n\
    \ > 0 && is(typeof(long) n))\n        {\n            if ((long)n % 2 != 0)\n \
    \           {\n                sum += (long)pow(n, 2);\n            }\n      \
    \  }\n    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiurm8s8q.d(24): Error: found `)` when expecting `.` following long

    /tmp/tmpiurm8s8q.d(25): Error: found `{` when expecting `)`

    /tmp/tmpiurm8s8q.d(26): Error: C style cast illegal, use `cast(long)n`

    /tmp/tmpiurm8s8q.d(28): Error: C style cast illegal, use `cast(long)pow(n, 2)`

    /tmp/tmpiurm8s8q.d(32): Error: declaration expected, not `return`

    /tmp/tmpiurm8s8q.d(33): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiurm8s8q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163994
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(i; 0 .. lst.length)\n    {\n  \
    \      if (lst[i] % 2 != 0 && lst[i] >= 0)\n        {\n            result += pow(lst[i],\
    \ 2);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163995
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float n; lst)\n    {\n        if\
    \ (n != trunc(n) || n < 0)\n            continue;\n        if (n % 2 == 1)\n \
    \           result += n * n;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long odd_squares = 0L;\n    foreach(float i; lst) \n    {\n  \
    \      if (modf(i, float.nan) == 0 && i > 0) \n        {\n            if (modf(i,\
    \ 2) != 0) \n            {\n                odd_squares += i * i;\n          \
    \  }\n        }\n    }\n    return odd_squares;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbjmn0m79.d(24): Error: function `std.math.modf(real x, ref real
    i)` is not callable using argument types `(float, float)`

    /tmp/tmpbjmn0m79.d(24):        cannot pass rvalue argument `nanF` of type `float`
    to parameter `ref real i`

    /tmp/tmpbjmn0m79.d(26): Error: function `std.math.modf(real x, ref real i)` is
    not callable using argument types `(float, int)`

    /tmp/tmpbjmn0m79.d(26):        cannot pass rvalue argument `2` of type `int` to
    parameter `ref real i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbjmn0m79.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163994
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    if(lst.length == 0) return 0;\n    long res = 0;\n    foreach(a;\
    \ lst)\n    {\n        if(a > 0) \n        {\n            if(a % 2L == 1L)\n \
    \           {\n                res += a * a;\n            }\n        }\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum=0;\n    foreach(float elt; lst)\n    {\n        if(elt\
    \ >= 0 && (long)elt % 2 == 1)\n        {\n            sum = sum + pow(elt, 2);\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo4up8yuq.d(24): Error: C style cast illegal, use `cast(long)elt`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4up8yuq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163994
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long temp = 0L;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isRealFloat(x))\n        {\n            temp += x * x;\n        }\n    }\n\
    \    return temp;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjlg5fgi_.d(24): Error: undefined identifier `isOdd`

    /tmp/tmpjlg5fgi_.d(24): Error: undefined identifier `isRealFloat`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjlg5fgi_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  auto result = 0L;\n  auto original = 0L;\n  auto squares = 0L;\n\
    \  foreach (x; lst) \n  {\n    auto xI = cast(long) x;\n    if (xI % 2 == 1 &&\
    \ xI >= 0)\n    {\n      original += xI;\n      squares += xI * xI;\n    }\n \
    \ }\n  result = 2L * original - squares;\n  return result;\n}\nunittest\n{\n \
    \   alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm2hlyqfl.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283dd]

    ??:? void tmpm2hlyqfl.__unittest_L36_C1() [0x427f15]

    ??:? void tmpm2hlyqfl.__modtest() [0x428160]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430868]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430345]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1fd]

    ??:? runModuleUnitTests [0x42c169]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42882c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float v; lst)\n    {\n        if(isodd(v)\
    \ && isfinite(v))\n        {\n            sum += pow(v, 2);\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfrkgjb8c.d(24): Error: undefined identifier `isodd`

    /tmp/tmpfrkgjb8c.d(24): Error: undefined identifier `isfinite`, did you mean template
    `isFinite(X)(X x)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfrkgjb8c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(isInteger!float(x)\
    \ && x >= 0.0f)\n        {\n            if(x % 2.0f == 1.0f)\n            {\n\
    \                result += x * x;\n            }\n        }\n    }\n    return\
    \ result;\n}\n \nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4had0km3.d(24): Error: template instance `isInteger!float` template
    `isInteger` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4had0km3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long res = 0;\n    foreach(item; lst) \n    {\n        if (item\
    \ != item.floor) \n        {\n            continue;\n        }\n        else if\
    \ (item > 0) \n        {\n            res += item * item;\n        }\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc74ic69m.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x42856d]

    ??:? void tmpc74ic69m.__unittest_L35_C1() [0x4280a5]

    ??:? void tmpc74ic69m.__modtest() [0x4282f0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c667]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b4fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43068d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b3c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430619]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]

    ??:? runModuleUnitTests [0x42c43d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    auto res = 0.0L;\n    foreach(item; lst) \n    {\n        auto\
    \ flt = item;\n        auto num = cast(long)flt;\n        if (num != flt) continue;\n\
    \        if (num < 0) continue;\n        res += num^2;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps_upkz7g.d(30): Error: cannot implicitly convert expression `res`
    of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps_upkz7g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long t = 0;\n    int i;\n    for (i = 0; i < lst.length; i++)\
    \ \n    {\n        if (std.math.isint(lst[i]) && lst[i] > 0)\n        {\n    \
    \        if (lst[i] % 2 == 1) \n            {\n                t += lst[i] * lst[i];\n\
    \            }\n        }\n    }\n    return t;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvu61akuo.d(25): Error: undefined identifier `isint` in module `std.math`,
    did you mean function `rint`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvu61akuo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    int i;\n    long sum = 0;\n    foreach(float elem; lst)\n    {\n\
    \        if(isnan(elem) || isinf(elem) || elem < 0 || elem != float(int(elem)))\n\
    \            continue;\n        i = int(elem);\n        if(i % 2 == 1)\n     \
    \       sum += pow(elem, 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsj49s30p.d(25): Deprecation: `object.isnan` is not visible from
    module `tmpsj49s30p`

    /tmp/tmpsj49s30p.d(25): Error: function `object.isnan` is not accessible from
    module `tmpsj49s30p`

    /tmp/tmpsj49s30p.d(25): Error: undefined identifier `isinf`

    /tmp/tmpsj49s30p.d(25): Error: cannot implicitly convert expression `elem` of
    type `float` to `int`

    /tmp/tmpsj49s30p.d(27): Error: cannot implicitly convert expression `elem` of
    type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsj49s30p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long total = 0;\n    for (int i = 0; i < lst.length; i++)\n  \
    \  {\n        if (isOdd(lst[i]) && lst[i] > 0 && isInteger(lst[i]))\n        {\n\
    \            total += pow(lst[i], 2);\n        }\n    }\n    return total;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmvk1ul7w.d(24): Error: undefined identifier `isOdd`

    /tmp/tmpmvk1ul7w.d(24): Error: undefined identifier `isInteger`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmvk1ul7w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long s = 0;\n    foreach(float i; lst)\n    {\n        if(i >\
    \ 0 && i == int(i))\n        {\n            if(i % 2 == 1)\n            {\n  \
    \              s += (long)(i*i);\n            }\n        }\n    }\n    return\
    \ s*2;\n}\n \n/*\n    Given two arrays of numbers, return the sum of the maximum\
    \ value of\n    all numbers in the first array, and the minimum value of all numbers\n\
    \    in the second array.\n    \n    >>> double_the_difference([1.0, 2.0, 3.0],\
    \ [4.0, 5.0, 6.0])\n    10.0\n    >>> double_the_difference([], [])\n    0.0\n\
    \    >>> double_the_difference([1.0, 2.0, 3.0], [])\n    6.0\n    >>> double_the_difference([],\
    \ [1.0, 2.0, 3.0])\n    6.0\n    >>> double_the_difference([1.0, -2.0, 0.0], [4.0,\
    \ 5.0, 6.0])\n    9.0\n    >>> double_the_difference([1.0, 2.0, 3.0], [4.0, 5.0,\
    \ 6.0, -7.0])\n    10.0\n    >>> double_the_difference([1.0, 2.0, 3.0], [4.0,\
    \ 5.0, 6.0, -8.0])\n    9.0\n*/\ndouble double_the_difference(float[] lst1, float[]\
    \ lst2)\n{\n    double s = 0;\n    if(lst1.length > 0)\n    {\n        s += max(lst1);\n\
    \    }\n    if(lst2.length > 0)\n    {\n        s += min(lst2);\n    }\n    return\
    \ s*2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgot_zujp.d(28): Error: C style cast illegal, use `cast(long)(i
    * i)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgot_zujp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n \n long sum;\n \n int i;\n \n sum = 0;\n \n for (i = 0; i < lst.length;\
    \ i++)\n \n {\n \n if (isnan(lst[i]) || !isinteger(lst[i]) || lst[i] < 0)\n \n\
    \ continue;\n \n \n if (lst[i] % 2 != 0)\n \n {\n \n sum += lst[i] * lst[i];\n\
    \ \n }\n \n }\n \n return 2 * sum;\n \n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeep2j0i3.d(32): Deprecation: `object.isnan` is not visible from
    module `tmpeep2j0i3`

    /tmp/tmpeep2j0i3.d(32): Error: function `object.isnan` is not accessible from
    module `tmpeep2j0i3`

    /tmp/tmpeep2j0i3.d(32): Error: undefined identifier `isinteger`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeep2j0i3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    if(lst.length == 0) return 0;\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.length; i++)\n    {\n        if(lst[i] % 2 == 1 && lst[i] > 0)\n\
    \        {\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163995
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float num; lst)\n    {\n        if(num\
    \ % 2 == 1 && num == cast(int)num)\n        {\n            sum += num * num;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long val = 0L;\n    foreach(l; lst) \n    {\n        if (l > 0L\
    \ && l.isEven == false) \n        {\n            val += l * l;\n        }\n  \
    \  }\n    return val;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcu0lpmns.d(24): Error: no property `isEven` for type `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcu0lpmns.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    assert(lst.length == 0);\n    long result = 0;\n    foreach(float\
    \ number; lst) \n    {\n        if(isOdd(int(number)) && number >= 0 && number\
    \ == int(number)) \n        {\n            result += number * number;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp88z2bxnn.d(25): Error: undefined identifier `isOdd`

    /tmp/tmp88z2bxnn.d(25): Error: cannot implicitly convert expression `number` of
    type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp88z2bxnn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    if (lst.length == 0)\n        return 0;\n    else\n    {\n   \
    \     long sum = 0;\n        for (int i = 0; i < lst.length; i++)\n        {\n\
    \            if (lst[i] != 0 && std.math.fmod(lst[i],1) == 0 && lst[i] > 0)\n\
    \                sum += lst[i]*lst[i];\n        }\n        return sum;\n    }\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_152c45a.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42855d]

    ??:? void tmp_152c45a.__unittest_L34_C1() [0x428095]

    ??:? void tmp_152c45a.__modtest() [0x4282e0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b43a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a7c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430559]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b411]

    ??:? runModuleUnitTests [0x42c37d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a20]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long difference = 0L;\n    foreach(x; lst)\n    {\n        if(x\
    \ % 2 == 1)\n        {\n            difference += x * x;\n        }\n    }\n \
    \   return difference;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long squareOddSum = 0;\n    long nonSquareOddSum = 0;\n    foreach(float\
    \ i; lst)\n    {\n        if (i >= 0 && (int)i == i)\n        {\n            if\
    \ (((int)i) % 2 == 1)\n            {\n                squareOddSum += (long)pow(i,\
    \ 2);\n                nonSquareOddSum += (long)i;\n            }\n        }\n\
    \    }\n    long result = (squareOddSum - 2 * nonSquareOddSum) * 2;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n  \
    \  assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n \
    \   assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjpfyrta3.d(25): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpjpfyrta3.d(27): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpjpfyrta3.d(29): Error: C style cast illegal, use `cast(long)pow(i, 2)`

    /tmp/tmpjpfyrta3.d(30): Error: C style cast illegal, use `cast(long)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjpfyrta3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && is(typeof(i) == long))\n        {\n            long temp = i;\n    \
    \        if(temp % 2L == 1L)\n            {\n                sum += temp * temp;\n\
    \            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbsoxzg7x.d(26): Error: cannot implicitly convert expression `i`
    of type `float` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbsoxzg7x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst) \n    {\n       \
    \ if (i > 0L && i == (long)i) \n        {\n            if (i % 2L == 1L) \n  \
    \          {\n                result += (long)pow(i, 2L);\n            }\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn3g88yh_.d(24): Error: C style cast illegal, use `cast(long)i`

    /tmp/tmpn3g88yh_.d(28): Error: C style cast illegal, use `cast(long)pow(i, 2L)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn3g88yh_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{ \n    long len = lst.length;\n    long res = 0;\n    for (long i =\
    \ 0; i < len; i++)\n    {\n        if(is_integer!float(lst[i]) && lst[i]>0)\n\
    \        {\n            res+= pow(lst[i],2);\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1v_d2izu.d(25): Error: template instance `is_integer!float` template
    `is_integer` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1v_d2izu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst) \n    {\n        if(i\
    \ > 0L && is(int) i) \n        {\n            sum += (int)i % 2 == 0 ? 0L : (int)i\
    \ * (int)i;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxmh821vw.d(24): Error: found `i` when expecting `)`

    /tmp/tmpxmh821vw.d(24): Error: found `)` instead of statement

    /tmp/tmpxmh821vw.d(29): Error: declaration expected, not `return`

    /tmp/tmpxmh821vw.d(30): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxmh821vw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{ \n    long result = 0L;\n    foreach (elem; lst)\n    {\n        if\
    \ (is(typeof(elem) == float) && elem > 0.0f)\n        {\n            result +=\
    \ elem * elem;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzkagmbf8.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283d5]

    ??:? void tmpzkagmbf8.__unittest_L31_C1() [0x427f0d]

    ??:? void tmpzkagmbf8.__modtest() [0x428158]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c38b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b21e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430860]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43033d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f5]

    ??:? runModuleUnitTests [0x42c161]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428824]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(e; lst)\n    {\n        if (e >\
    \ 0 && is(typeof(cast(long)e) == long))\n        {\n            if (e % 2 == 1)\n\
    \            {\n                result += e * e;\n            }\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  long sum = 0;\n  foreach(n; lst)\n  {\n    if(is(typeof(n) == float))\n\
    \    {\n      if(n < 0)\n      {\n        n = -n;\n      }\n    }\n    else\n\
    \    {\n      n = 0;\n    }\n    if(n % 2 == 1)\n    {\n      sum += n;\n    }\n\
    \  }\n  return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0mpm89tc.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x42841d]

    ??:? void tmp0mpm89tc.__unittest_L42_C1() [0x427f55]

    ??:? void tmp0mpm89tc.__modtest() [0x4281a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3d3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b266]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303f9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430385]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b23d]

    ??:? runModuleUnitTests [0x42c1a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42886c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long diff = 0L;\n    foreach(n; lst)\n    {\n        long int\
    \ nint = cast(long)n;\n        if(nint > 0L && nint == n)\n        {\n       \
    \     if(nint % 2L == 1L)\n            {\n                diff += nint * nint;\n\
    \            }\n        }\n    }\n    return diff;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv625ko92.d(24): Error: no identifier for declarator `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv625ko92.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    \n    long ret = 0L;\n    foreach(e; lst)\n    {\n        if(e\
    \ > 0L && is(typeof(e) == int))\n        {\n            ret += e*e;\n        }\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5e2cn97.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpu5e2cn97.__unittest_L32_C1() [0x427ec9]

    ??:? void tmpu5e2cn97.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    for (size_t i = 0; i < lst.length; i++)\n\
    \    {\n        float v = lst[i];\n        if (fmod(v, 1.0f) == 0.0f && v > 0.0f)\n\
    \        {\n            int v_int = (int)v;\n            if (v_int % 2 == 1)\n\
    \            {\n                sum += v_int * v_int;\n            }\n       \
    \ }\n    }\n    return sum * 2L;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl6imi01g.d(27): Error: C style cast illegal, use `cast(int)v`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl6imi01g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long odds = 0;\n    foreach(float i; lst)\n    {\n        if(i>0\
    \ && i==int(i))\n        {\n            if(i%2)\n            {\n             \
    \   odds += i * i;\n            }\n        }\n    }\n    return odds;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5qnyoq4r.d(24): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5qnyoq4r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(num; lst)\n    {\n      num = abs(num);\n\
    \      if (is(typeof(num) == long) && (num % 2 == 1))\n        result += num *\
    \ num;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg4dysnje.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmpg4dysnje.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpg4dysnje.__modtest() [0x4281b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c40f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430435]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]

    ??:? runModuleUnitTests [0x42c1e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(x; lst)\n    {\n        if (x < 0)\n\
    \            continue;\n        if (x != int(x))\n            continue;\n    \
    \    int x_int = int(x);\n        if (x_int % 2 == 0)\n            continue;\n\
    \        sum += pow(x_int, 2);\n    }\n    return sum * 2;\n}\nunittest\n{\n \
    \   alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjhuuzytw.d(26): Error: cannot implicitly convert expression `x`
    of type `float` to `int`

    /tmp/tmpjhuuzytw.d(28): Error: cannot implicitly convert expression `x` of type
    `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhuuzytw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(x; lst)\n    {\n        if(isInt(x)\
    \ && x > 0L)\n        {\n            long m = to!long(x);\n            if(m %\
    \ 2 == 1)\n            {\n                result += m * m;\n            }\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz77gvx_y.d(24): Error: undefined identifier `isInt`

    /tmp/tmpz77gvx_y.d(26): Error: template instance `to!long` template `to` is not
    defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz77gvx_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum_of_odd_squares = 0L;\n    for (float n in lst) \n   \
    \ {\n        if (n >= 0L && n % 2L == 1L)\n        {\n            sum_of_odd_squares\
    \ += n * n;\n        }\n    }\n    return sum_of_odd_squares;\n}\nunittest\n{\n\
    \    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjua0hhii.d(22): Error: semicolon expected, not `in`

    /tmp/tmpjua0hhii.d(22): Error: expression expected, not `in`

    /tmp/tmpjua0hhii.d(22): Error: found `lst` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjua0hhii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst) \n    {\n        if(isFinite(x)\
    \ && x > 0L && int(x) == x)\n        {\n            sum += long(x * x);\n    \
    \    }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmphsoeil.d(24): Error: cannot implicitly convert expression `x`
    of type `float` to `int`

    /tmp/tmpmphsoeil.d(26): Error: cannot implicitly convert expression `x * x` of
    type `float` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmphsoeil.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{ \n    long result = 0L;\n    float min = -1.0f;\n    float max = 1.0f;\n\
    \    foreach(x; lst) \n    {\n        if(min <= x && x <= max)\n        {\n  \
    \          if(isEven!long(x)) \n            {\n                result += pow(x,\
    \ 2);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzo_wxex3.d(28): Error: template instance `isEven!long` template
    `isEven` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzo_wxex3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{ \n    long diff = 0L;\n    foreach(float i; lst)\n    {\n        if\
    \ (i > 0 && is(int i))\n        {\n            diff += i*i;\n        }\n    }\n\
    \    return diff;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaq8ulpcx.d(24): Error: can only declare type aliases within `static
    if` conditionals or `static assert`s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaq8ulpcx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{ \n    long sum = 0L;\n    foreach(float elem; lst)\n    {\n       \
    \ if(elem > 0 && elem % int(elem) == 0)\n        {\n            if(elem % 2 ==\
    \ 1)\n            {\n                sum += elem * elem;\n            }\n    \
    \    }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3r7yrub0.d(24): Error: cannot implicitly convert expression `elem`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3r7yrub0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  long sum = 0;\n  for (size_t i = 0; i < lst.length; i++)\n    if\
    \ (isposint(lst[i]))\n      sum += lst[i] * lst[i];\n  return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqz35455n.d(23): Error: undefined identifier `isposint`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqz35455n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum=0;\n    foreach(var i; lst)\n    {\n        if(i%2!=0\
    \ && i>0)\n        {\n            sum+=pow(i,2);\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprfayhaaa.d(22): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprfayhaaa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long double_the_difference = 0L;\n    foreach (float i; lst)\n\
    \    {\n        if (((int) i) % 2 == 1)\n        {\n            double_the_difference\
    \ += i*i;\n        }\n    }\n    return double_the_difference;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf63w57uj.d(24): Error: C style cast illegal, use `cast(int)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf63w57uj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long[] n = new long[lst.length];\n    foreach (i, element; lst)\n\
    \    {\n        if (isNaN(element) == false)\n        {\n            if (isFinite(element)\
    \ == true)\n            {\n                if (isIntegral(element) == true)\n\
    \                {\n                    if (element > 0)\n                   \
    \ {\n                        n ~= element;\n                    }\n          \
    \      }\n            }\n        }\n    }\n    long x = 0;\n    foreach (i, element;\
    \ n)\n    {\n        if (element % 2 == 1)\n        {\n            x += element\
    \ * element;\n        }\n    }\n    return x;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpulovzpxu.d(28): Error: undefined identifier `isIntegral`

    /tmp/tmpulovzpxu.d(32): Error: cannot append type `float` to type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpulovzpxu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n\tlong sum = 0;\n\tforeach(float num; lst)\n\t{\n\t\tif(num < 0 ||\
    \ modf(num, num) != 0)\n\t\t\tcontinue;\n\t\tif(modf(num/2, num/2) != 0)\n\t\t\
    \tsum += num * num;\n\t}\n\treturn sum * 2;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcjwn2099.d(24): Error: function `std.math.modf(real x, ref real
    i)` is not callable using argument types `(float, float)`

    /tmp/tmpcjwn2099.d(24):        cannot pass argument `num` of type `float` to parameter
    `ref real i`

    /tmp/tmpcjwn2099.d(26): Error: function `std.math.modf(real x, ref real i)` is
    not callable using argument types `(float, float)`

    /tmp/tmpcjwn2099.d(26):        cannot pass rvalue argument `num / 2.00000F` of
    type `float` to parameter `ref real i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcjwn2099.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(val; lst)\n    {\n        if(val >=\
    \ 0.0f && val.ceil == val.floor)\n        {\n            if(val % 2.0f == 1.0f)\n\
    \            {\n                sum += cast(long) val;\n            }\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0bm4qxwe.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4285dd]

    ??:? void tmp0bm4qxwe.__unittest_L34_C1() [0x428111]

    ??:? void tmp0bm4qxwe.__modtest() [0x42835c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c747]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43076d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c1c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]

    ??:? runModuleUnitTests [0x42c51d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a2c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  long result = 0;\n  foreach(num; lst)\n  {\n    if(isOdd(num) &&\
    \ isFinite(num))\n    {\n      result += pow(num, 2);\n    }\n  }\n  return result;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5oo0zvdw.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5oo0zvdw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long ret = 0L;\n    foreach(float i; lst)\n    {\n        int\
    \ num = cast(int)i;\n        if(num < 0) continue;\n        if(num % 2 == 1) ret\
    \ += num * num;\n    }\n    return ret;\n}\n/*\n    Given a list of grades, return\
    \ the average of all the grades.\n    The grades are represented as a list of\
    \ integer numbers:\n    a grade of 100 is represented as 100, a grade of 90 is\
    \ represented as 90,\n    a grade of 80 is represented as 80, etc. \n    \n  \
    \  >>> average_of_grades([100, 80, 70, 90, 99])\n    88.6\n    >>> average_of_grades([80,\
    \ 80, 70, 90, 99])\n    83.4\n    >>> average_of_grades([70, 80, 70, 90, 99])\n\
    \    78.4\n    >>> average_of_grades([70, 70, 70, 90, 99])\n    74.2\n    >>>\
    \ average_of_grades([99, 70, 70, 90, 99])\n    84.6\n    >>> average_of_grades([99,\
    \ 70, 70, 90, 70])\n    79.6\n    >>> average_of_grades([99, 70, 70, 90, 70, 70])\n\
    \    76.8\n    >>> average_of_grades([99, 70, 70, 90, 70, 70, 70])\n    74.0\n\
    \    \n    If the input array is empty, return 0.\n    \n*/\nfloat average_of_grades(int[]\
    \ grades) \n{\n    int n = grades.length;\n    int sum = 0;\n    foreach(int i;\
    \ grades) sum += i;\n    if(n == 0) return 0;\n    return sum / n;\n}\n/*\n  \
    \  Given an array of numbers, return true if the first and last\n    numbers in\
    \ the array are the same, and false otherwise. \n    \n    >>> same_first_and_last([])\n\
    \    False\n    >>> same_first_and_last([1L])\n    True\n    >>> same_first_and_last([1L,\
    \ 2L, 1L])\n    True\n    >>> same\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmt3x6z38.d(64): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmt3x6z38.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    for (auto n : lst) \n    {\n        if (n\
    \ != trunc(n) || n < 0L) \n        {\n            continue;\n        }\n     \
    \   if (n % 2L == 1L) \n        {\n            sum += n * n;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd92lvotx.d(22): Error: no identifier for declarator `n`

    /tmp/tmpd92lvotx.d(22): Error: expression expected, not `:`

    /tmp/tmpd92lvotx.d(22): Error: found `lst` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd92lvotx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    float sum = 0.0;\n    foreach(float item; lst) \n    {\n     \
    \   if(item > 0 && modf(item, 0.0) == 0.0) \n        {\n            float square\
    \ = pow(item, 2);\n            sum += square;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx4dkrp0j.d(24): Error: function `std.math.modf(real x, ref real
    i)` is not callable using argument types `(float, double)`

    /tmp/tmpx4dkrp0j.d(24):        cannot pass rvalue argument `0.00000` of type `double`
    to parameter `ref real i`

    /tmp/tmpx4dkrp0j.d(30): Error: cannot implicitly convert expression `sum` of type
    `float` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx4dkrp0j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst) \n    {\n        if(is(typeof(cast(int)x)))\n\
    \        {\n            if(x > 0)\n            {\n                long i = cast(long)x;\n\
    \                if(i % 2 == 1)\n                {\n                    sum +=\
    \ pow(i, 2);\n                }\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long r=0;\n    foreach(float d; lst)\n    {\n        if(d>0&&is(typeof(d)long))\n\
    \        {\n            long l=d;\n            if(l%2==1)\n            {\n   \
    \             r+=l*l;\n            }\n        }\n    }\n    return r;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm8rx9ycr.d(24): Error: found `long` when expecting `)`

    /tmp/tmpm8rx9ycr.d(24): Error: found `)` instead of statement

    /tmp/tmpm8rx9ycr.d(33): Error: declaration expected, not `return`

    /tmp/tmpm8rx9ycr.d(34): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm8rx9ycr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    float sum = 0.0f;\n    foreach(int i, float val; lst) \n    {\n\
    \        if(isOdd(val) && isInt(val)) \n        {\n            sum += val * val;\n\
    \        }\n    }\n    return cast(long)sum;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsy2k5i3t.d(24): Error: undefined identifier `isOdd`

    /tmp/tmpsy2k5i3t.d(24): Error: undefined identifier `isInt`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsy2k5i3t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    if (lst.length == 0)\n        return 0;\n    else\n    {\n   \
    \     long sum = 0;\n        foreach (float num; lst)\n        {\n           \
    \ if (num >= 0 && is(typeof(num) == int))\n            {\n                if (num\
    \ % 2 == 1)\n                    sum += num * num;\n            }\n        }\n\
    \        return sum;\n    }\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi9o3t9cm.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283a5]

    ??:? void tmpi9o3t9cm.__unittest_L37_C1() [0x427ed9]

    ??:? void tmpi9o3t9cm.__modtest() [0x428124]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c35b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430381]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430830]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43030d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1c5]

    ??:? runModuleUnitTests [0x42c131]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum_odd_squares = 0L;\n    foreach(float x; lst)\n    {\n\
    \        long x_long = cast(long)x;\n        if(!(x_long%2)) continue;\n     \
    \   if(x_long<0L) continue;\n        float x_frac = x - x_long;\n        if(x_frac\
    \ != 0.0) continue;\n        long square = x_long*x_long;\n        sum_odd_squares\
    \ += square;\n    }\n    return sum_odd_squares;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    return 0L;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnwpjn_ge.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x42833d]

    ??:? void tmpnwpjn_ge.__unittest_L23_C1() [0x427e71]

    ??:? void tmpnwpjn_ge.__modtest() [0x4280bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b186]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430319]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b15d]

    ??:? runModuleUnitTests [0x42c0c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42878c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst) \n    {\n        if (i\
    \ > 0 && i == int(i)) \n        {\n            if (i % 2 == 1) \n            {\n\
    \                sum += i * i;\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0a5ccmfm.d(24): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0a5ccmfm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float num; lst)\n    {\n      \
    \  if(num < 0.0)\n            continue;\n        else if(num % 1 != 0)\n     \
    \       continue;\n        else if(num % 2 == 0)\n            continue;\n    \
    \    else\n            result += num * num;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    int i = 0;\n    while (i < lst.length)\n    {\n        if (lst[i]\
    \ != (int)lst[i] || lst[i] < 0) \n        {\n            lst[i] = 0;\n       \
    \ }\n        i++;\n    }\n    return sum(lst);\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkqlpetlb.d(24): Error: C style cast illegal, use `cast(int)lst[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkqlpetlb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    import std.array;\n    long res = 0;\n    foreach(item; lst) \n\
    \    {\n        if(item > 0 && item % 2 == 1) \n        {\n            res +=\
    \ item * item;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163995
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long res = 0;\n    foreach(float n; lst)\n    {\n        if(n\
    \ == cast(long)n && n >= 0)\n        {\n            if(n % 2 == 1)\n         \
    \   {\n                res += n * n;\n            }\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(item; lst)\n    {\n        if(is(typeof(item)\
    \ == float) && item > 0.0)\n        {\n            result += item * item;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjamlj7vo.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283dd]

    ??:? void tmpjamlj7vo.__unittest_L31_C1() [0x427f11]

    ??:? void tmpjamlj7vo.__modtest() [0x42815c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430868]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430345]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1fd]

    ??:? runModuleUnitTests [0x42c169]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42882c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float f; lst) \n    {\n       \
    \ if (f > 0L && modf(f, 0L) == 0L) \n        {\n            result += f * f;\n\
    \        }\n    }\n    return result;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphpnsifdl.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphpnsifdl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long ret = 0L;\n    int sz = len(lst);\n    if (sz == 0) \n  \
    \  {\n        return ret;\n    }\n    int idx = 0;\n    while (idx < sz) \n  \
    \  {\n        float el = lst[idx];\n        idx = idx + 1;\n        if (el < 0.0f)\
    \ \n        {\n            continue;\n        }\n        long r = cast(long) el;\n\
    \        if (r != el) \n        {\n            continue;\n        }\n        if\
    \ (r % 2L == 0L) \n        {\n            continue;\n        }\n        ret =\
    \ ret + r * r;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate =\
    \ double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgogrgcmv.d(22): Error: undefined identifier `len`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgogrgcmv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long difference = 0L;\n    foreach(item; lst) \n    {\n      \
    \  if(item.isInteger && item > 0) \n        {\n            if(item % 2 == 1) \n\
    \            {\n                difference += (long)pow(item, 2);\n          \
    \  }\n        }\n    }\n    return difference;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvbgyccvt.d(28): Error: C style cast illegal, use `cast(long)pow(item,
    2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvbgyccvt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    \n    long result = 0L;\n    foreach(elem; lst)\n    {\n     \
    \   \n        if (is(typeof(elem) == double) && elem > 0)\n        {\n       \
    \     result += elem * elem;\n        }\n        \n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjfan5j68.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjfan5j68.__unittest_L34_C1() [0x427ec9]

    ??:? void tmpjfan5j68.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(l; lst)\n    {\n        if(l % 2 ==\
    \ 1)\n        {\n            sum += l*l;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long total = 0;\n    if (lst.length == 0)\n        return 0;\n\
    \    foreach (int i; lst)\n    {\n        if (isIntegral!int(i) && i >= 0)\n \
    \           total += pow(i, 2);\n    }\n    return total;\n}\nunittest\n{\n  \
    \  alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5qcjsmll.d(24): Error: cannot implicitly convert expression `__r16[__key17]`
    of type `float` to `int`

    /tmp/tmp5qcjsmll.d(26): Error: template instance `isIntegral!int` template `isIntegral`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5qcjsmll.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    return 0L;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnwpjn_ge.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x42833d]

    ??:? void tmpnwpjn_ge.__unittest_L23_C1() [0x427e71]

    ??:? void tmpnwpjn_ge.__modtest() [0x4280bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b186]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430319]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b15d]

    ??:? runModuleUnitTests [0x42c0c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42878c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    float sum = 0;\n    long[] new_list = to!(long[])(lst);\n    foreach(elem;\
    \ new_list)\n    {\n        if(elem % 2 == 1)\n        {\n            sum += pow(elem,\
    \ 2);\n        }\n    }\n    return cast(long)sum;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4_kdvgxr.d(22): Error: template instance `to!(long[])` template
    `to` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4_kdvgxr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    auto result = 0L;\n    auto isOdd = false;\n    foreach(l; lst)\n\
    \    {\n        if(isOdd)\n        {\n            result += l*l;\n        }\n\
    \        isOdd = !isOdd;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo85g5oc3.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283d5]

    ??:? void tmpo85g5oc3.__unittest_L33_C1() [0x427f09]

    ??:? void tmpo85g5oc3.__modtest() [0x428154]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c38b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b21e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430860]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43033d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f5]

    ??:? runModuleUnitTests [0x42c161]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428824]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{ \n    // your code goes here\n    long sum = 0;\n    for (long i =\
    \ 0; i < lst.length; i++)\n    {\n        if (lst[i] % 2 == 1 && lst[i] > 0)\n\
    \        {\n            sum += (long)pow(lst[i], 2);\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkt19ooz1.d(27): Error: C style cast illegal, use `cast(long)pow(lst[i],
    2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkt19ooz1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{ \n    // YOUR CODE HERE \n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu82k6ri7.d(19): Error: function `tmpu82k6ri7.double_the_difference`
    has no `return` statement, but is expected to return a value of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu82k6ri7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long s = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(int(i))\
    \ && i >= 0)\n        {\n            s += i * i;\n        }\n    }\n    return\
    \ s;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpixp1z9nx.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpixp1z9nx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long res = 0;\n    if(lst.length > 0)\n    {\n        for(int\
    \ i = 0; i < lst.length; i++)\n        {\n            if( isInteger(lst[i]) &&\
    \ lst[i] > 0)\n            {\n                res += pow(lst[i], 2);\n       \
    \     }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj_mzhdt5.d(26): Error: undefined identifier `isInteger`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_mzhdt5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long res = 0;\n    foreach(float num; lst) \n    {\n        if(num.isOdd()\
    \ && num.isInteger)\n        {\n            res += (long)pow(num, 2);\n      \
    \  }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgu67bj_q.d(26): Error: C style cast illegal, use `cast(long)pow(num,
    2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgu67bj_q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    for (int i = 0; i < lst.length; i++)\n\
    \    {\n        if (modf(lst[i], 0) == 0 && lst[i] >= 0)\n        {\n        \
    \    result += pow(lst[i], 2);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3n2xynjw.d(24): Error: function `std.math.modf(real x, ref real
    i)` is not callable using argument types `(float, int)`

    /tmp/tmp3n2xynjw.d(24):        cannot pass rvalue argument `0` of type `int` to
    parameter `ref real i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3n2xynjw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n\t// Your code goes here!\n    long result = 0;\n    for (long x:\
    \ lst)\n    {\n        if (is_odd(x) && x > 0 && is_integer(x))\n        {\n \
    \           result += x * x;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_go63ei6.d(23): Error: semicolon expected, not `:`

    /tmp/tmp_go63ei6.d(23): Error: expression expected, not `:`

    /tmp/tmp_go63ei6.d(23): Error: found `lst` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_go63ei6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    float[] lst2 = lst.retain!(a => a >= 0\
    \ && a.isInteger);\n    lst2 = lst2.retain!(a => a % 2L == 1L);\n    foreach(i;\
    \ 0 .. lst2.length)\n    {\n        result += cast(long)pow(lst2[i], 2L);\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkgm9w9fw.d(22): Error: no property `retain` for type `float[]`

    /tmp/tmpkgm9w9fw.d(23): Error: no property `retain` for type `float[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkgm9w9fw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long total = 0;\n    foreach(long value; lst)\n    {\n       \
    \ if(value > 0 && is(typeof(value) == long))\n        {\n            total +=\
    \ value * value;\n        }\n    }\n    return total;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi0n35tw4.d(22): Error: cannot implicitly convert expression `__r16[__key17]`
    of type `float` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi0n35tw4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  float sum = 0.0;\n  foreach(e; lst)\n  {\n    if(isOdd(e) && isFinite(e))\n\
    \    {\n      sum += e*e;\n    }\n  }\n  return cast(long) (sum*2);\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_4u6lf_d.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_4u6lf_d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float item; lst)\n    {\n     \
    \   if(is(typeof(item) == float) && isOdd(item))\n        {\n            result\
    \ += item * item;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0u9wodmu.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0u9wodmu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    \n    long sumOddSquares = 0L;\n    long sumEvenSquares = 0L;\n\
    \    long diff = 0L;\n    \n    foreach(float x; lst) \n    {\n        if((x %\
    \ 1) == 0) \n        {\n            if((x % 2) == 0) \n            {\n       \
    \         sumEvenSquares += x * x;\n            } \n            else \n      \
    \      {\n                sumOddSquares += x * x;\n            }\n        }\n\
    \    }\n    \n    diff = sumOddSquares - sumEvenSquares;\n    return diff * 2;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvf63uq6v.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmpvf63uq6v.__unittest_L44_C1() [0x427f6d]

    ??:? void tmpvf63uq6v.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    // Put your code here\n    \n    long result = 0;\n    foreach(i;\
    \ lst)\n    {\n        if(is(typeof(i) == long) && i > 0)\n        {\n       \
    \     result += i % 2 == 0 ? 0 : i * i;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf7x139iy.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpf7x139iy.__unittest_L33_C1() [0x427ec9]

    ??:? void tmpf7x139iy.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    auto odds = [](float n) \n    {\n        return is(n % 2);\n \
    \   };\n    auto squares = [](float n) \n    {\n        return n * n;\n    };\n\
    \    auto ans = lst.filter!odds.map!squares.reduce!((a, b) => a + b);\n    return\
    \ ans.length > 0 ? ans[0] : 0;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphs9gefsv.d(21): Error: found `n` when expecting `.` following float

    /tmp/tmphs9gefsv.d(21): Error: found `)` when expecting identifier following `float`.

    /tmp/tmphs9gefsv.d(22): Error: found `{` when expecting `,`

    /tmp/tmphs9gefsv.d(23): Error: expression expected, not `return`

    /tmp/tmphs9gefsv.d(23): Error: found `;` when expecting `,`

    /tmp/tmphs9gefsv.d(24): Error: expression expected, not `}`

    /tmp/tmphs9gefsv.d(24): Error: found `;` when expecting `,`

    /tmp/tmphs9gefsv.d(25): Error: expression expected, not `auto`

    /tmp/tmphs9gefsv.d(25): Error: found `squares` when expecting `,`

    /tmp/tmphs9gefsv.d(25): Error: expression expected, not `=`

    /tmp/tmphs9gefsv.d(25): Error: found `n` when expecting `.` following float

    /tmp/tmphs9gefsv.d(25): Error: found `)` when expecting identifier following `float`.

    /tmp/tmphs9gefsv.d(26): Error: found `{` when expecting `,`

    /tmp/tmphs9gefsv.d(27): Error: expression expected, not `return`

    /tmp/tmphs9gefsv.d(27): Error: found `n` when expecting `,`

    /tmp/tmphs9gefsv.d(27'
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long count = 0;\n    for (int i = 0; i < lst.length; i++)\n  \
    \  {\n        if(ceil(lst[i]) == lst[i] && lst[i] > 0)\n        {\n          \
    \  count += pow(lst[i], 2);\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg67q9eoy.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428725]

    ??:? void tmpg67q9eoy.__unittest_L31_C1() [0x428145]

    ??:? void tmpg67q9eoy.__modtest() [0x4284a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8bb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b74e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43086d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b725]

    ??:? runModuleUnitTests [0x42c691]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    return 0L;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnwpjn_ge.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x42833d]

    ??:? void tmpnwpjn_ge.__unittest_L23_C1() [0x427e71]

    ??:? void tmpnwpjn_ge.__modtest() [0x4280bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b186]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430319]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b15d]

    ??:? runModuleUnitTests [0x42c0c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42878c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long lon = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0.0f && float.isFinite(f))\n        {\n            lon += f;\n        }\n\
    \    }\n    return 2 * (lon * lon);\n}\n/*\n    Given an array of numbers, return\
    \ the product of the numbers.\n    Ignore the elements of the array that are negative\
    \ or not integers.\n    \n    >>> biggest_product([1L, 2L, 3L, 4L])\n    24L\n\
    \    >>> biggest_product([-2L, -3L, 0L, 5L])\n    0L\n    >>> biggest_product([9L,\
    \ -2L])\n    -18L\n    >>> biggest_product([0L])\n    0L\n    \n    If the input\
    \ array is empty, return 0.\n*/\nlong biggest_product(float[] lst) \n{\n    long\
    \ lon = 1;\n    foreach(float f; lst)\n    {\n        if(f > 0.0f && float.isFinite(f))\n\
    \        {\n            lon *= f;\n        }\n    }\n    return lon;\n}\n/*\n\
    \    Given an array of numbers, return the largest difference between any two\
    \ \n    adjacent numbers.\n    \n    >>> find_the_difference([1L, 2L, 3L, 4L])\n\
    \    3L\n    >>> find_the_difference([-2L, -3L, 0L, 5L])\n    7L\n    >>> find_the_difference([9L,\
    \ -2L])\n    11L\n    >>> find_the_difference([0L])\n    0L\n    \n    If the\
    \ input array is empty, return 0.\n*/\nlong find_the_difference(float[] lst) \n\
    {\n    long maxDiff = 0;\n    long diff = 0;\n    long last = 0;\n    foreach(float\
    \ f; lst)\n    {\n        if(f > 0.0f && float.isFinite(f))\n        {\n     \
    \       if(last != 0)\n            {\n                diff = abs(last - f);\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkzlfj8n4.d(85): Error: found `unittest` instead of statement

    /tmp/tmpkzlfj8n4.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpkzlfj8n4.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpkzlfj8n4.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkzlfj8n4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    long product = 0;\n    long result = 0;\n \
    \   foreach(float v; lst)\n    {\n        if(is(int v) && v > 0)\n        {\n\
    \            if(v % 2 == 1)\n            {\n                sum += v;\n      \
    \      }\n        }\n    }\n    product = sum * sum;\n    result = product * 2;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7u_vg2f3.d(26): Error: can only declare type aliases within `static
    if` conditionals or `static assert`s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7u_vg2f3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float elem; lst) \n    {\n    \
    \    result += isOdd(elem) ? elem*elem : 0L;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0fkfla29.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0fkfla29.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(l; lst) \n    {\n        if(isInteger!(typeof(l)))\
    \ \n        {\n            continue;\n        }\n        if(l < 0) \n        {\n\
    \            continue;\n        }\n        if(l % 2 == 0) \n        {\n      \
    \      continue;\n        }\n        sum += l * l;\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx3fwzgdk.d(24): Error: template instance `isInteger!(typeof(l))`
    template `isInteger` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx3fwzgdk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float f; lst)\n    {\n        if\
    \ (f > 0f && is(typeof(f) == int))\n        {\n            f = cast(int)f;\n \
    \           if (f % 2) result += f*f;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz6a0g_no.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpz6a0g_no.__unittest_L32_C1() [0x427ec9]

    ??:? void tmpz6a0g_no.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long total = 0;\n    int i;\n    foreach (i; lst)\n    {\n   \
    \     if(isOdd(i) && isFinite(i))\n        {\n            total += pow(i, 2);\n\
    \        }\n    }\n    return total;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaui392vb.d(23): Error: variable `i` is shadowing variable `tmpaui392vb.double_the_difference.i`

    /tmp/tmpaui392vb.d(25): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaui392vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum=0;\n    foreach(item; lst)\n    {\n        if (item>0\
    \ && is(typeof(item) == int))\n        {\n            sum+= item*item;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbwafy_el.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpbwafy_el.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpbwafy_el.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    // https://stackoverflow.com/questions/34304866/functional-sum-of-squares-of-odd-numbers-in-d\n\
    \    long double_the_difference = 0L;\n    foreach(index, element; lst)\n    {\n\
    \        if((element % 2) == 1)\n        {\n            double_the_difference\
    \ += (element * element);\n        }\n    }\n    return double_the_difference;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n\tlong sum = 0;\n\tforeach(f; lst)\n\t{\n\t\tif(isOdd(f) && isFinite(f))\n\
    \t\t{\n\t\t\tsum += f * f;\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp12jwv8uc.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp12jwv8uc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    int tot = 0;\n    foreach(float i; lst)\n    {\n        if(i %\
    \ 2 == 1 && !isNaN(i) && i > 0)\n        {\n            tot += (int)pow(i, 2);\n\
    \        }\n    }\n    return tot;\n}\nlong double_the_difference(double[] lst)\
    \ \n{\n    int tot = 0;\n    foreach(double i; lst)\n    {\n        if(i % 2 ==\
    \ 1 && !isNaN(i) && i > 0)\n        {\n            tot += (int)pow(i, 2);\n  \
    \      }\n    }\n    return tot;\n}\nlong double_the_difference(long[] lst) \n\
    {\n    int tot = 0;\n    foreach(long i; lst)\n    {\n        if(i % 2 == 1 &&\
    \ !isNaN(i) && i > 0)\n        {\n            tot += (int)pow(i, 2);\n       \
    \ }\n    }\n    return tot;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr32l495h.d(26): Error: C style cast illegal, use `cast(int)pow(i,
    2)`

    /tmp/tmpr32l495h.d(38): Error: C style cast illegal, use `cast(int)pow(i, 2)`

    /tmp/tmpr32l495h.d(50): Error: C style cast illegal, use `cast(int)pow(i, 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr32l495h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  long sum = 0;\n  foreach(float x; lst)\n  {\n    if(x > 0.0 && (long)x\
    \ == x)\n    {\n      sum += x*x;\n    }\n  }\n  return sum;\n}\nunittest\n{\n\
    \    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa5n8okzg.d(24): Error: C style cast illegal, use `cast(long)x`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa5n8okzg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long diff = 0L;\n    foreach(float n; lst) \n    {\n        if\
    \ (n >= 0 && is(typeof(cast(long)n) == long)) \n        {\n            long nn\
    \ = cast(long)n;\n            if (nn % 2 == 1) \n            {\n             \
    \   diff += nn * nn;\n            }\n        }\n    }\n    return diff * 2L;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9zfdf958.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283dd]

    ??:? void tmp9zfdf958.__unittest_L35_C1() [0x427f15]

    ??:? void tmp9zfdf958.__modtest() [0x428160]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430868]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430345]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1fd]

    ??:? runModuleUnitTests [0x42c169]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42882c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    float sum = 0;\n    foreach(float i; lst)\n    {\n        if(i>0)\n\
    \        {\n            if(i%2)\n            {\n                sum = sum + pow(i,2);\n\
    \            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp26q6b2lp.d(32): Error: cannot implicitly convert expression `sum`
    of type `float` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp26q6b2lp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{ \n   long result = 0L;\n   foreach(item; lst) \n   {\n      if(item\
    \ > 0 && is(typeof(item) == int))\n      {\n         if(item % 2 == 1)\n     \
    \    {\n            result += item * item;\n         }\n      }\n   }\n   return\
    \ result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n  \
    \  assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n \
    \   assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5bht25v.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpu5bht25v.__unittest_L34_C1() [0x427ec9]

    ??:? void tmpu5bht25v.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    int i;\n    for (i = 0; i < lst.length; i++)\n\
    \    {\n        if (lst[i] >= 0 && (int)lst[i] == lst[i] && isOdd(lst[i]))\n \
    \       {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwmo10d37.d(25): Error: C style cast illegal, use `cast(int)lst[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwmo10d37.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long r = 0;\n    foreach(float num; lst)\n    {\n        long\
    \ n = cast(long)num;\n        if (n > 0 && n == num) \n        {\n           \
    \ if (n % 2 == 1)\n            {\n                r += n * n;\n            }\n\
    \        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long res = 0;\n    foreach(idx, val; lst)\n    {\n        if(val\
    \ > 0 && is(typeof(val) == long))\n        {\n            if(idx%2 == 0)\n   \
    \         {\n                res += pow(val, 2);\n            }\n        }\n \
    \   }\n    return res;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzt9bsw3v.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpzt9bsw3v.__unittest_L34_C1() [0x427f19]

    ??:? void tmpzt9bsw3v.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long odd_sum = 0;\n    long even_sum = 0;\n    foreach(float i;\
    \ lst)\n    {\n        if (isodd(i))\n        {\n            odd_sum += i * i;\n\
    \        }\n        else if (iseven(i))\n        {\n            even_sum += i\
    \ * i;\n        }\n    }\n    return odd_sum - even_sum;\n}\nunittest\n{\n   \
    \ alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp597rf4ak.d(25): Error: undefined identifier `isodd`

    /tmp/tmp597rf4ak.d(29): Error: undefined identifier `iseven`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp597rf4ak.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    auto sz = lst.length;\n    long sum = 0;\n    if (sz == 0)\n \
    \       return 0;\n    foreach (i; 0 .. sz)\n    {\n        if (lst[i] > 0)\n\
    \        {\n            lst[i] = floor(lst[i]);\n            if (lst[i] % 2 ==\
    \ 1)\n                sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ (cast(long) i) % 2 == 0 ? 0 : i * i;\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb3u79bpf.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283ed]

    ??:? void tmpb3u79bpf.__unittest_L28_C1() [0x428038]

    ??:? void tmpb3u79bpf.__modtest() [0x42816c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3a3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430878]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430355]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b20d]

    ??:? runModuleUnitTests [0x42c179]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42883c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long ret = 0L;\n    foreach(index, element; lst)\n    {\n    \
    \    if (index & 1)\n        {\n            ret += element * element;\n      \
    \  }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbxx_mq15.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283cd]

    ??:? void tmpbxx_mq15.__unittest_L31_C1() [0x427f05]

    ??:? void tmpbxx_mq15.__modtest() [0x428150]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c383]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b216]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430858]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430335]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1ed]

    ??:? runModuleUnitTests [0x42c159]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42881c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    return 0L;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnwpjn_ge.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x42833d]

    ??:? void tmpnwpjn_ge.__unittest_L23_C1() [0x427e71]

    ??:? void tmpnwpjn_ge.__modtest() [0x4280bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b186]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430319]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b15d]

    ??:? runModuleUnitTests [0x42c0c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42878c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ == cast(long)x && x > 0)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += cast(long) x * x;\n            }\n        }\n   \
    \ }\n    return 2 * sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv114z07m.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42843d]

    ??:? void tmpv114z07m.__unittest_L34_C1() [0x427f75]

    ??:? void tmpv114z07m.__modtest() [0x4281c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b286]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430419]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b25d]

    ??:? runModuleUnitTests [0x42c1c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42888c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(num; lst) \n    {\n        if(isInteger!num\
    \ && num > 0)\n        {\n            result += num * num;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo57_tpkt.d(24): Error: template instance `isInteger!num` template
    `isInteger` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo57_tpkt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    auto result = 0L;\n    auto c = 0;\n    for (auto i : lst) \n\
    \    {\n        c = cast(long)i;\n        if (c % 2L && c > 0L) \n        {\n\
    \            result += c*c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmmr28fl_.d(23): Error: no identifier for declarator `i`

    /tmp/tmpmmr28fl_.d(23): Error: expression expected, not `:`

    /tmp/tmpmmr28fl_.d(23): Error: found `lst` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmmr28fl_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst) \n    {\n       \
    \ if(i == float.to!int(i) && i >= 0) \n        {\n            result += i.isEven\
    \ ? i * i : 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzg0ywf4g.d(24): Error: found `!` when expecting `)`

    /tmp/tmpzg0ywf4g.d(24): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzg0ywf4g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  long total = 0;\n  foreach(float i; lst)\n  {\n    if (i > 0 &&\
    \ is(typeof(long(i))) && i % 2 != 0)\n    {\n      total += i * i;\n    }\n  }\n\
    \  return total;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe2daxhsq.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpe2daxhsq.__unittest_L31_C1() [0x427ec9]

    ??:? void tmpe2daxhsq.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  long double_the_difference = 0L;\n  foreach (float x; lst) \n  {\n\
    \    if (std.math.isnan(x) || x <= 0.0f || x != cast(int)x) \n    {\n      continue;\n\
    \    }\n    double_the_difference += x * x;\n  }\n  return double_the_difference;\n\
    }\n/*\n    Uncomment the following lines to test your code with the input\n  \
    \  provided by codelibrary.io. To test your code with custom input,\n    create\
    \ a file named inputs.txt in the same directory as this file,\n    with the input(s)\
    \ on separate lines. Then, comment out the code\n    below and run \"dmd -run\
    \ problem3.d\".\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq5h9dsc5.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq5h9dsc5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0)\n        {\n            sum += i*i;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnsrs9c1u.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283d5]

    ??:? void tmpnsrs9c1u.__unittest_L31_C1() [0x427f0d]

    ??:? void tmpnsrs9c1u.__modtest() [0x428158]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c38b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b21e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430860]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43033d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f5]

    ??:? runModuleUnitTests [0x42c161]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428824]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long total = 0;\n    foreach(float num; lst) \n    {\n       \
    \ if(num > 0 && num == cast(int)num)\n        {\n            if(num%2 == 1)\n\
    \            {\n                total += num*num;\n            }\n        }\n\
    \    }\n    return total;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163996
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n\tif( i>=0 &&\
    \ i%2!=0)\n\t{\n\t   sum+=pow(i,2);\n\t}\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long ret = 0L;\n    foreach(float i; lst) \n    {\n        if(\
    \ i > 0.f && is(typeof(i) == int)) \n        {\n            if(i % 2.f == 1.f)\
    \ \n            {\n                ret += pow(i, 2.f);\n            }\n      \
    \  }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm3njn8n7.d(24): Error: no property `f` for type `int`

    /tmp/tmpm3njn8n7.d(26): Error: no property `f` for type `int`

    /tmp/tmpm3njn8n7.d(26): Error: no property `f` for type `int`

    /tmp/tmpm3njn8n7.d(28): Error: no property `f` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm3njn8n7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long s = 0;\n    foreach(float i; lst)\n    {\n        if(i %\
    \ 2 == 1)\n        {\n            s += pow(i, 2);\n        }\n    }\n    return\
    \ s;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long squared_sum = 0L;\n    foreach(float f; lst)\n    {\n   \
    \     if(isFinite(f) && is(typeof(f) == int))\n        {\n            long i =\
    \ f;\n            if(i%2 != 0)\n            {\n                squared_sum +=\
    \ i*i;\n            }\n        }\n    }\n    return squared_sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7h8_m9lz.d(26): Error: cannot implicitly convert expression `f`
    of type `float` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7h8_m9lz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long a = 0;\n    foreach(float i; lst)\n    {\n        if(is(typeof(i)\
    \ == long) && i > 0)\n        {\n            if(i % 2 == 1)\n            {\n \
    \               a += i * i;\n            }\n        }\n    }\n    return a;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp49zmou6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpp49zmou6.__unittest_L34_C1() [0x427ec9]

    ??:? void tmpp49zmou6.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long[] odds = new long[0];\n    foreach(item; lst)\n    {\n  \
    \      if (item > 0 && (item - int(item)) == 0)\n        {\n            if (item\
    \ % 2 == 1)\n            {\n                odds ~= item;\n            }\n   \
    \     }\n    }\n    return reduce!(\"a + b\")(map!(\"a * a\")(odds));\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpae70baxd.d(24): Error: cannot implicitly convert expression `item`
    of type `float` to `int`

    /tmp/tmpae70baxd.d(28): Error: cannot append type `float` to type `long[]`

    /tmp/tmpae70baxd.d(32): Error: template instance `reduce!"a + b"` template `reduce`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpae70baxd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum_squares = 0L;\n    foreach(x; lst)\n    {\n        long\
    \ x_int = cast(long) x;\n        if(x_int > 0L && is(typeof(x_int) == long))\n\
    \        {\n            if(x_int % 2L != 0L)\n            {\n                sum_squares\
    \ += x_int*x_int;\n            }\n        }\n    }\n    return sum_squares;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(var i; lst)\n    {\n        if (i>0)\n\
    \        {\n            if(is(int)i)\n            {\n                int x = i;\n\
    \                if(x%2!=0)\n                {\n                    sum += i*i;\n\
    \                }\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk9c9bpsa.d(26): Error: found `i` when expecting `)`

    /tmp/tmpk9c9bpsa.d(26): Error: found `)` instead of statement

    /tmp/tmpk9c9bpsa.d(36): Error: declaration expected, not `return`

    /tmp/tmpk9c9bpsa.d(37): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk9c9bpsa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(var i; lst) \n    {\n        if(isnan(i)\
    \ || i < 0) continue;\n        if(i % 2 == 1) sum += pow(i, 2);\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ikm0xil.d(22): Error: undefined identifier `var`

    /tmp/tmp2ikm0xil.d(24): Deprecation: `object.isnan` is not visible from module
    `tmp2ikm0xil`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ikm0xil.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long s = 0;\n    foreach(float i; lst) \n    {\n        if(int(i)\
    \ > 0 && i == float(int(i))) \n        {\n            if(int(i) % 2 == 1) \n \
    \           {\n                s += i * i;\n            }\n        }\n    }\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps9j9n18y.d(24): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    /tmp/tmps9j9n18y.d(24): Error: cannot implicitly convert expression `i` of type
    `float` to `int`

    /tmp/tmps9j9n18y.d(26): Error: cannot implicitly convert expression `i` of type
    `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9j9n18y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long odd_sum_squares = 0L;\n    foreach(x; lst)\n    {\n     \
    \   if (x > 0 && is(typeof(x) == int))\n        {\n            if (x % 2)\n  \
    \          {\n                odd_sum_squares += x * x;\n            }\n     \
    \   }\n    }\n    return odd_sum_squares;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9k2poyzd.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp9k2poyzd.__unittest_L34_C1() [0x427ec9]

    ??:? void tmp9k2poyzd.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst) \n    {\n        if(num\
    \ < 0) \n        {\n            continue;\n        }\n        else \n        {\n\
    \            if(num % 2L == 0L) \n            {\n                continue;\n \
    \           }\n            else \n            {\n                sum += num *\
    \ num;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n   \
    \ alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n\tlong result = 0;\n\tint size = lst.length;\n\tfor (int i = 0; i\
    \ < size; i++)\n\t{\n\t\tif (isEven(lst[i]))\n\t\t{\n\t\t\tresult += (long)lst[i]\
    \ * (long)lst[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkxjx5c3h.d(27): Error: C style cast illegal, use `cast(long)lst[i]`

    /tmp/tmpkxjx5c3h.d(27): Error: C style cast illegal, use `cast(long)lst[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkxjx5c3h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long total = 0;\n    for (long x : lst) \n    {\n        if (x\
    \ >= 0 && float(x) == x) \n        {\n            if (x % 2 == 1) \n         \
    \   {\n                total += x * x;\n            }\n        }\n    }\n    return\
    \ total;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n   \
    \ assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n  \
    \  assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx9xqyklz.d(22): Error: semicolon expected, not `:`

    /tmp/tmpx9xqyklz.d(22): Error: expression expected, not `:`

    /tmp/tmpx9xqyklz.d(22): Error: found `lst` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx9xqyklz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long value = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ < 0.0 || i != cast(int)i)\n            continue;\n        int digit = cast(int)i;\n\
    \        if(digit%2 != 0)\n            value += digit*digit;\n    }\n    return\
    \ value;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n   \
    \ assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n  \
    \  assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long retval = 0L;\n    foreach(float i; lst)\n    {\n        long\
    \ j = cast(long)i;\n        if (j == j/2*2) {\n            retval += j*j;\n  \
    \      }\n    }\n    return retval;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphn4va1gb.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283c5]

    ??:? void tmphn4va1gb.__unittest_L31_C1() [0x427efd]

    ??:? void tmphn4va1gb.__modtest() [0x428148]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c37b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b20e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430850]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43032d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1e5]

    ??:? runModuleUnitTests [0x42c151]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428814]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i; lst)\n    {\n        if(isInteger!float(i)\
    \ && i > 0)\n        {\n            sum += i*i;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpldmzxpxp.d(24): Error: template instance `isInteger!float` template
    `isInteger` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpldmzxpxp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    return reduce!\"a + b\"(lst.filter!(x => is(typeof(x) == int))\n\
    \                             .filter!(x => x%2 != 0)\n                      \
    \       .map!(x => x*x));\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpccfcqqsh.d(21): Error: template instance `reduce!"a + b"` template
    `reduce` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpccfcqqsh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long double_the_difference = 0L;\n    for (float i = 0L; i < lst.length;\
    \ i++) \n    {\n        if (isOdd(int(i)) && i > 0L) \n        {\n           \
    \ double_the_difference += pow(i, 2L);\n        }\n    }\n    return double_the_difference;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97nfsepj.d(24): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97nfsepj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long odd_sq_sum = 0L;\n    foreach(float i; lst) \n    {\n   \
    \     if(i > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n\
    \            {\n                odd_sq_sum += pow(i, 2);\n            }\n    \
    \    }\n    }\n    return odd_sq_sum * 2;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_jty_6ar.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284fd]

    ??:? void tmp_jty_6ar.__unittest_L34_C1() [0x427f1d]

    ??:? void tmp_jty_6ar.__modtest() [0x42827c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4b3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b346]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b31d]

    ??:? runModuleUnitTests [0x42c289]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42894c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(e; lst) \n    {\n        if(!is(typeof(e)\
    \ == long) || e < 0L) \n        {\n            continue;\n        }\n        if(e%2L\
    \ == 1L) \n        {\n            sum += e*e;\n        }\n    }\n    return sum*2L;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_p9vz0z8.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp_p9vz0z8.__unittest_L35_C1() [0x427ecd]

    ??:? void tmp_p9vz0z8.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    // Write the code of your solution here. \n    // You may use\
    \ other functions. \n    return 0L;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk1fuvia0.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x42833d]

    ??:? void tmpk1fuvia0.__unittest_L25_C1() [0x427e71]

    ??:? void tmpk1fuvia0.__modtest() [0x4280bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b186]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430319]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b15d]

    ??:? runModuleUnitTests [0x42c0c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42878c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long difference = 0L;\n    foreach(float f; lst) \n    {\n   \
    \     if(f-cast(int)f == 0.0f && f > 0.0f) \n        {\n            difference\
    \ += f*f;\n        }\n    }\n    return difference;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1yqse_ab.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283fd]

    ??:? void tmp1yqse_ab.__unittest_L31_C1() [0x427f31]

    ??:? void tmp1yqse_ab.__modtest() [0x42817c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3b3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b246]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430888]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430365]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b21d]

    ??:? runModuleUnitTests [0x42c189]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42884c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    return 0L;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnwpjn_ge.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x42833d]

    ??:? void tmpnwpjn_ge.__unittest_L23_C1() [0x427e71]

    ??:? void tmpnwpjn_ge.__modtest() [0x4280bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b186]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430319]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b15d]

    ??:? runModuleUnitTests [0x42c0c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42878c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    // COMPLETE ME\n    long sum = 0;\n    for (int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i] > 0 && is(typeof(lst[i]) == int))\n        {\n\
    \            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprb4sdf7w.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284e5]

    ??:? void tmprb4sdf7w.__unittest_L32_C1() [0x427f09]

    ??:? void tmprb4sdf7w.__modtest() [0x428268]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c50f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430535]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b379]

    ??:? runModuleUnitTests [0x42c2e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    assert(false, \"double_the_difference not implemented\");\n  \
    \  return 0L;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_4goiiml.d(21): double_the_difference
    not implemented

    ----------------

    ??:? _d_assert_msg [0x42838e]

    ??:? long tmp_4goiiml.double_the_difference(float[]) [0x427e48]

    ??:? void tmp_4goiiml.__unittest_L24_C1() [0x427e72]

    ??:? void tmp_4goiiml.__modtest() [0x428124]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c42b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430451]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430900]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b295]

    ??:? runModuleUnitTests [0x42c201]

    ??:? void rt.dmain2._d_run_main(int, ch'
  stdout: ''
  timestamp: 1660163996
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n\tlong ret = 0;\n\tforeach(v; lst)\n\t{\n\t\tif(v > 0 && v == trunc(v))\n\
    \t\t{\n\t\t\tif(v % 2 == 1)\n\t\t\t{\n\t\t\t\tv = v * v;\n\t\t\t}\n\t\t\telse\n\
    \t\t\t{\n\t\t\t\tv = 0;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tv = 0;\n\t\t}\n\
    \t\tret += v;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(el; lst)\n    {\n        if (el > 0\
    \ && el.isInfinite == false && (long)el % 2 == 1)\n        {\n            sum\
    \ += el*el;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps3xssd1y.d(24): Error: C style cast illegal, use `cast(long)el`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps3xssd1y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    int num = 0;\n    foreach(float n; lst)\n \
    \   {\n        if(isNaN(n) || !isFinite(n) || n < 0)\n            continue;\n\
    \        int nn = int(n);\n        if(nn != n)\n            continue;\n      \
    \  num++;\n        if(nn % 2 == 1)\n            sum += nn * nn;\n    }\n    if(num\
    \ == 0)\n        return 0;\n    return sum * 2;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiqzuqcxo.d(27): Error: cannot implicitly convert expression `n`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqzuqcxo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if (i\
    \ == int(i) && i > 0)\n        {\n            sum += int(i*i);\n        }\n  \
    \  }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn7mty339.d(24): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    /tmp/tmpn7mty339.d(26): Error: cannot implicitly convert expression `i * i` of
    type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn7mty339.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  if (lst.length == 0) return 0;\n  long sum = 0;\n  foreach (num;\
    \ lst)\n  {\n    if (is(typeof(num) == float)) continue;\n    if (num < 0) continue;\n\
    \    if (num is long)\n    {\n      if (num % 2 == 0) continue;\n      sum +=\
    \ pow(num, 2);\n    }\n  }\n  return sum;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp24dfkhb1.d(27): Error: found `)` when expecting `.` following long

    /tmp/tmp24dfkhb1.d(28): Error: found `{` when expecting identifier following `long`.

    /tmp/tmp24dfkhb1.d(29): Error: found `if` when expecting `)`

    /tmp/tmp24dfkhb1.d(29): Error: found `continue` when expecting `;` following statement

    /tmp/tmp24dfkhb1.d(29): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp24dfkhb1.d(33): Error: declaration expected, not `return`

    /tmp/tmp24dfkhb1.d(34): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp24dfkhb1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum_of_squares = 0L;\n    foreach(float elem; lst)\n    {\n\
    \        if(elem % 2 != 0 && elem > 0)\n        {\n            sum_of_squares\
    \ += sqr(elem);\n        }\n    }\n    return sum_of_squares;\n}\nunittest\n{\n\
    \    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0k5r66dc.d(26): Error: undefined identifier `sqr`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0k5r66dc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float el; lst)\n    {\n        if (isNaN(el)\
    \ || el < 0 || !is(typeof(el) == long))\n            continue;\n        if (el\
    \ % 2)\n            sum += el*el;\n    }\n    return sum;\n}\nunittest\n{\n  \
    \  alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp164pcarm.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmp164pcarm.__unittest_L31_C1() [0x427f29]

    ??:? void tmp164pcarm.__modtest() [0x4281b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43039d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]

    ??:? runModuleUnitTests [0x42c1c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum_odd = 0;\n    long sum_even = 0;\n    int count = 0;\n\
    \    int k = 1;\n    for (int i = 0; i < len(lst); i++)\n    {\n        if (k\
    \ % 2 == 0)\n        {\n            if (lst[i] > 0 && int(lst[i]) == lst[i])\n\
    \            {\n                sum_even += lst[i] * lst[i];\n            }\n\
    \        }\n        else\n        {\n            if (lst[i] > 0 && int(lst[i])\
    \ == lst[i])\n            {\n                sum_odd += lst[i] * lst[i];\n   \
    \         }\n        }\n        k += 1;\n    }\n    return pow(abs(sum_odd - sum_even),\
    \ 2);\n}\n \n \n \n/*\n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n\
    \ * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n *\
    \ \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n\
    \ * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n *\
    \ \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n\
    \ * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n *\
    \ \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqseii03k.d(48): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqseii03k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(num; lst)\n    {\n        static\
    \ if (is(typeof(num) == int))\n        {\n            if (num > 0 && num % 2 ==\
    \ 1)\n            {\n                result += num * num;\n            }\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsbq8mxn0.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpsbq8mxn0.__unittest_L34_C1() [0x427ec9]

    ??:? void tmpsbq8mxn0.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if (i\
    \ == int(i) && i > 0)\n        {\n            sum += i*i;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6v_gz1ln.d(24): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6v_gz1ln.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float element; lst)\n    {\n     \
    \   if(element > 0L && element % 2L == 1L)\n        {\n            sum += element\
    \ * element;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n\tlong total=0;\n\tfor(int i=0;i<lst.length;i++)\n\t{\n\t\tif(lst[i]>0\
    \ && fmod(lst[i],1)==0 && lst[i]%2!=0)\n\t\t{\n\t\t\ttotal=total+pow(lst[i],2);\n\
    \t\t}\n\t}\n\treturn total;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzaqfy141.d(26): Error: cannot implicitly convert expression `cast(float)total
    + pow(lst[cast(ulong)i], 2)` of type `float` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzaqfy141.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long num = 0;\n    foreach(double value; lst)\n    {\n       \
    \ long squared = int(value) * int(value);\n        if(value > 0)\n        {\n\
    \            if(value % 2 == 1)\n            {\n                num += squared;\n\
    \            }\n        }\n    }\n    return num;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6iclch25.d(24): Error: cannot implicitly convert expression `value`
    of type `double` to `int`

    /tmp/tmp6iclch25.d(24): Error: cannot implicitly convert expression `value` of
    type `double` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6iclch25.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            sum += x*x;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2m0a5nk6.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp2m0a5nk6.__unittest_L31_C1() [0x427ec9]

    ??:? void tmp2m0a5nk6.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    float power = 2.0f;\n    foreach(item;\
    \ lst)\n    {\n        if(is(typeof(item) == int) && item > 0)\n        {\n  \
    \          if(item % 2 == 1)\n            {\n                result += pow(item,\
    \ power);\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy96trcm3.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x428f2d]

    ??:? void tmpy96trcm3.__unittest_L35_C1() [0x428151]

    ??:? void tmpy96trcm3.__modtest() [0x428cb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42be1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430fb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431460]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430f3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bdf5]

    ??:? runModuleUnitTests [0x42cd61]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42937c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(x; lst) \n    {\n        if (x.isNaN\
    \ || x.isInfinity || x < 0.0) \n        {\n            continue;\n        }\n\
    \        if (x % 2 == 1) \n        {\n            result += x*x;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long to_return = 0L;\n    foreach(float val; lst)\n    {\n   \
    \     if (isOdd(val) && val > 0 && is(typeof(val) == float))\n        {\n    \
    \        to_return += val;\n        }\n    }\n    return to_return;\n}\n/*\n \
    \   // Tests\nunittest\n{\n    alias candidate = double_the_difference;\n\n  \
    \  assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n \
    \   assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpll6mh66m.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpll6mh66m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long t = 0;\n    foreach(num; lst)\n    {\n        if(modf(num,\
    \ 0.0) == 0.0)\n        {\n            if(num >= 0)\n            {\n         \
    \       if(num % 2 == 1)\n                {\n                    t += num * num;\n\
    \                }\n            }\n        }\n    }\n    return t;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpexqrrgjx.d(24): Error: function `std.math.modf(real x, ref real
    i)` is not callable using argument types `(float, double)`

    /tmp/tmpexqrrgjx.d(24):        cannot pass rvalue argument `0.00000` of type `double`
    to parameter `ref real i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpexqrrgjx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    auto sum_of_odd_numbers = 0L;\n    for (; int i = 0; i < lst.length;\
    \ i++)\n    {\n        if (lst[i] % 2 == 1)\n        {\n            sum_of_odd_numbers\
    \ += lst[i] * lst[i];\n        }\n    }\n    return sum_of_odd_numbers;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt24z1gj7.d(22): Error: found `i` when expecting `.` following int

    /tmp/tmpt24z1gj7.d(22): Error: found `=` when expecting identifier following `int`.

    /tmp/tmpt24z1gj7.d(22): Error: found `0` when expecting `;` following `for` condition

    /tmp/tmpt24z1gj7.d(22): Error: expression expected, not `;`

    /tmp/tmpt24z1gj7.d(22): Error: found `i` when expecting `)`

    /tmp/tmpt24z1gj7.d(22): Error: found `<` instead of statement

    /tmp/tmpt24z1gj7.d(22): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt24z1gj7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        if(e>0 && e%2\
    \ != 0)\n        {\n            sum += pow(e,2);\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163996
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i; lst) \n    {\n        if (i > 0\
    \ && is(typeof(lst[0]) == typeof(i))) \n        {\n            long number = cast(long)i;\n\
    \            if (number % 2 == 1) \n            {\n                sum += number\
    \ * number;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n\
    \    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float l; lst)\n    {\n        if\
    \ (isinf(l) || isnan(l))\n            continue;\n        if (l < 0)\n        \
    \    continue;\n        if (l != cast(long)l)\n            continue;\n       \
    \ if (l % 2 == 0)\n            continue;\n        result += l * l;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4_cor98i.d(24): Error: undefined identifier `isinf`

    /tmp/tmp4_cor98i.d(24): Deprecation: `object.isnan` is not visible from module
    `tmp4_cor98i`

    /tmp/tmp4_cor98i.d(24): Error: function `object.isnan` is not accessible from
    module `tmp4_cor98i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4_cor98i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long res = 0;\n    foreach(float elem; lst) \n    {\n        if\
    \ (isNaN(elem) || elem <= 0)\n            continue;\n        long num = cast(long)elem;\n\
    \        if (num % 2 == 1)\n            res += num * num;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float elem; lst)\n    {\n        if\
    \ (isinteger(elem) && int(elem) % 2L != 0L)\n        {\n            sum += elem\
    \ * elem;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg_1jmwhi.d(24): Error: undefined identifier `isinteger`

    /tmp/tmpg_1jmwhi.d(24): Error: cannot implicitly convert expression `elem` of
    type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg_1jmwhi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long ret = 0L;\n    foreach(e; lst)\n    {\n        // Ignore\
    \ numbers that are negative or not integers.\n        if(isNaN(e) || e < 0.0)\n\
    \            continue;\n        long eInt = long(e);\n        if(eInt != e)\n\
    \            continue;\n        // If the element is an odd number, add it to\
    \ the sum of squares.\n        if(eInt % 2 != 0)\n            ret += eInt * eInt;\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpizh4upqq.d(27): Error: cannot implicitly convert expression `e`
    of type `float` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpizh4upqq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long diff = 0L;\n    foreach(item; lst)\n    {\n        if(item\
    \ > 0 && item == (int)item)\n        {\n            if((int)item % 2 != 0)\n \
    \           {\n                diff += (int)item * (int)item;\n            }\n\
    \        }\n    }\n    return diff * 2;\n}\nunittest\n{\n    alias candidate =\
    \ double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp60l2_6hp.d(24): Error: C style cast illegal, use `cast(int)item`

    /tmp/tmp60l2_6hp.d(26): Error: C style cast illegal, use `cast(int)item`

    /tmp/tmp60l2_6hp.d(28): Error: C style cast illegal, use `cast(int)item`

    /tmp/tmp60l2_6hp.d(28): Error: C style cast illegal, use `cast(int)item`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp60l2_6hp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    return 0L;\n}\n \n \nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpomrzmdes.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x42833d]

    ??:? void tmpomrzmdes.__unittest_L25_C1() [0x427e71]

    ??:? void tmpomrzmdes.__modtest() [0x4280bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b186]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430319]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b15d]

    ??:? runModuleUnitTests [0x42c0c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42878c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  long result = 0;\n  for (float item in lst)\n  {\n      long num\
    \ = cast(long)item;\n      if (item != num || item < 0) \n          continue;\n\
    \      if (num % 2 == 1)\n          result += num * num;\n  }\n  return result;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1mkyl2bz.d(22): Error: semicolon expected, not `in`

    /tmp/tmp1mkyl2bz.d(22): Error: expression expected, not `in`

    /tmp/tmp1mkyl2bz.d(22): Error: found `lst` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1mkyl2bz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    return 0L;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnwpjn_ge.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x42833d]

    ??:? void tmpnwpjn_ge.__unittest_L23_C1() [0x427e71]

    ??:? void tmpnwpjn_ge.__modtest() [0x4280bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b186]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430319]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b15d]

    ??:? runModuleUnitTests [0x42c0c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42878c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163995
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long res = 0;\n    foreach(float item; lst)\n    {\n        if(item\
    \ > 0)\n        {\n            long temp = cast(long)item;\n            if(temp\
    \ % 2 == 1)\n            {\n                res += temp * temp;\n            }\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach( float elem; lst )\n    {\n      \
    \  if(is(typeof(elem) == long))\n        {\n            long e = cast(long)elem;\n\
    \            if(e > 0 && e % 2 == 1)\n            {\n                sum += e\
    \ * e;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n   \
    \ alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdlgazdwn.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpdlgazdwn.__unittest_L35_C1() [0x427ec9]

    ??:? void tmpdlgazdwn.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && modf(i, 1.0) == 0.0)\n        {\n            if(i % 2L == 1L)\n    \
    \        {\n                result += i * i;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsrd6cf1y.d(24): Error: function `std.math.modf(real x, ref real
    i)` is not callable using argument types `(float, double)`

    /tmp/tmpsrd6cf1y.d(24):        cannot pass rvalue argument `1.00000` of type `double`
    to parameter `ref real i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsrd6cf1y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(item; lst) \n    {\n        if\
    \ (item > 0L && is(int item))\n        {\n            result += long(pow(item,\
    \ 2));\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6jrmc7sj.d(24): Error: can only declare type aliases within `static
    if` conditionals or `static assert`s

    /tmp/tmp6jrmc7sj.d(26): Error: cannot implicitly convert expression `pow(item,
    2)` of type `float` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6jrmc7sj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float elem; lst) \n    {\n    \
    \    if (int(elem) % 2 == 1) \n        {\n            result += pow(elem, 2);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaqzshr64.d(24): Error: cannot implicitly convert expression `elem`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaqzshr64.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163996
