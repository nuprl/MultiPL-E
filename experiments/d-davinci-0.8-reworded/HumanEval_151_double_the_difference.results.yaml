language: d
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        if (isOdd(e)\
    \ && e > 0)\n        {\n            sum += e * e;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe9m40la3.d(24): Error: undefined identifier `isOdd`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe9m40la3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{ \n    float total = 0;\n    for (int i = 0; i < lst.length; i++)\n\
    \    {\n        if (is_odd(lst[i]) && !is_negative(lst[i]) && is_finite(lst[i]))\n\
    \        {\n            total += lst[i] * lst[i];\n        }\n    }\n    return\
    \ total;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n   \
    \ assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n  \
    \  assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnr23xj3x.d(24): Error: undefined identifier `is_odd`\n/tmp/tmpnr23xj3x.d(24):
    Error: undefined identifier `is_negative`\n/tmp/tmpnr23xj3x.d(24): Error: undefined
    identifier `is_finite`, did you mean template `isFinite(X)(X x)`?\n/tmp/tmpnr23xj3x.d(29):
    Error: cannot implicitly convert expression `total` of type `float` to `long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnr23xj3x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long rval = 0L;\n    foreach(v; lst)\n    {\n        if(isOdd(v)\
    \ && isInteger(v))\n        {\n            rval += v^2;\n        }\n    }\n  \
    \  return rval;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj4x9pbnq.d(24): Error: undefined identifier `isOdd`\n/tmp/tmpj4x9pbnq.d(24):
    Error: undefined identifier `isInteger`\n/tmp/tmpj4x9pbnq.d(26): Error: `v` is
    not of integral type, it is a `float`\n/tmp/tmpj4x9pbnq.d(26): Error: `cast(float)2`
    is not of integral type, it is a `float`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpj4x9pbnq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(f; lst)\n    {\n        if(is(typeof(f)\
    \ == long) && (f >= 0) && (f % 2 == 1))\n        {\n            sum += f * f;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmptf2su80e.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmptf2su80e.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmptf2su80e.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x8d971554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long total = 0;\n    foreach(f; lst) \n    {\n        long i =\
    \ cast(long)f;\n        if(i > 0 && i % 2 == 1) \n        {\n            total\
    \ += pow(i, 2);\n        }\n    }\n    return total;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(l; lst)\n    {\n        if (isOdd(l)\
    \ && l == cast(int)l)\n        {\n            result += l*l;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjrxiptvc.d(24): Error: undefined identifier `isOdd`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjrxiptvc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) \n    {\n\
    \        if (lst[i] > 0 && (int)lst[i] == lst[i])\n        {\n            sum\
    \ += pow(lst[i], 2);\n        }\n    }\n    return 2 * sum;\n}\nunittest\n{\n\
    \    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph7gp84qp.d(24): Error: C style cast illegal, use `cast(int)lst[i]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph7gp84qp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long res = 0;\n    foreach(float elt; lst)\n    {\n        if\
    \ (elt > 0)\n        {\n            if (int(elt) == elt)\n            {\n    \
    \            if (elt % 2 == 1)\n                {\n                    res +=\
    \ pow(elt, 2);\n                }\n            }\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptjj3e8qs.d(26): Error: cannot implicitly convert expression
    `elt` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptjj3e8qs.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == (long)x)\n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpod080jud.d(24): Error: C style cast illegal, use `cast(long)x`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpod080jud.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(v; lst) \n    {\n        if(isIntegral!(typeof(v))\
    \ || v < 0) \n        {\n            continue;\n        }\n        if(v % 2 ==\
    \ 1) \n        {\n            sum += pow(v, 2);\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqinmo5vy.d(24): Error: template instance `isIntegral!(typeof(v))`
    template `isIntegral` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpqinmo5vy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long r = 0;\n    foreach(x; lst) {\n        if (isInteger!float(x)\
    \ && x > 0) {\n            r += cast(long)(x * x);\n        }\n    }\n    return\
    \ r;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpom2m8zu4.d(23): Error: template instance `isInteger!float` template
    `isInteger` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpom2m8zu4.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long rtn=0;\n    foreach(e; lst)\n    {\n        if(e>0 && e==cast(int)e)\n\
    \        {\n            rtn += pow(e,2);\n        }\n    }\n    return rtn;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqhz9q0ib.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428565]\n??:? void tmpqhz9q0ib.__unittest_L31_C1() [0x427f89]\n??:?
    void tmpqhz9q0ib.__modtest() [0x4282e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c51b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b385]\n??:? runModuleUnitTests [0x42c2f1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42893b]\n??:? _d_run_main [0x4288a6]\n??:? main [0x4282fb]\n??:?
    __libc_start_main [0x24a00554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(isOdd(num)\
    \ && num > 0) \n        {\n            sum += pow(num, 2);\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx15ysmcy.d(24): Error: undefined identifier `isOdd`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx15ysmcy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(is(typeof(int(f))))\n\
    \        {\n            if(int(f) >= 0 && fmod(f, 2) == 1)\n            {\n  \
    \              sum += pow(f, 2);\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxjw7wer3.d(26): Error: cannot implicitly convert expression
    `f` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxjw7wer3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long ret = 0L;\n    foreach(n; lst) \n    {\n        if(n > 0L\
    \ && is(typeof(n) == int)) \n        {\n            ret += cast(long)n * cast(long)n;\n\
    \        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp715w_sx3.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp715w_sx3.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmp715w_sx3.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x74623554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst) \n    {\n        if(isOdd(x)\
    \ && (x - (long)x) == 0)\n        {\n            sum += (long)x*(long)x;\n   \
    \     }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwkox_wmi.d(24): Error: C style cast illegal, use `cast(long)x`\n/tmp/tmpwkox_wmi.d(26):
    Error: C style cast illegal, use `cast(long)x`\n/tmp/tmpwkox_wmi.d(26): Error:
    C style cast illegal, use `cast(long)x`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpwkox_wmi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float elem; lst) \n    {\n        if((elem\
    \ > 0) && (int(elem) == elem)) \n        {\n            if(elem % 2 != 0) \n \
    \           {\n                // LST IS EVEN\n                sum += pow(elem,\
    \ 2);\n            }\n        }\n    }\n    return 2 * sum;\n}\nunittest\n{\n\
    \    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpph2gep2u.d(24): Error: cannot implicitly convert expression
    `elem` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpph2gep2u.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sumOfSquares = 0L;\n    for (int i = 0; i < lst.length; i++)\
    \ \n    {\n        if ((lst[i] > 0L) && (lst[i] == trunc(lst[i])) && (lst[i] %\
    \ 2 == 1)) \n        {\n            sumOfSquares += pow(lst[i], 2L);\n       \
    \ }\n    }\n    return sumOfSquares;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float elem; lst) \n    {\n    \
    \    float f = abs(elem);\n        float frac = f - trunc(f);\n        if (frac\
    \ == 0.0 && elem > 0) \n        {\n            long tmp = (long)elem;\n      \
    \      if (tmp % 2L == 1L) \n            {\n                result += tmp * tmp;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcwgwrhf3.d(28): Error: C style cast illegal, use `cast(long)elem`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwgwrhf3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    // Write your code here.\n    long sum = 0;\n    foreach(i;lst)\n\
    \    {\n        if(isOdd(i)&&isInteger(i))\n        {\n            sum += (long)(i*i);\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm0ldi8be.d(27): Error: C style cast illegal, use `cast(long)(i
    * i)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm0ldi8be.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float n; lst)\n    {\n        if (n\
    \ > 0 && is(typeof(long) n))\n        {\n            if ((long)n % 2 != 0)\n \
    \           {\n                sum += (long)pow(n, 2);\n            }\n      \
    \  }\n    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3e4trt7q.d(24): Error: found \'')\'' when expecting \''.\''
    following long\n/tmp/tmp3e4trt7q.d(25): Error: found \''{\'' when expecting \'')\''\n/tmp/tmp3e4trt7q.d(26):
    Error: C style cast illegal, use cast(long)n\n/tmp/tmp3e4trt7q.d(28): Error: C
    style cast illegal, use cast(long)pow(n, 2)\n/tmp/tmp3e4trt7q.d(32): Error: Declaration
    expected, not \''return\''\n/tmp/tmp3e4trt7q.d(33): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3e4trt7q.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(i; 0 .. lst.length)\n    {\n  \
    \      if (lst[i] % 2 != 0 && lst[i] >= 0)\n        {\n            result += pow(lst[i],\
    \ 2);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5pct0d3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float n; lst)\n    {\n        if\
    \ (n != trunc(n) || n < 0)\n            continue;\n        if (n % 2 == 1)\n \
    \           result += n * n;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl91wql4o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long odd_squares = 0L;\n    foreach(float i; lst) \n    {\n  \
    \      if (modf(i, float.nan) == 0 && i > 0) \n        {\n            if (modf(i,\
    \ 2) != 0) \n            {\n                odd_squares += i * i;\n          \
    \  }\n        }\n    }\n    return odd_squares;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpug_iowa0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    if(lst.length == 0) return 0;\n    long res = 0;\n    foreach(a;\
    \ lst)\n    {\n        if(a > 0) \n        {\n            if(a % 2L == 1L)\n \
    \           {\n                res += a * a;\n            }\n        }\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmf35ne44.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum=0;\n    foreach(float elt; lst)\n    {\n        if(elt\
    \ >= 0 && (long)elt % 2 == 1)\n        {\n            sum = sum + pow(elt, 2);\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp01yrp0zm.d(24): Error: C style cast illegal, use cast(long)elt\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp01yrp0zm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long temp = 0L;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isRealFloat(x))\n        {\n            temp += x * x;\n        }\n    }\n\
    \    return temp;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwnffjwj9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  auto result = 0L;\n  auto original = 0L;\n  auto squares = 0L;\n\
    \  foreach (x; lst) \n  {\n    auto xI = cast(long) x;\n    if (xI % 2 == 1 &&\
    \ xI >= 0)\n    {\n      original += xI;\n      squares += xI * xI;\n    }\n \
    \ }\n  result = 2L * original - squares;\n  return result;\n}\nunittest\n{\n \
    \   alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp12fnmok4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float v; lst)\n    {\n        if(isodd(v)\
    \ && isfinite(v))\n        {\n            sum += pow(v, 2);\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy75c3s2d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(isInteger!float(x)\
    \ && x >= 0.0f)\n        {\n            if(x % 2.0f == 1.0f)\n            {\n\
    \                result += x * x;\n            }\n        }\n    }\n    return\
    \ result;\n}\n \nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7u8lxxp3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long res = 0;\n    foreach(item; lst) \n    {\n        if (item\
    \ != item.floor) \n        {\n            continue;\n        }\n        else if\
    \ (item > 0) \n        {\n            res += item * item;\n        }\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk8v28jgv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    auto res = 0.0L;\n    foreach(item; lst) \n    {\n        auto\
    \ flt = item;\n        auto num = cast(long)flt;\n        if (num != flt) continue;\n\
    \        if (num < 0) continue;\n        res += num^2;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjio9w1d9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long t = 0;\n    int i;\n    for (i = 0; i < lst.length; i++)\
    \ \n    {\n        if (std.math.isint(lst[i]) && lst[i] > 0)\n        {\n    \
    \        if (lst[i] % 2 == 1) \n            {\n                t += lst[i] * lst[i];\n\
    \            }\n        }\n    }\n    return t;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_zlpkae.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    int i;\n    long sum = 0;\n    foreach(float elem; lst)\n    {\n\
    \        if(isnan(elem) || isinf(elem) || elem < 0 || elem != float(int(elem)))\n\
    \            continue;\n        i = int(elem);\n        if(i % 2 == 1)\n     \
    \       sum += pow(elem, 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxgkrpkmu.d(25): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpxgkrpkmu.d(25): Error: found \''int\'' when expecting
    identifier following \''float.\''\n/tmp/tmpxgkrpkmu.d(25): Error: found \'')\''
    instead of statement\n/tmp/tmpxgkrpkmu.d(27): Error: found \''(\'' when expecting
    \''.\'' following int\n/tmp/tmpxgkrpkmu.d(27): Error: found \'')\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxgkrpkmu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long total = 0;\n    for (int i = 0; i < lst.length; i++)\n  \
    \  {\n        if (isOdd(lst[i]) && lst[i] > 0 && isInteger(lst[i]))\n        {\n\
    \            total += pow(lst[i], 2);\n        }\n    }\n    return total;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpftwhfdax.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long s = 0;\n    foreach(float i; lst)\n    {\n        if(i >\
    \ 0 && i == int(i))\n        {\n            if(i % 2 == 1)\n            {\n  \
    \              s += (long)(i*i);\n            }\n        }\n    }\n    return\
    \ s*2;\n}\n \n/*\n    Given two arrays of numbers, return the sum of the maximum\
    \ value of\n    all numbers in the first array, and the minimum value of all numbers\n\
    \    in the second array.\n    \n    >>> double_the_difference([1.0, 2.0, 3.0],\
    \ [4.0, 5.0, 6.0])\n    10.0\n    >>> double_the_difference([], [])\n    0.0\n\
    \    >>> double_the_difference([1.0, 2.0, 3.0], [])\n    6.0\n    >>> double_the_difference([],\
    \ [1.0, 2.0, 3.0])\n    6.0\n    >>> double_the_difference([1.0, -2.0, 0.0], [4.0,\
    \ 5.0, 6.0])\n    9.0\n    >>> double_the_difference([1.0, 2.0, 3.0], [4.0, 5.0,\
    \ 6.0, -7.0])\n    10.0\n    >>> double_the_difference([1.0, 2.0, 3.0], [4.0,\
    \ 5.0, 6.0, -8.0])\n    9.0\n*/\ndouble double_the_difference(float[] lst1, float[]\
    \ lst2)\n{\n    double s = 0;\n    if(lst1.length > 0)\n    {\n        s += max(lst1);\n\
    \    }\n    if(lst2.length > 0)\n    {\n        s += min(lst2);\n    }\n    return\
    \ s*2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo9__uweq.d(24): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpo9__uweq.d(24): Error: found \'')\'' instead of statement\n/tmp/tmpo9__uweq.d(31):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo9__uweq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n \n long sum;\n \n int i;\n \n sum = 0;\n \n for (i = 0; i < lst.length;\
    \ i++)\n \n {\n \n if (isnan(lst[i]) || !isinteger(lst[i]) || lst[i] < 0)\n \n\
    \ continue;\n \n \n if (lst[i] % 2 != 0)\n \n {\n \n sum += lst[i] * lst[i];\n\
    \ \n }\n \n }\n \n return 2 * sum;\n \n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0jpv6mf_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    if(lst.length == 0) return 0;\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.length; i++)\n    {\n        if(lst[i] % 2 == 1 && lst[i] > 0)\n\
    \        {\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp31bkye93.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float num; lst)\n    {\n        if(num\
    \ % 2 == 1 && num == cast(int)num)\n        {\n            sum += num * num;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpktz4v429.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long val = 0L;\n    foreach(l; lst) \n    {\n        if (l > 0L\
    \ && l.isEven == false) \n        {\n            val += l * l;\n        }\n  \
    \  }\n    return val;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2k15g8y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    assert(lst.length == 0);\n    long result = 0;\n    foreach(float\
    \ number; lst) \n    {\n        if(isOdd(int(number)) && number >= 0 && number\
    \ == int(number)) \n        {\n            result += number * number;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq8flrc_k.d(25): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpq8flrc_k.d(25): Error: found \''&&\'' instead of statement\n/tmp/tmpq8flrc_k.d(30):
    Error: Declaration expected, not \''return\''\n/tmp/tmpq8flrc_k.d(31): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq8flrc_k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    if (lst.length == 0)\n        return 0;\n    else\n    {\n   \
    \     long sum = 0;\n        for (int i = 0; i < lst.length; i++)\n        {\n\
    \            if (lst[i] != 0 && std.math.fmod(lst[i],1) == 0 && lst[i] > 0)\n\
    \                sum += lst[i]*lst[i];\n        }\n        return sum;\n    }\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4kgicajj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long difference = 0L;\n    foreach(x; lst)\n    {\n        if(x\
    \ % 2 == 1)\n        {\n            difference += x * x;\n        }\n    }\n \
    \   return difference;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_kdnsi0z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long squareOddSum = 0;\n    long nonSquareOddSum = 0;\n    foreach(float\
    \ i; lst)\n    {\n        if (i >= 0 && (int)i == i)\n        {\n            if\
    \ (((int)i) % 2 == 1)\n            {\n                squareOddSum += (long)pow(i,\
    \ 2);\n                nonSquareOddSum += (long)i;\n            }\n        }\n\
    \    }\n    long result = (squareOddSum - 2 * nonSquareOddSum) * 2;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n  \
    \  assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n \
    \   assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7c94fr5i.d(25): Error: C style cast illegal, use cast(int)i\n/tmp/tmp7c94fr5i.d(27):
    Error: C style cast illegal, use cast(int)i\n/tmp/tmp7c94fr5i.d(29): Error: C
    style cast illegal, use cast(long)pow(i, 2)\n/tmp/tmp7c94fr5i.d(30): Error: C
    style cast illegal, use cast(long)i\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7c94fr5i.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && is(typeof(i) == long))\n        {\n            long temp = i;\n    \
    \        if(temp % 2L == 1L)\n            {\n                sum += temp * temp;\n\
    \            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1sfqhjsu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst) \n    {\n       \
    \ if (i > 0L && i == (long)i) \n        {\n            if (i % 2L == 1L) \n  \
    \          {\n                result += (long)pow(i, 2L);\n            }\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9hh9sjc1.d(24): Error: C style cast illegal, use cast(long)i\n/tmp/tmp9hh9sjc1.d(28):
    Error: C style cast illegal, use cast(long)pow(i, 2L)\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp9hh9sjc1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{ \n    long len = lst.length;\n    long res = 0;\n    for (long i =\
    \ 0; i < len; i++)\n    {\n        if(is_integer!float(lst[i]) && lst[i]>0)\n\
    \        {\n            res+= pow(lst[i],2);\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnsxv3tyd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst) \n    {\n        if(i\
    \ > 0L && is(int) i) \n        {\n            sum += (int)i % 2 == 0 ? 0L : (int)i\
    \ * (int)i;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsdluth8j.d(24): Error: found \''i\'' when expecting \'')\''\n/tmp/tmpsdluth8j.d(24):
    Error: found \'')\'' instead of statement\n/tmp/tmpsdluth8j.d(29): Error: Declaration
    expected, not \''return\''\n/tmp/tmpsdluth8j.d(30): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsdluth8j.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{ \n    long result = 0L;\n    foreach (elem; lst)\n    {\n        if\
    \ (is(typeof(elem) == float) && elem > 0.0f)\n        {\n            result +=\
    \ elem * elem;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy27814km.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(e; lst)\n    {\n        if (e >\
    \ 0 && is(typeof(cast(long)e) == long))\n        {\n            if (e % 2 == 1)\n\
    \            {\n                result += e * e;\n            }\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf46jl985.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  long sum = 0;\n  foreach(n; lst)\n  {\n    if(is(typeof(n) == float))\n\
    \    {\n      if(n < 0)\n      {\n        n = -n;\n      }\n    }\n    else\n\
    \    {\n      n = 0;\n    }\n    if(n % 2 == 1)\n    {\n      sum += n;\n    }\n\
    \  }\n  return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz9nvj97a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long diff = 0L;\n    foreach(n; lst)\n    {\n        long int\
    \ nint = cast(long)n;\n        if(nint > 0L && nint == n)\n        {\n       \
    \     if(nint % 2L == 1L)\n            {\n                diff += nint * nint;\n\
    \            }\n        }\n    }\n    return diff;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiwne2nw1.d(24): Error: no identifier for declarator long\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiwne2nw1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    \n    long ret = 0L;\n    foreach(e; lst)\n    {\n        if(e\
    \ > 0L && is(typeof(e) == int))\n        {\n            ret += e*e;\n        }\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0yhjop_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    for (size_t i = 0; i < lst.length; i++)\n\
    \    {\n        float v = lst[i];\n        if (fmod(v, 1.0f) == 0.0f && v > 0.0f)\n\
    \        {\n            int v_int = (int)v;\n            if (v_int % 2 == 1)\n\
    \            {\n                sum += v_int * v_int;\n            }\n       \
    \ }\n    }\n    return sum * 2L;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0dxacv42.d(27): Error: C style cast illegal, use cast(int)v\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0dxacv42.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long odds = 0;\n    foreach(float i; lst)\n    {\n        if(i>0\
    \ && i==int(i))\n        {\n            if(i%2)\n            {\n             \
    \   odds += i * i;\n            }\n        }\n    }\n    return odds;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqagtyz_o.d(24): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpqagtyz_o.d(24): Error: found \'')\'' instead of statement\n/tmp/tmpqagtyz_o.d(31):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqagtyz_o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(num; lst)\n    {\n      num = abs(num);\n\
    \      if (is(typeof(num) == long) && (num % 2 == 1))\n        result += num *\
    \ num;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghzj55oq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(x; lst)\n    {\n        if (x < 0)\n\
    \            continue;\n        if (x != int(x))\n            continue;\n    \
    \    int x_int = int(x);\n        if (x_int % 2 == 0)\n            continue;\n\
    \        sum += pow(x_int, 2);\n    }\n    return sum * 2;\n}\nunittest\n{\n \
    \   alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf_cwlswy.d(26): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpf_cwlswy.d(26): Error: found \'')\'' instead of statement\n/tmp/tmpf_cwlswy.d(28):
    Error: found \''(\'' when expecting \''.\'' following int\n/tmp/tmpf_cwlswy.d(28):
    Error: semicolon expected, not \'')\''\n/tmp/tmpf_cwlswy.d(28): Error: found \'')\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf_cwlswy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(x; lst)\n    {\n        if(isInt(x)\
    \ && x > 0L)\n        {\n            long m = to!long(x);\n            if(m %\
    \ 2 == 1)\n            {\n                result += m * m;\n            }\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprj286wuv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum_of_odd_squares = 0L;\n    for (float n in lst) \n   \
    \ {\n        if (n >= 0L && n % 2L == 1L)\n        {\n            sum_of_odd_squares\
    \ += n * n;\n        }\n    }\n    return sum_of_odd_squares;\n}\nunittest\n{\n\
    \    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpat6uqlfk.d(22): Error: semicolon expected, not \''in\''\n/tmp/tmpat6uqlfk.d(22):
    Error: expression expected, not \''in\''\n/tmp/tmpat6uqlfk.d(22): Error: found
    \''lst\'' when expecting \'';\'' following for condition\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpat6uqlfk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst) \n    {\n        if(isFinite(x)\
    \ && x > 0L && int(x) == x)\n        {\n            sum += long(x * x);\n    \
    \    }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppgyqjtcd.d(24): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmppgyqjtcd.d(24): Error: found \''==\'' instead of statement\n/tmp/tmppgyqjtcd.d(29):
    Error: Declaration expected, not \''return\''\n/tmp/tmppgyqjtcd.d(30): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppgyqjtcd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{ \n    long result = 0L;\n    float min = -1.0f;\n    float max = 1.0f;\n\
    \    foreach(x; lst) \n    {\n        if(min <= x && x <= max)\n        {\n  \
    \          if(isEven!long(x)) \n            {\n                result += pow(x,\
    \ 2);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdtcyxtmu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{ \n    long diff = 0L;\n    foreach(float i; lst)\n    {\n        if\
    \ (i > 0 && is(int i))\n        {\n            diff += i*i;\n        }\n    }\n\
    \    return diff;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu01v8zhl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{ \n    long sum = 0L;\n    foreach(float elem; lst)\n    {\n       \
    \ if(elem > 0 && elem % int(elem) == 0)\n        {\n            if(elem % 2 ==\
    \ 1)\n            {\n                sum += elem * elem;\n            }\n    \
    \    }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpudsgy6sb.d(24): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpudsgy6sb.d(24): Error: found \''==\'' instead of statement\n/tmp/tmpudsgy6sb.d(31):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpudsgy6sb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  long sum = 0;\n  for (size_t i = 0; i < lst.length; i++)\n    if\
    \ (isposint(lst[i]))\n      sum += lst[i] * lst[i];\n  return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw7sdxvpk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum=0;\n    foreach(var i; lst)\n    {\n        if(i%2!=0\
    \ && i>0)\n        {\n            sum+=pow(i,2);\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_5yg19fx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long double_the_difference = 0L;\n    foreach (float i; lst)\n\
    \    {\n        if (((int) i) % 2 == 1)\n        {\n            double_the_difference\
    \ += i*i;\n        }\n    }\n    return double_the_difference;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpplnfzpu9.d(24): Error: C style cast illegal, use cast(int)i\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpplnfzpu9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long[] n = new long[lst.length];\n    foreach (i, element; lst)\n\
    \    {\n        if (isNaN(element) == false)\n        {\n            if (isFinite(element)\
    \ == true)\n            {\n                if (isIntegral(element) == true)\n\
    \                {\n                    if (element > 0)\n                   \
    \ {\n                        n ~= element;\n                    }\n          \
    \      }\n            }\n        }\n    }\n    long x = 0;\n    foreach (i, element;\
    \ n)\n    {\n        if (element % 2 == 1)\n        {\n            x += element\
    \ * element;\n        }\n    }\n    return x;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2sc6a1g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n\tlong sum = 0;\n\tforeach(float num; lst)\n\t{\n\t\tif(num < 0 ||\
    \ modf(num, num) != 0)\n\t\t\tcontinue;\n\t\tif(modf(num/2, num/2) != 0)\n\t\t\
    \tsum += num * num;\n\t}\n\treturn sum * 2;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptz0ybx77.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(val; lst)\n    {\n        if(val >=\
    \ 0.0f && val.ceil == val.floor)\n        {\n            if(val % 2.0f == 1.0f)\n\
    \            {\n                sum += cast(long) val;\n            }\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4_a6xpvy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  long result = 0;\n  foreach(num; lst)\n  {\n    if(isOdd(num) &&\
    \ isFinite(num))\n    {\n      result += pow(num, 2);\n    }\n  }\n  return result;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyujd6o_5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long ret = 0L;\n    foreach(float i; lst)\n    {\n        int\
    \ num = cast(int)i;\n        if(num < 0) continue;\n        if(num % 2 == 1) ret\
    \ += num * num;\n    }\n    return ret;\n}\n/*\n    Given a list of grades, return\
    \ the average of all the grades.\n    The grades are represented as a list of\
    \ integer numbers:\n    a grade of 100 is represented as 100, a grade of 90 is\
    \ represented as 90,\n    a grade of 80 is represented as 80, etc. \n    \n  \
    \  >>> average_of_grades([100, 80, 70, 90, 99])\n    88.6\n    >>> average_of_grades([80,\
    \ 80, 70, 90, 99])\n    83.4\n    >>> average_of_grades([70, 80, 70, 90, 99])\n\
    \    78.4\n    >>> average_of_grades([70, 70, 70, 90, 99])\n    74.2\n    >>>\
    \ average_of_grades([99, 70, 70, 90, 99])\n    84.6\n    >>> average_of_grades([99,\
    \ 70, 70, 90, 70])\n    79.6\n    >>> average_of_grades([99, 70, 70, 90, 70, 70])\n\
    \    76.8\n    >>> average_of_grades([99, 70, 70, 90, 70, 70, 70])\n    74.0\n\
    \    \n    If the input array is empty, return 0.\n    \n*/\nfloat average_of_grades(int[]\
    \ grades) \n{\n    int n = grades.length;\n    int sum = 0;\n    foreach(int i;\
    \ grades) sum += i;\n    if(n == 0) return 0;\n    return sum / n;\n}\n/*\n  \
    \  Given an array of numbers, return true if the first and last\n    numbers in\
    \ the array are the same, and false otherwise. \n    \n    >>> same_first_and_last([])\n\
    \    False\n    >>> same_first_and_last([1L])\n    True\n    >>> same_first_and_last([1L,\
    \ 2L, 1L])\n    True\n    >>> same\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpul2_ymjc.d(64): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpul2_ymjc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    for (auto n : lst) \n    {\n        if (n\
    \ != trunc(n) || n < 0L) \n        {\n            continue;\n        }\n     \
    \   if (n % 2L == 1L) \n        {\n            sum += n * n;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpucb65l0m.d(22): Error: no identifier for declarator n\n/tmp/tmpucb65l0m.d(22):
    Error: expression expected, not \'':\''\n/tmp/tmpucb65l0m.d(22): Error: found
    \''lst\'' when expecting \'';\'' following for condition\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpucb65l0m.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    float sum = 0.0;\n    foreach(float item; lst) \n    {\n     \
    \   if(item > 0 && modf(item, 0.0) == 0.0) \n        {\n            float square\
    \ = pow(item, 2);\n            sum += square;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuily7zbc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst) \n    {\n        if(is(typeof(cast(int)x)))\n\
    \        {\n            if(x > 0)\n            {\n                long i = cast(long)x;\n\
    \                if(i % 2 == 1)\n                {\n                    sum +=\
    \ pow(i, 2);\n                }\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0vxsyjhn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long r=0;\n    foreach(float d; lst)\n    {\n        if(d>0&&is(typeof(d)long))\n\
    \        {\n            long l=d;\n            if(l%2==1)\n            {\n   \
    \             r+=l*l;\n            }\n        }\n    }\n    return r;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvxq0a2qb.d(24): Error: found \''long\'' when expecting \'')\''\n/tmp/tmpvxq0a2qb.d(24):
    Error: found \'')\'' instead of statement\n/tmp/tmpvxq0a2qb.d(33): Error: Declaration
    expected, not \''return\''\n/tmp/tmpvxq0a2qb.d(34): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvxq0a2qb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    float sum = 0.0f;\n    foreach(int i, float val; lst) \n    {\n\
    \        if(isOdd(val) && isInt(val)) \n        {\n            sum += val * val;\n\
    \        }\n    }\n    return cast(long)sum;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcl1q_ea1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    if (lst.length == 0)\n        return 0;\n    else\n    {\n   \
    \     long sum = 0;\n        foreach (float num; lst)\n        {\n           \
    \ if (num >= 0 && is(typeof(num) == int))\n            {\n                if (num\
    \ % 2 == 1)\n                    sum += num * num;\n            }\n        }\n\
    \        return sum;\n    }\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp32gywtbx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum_odd_squares = 0L;\n    foreach(float x; lst)\n    {\n\
    \        long x_long = cast(long)x;\n        if(!(x_long%2)) continue;\n     \
    \   if(x_long<0L) continue;\n        float x_frac = x - x_long;\n        if(x_frac\
    \ != 0.0) continue;\n        long square = x_long*x_long;\n        sum_odd_squares\
    \ += square;\n    }\n    return sum_odd_squares;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe12_n7o7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    return 0L;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpoepnhu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst) \n    {\n        if (i\
    \ > 0 && i == int(i)) \n        {\n            if (i % 2 == 1) \n            {\n\
    \                sum += i * i;\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz4nwwowp.d(24): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpz4nwwowp.d(24): Error: found \'')\'' instead of statement\n/tmp/tmpz4nwwowp.d(31):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz4nwwowp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float num; lst)\n    {\n      \
    \  if(num < 0.0)\n            continue;\n        else if(num % 1 != 0)\n     \
    \       continue;\n        else if(num % 2 == 0)\n            continue;\n    \
    \    else\n            result += num * num;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0a3ub7js.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    int i = 0;\n    while (i < lst.length)\n    {\n        if (lst[i]\
    \ != (int)lst[i] || lst[i] < 0) \n        {\n            lst[i] = 0;\n       \
    \ }\n        i++;\n    }\n    return sum(lst);\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8bjic0ho.d(24): Error: C style cast illegal, use cast(int)lst[i]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bjic0ho.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    import std.array;\n    long res = 0;\n    foreach(item; lst) \n\
    \    {\n        if(item > 0 && item % 2 == 1) \n        {\n            res +=\
    \ item * item;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps574onxg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long res = 0;\n    foreach(float n; lst)\n    {\n        if(n\
    \ == cast(long)n && n >= 0)\n        {\n            if(n % 2 == 1)\n         \
    \   {\n                res += n * n;\n            }\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps4yb7jof.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(item; lst)\n    {\n        if(is(typeof(item)\
    \ == float) && item > 0.0)\n        {\n            result += item * item;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi4oc8t5e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float f; lst) \n    {\n       \
    \ if (f > 0L && modf(f, 0L) == 0L) \n        {\n            result += f * f;\n\
    \        }\n    }\n    return result;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp830zl4qz.d(31): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp830zl4qz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long ret = 0L;\n    int sz = len(lst);\n    if (sz == 0) \n  \
    \  {\n        return ret;\n    }\n    int idx = 0;\n    while (idx < sz) \n  \
    \  {\n        float el = lst[idx];\n        idx = idx + 1;\n        if (el < 0.0f)\
    \ \n        {\n            continue;\n        }\n        long r = cast(long) el;\n\
    \        if (r != el) \n        {\n            continue;\n        }\n        if\
    \ (r % 2L == 0L) \n        {\n            continue;\n        }\n        ret =\
    \ ret + r * r;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate =\
    \ double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgmuh639x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long difference = 0L;\n    foreach(item; lst) \n    {\n      \
    \  if(item.isInteger && item > 0) \n        {\n            if(item % 2 == 1) \n\
    \            {\n                difference += (long)pow(item, 2);\n          \
    \  }\n        }\n    }\n    return difference;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmdobro2x.d(28): Error: C style cast illegal, use cast(long)pow(item,
    2)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmdobro2x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    \n    long result = 0L;\n    foreach(elem; lst)\n    {\n     \
    \   \n        if (is(typeof(elem) == double) && elem > 0)\n        {\n       \
    \     result += elem * elem;\n        }\n        \n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp359068n_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(l; lst)\n    {\n        if(l % 2 ==\
    \ 1)\n        {\n            sum += l*l;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk22x3s86.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long total = 0;\n    if (lst.length == 0)\n        return 0;\n\
    \    foreach (int i; lst)\n    {\n        if (isIntegral!int(i) && i >= 0)\n \
    \           total += pow(i, 2);\n    }\n    return total;\n}\nunittest\n{\n  \
    \  alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv5ldfsas.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    return 0L;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpoepnhu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    float sum = 0;\n    long[] new_list = to!(long[])(lst);\n    foreach(elem;\
    \ new_list)\n    {\n        if(elem % 2 == 1)\n        {\n            sum += pow(elem,\
    \ 2);\n        }\n    }\n    return cast(long)sum;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc061oa4i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    auto result = 0L;\n    auto isOdd = false;\n    foreach(l; lst)\n\
    \    {\n        if(isOdd)\n        {\n            result += l*l;\n        }\n\
    \        isOdd = !isOdd;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6ns9pnf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{ \n    // your code goes here\n    long sum = 0;\n    for (long i =\
    \ 0; i < lst.length; i++)\n    {\n        if (lst[i] % 2 == 1 && lst[i] > 0)\n\
    \        {\n            sum += (long)pow(lst[i], 2);\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr55sn6fy.d(27): Error: C style cast illegal, use cast(long)pow(lst[i],
    2)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr55sn6fy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{ \n    // YOUR CODE HERE \n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk1_3r0ca.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long s = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(int(i))\
    \ && i >= 0)\n        {\n            s += i * i;\n        }\n    }\n    return\
    \ s;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgu6iwlxg.d(24): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpgu6iwlxg.d(24): Error: found \''&&\'' instead of statement\n/tmp/tmpgu6iwlxg.d(29):
    Error: Declaration expected, not \''return\''\n/tmp/tmpgu6iwlxg.d(30): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgu6iwlxg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long res = 0;\n    if(lst.length > 0)\n    {\n        for(int\
    \ i = 0; i < lst.length; i++)\n        {\n            if( isInteger(lst[i]) &&\
    \ lst[i] > 0)\n            {\n                res += pow(lst[i], 2);\n       \
    \     }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp25mvfnv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long res = 0;\n    foreach(float num; lst) \n    {\n        if(num.isOdd()\
    \ && num.isInteger)\n        {\n            res += (long)pow(num, 2);\n      \
    \  }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0ovbquo8.d(26): Error: C style cast illegal, use cast(long)pow(num,
    2)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ovbquo8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    for (int i = 0; i < lst.length; i++)\n\
    \    {\n        if (modf(lst[i], 0) == 0 && lst[i] >= 0)\n        {\n        \
    \    result += pow(lst[i], 2);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuygmihia.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n\t// Your code goes here!\n    long result = 0;\n    for (long x:\
    \ lst)\n    {\n        if (is_odd(x) && x > 0 && is_integer(x))\n        {\n \
    \           result += x * x;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpix487scd.d(23): Error: semicolon expected, not \'':\''\n/tmp/tmpix487scd.d(23):
    Error: expression expected, not \'':\''\n/tmp/tmpix487scd.d(23): Error: found
    \''lst\'' when expecting \'';\'' following for condition\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpix487scd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    float[] lst2 = lst.retain!(a => a >= 0\
    \ && a.isInteger);\n    lst2 = lst2.retain!(a => a % 2L == 1L);\n    foreach(i;\
    \ 0 .. lst2.length)\n    {\n        result += cast(long)pow(lst2[i], 2L);\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmrza7zeq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long total = 0;\n    foreach(long value; lst)\n    {\n       \
    \ if(value > 0 && is(typeof(value) == long))\n        {\n            total +=\
    \ value * value;\n        }\n    }\n    return total;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5e9prn5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  float sum = 0.0;\n  foreach(e; lst)\n  {\n    if(isOdd(e) && isFinite(e))\n\
    \    {\n      sum += e*e;\n    }\n  }\n  return cast(long) (sum*2);\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplult7xk4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float item; lst)\n    {\n     \
    \   if(is(typeof(item) == float) && isOdd(item))\n        {\n            result\
    \ += item * item;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfw_kac11.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    \n    long sumOddSquares = 0L;\n    long sumEvenSquares = 0L;\n\
    \    long diff = 0L;\n    \n    foreach(float x; lst) \n    {\n        if((x %\
    \ 1) == 0) \n        {\n            if((x % 2) == 0) \n            {\n       \
    \         sumEvenSquares += x * x;\n            } \n            else \n      \
    \      {\n                sumOddSquares += x * x;\n            }\n        }\n\
    \    }\n    \n    diff = sumOddSquares - sumEvenSquares;\n    return diff * 2;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp22qujw7q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    // Put your code here\n    \n    long result = 0;\n    foreach(i;\
    \ lst)\n    {\n        if(is(typeof(i) == long) && i > 0)\n        {\n       \
    \     result += i % 2 == 0 ? 0 : i * i;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_j987rfp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    auto odds = [](float n) \n    {\n        return is(n % 2);\n \
    \   };\n    auto squares = [](float n) \n    {\n        return n * n;\n    };\n\
    \    auto ans = lst.filter!odds.map!squares.reduce!((a, b) => a + b);\n    return\
    \ ans.length > 0 ? ans[0] : 0;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvjn0zlrx.d(21): Error: found \''n\'' when expecting \''.\''
    following float\n/tmp/tmpvjn0zlrx.d(21): Error: found \'')\'' when expecting identifier
    following \''float.\''\n/tmp/tmpvjn0zlrx.d(22): Error: found \''{\'' when expecting
    \'',\''\n/tmp/tmpvjn0zlrx.d(23): Error: expression expected, not \''return\''\n/tmp/tmpvjn0zlrx.d(23):
    Error: found \'';\'' when expecting \'',\''\n/tmp/tmpvjn0zlrx.d(24): Error: expression
    expected, not \''}\''\n/tmp/tmpvjn0zlrx.d(24): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmpvjn0zlrx.d(25): Error: expression expected, not \''auto\''\n/tmp/tmpvjn0zlrx.d(25):
    Error: found \''squares\'' when expecting \'',\''\n/tmp/tmpvjn0zlrx.d(25): Error:
    expression expected, not \''=\''\n/tmp/tmpvjn0zlrx.d(25): Error: found \''n\''
    when expecting \''.\'' following float\n/tmp/tmpvjn0zlrx.d(25): Error: found \'')\''
    when expecting identifier following \''float.\''\n/tmp/tmpvjn0zlrx.d(26): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpvjn0zlrx.d(27): Error: expression
    expected, not \''return\''\n/tmp/tmpvjn0zlrx.d(27): Error: found \''n\'' when
    expecting \'',\''\n/tmp/tmpvjn0zlrx.d(27): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmpvjn0zlrx.d(28): Error: expression expected, not \''}\''\n/tmp/tmpvjn0zlrx.d(28):
    Error: found \'';\'' when expecting \'',\''\n/tmp/tmpvjn0zlrx.d(29): Error: expression
    expected, not \''auto\''\n/tmp/tmpvjn0zlrx.d(29): Error: found \''ans\'' when
    expecting \'',\''\n/tmp/tmpvjn0zlrx.d(29): Error: expression expected, not \''=\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvjn0zlrx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long count = 0;\n    for (int i = 0; i < lst.length; i++)\n  \
    \  {\n        if(ceil(lst[i]) == lst[i] && lst[i] > 0)\n        {\n          \
    \  count += pow(lst[i], 2);\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfvdqf4yj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    return 0L;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpoepnhu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long lon = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0.0f && float.isFinite(f))\n        {\n            lon += f;\n        }\n\
    \    }\n    return 2 * (lon * lon);\n}\n/*\n    Given an array of numbers, return\
    \ the product of the numbers.\n    Ignore the elements of the array that are negative\
    \ or not integers.\n    \n    >>> biggest_product([1L, 2L, 3L, 4L])\n    24L\n\
    \    >>> biggest_product([-2L, -3L, 0L, 5L])\n    0L\n    >>> biggest_product([9L,\
    \ -2L])\n    -18L\n    >>> biggest_product([0L])\n    0L\n    \n    If the input\
    \ array is empty, return 0.\n*/\nlong biggest_product(float[] lst) \n{\n    long\
    \ lon = 1;\n    foreach(float f; lst)\n    {\n        if(f > 0.0f && float.isFinite(f))\n\
    \        {\n            lon *= f;\n        }\n    }\n    return lon;\n}\n/*\n\
    \    Given an array of numbers, return the largest difference between any two\
    \ \n    adjacent numbers.\n    \n    >>> find_the_difference([1L, 2L, 3L, 4L])\n\
    \    3L\n    >>> find_the_difference([-2L, -3L, 0L, 5L])\n    7L\n    >>> find_the_difference([9L,\
    \ -2L])\n    11L\n    >>> find_the_difference([0L])\n    0L\n    \n    If the\
    \ input array is empty, return 0.\n*/\nlong find_the_difference(float[] lst) \n\
    {\n    long maxDiff = 0;\n    long diff = 0;\n    long last = 0;\n    foreach(float\
    \ f; lst)\n    {\n        if(f > 0.0f && float.isFinite(f))\n        {\n     \
    \       if(last != 0)\n            {\n                diff = abs(last - f);\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6yi3a7i7.d(85): Error: found \''unittest\'' instead of statement\n/tmp/tmp6yi3a7i7.d(97):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp6yi3a7i7.d(97):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp6yi3a7i7.d(97):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6yi3a7i7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    long product = 0;\n    long result = 0;\n \
    \   foreach(float v; lst)\n    {\n        if(is(int v) && v > 0)\n        {\n\
    \            if(v % 2 == 1)\n            {\n                sum += v;\n      \
    \      }\n        }\n    }\n    product = sum * sum;\n    result = product * 2;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8gw2bwti.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float elem; lst) \n    {\n    \
    \    result += isOdd(elem) ? elem*elem : 0L;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfpzjivg5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(l; lst) \n    {\n        if(isInteger!(typeof(l)))\
    \ \n        {\n            continue;\n        }\n        if(l < 0) \n        {\n\
    \            continue;\n        }\n        if(l % 2 == 0) \n        {\n      \
    \      continue;\n        }\n        sum += l * l;\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprkmmtw27.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float f; lst)\n    {\n        if\
    \ (f > 0f && is(typeof(f) == int))\n        {\n            f = cast(int)f;\n \
    \           if (f % 2) result += f*f;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphs7p03eh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long total = 0;\n    int i;\n    foreach (i; lst)\n    {\n   \
    \     if(isOdd(i) && isFinite(i))\n        {\n            total += pow(i, 2);\n\
    \        }\n    }\n    return total;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpacab_522.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum=0;\n    foreach(item; lst)\n    {\n        if (item>0\
    \ && is(typeof(item) == int))\n        {\n            sum+= item*item;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6o1c5dv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    // https://stackoverflow.com/questions/34304866/functional-sum-of-squares-of-odd-numbers-in-d\n\
    \    long double_the_difference = 0L;\n    foreach(index, element; lst)\n    {\n\
    \        if((element % 2) == 1)\n        {\n            double_the_difference\
    \ += (element * element);\n        }\n    }\n    return double_the_difference;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb25v3k5_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n\tlong sum = 0;\n\tforeach(f; lst)\n\t{\n\t\tif(isOdd(f) && isFinite(f))\n\
    \t\t{\n\t\t\tsum += f * f;\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnq8tgzz5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    int tot = 0;\n    foreach(float i; lst)\n    {\n        if(i %\
    \ 2 == 1 && !isNaN(i) && i > 0)\n        {\n            tot += (int)pow(i, 2);\n\
    \        }\n    }\n    return tot;\n}\nlong double_the_difference(double[] lst)\
    \ \n{\n    int tot = 0;\n    foreach(double i; lst)\n    {\n        if(i % 2 ==\
    \ 1 && !isNaN(i) && i > 0)\n        {\n            tot += (int)pow(i, 2);\n  \
    \      }\n    }\n    return tot;\n}\nlong double_the_difference(long[] lst) \n\
    {\n    int tot = 0;\n    foreach(long i; lst)\n    {\n        if(i % 2 == 1 &&\
    \ !isNaN(i) && i > 0)\n        {\n            tot += (int)pow(i, 2);\n       \
    \ }\n    }\n    return tot;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdm3vf6c2.d(26): Error: C style cast illegal, use cast(int)pow(i,
    2)\n/tmp/tmpdm3vf6c2.d(38): Error: C style cast illegal, use cast(int)pow(i, 2)\n/tmp/tmpdm3vf6c2.d(50):
    Error: C style cast illegal, use cast(int)pow(i, 2)\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpdm3vf6c2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  long sum = 0;\n  foreach(float x; lst)\n  {\n    if(x > 0.0 && (long)x\
    \ == x)\n    {\n      sum += x*x;\n    }\n  }\n  return sum;\n}\nunittest\n{\n\
    \    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpay_2x39c.d(24): Error: C style cast illegal, use cast(long)x\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpay_2x39c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long diff = 0L;\n    foreach(float n; lst) \n    {\n        if\
    \ (n >= 0 && is(typeof(cast(long)n) == long)) \n        {\n            long nn\
    \ = cast(long)n;\n            if (nn % 2 == 1) \n            {\n             \
    \   diff += nn * nn;\n            }\n        }\n    }\n    return diff * 2L;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxfyskb1t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    float sum = 0;\n    foreach(float i; lst)\n    {\n        if(i>0)\n\
    \        {\n            if(i%2)\n            {\n                sum = sum + pow(i,2);\n\
    \            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxve7axyb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{ \n   long result = 0L;\n   foreach(item; lst) \n   {\n      if(item\
    \ > 0 && is(typeof(item) == int))\n      {\n         if(item % 2 == 1)\n     \
    \    {\n            result += item * item;\n         }\n      }\n   }\n   return\
    \ result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n  \
    \  assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n \
    \   assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ksx0twh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    int i;\n    for (i = 0; i < lst.length; i++)\n\
    \    {\n        if (lst[i] >= 0 && (int)lst[i] == lst[i] && isOdd(lst[i]))\n \
    \       {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi9zh7k04.d(25): Error: C style cast illegal, use cast(int)lst[i]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi9zh7k04.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long r = 0;\n    foreach(float num; lst)\n    {\n        long\
    \ n = cast(long)num;\n        if (n > 0 && n == num) \n        {\n           \
    \ if (n % 2 == 1)\n            {\n                r += n * n;\n            }\n\
    \        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi956bpfj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long res = 0;\n    foreach(idx, val; lst)\n    {\n        if(val\
    \ > 0 && is(typeof(val) == long))\n        {\n            if(idx%2 == 0)\n   \
    \         {\n                res += pow(val, 2);\n            }\n        }\n \
    \   }\n    return res;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkw0svghx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long odd_sum = 0;\n    long even_sum = 0;\n    foreach(float i;\
    \ lst)\n    {\n        if (isodd(i))\n        {\n            odd_sum += i * i;\n\
    \        }\n        else if (iseven(i))\n        {\n            even_sum += i\
    \ * i;\n        }\n    }\n    return odd_sum - even_sum;\n}\nunittest\n{\n   \
    \ alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdir8c0en.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    auto sz = lst.length;\n    long sum = 0;\n    if (sz == 0)\n \
    \       return 0;\n    foreach (i; 0 .. sz)\n    {\n        if (lst[i] > 0)\n\
    \        {\n            lst[i] = floor(lst[i]);\n            if (lst[i] % 2 ==\
    \ 1)\n                sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_5v7x_cs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ (cast(long) i) % 2 == 0 ? 0 : i * i;\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmij9mpkl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long ret = 0L;\n    foreach(index, element; lst)\n    {\n    \
    \    if (index & 1)\n        {\n            ret += element * element;\n      \
    \  }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp312dq602.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    return 0L;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpoepnhu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ == cast(long)x && x > 0)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += cast(long) x * x;\n            }\n        }\n   \
    \ }\n    return 2 * sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa65f1ha8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(num; lst) \n    {\n        if(isInteger!num\
    \ && num > 0)\n        {\n            result += num * num;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptbo7y_7f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    auto result = 0L;\n    auto c = 0;\n    for (auto i : lst) \n\
    \    {\n        c = cast(long)i;\n        if (c % 2L && c > 0L) \n        {\n\
    \            result += c*c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphq6wb69r.d(23): Error: no identifier for declarator i\n/tmp/tmphq6wb69r.d(23):
    Error: expression expected, not \'':\''\n/tmp/tmphq6wb69r.d(23): Error: found
    \''lst\'' when expecting \'';\'' following for condition\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmphq6wb69r.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst) \n    {\n       \
    \ if(i == float.to!int(i) && i >= 0) \n        {\n            result += i.isEven\
    \ ? i * i : 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe1ed93oq.d(24): Error: found \''!\'' when expecting \'')\''\n/tmp/tmpe1ed93oq.d(24):
    Error: function declaration without return type. (Note that constructors are always
    named \''this\'')\n/tmp/tmpe1ed93oq.d(24): Error: no identifier for declarator
    int(i)\n/tmp/tmpe1ed93oq.d(24): Error: semicolon expected following function declaration\n/tmp/tmpe1ed93oq.d(24):
    Error: found \''&&\'' instead of statement\n/tmp/tmpe1ed93oq.d(29): Error: Declaration
    expected, not \''return\''\n/tmp/tmpe1ed93oq.d(30): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1ed93oq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  long total = 0;\n  foreach(float i; lst)\n  {\n    if (i > 0 &&\
    \ is(typeof(long(i))) && i % 2 != 0)\n    {\n      total += i * i;\n    }\n  }\n\
    \  return total;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfoeq4sh_.d(24): Error: found \''(\'' when expecting \''.\''
    following long\n/tmp/tmpfoeq4sh_.d(24): Error: found \''&&\'' instead of statement\n/tmp/tmpfoeq4sh_.d(29):
    Error: Declaration expected, not \''return\''\n/tmp/tmpfoeq4sh_.d(30): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfoeq4sh_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  long double_the_difference = 0L;\n  foreach (float x; lst) \n  {\n\
    \    if (std.math.isnan(x) || x <= 0.0f || x != cast(int)x) \n    {\n      continue;\n\
    \    }\n    double_the_difference += x * x;\n  }\n  return double_the_difference;\n\
    }\n/*\n    Uncomment the following lines to test your code with the input\n  \
    \  provided by codelibrary.io. To test your code with custom input,\n    create\
    \ a file named inputs.txt in the same directory as this file,\n    with the input(s)\
    \ on separate lines. Then, comment out the code\n    below and run \"dmd -run\
    \ problem3.d\".\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsp8bc6vh.d(32): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpsp8bc6vh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0)\n        {\n            sum += i*i;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo65qae70.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long total = 0;\n    foreach(float num; lst) \n    {\n       \
    \ if(num > 0 && num == cast(int)num)\n        {\n            if(num%2 == 1)\n\
    \            {\n                total += num*num;\n            }\n        }\n\
    \    }\n    return total;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7kurzo9m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n\tif( i>=0 &&\
    \ i%2!=0)\n\t{\n\t   sum+=pow(i,2);\n\t}\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpri9av1k2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long ret = 0L;\n    foreach(float i; lst) \n    {\n        if(\
    \ i > 0.f && is(typeof(i) == int)) \n        {\n            if(i % 2.f == 1.f)\
    \ \n            {\n                ret += pow(i, 2.f);\n            }\n      \
    \  }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsa5j27ya.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long s = 0;\n    foreach(float i; lst)\n    {\n        if(i %\
    \ 2 == 1)\n        {\n            s += pow(i, 2);\n        }\n    }\n    return\
    \ s;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbm2z4eky.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long squared_sum = 0L;\n    foreach(float f; lst)\n    {\n   \
    \     if(isFinite(f) && is(typeof(f) == int))\n        {\n            long i =\
    \ f;\n            if(i%2 != 0)\n            {\n                squared_sum +=\
    \ i*i;\n            }\n        }\n    }\n    return squared_sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp18c0opav.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long a = 0;\n    foreach(float i; lst)\n    {\n        if(is(typeof(i)\
    \ == long) && i > 0)\n        {\n            if(i % 2 == 1)\n            {\n \
    \               a += i * i;\n            }\n        }\n    }\n    return a;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1_jcvloj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long[] odds = new long[0];\n    foreach(item; lst)\n    {\n  \
    \      if (item > 0 && (item - int(item)) == 0)\n        {\n            if (item\
    \ % 2 == 1)\n            {\n                odds ~= item;\n            }\n   \
    \     }\n    }\n    return reduce!(\"a + b\")(map!(\"a * a\")(odds));\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1rhmbbcq.d(24): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmp1rhmbbcq.d(24): Error: found \''==\'' instead of statement\n/tmp/tmp1rhmbbcq.d(31):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1rhmbbcq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum_squares = 0L;\n    foreach(x; lst)\n    {\n        long\
    \ x_int = cast(long) x;\n        if(x_int > 0L && is(typeof(x_int) == long))\n\
    \        {\n            if(x_int % 2L != 0L)\n            {\n                sum_squares\
    \ += x_int*x_int;\n            }\n        }\n    }\n    return sum_squares;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpywfg46tk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(var i; lst)\n    {\n        if (i>0)\n\
    \        {\n            if(is(int)i)\n            {\n                int x = i;\n\
    \                if(x%2!=0)\n                {\n                    sum += i*i;\n\
    \                }\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptjrucoiq.d(26): Error: found \''i\'' when expecting \'')\''\n/tmp/tmptjrucoiq.d(26):
    Error: found \'')\'' instead of statement\n/tmp/tmptjrucoiq.d(36): Error: Declaration
    expected, not \''return\''\n/tmp/tmptjrucoiq.d(37): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptjrucoiq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(var i; lst) \n    {\n        if(isnan(i)\
    \ || i < 0) continue;\n        if(i % 2 == 1) sum += pow(i, 2);\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7c7j7_ns.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long s = 0;\n    foreach(float i; lst) \n    {\n        if(int(i)\
    \ > 0 && i == float(int(i))) \n        {\n            if(int(i) % 2 == 1) \n \
    \           {\n                s += i * i;\n            }\n        }\n    }\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeh_w8mw2.d(24): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpeh_w8mw2.d(24): Error: found \''>\'' instead of statement\n/tmp/tmpeh_w8mw2.d(31):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeh_w8mw2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long odd_sum_squares = 0L;\n    foreach(x; lst)\n    {\n     \
    \   if (x > 0 && is(typeof(x) == int))\n        {\n            if (x % 2)\n  \
    \          {\n                odd_sum_squares += x * x;\n            }\n     \
    \   }\n    }\n    return odd_sum_squares;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm1_x0fo8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst) \n    {\n        if(num\
    \ < 0) \n        {\n            continue;\n        }\n        else \n        {\n\
    \            if(num % 2L == 0L) \n            {\n                continue;\n \
    \           }\n            else \n            {\n                sum += num *\
    \ num;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n   \
    \ alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4c0ipzej.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n\tlong result = 0;\n\tint size = lst.length;\n\tfor (int i = 0; i\
    \ < size; i++)\n\t{\n\t\tif (isEven(lst[i]))\n\t\t{\n\t\t\tresult += (long)lst[i]\
    \ * (long)lst[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3m0paj8g.d(27): Error: C style cast illegal, use cast(long)lst[i]\n/tmp/tmp3m0paj8g.d(27):
    Error: C style cast illegal, use cast(long)lst[i]\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp3m0paj8g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long total = 0;\n    for (long x : lst) \n    {\n        if (x\
    \ >= 0 && float(x) == x) \n        {\n            if (x % 2 == 1) \n         \
    \   {\n                total += x * x;\n            }\n        }\n    }\n    return\
    \ total;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n   \
    \ assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n  \
    \  assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2huk04r_.d(22): Error: semicolon expected, not \'':\''\n/tmp/tmp2huk04r_.d(22):
    Error: expression expected, not \'':\''\n/tmp/tmp2huk04r_.d(22): Error: found
    \''lst\'' when expecting \'';\'' following for condition\n/tmp/tmp2huk04r_.d(24):
    Error: found \''(\'' when expecting \''.\'' following float\n/tmp/tmp2huk04r_.d(24):
    Error: found \''==\'' instead of statement\n/tmp/tmp2huk04r_.d(31): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2huk04r_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long value = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ < 0.0 || i != cast(int)i)\n            continue;\n        int digit = cast(int)i;\n\
    \        if(digit%2 != 0)\n            value += digit*digit;\n    }\n    return\
    \ value;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n   \
    \ assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n  \
    \  assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpre_dahvp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long retval = 0L;\n    foreach(float i; lst)\n    {\n        long\
    \ j = cast(long)i;\n        if (j == j/2*2) {\n            retval += j*j;\n  \
    \      }\n    }\n    return retval;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplumxwogz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i; lst)\n    {\n        if(isInteger!float(i)\
    \ && i > 0)\n        {\n            sum += i*i;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6na1p9ce.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    return reduce!\"a + b\"(lst.filter!(x => is(typeof(x) == int))\n\
    \                             .filter!(x => x%2 != 0)\n                      \
    \       .map!(x => x*x));\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw31x4xcm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long double_the_difference = 0L;\n    for (float i = 0L; i < lst.length;\
    \ i++) \n    {\n        if (isOdd(int(i)) && i > 0L) \n        {\n           \
    \ double_the_difference += pow(i, 2L);\n        }\n    }\n    return double_the_difference;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzoodk7ze.d(24): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpzoodk7ze.d(24): Error: found \''&&\'' instead of statement\n/tmp/tmpzoodk7ze.d(29):
    Error: Declaration expected, not \''return\''\n/tmp/tmpzoodk7ze.d(30): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzoodk7ze.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long odd_sq_sum = 0L;\n    foreach(float i; lst) \n    {\n   \
    \     if(i > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n\
    \            {\n                odd_sq_sum += pow(i, 2);\n            }\n    \
    \    }\n    }\n    return odd_sq_sum * 2;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6pzhu1k0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(e; lst) \n    {\n        if(!is(typeof(e)\
    \ == long) || e < 0L) \n        {\n            continue;\n        }\n        if(e%2L\
    \ == 1L) \n        {\n            sum += e*e;\n        }\n    }\n    return sum*2L;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8wwqcv18.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    // Write the code of your solution here. \n    // You may use\
    \ other functions. \n    return 0L;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5siia2bt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long difference = 0L;\n    foreach(float f; lst) \n    {\n   \
    \     if(f-cast(int)f == 0.0f && f > 0.0f) \n        {\n            difference\
    \ += f*f;\n        }\n    }\n    return difference;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2sodwun2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    return 0L;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpoepnhu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    // COMPLETE ME\n    long sum = 0;\n    for (int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i] > 0 && is(typeof(lst[i]) == int))\n        {\n\
    \            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbrcua4b7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    assert(false, \"double_the_difference not implemented\");\n  \
    \  return 0L;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp55vhupds.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n\tlong ret = 0;\n\tforeach(v; lst)\n\t{\n\t\tif(v > 0 && v == trunc(v))\n\
    \t\t{\n\t\t\tif(v % 2 == 1)\n\t\t\t{\n\t\t\t\tv = v * v;\n\t\t\t}\n\t\t\telse\n\
    \t\t\t{\n\t\t\t\tv = 0;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tv = 0;\n\t\t}\n\
    \t\tret += v;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkl_wotdx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(el; lst)\n    {\n        if (el > 0\
    \ && el.isInfinite == false && (long)el % 2 == 1)\n        {\n            sum\
    \ += el*el;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp230ndtn1.d(24): Error: C style cast illegal, use cast(long)el\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp230ndtn1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    int num = 0;\n    foreach(float n; lst)\n \
    \   {\n        if(isNaN(n) || !isFinite(n) || n < 0)\n            continue;\n\
    \        int nn = int(n);\n        if(nn != n)\n            continue;\n      \
    \  num++;\n        if(nn % 2 == 1)\n            sum += nn * nn;\n    }\n    if(num\
    \ == 0)\n        return 0;\n    return sum * 2;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyie209x4.d(27): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpyie209x4.d(27): Error: semicolon expected, not \'')\''\n/tmp/tmpyie209x4.d(27):
    Error: found \'')\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpyie209x4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if (i\
    \ == int(i) && i > 0)\n        {\n            sum += int(i*i);\n        }\n  \
    \  }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa_fnbzd3.d(24): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpa_fnbzd3.d(24): Error: found \''&&\'' instead of statement\n/tmp/tmpa_fnbzd3.d(29):
    Error: Declaration expected, not \''return\''\n/tmp/tmpa_fnbzd3.d(30): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa_fnbzd3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  if (lst.length == 0) return 0;\n  long sum = 0;\n  foreach (num;\
    \ lst)\n  {\n    if (is(typeof(num) == float)) continue;\n    if (num < 0) continue;\n\
    \    if (num is long)\n    {\n      if (num % 2 == 0) continue;\n      sum +=\
    \ pow(num, 2);\n    }\n  }\n  return sum;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt939ffdn.d(27): Error: found \'')\'' when expecting \''.\''
    following long\n/tmp/tmpt939ffdn.d(28): Error: found \''{\'' when expecting identifier
    following \''long.\''\n/tmp/tmpt939ffdn.d(29): Error: found \''if\'' when expecting
    \'')\''\n/tmp/tmpt939ffdn.d(29): Error: found \''continue\'' when expecting \'';\''
    following statement\n/tmp/tmpt939ffdn.d(33): Error: Declaration expected, not
    \''return\''\n/tmp/tmpt939ffdn.d(34): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt939ffdn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum_of_squares = 0L;\n    foreach(float elem; lst)\n    {\n\
    \        if(elem % 2 != 0 && elem > 0)\n        {\n            sum_of_squares\
    \ += sqr(elem);\n        }\n    }\n    return sum_of_squares;\n}\nunittest\n{\n\
    \    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbuj19bh1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float el; lst)\n    {\n        if (isNaN(el)\
    \ || el < 0 || !is(typeof(el) == long))\n            continue;\n        if (el\
    \ % 2)\n            sum += el*el;\n    }\n    return sum;\n}\nunittest\n{\n  \
    \  alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkh6ysgr8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum_odd = 0;\n    long sum_even = 0;\n    int count = 0;\n\
    \    int k = 1;\n    for (int i = 0; i < len(lst); i++)\n    {\n        if (k\
    \ % 2 == 0)\n        {\n            if (lst[i] > 0 && int(lst[i]) == lst[i])\n\
    \            {\n                sum_even += lst[i] * lst[i];\n            }\n\
    \        }\n        else\n        {\n            if (lst[i] > 0 && int(lst[i])\
    \ == lst[i])\n            {\n                sum_odd += lst[i] * lst[i];\n   \
    \         }\n        }\n        k += 1;\n    }\n    return pow(abs(sum_odd - sum_even),\
    \ 2);\n}\n \n \n \n/*\n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n\
    \ * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n *\
    \ \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n\
    \ * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n *\
    \ \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n\
    \ * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n *\
    \ \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkdw2c29u.d(29): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpkdw2c29u.d(29): Error: found \''==\'' instead of statement\n/tmp/tmpkdw2c29u.d(34):
    Error: found \''else\'' instead of statement\n/tmp/tmpkdw2c29u.d(40): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdw2c29u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(num; lst)\n    {\n        static\
    \ if (is(typeof(num) == int))\n        {\n            if (num > 0 && num % 2 ==\
    \ 1)\n            {\n                result += num * num;\n            }\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqb3t15so.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if (i\
    \ == int(i) && i > 0)\n        {\n            sum += i*i;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptodfrff3.d(24): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmptodfrff3.d(24): Error: found \''&&\'' instead of statement\n/tmp/tmptodfrff3.d(29):
    Error: Declaration expected, not \''return\''\n/tmp/tmptodfrff3.d(30): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptodfrff3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float element; lst)\n    {\n     \
    \   if(element > 0L && element % 2L == 1L)\n        {\n            sum += element\
    \ * element;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_44y1n0t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n\tlong total=0;\n\tfor(int i=0;i<lst.length;i++)\n\t{\n\t\tif(lst[i]>0\
    \ && fmod(lst[i],1)==0 && lst[i]%2!=0)\n\t\t{\n\t\t\ttotal=total+pow(lst[i],2);\n\
    \t\t}\n\t}\n\treturn total;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxe0uwss.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long num = 0;\n    foreach(double value; lst)\n    {\n       \
    \ long squared = int(value) * int(value);\n        if(value > 0)\n        {\n\
    \            if(value % 2 == 1)\n            {\n                num += squared;\n\
    \            }\n        }\n    }\n    return num;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2sbr2jr_.d(24): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmp2sbr2jr_.d(24): Error: semicolon expected, not \'')\''\n/tmp/tmp2sbr2jr_.d(24):
    Error: found \'')\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2sbr2jr_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            sum += x*x;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfrjshqjq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    float power = 2.0f;\n    foreach(item;\
    \ lst)\n    {\n        if(is(typeof(item) == int) && item > 0)\n        {\n  \
    \          if(item % 2 == 1)\n            {\n                result += pow(item,\
    \ power);\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_fvrfctb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(x; lst) \n    {\n        if (x.isNaN\
    \ || x.isInfinity || x < 0.0) \n        {\n            continue;\n        }\n\
    \        if (x % 2 == 1) \n        {\n            result += x*x;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2_ijk6b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long to_return = 0L;\n    foreach(float val; lst)\n    {\n   \
    \     if (isOdd(val) && val > 0 && is(typeof(val) == float))\n        {\n    \
    \        to_return += val;\n        }\n    }\n    return to_return;\n}\n/*\n \
    \   // Tests\nunittest\n{\n    alias candidate = double_the_difference;\n\n  \
    \  assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n \
    \   assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdbf3l2cq.d(31): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdbf3l2cq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long t = 0;\n    foreach(num; lst)\n    {\n        if(modf(num,\
    \ 0.0) == 0.0)\n        {\n            if(num >= 0)\n            {\n         \
    \       if(num % 2 == 1)\n                {\n                    t += num * num;\n\
    \                }\n            }\n        }\n    }\n    return t;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp61d7wbn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    auto sum_of_odd_numbers = 0L;\n    for (; int i = 0; i < lst.length;\
    \ i++)\n    {\n        if (lst[i] % 2 == 1)\n        {\n            sum_of_odd_numbers\
    \ += lst[i] * lst[i];\n        }\n    }\n    return sum_of_odd_numbers;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl03cyfor.d(22): Error: found \''i\'' when expecting \''.\''
    following int\n/tmp/tmpl03cyfor.d(22): Error: found \''=\'' when expecting identifier
    following \''int.\''\n/tmp/tmpl03cyfor.d(22): Error: found \''0\'' when expecting
    \'';\'' following for condition\n/tmp/tmpl03cyfor.d(22): Error: expression expected,
    not \'';\''\n/tmp/tmpl03cyfor.d(22): Error: found \''i\'' when expecting \'')\''\n/tmp/tmpl03cyfor.d(22):
    Error: found \''<\'' instead of statement\n/tmp/tmpl03cyfor.d(22): Error: found
    \'')\'' when expecting \'';\'' following statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpl03cyfor.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        if(e>0 && e%2\
    \ != 0)\n        {\n            sum += pow(e,2);\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxb8qsreu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i; lst) \n    {\n        if (i > 0\
    \ && is(typeof(lst[0]) == typeof(i))) \n        {\n            long number = cast(long)i;\n\
    \            if (number % 2 == 1) \n            {\n                sum += number\
    \ * number;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n\
    \    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjc1nv3r7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float l; lst)\n    {\n        if\
    \ (isinf(l) || isnan(l))\n            continue;\n        if (l < 0)\n        \
    \    continue;\n        if (l != cast(long)l)\n            continue;\n       \
    \ if (l % 2 == 0)\n            continue;\n        result += l * l;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj1jqctg1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long res = 0;\n    foreach(float elem; lst) \n    {\n        if\
    \ (isNaN(elem) || elem <= 0)\n            continue;\n        long num = cast(long)elem;\n\
    \        if (num % 2 == 1)\n            res += num * num;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsjaq4orl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float elem; lst)\n    {\n        if\
    \ (isinteger(elem) && int(elem) % 2L != 0L)\n        {\n            sum += elem\
    \ * elem;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1r4_7ax5.d(24): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmp1r4_7ax5.d(24): Error: found \''%\'' instead of statement\n/tmp/tmp1r4_7ax5.d(29):
    Error: Declaration expected, not \''return\''\n/tmp/tmp1r4_7ax5.d(30): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1r4_7ax5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long ret = 0L;\n    foreach(e; lst)\n    {\n        // Ignore\
    \ numbers that are negative or not integers.\n        if(isNaN(e) || e < 0.0)\n\
    \            continue;\n        long eInt = long(e);\n        if(eInt != e)\n\
    \            continue;\n        // If the element is an odd number, add it to\
    \ the sum of squares.\n        if(eInt % 2 != 0)\n            ret += eInt * eInt;\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphnd3m5xj.d(27): Error: found \''(\'' when expecting \''.\''
    following long\n/tmp/tmphnd3m5xj.d(27): Error: semicolon expected, not \'')\''\n/tmp/tmphnd3m5xj.d(27):
    Error: found \'')\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphnd3m5xj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long diff = 0L;\n    foreach(item; lst)\n    {\n        if(item\
    \ > 0 && item == (int)item)\n        {\n            if((int)item % 2 != 0)\n \
    \           {\n                diff += (int)item * (int)item;\n            }\n\
    \        }\n    }\n    return diff * 2;\n}\nunittest\n{\n    alias candidate =\
    \ double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpabdyey8y.d(24): Error: C style cast illegal, use cast(int)item\n/tmp/tmpabdyey8y.d(26):
    Error: C style cast illegal, use cast(int)item\n/tmp/tmpabdyey8y.d(28): Error:
    C style cast illegal, use cast(int)item\n/tmp/tmpabdyey8y.d(28): Error: C style
    cast illegal, use cast(int)item\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpabdyey8y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    return 0L;\n}\n \n \nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0wb24xhp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n  long result = 0;\n  for (float item in lst)\n  {\n      long num\
    \ = cast(long)item;\n      if (item != num || item < 0) \n          continue;\n\
    \      if (num % 2 == 1)\n          result += num * num;\n  }\n  return result;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmporsebwk0.d(22): Error: semicolon expected, not \''in\''\n/tmp/tmporsebwk0.d(22):
    Error: expression expected, not \''in\''\n/tmp/tmporsebwk0.d(22): Error: found
    \''lst\'' when expecting \'';\'' following for condition\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmporsebwk0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    return 0L;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpoepnhu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long res = 0;\n    foreach(float item; lst)\n    {\n        if(item\
    \ > 0)\n        {\n            long temp = cast(long)item;\n            if(temp\
    \ % 2 == 1)\n            {\n                res += temp * temp;\n            }\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhbwbw9l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach( float elem; lst )\n    {\n      \
    \  if(is(typeof(elem) == long))\n        {\n            long e = cast(long)elem;\n\
    \            if(e > 0 && e % 2 == 1)\n            {\n                sum += e\
    \ * e;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n   \
    \ alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr70r1qy5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && modf(i, 1.0) == 0.0)\n        {\n            if(i % 2L == 1L)\n    \
    \        {\n                result += i * i;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd7hg_y6o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(item; lst) \n    {\n        if\
    \ (item > 0L && is(int item))\n        {\n            result += long(pow(item,\
    \ 2));\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpap24hne7.d(26): Error: found \''(\'' when expecting \''.\''
    following long\n/tmp/tmpap24hne7.d(26): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpap24hne7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float elem; lst) \n    {\n    \
    \    if (int(elem) % 2 == 1) \n        {\n            result += pow(elem, 2);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgmsgp_7o.d(24): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpgmsgp_7o.d(24): Error: found \''%\'' instead of statement\n/tmp/tmpgmsgp_7o.d(29):
    Error: Declaration expected, not \''return\''\n/tmp/tmpgmsgp_7o.d(30): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgmsgp_7o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977949
