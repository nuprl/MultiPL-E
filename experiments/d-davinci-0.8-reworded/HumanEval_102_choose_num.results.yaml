language: d
name: HumanEval_102_choose_num
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x % 2 == 0)\n    {\n        return x;\n    }\n    else if (x\
    \ % 2 == 1)\n    {\n        return y;\n    }\n    else\n    {\n        return\
    \ -1;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprbalp3pa.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e15]

    ??:? void tmprbalp3pa.__unittest_L30_C1() [0x427a6d]

    ??:? void tmprbalp3pa.__modtest() [0x427b94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430010]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]

    ??:? runModuleUnitTests [0x42b911]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long result = -1;\n    long i = x;\n    for (; i <= y; i++)\n  \
    \  {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long max = -1;\n    long i = x;\n    if (x > y) {\n        i = y;\n\
    \    }\n    while (i <= y) \n    {\n        if (i % 2 == 0) {\n            max\
    \ = i;\n        }\n        i = i + 1;\n    }\n    return max;\n}\nunittest\n{\n\
    \    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpptmv40rk.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e35]

    ??:? void tmpptmv40rk.__unittest_L31_C1() [0x427abd]

    ??:? void tmpptmv40rk.__modtest() [0x427bb8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430030]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]

    ??:? runModuleUnitTests [0x42b931]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428284]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    alias T = ulong;\n    alias P = Tuple!(long, long);\n    T xPos\
    \ = x > 0 ? x : -x;\n    T yPos = y > 0 ? y : -y;\n    if (xPos == 0 || yPos ==\
    \ 0)\n        return -1;\n    else\n    {\n        P p = xPos > yPos ? P(yPos,\
    \ xPos) : P(xPos, yPos);\n        T g = gcd(p[0], p[1]);\n        T l = p[0] /\
    \ g * p[1];\n        // could check if l is even and return -1 here...\n     \
    \   return l / 2;\n    }\n}\n/*\nThe function digitsum(N) returns the sum of digits\
    \ of N. \n    For example:\nunittest\n{\n    alias candidate = choose_num;\n\n\
    \    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphatgx1qx.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphatgx1qx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163950
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(x<y)\n    {\n        if(y%2==0)\n        {\n            return\
    \ y;\n        }\n        else\n        {\n            return y-1;\n        }\n\
    \    }\n    else if(x==y)\n    {\n        if(x%2==0)\n        {\n            return\
    \ x;\n        }\n        else\n        {\n            return -1;\n        }\n\
    \    }\n    else\n    {\n        return -1;\n    }\n    \n    \n}\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x % 2 == 0) \n    {\n        if (x > y) \n        {\n      \
    \      return -1;\n        }\n        return x;\n    }\n    return choose_num(x\
    \ + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjd5uhx_f.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e05]

    ??:? void tmpjd5uhx_f.__unittest_L27_C1() [0x427a61]

    ??:? void tmpjd5uhx_f.__modtest() [0x427b88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430000]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fadd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]

    ??:? runModuleUnitTests [0x42b901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428254]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n  long largestEven;\n  if(x>y)\n  {\n    largestEven=-1;\n  }\n  else\n\
    \  {\n    for(long i=x;i<=y;i++)\n    {\n      if(i%2==0)\n      {\n        largestEven=i;\n\
    \      }\n    }\n  }\n  return largestEven;\n}\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkc291v74.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e2d]

    ??:? void tmpkc291v74.__unittest_L34_C1() [0x427b75]

    ??:? void tmpkc291v74.__modtest() [0x427bb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430028]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]

    ??:? runModuleUnitTests [0x42b929]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42827c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long result;\n    if (y % 2 == 0)\n    {\n        result = y;\n\
    \    }\n    else\n    {\n        result = y - 1;\n    }\n    if (result < x)\n\
    \    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    return tuple(long.max, long.min).zip(tuple(x, y)).map!((a, b) =>\
    \ a - b).reduce!((a, b) => abs(a) < abs(b) ? a : b);\n}\n/*\nunittest\n{\n   \
    \ alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n \
    \   assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpope710qk.d(19): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpope710qk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163950
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if( x % 2 == 0)\n        return x;\n    else if (y % 2 == 0)\n \
    \       return y;\n    else\n        return -1;\n}\n/*\n    This function takes\
    \ a series of numbers (integers or floats) and\n    returns a std.typecons.Tuple!(long,\
    \ double) that contains the minimum\n    number and the maximum number of the\
    \ series.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpni3ff_mx.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpni3ff_mx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163950
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long result = -1;\n    long i = 0;\n    foreach(i;x..y)\n    {\n\
    \        if (i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n   \
    \ assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7bppz3yw.d(19): Error: variable `i` is shadowing variable `tmp7bppz3yw.choose_num.i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7bppz3yw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163950
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x % 2 != 0 && y % 2 != 0) \n    {\n        return -1L;\n   \
    \ }\n    else \n    {\n        long low = min(x, y);\n        long high = max(x,\
    \ y);\n        if (low % 2 == 0)\n        {\n            return low;\n       \
    \ }\n        else\n        {\n            return low + 1;\n        }\n    }\n\
    }\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk9zi37_5.d(23): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmpk9zi37_5.d(24): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk9zi37_5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163950
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long result;\n    if (x % 2 != 0)\n    {\n        result = x + 1;\n\
    \    }\n    else\n    {\n        result = x;\n    }\n    if (result > y)\n   \
    \ {\n        return -1;\n    }\n    else\n    {\n        return result;\n    }\n\
    }\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr38syfui.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e1d]

    ??:? void tmpr38syfui.__unittest_L35_C1() [0x427a75]

    ??:? void tmpr38syfui.__modtest() [0x427b9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430018]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]

    ??:? runModuleUnitTests [0x42b919]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42826c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n\treturn -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n\
    \    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp81zl5nmw.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmp81zl5nmw.__unittest_L19_C1() [0x427a39]

    ??:? void tmp81zl5nmw.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(x%2 != 0 || y%2 != 0)\n    {\n        if(x%2 != 0)\n        {\n\
    \            x++;\n        }\n        if(y%2 != 0)\n        {\n            y--;\n\
    \        }\n    }\n    if(x <= y)\n    {\n        return y;\n    }\n    else\n\
    \    {\n        return -1;\n    }\n}\n/*\n    This function takes a natural number\
    \ n and returns the sum of \n    numbers from 1 to n inclusive, if n is not divisible\
    \ by 6. If n is \n    divisible by 6, then the function should return the sum\
    \ of numbers \n    from 1 to n inclusive plus 10. If n is less than 1, then the\
    \ function \n    should return -1.\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpczge114_.d(37): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpczge114_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163950
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x > y) return -1;\n    while (x <= y)\n    {\n        if (x\
    \ % 2 == 0)\n            return x;\n        x += 1;\n    }\n    return -1;\n}\n\
    unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L)\
    \ == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpovamasw_.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e25]

    ??:? void tmpovamasw_.__unittest_L26_C1() [0x427a7d]

    ??:? void tmpovamasw_.__modtest() [0x427ba4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430020]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fafd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]

    ??:? runModuleUnitTests [0x42b921]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428274]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    static assert(x > 0 && y > 0);\n    if (x == y)\n    {\n       \
    \ if ((x % 2) == 0)\n            return x;\n        else\n            return -1;\n\
    \    }\n    else if (x > y)\n    {\n        return -1;\n    }\n    else\n    {\n\
    \        long r = x % 2;\n        return (r == 0) ? x : x + 1;\n    }\n}\n/*\n\
    \ * This function takes a positive number num, and a string str, and\n *    replaces\
    \ all even-numbered characters in str with the string\n *    representation of\
    \ num. (0-indexed.) If str has less than\n *    2 * num characters, then the function\
    \ should return None.\n *    Otherwise, it should return the new string.\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2f5h6re9.d(35): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2f5h6re9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163950
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n  long n = 0;\n  if (x > y)\n  {\n    n = -1;\n  }\n  else if (y ==\
    \ 0)\n  {\n    n = 0;\n  }\n  else\n  {\n    for (long i = y; i > x; i--)\n  \
    \  {\n      if ((i % 2) == 0)\n      {\n        n = i;\n        break;\n     \
    \ }\n    }\n  }\n  return n;\n}\n \n/*\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcerzbkfn.d(40): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcerzbkfn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163950
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n\tlong result = -1;\n\tlong i = min(x, y);\n\t\n\twhile (i <= max(x,\
    \ y))\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tresult = i;\n\t\t}\n\t\ti++;\n\t\
    }\n\treturn result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n   \
    \ assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaey85rml.d(18): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmpaey85rml.d(20): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaey85rml.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163950
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    static struct S(a, b)\n    {\n        long a;\n        long b;\n\
    \    } nums = \n    {\n        .a = x,\n        .b = y\n    };\n    if (x > y)\n\
    \    {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ if (x % 2 == 0)\n    {\n        return x;\n    }\n    else\n    {\n        return\
    \ y;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyltmpglw.d(25): Error: found `}` when expecting `;` following statement

    /tmp/tmpyltmpglw.d(25): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpyltmpglw.d(42): Error: found `unittest` when expecting `;` following statement

    /tmp/tmpyltmpglw.d(55): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyltmpglw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163950
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    int lowest = x>y? y:x;\n    int highest = x>y? x:y;\n    for(long\
    \ i = highest; i >= lowest; i--)\n    {\n        if(i%2 == 0)\n        {\n   \
    \         return i;\n        }\n    }\n    return -1;\n}\n/*\nThis function takes\
    \ as its argument an unsorted tuple of strings. The\n    function returns a sorted\
    \ tuple of strings that contains the same\n    elements as the given tuple. Don't\
    \ use any built-in functions (not\n    even sort). Use bubble sort instead.\n\
    \    For example:\n    >>> bubble_sort(make_tuple(\"C\", \"B\", \"A\"))\n    tuple(\"\
    A\", \"B\", \"C\")\n*/\nTuple!(string) bubble_sort(Tuple!(string) unsorted)\n\
    {\n    bool sorted = false;\n    int size = unsorted.length;\n    string[] strings\
    \ = new string[size];\n    while(!sorted)\n    {\n        sorted = true;\n   \
    \     for(int i = 0; i < size - 1; i++)\n        {\n            if(unsorted[i]\
    \ > unsorted[i+1])\n            {\n                sorted = false;\n         \
    \       strings[i] = unsorted[i+1];\n                strings[i+1] = unsorted[i];\n\
    \            }\n            else\n            {\n                strings[i] =\
    \ unsorted[i];\n                strings[i+1] = unsorted[i+1];\n            }\n\
    \        }\n    }\n    return new Tuple!(string)(strings);\n}\n/*\nThis function\
    \ takes a tuple of tuples as its argument. All tuples are\n    the same length,\
    \ and all elements of the tuple are integers. The\n    function returns the sum\
    \ of all elements of the tuple.\n    For example:\n    >>> sum_tuple(make_tuple(make_tuple(1,\
    \ 2, 3), make_tuple(4, 5, 6)))\n    21\n*/\nunittest\n{\n    alias candidate =\
    \ choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuk5tzem6.d(17): Error: cannot implicitly convert expression `x
    > y ? y : x` of type `long` to `int`

    /tmp/tmpuk5tzem6.d(18): Error: cannot implicitly convert expression `x > y ? x
    : y` of type `long` to `int`

    /tmp/tmpuk5tzem6.d(47): Error: variable `i` cannot be read at compile time

    /tmp/tmpuk5tzem6.d(47): Error: variable `i` cannot be read at compile time

    /tmp/tmpuk5tzem6.d(50): Error: variable `i` cannot be read at compile time

    /tmp/tmpuk5tzem6.d(51): Error: variable `i` cannot be read at compile time

    /tmp/tmpuk5tzem6.d(55): Error: variable `i` cannot be read at compile time

    /tmp/tmpuk5tzem6.d(56): Error: variable `i` cannot be read at compile time

    /tmp/tmpuk5tzem6.d(60): Error: none of the overloads of `this` are callable using
    argument types `(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(668):        `std.typecons.Tuple!string.Tuple.this(string)`

    /home/a.guha/re'
  stdout: ''
  timestamp: 1660163950
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long maxEven = -1;\n    while (x <= y)\n    {\n        if (x % 2\
    \ == 0)\n        {\n            maxEven = x;\n        }\n        x++;\n    }\n\
    \    return maxEven;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n  \
    \  assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    //TODO: implement the function using std.typecons.If struct\n  \
    \  auto isEven = [](long n) {return n % 2 == 0;};\n    return typecons.If!(isEven(x)\
    \ && isEven(y), () =>\n    {\n        auto max = (x > y) ? x : y;\n        return\
    \ max;\n    }, () =>\n    {\n        return typecons.If!(isEven(x) && !isEven(y),\
    \ () =>\n        {\n            return x;\n        }, () =>\n        {\n     \
    \       return typecons.If!(!isEven(x) && isEven(y), () =>\n            {\n  \
    \              return y;\n            }, () =>\n            {\n              \
    \  return -1;\n            });\n        });\n    });\n}\nunittest\n{\n    alias\
    \ candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplwgvbj9x.d(18): Error: found `n` when expecting `.` following long

    /tmp/tmplwgvbj9x.d(18): Error: found `)` when expecting identifier following `long`.

    /tmp/tmplwgvbj9x.d(18): Error: found `{` when expecting `,`

    /tmp/tmplwgvbj9x.d(18): Error: expression expected, not `return`

    /tmp/tmplwgvbj9x.d(18): Error: found `n` when expecting `,`

    /tmp/tmplwgvbj9x.d(18): Error: expression expected, not `%`

    /tmp/tmplwgvbj9x.d(18): Error: found `2` when expecting `,`

    /tmp/tmplwgvbj9x.d(18): Error: expression expected, not `==`

    /tmp/tmplwgvbj9x.d(18): Error: found `0` when expecting `,`

    /tmp/tmplwgvbj9x.d(18): Error: expression expected, not `;`

    /tmp/tmplwgvbj9x.d(18): Error: found `}` when expecting `,`

    /tmp/tmplwgvbj9x.d(18): Error: expression expected, not `;`

    /tmp/tmplwgvbj9x.d(19): Error: found `return` when expecting `,`

    /tmp/tmplwgvbj9x.d(38): Error: found `;` when expecting `,`

    /tmp/tmplwgvbj9x.d(39): Error: expression expected, not `}`

    /tmp/tmplwgvbj9x.d(40): Error: found `unittest` when expecting `,`

    /tmp/t'
  stdout: ''
  timestamp: 1660163950
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x%2)\n    {\n        if (y%2)\n        {\n            return\
    \ -1;\n        }\n        else\n        {\n            return max(x+1, y);\n \
    \       }\n    }\n    else\n    {\n        return max(x, y);\n    }\n}\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg3g2yvy0.d(25): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpg3g2yvy0.d(30): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3g2yvy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163950
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long z = -1;\n    z = y - (y%2);\n    if (z == y && z < x)\n   \
    \ {\n        z = z -2;\n    }\n    if (z < x)\n    {\n        z = -1;\n    }\n\
    \    return z;\n}\n/*\nThis function takes in a positive integer number n and\
    \ returns a\n    letter grade (as a char) according to the following table:\n\
    unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L)\
    \ == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rhfr6ep.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rhfr6ep.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163950
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    while (x <= y)\n    {\n        if (x % 2 == 0)\n        {\n    \
    \        return x;\n        }\n        x++;\n    }\n    return -1;\n}\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpscy1cddz.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e15]

    ??:? void tmpscy1cddz.__unittest_L27_C1() [0x427a71]

    ??:? void tmpscy1cddz.__modtest() [0x427b98]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430010]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]

    ??:? runModuleUnitTests [0x42b911]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n  assert(x <= y);\n  if(x % 2 == 0) return x;\n  else return x + 1;\n\
    }\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp63itt7b5.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ee1]

    ??:? void tmp63itt7b5.__unittest_L21_C1() [0x427a89]

    ??:? void tmp63itt7b5.__modtest() [0x427bb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc07]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa9a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc2d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa71]

    ??:? runModuleUnitTests [0x42b9dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428330]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    return (y - (y % 2)) + (y % 2 == 1 ? x % 2 == 0 ? 0 : -2 : 0);\n\
    }\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3l8pberg.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e2d]

    ??:? void tmp3l8pberg.__unittest_L19_C1() [0x427ab1]

    ??:? void tmp3l8pberg.__modtest() [0x427bac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430028]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]

    ??:? runModuleUnitTests [0x42b929]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42827c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n\tif (x%2==0)\n\t{\n\t\treturn x;\n\t}\n\telse\n\t{\n\t\tif (x+1<=y)\n\
    \t\t{\n\t\t\treturn x+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\
    }\n}\n/*\nThis function accepts a positive integer n, and returns an array of\
    \ two \n    unique prime numbers whose sum is equal to n. The prime numbers should\
    \ be \n    in ascending order.\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5_pkr9yn.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5_pkr9yn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163950
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    static assert(is(typeof(x == long) && typeof(y == long)));\n   \
    \ static assert(x > 0L && y > 0L);\n    long num = -1L;\n    for(long i = x; i\
    \ <= y; i++)\n    {\n        if(isOdd(i))\n        {\n            i++;\n     \
    \       if(i <= y)\n            {\n                num = i;\n            }\n \
    \           break;\n        }\n        else\n        {\n            num = i;\n\
    \        }\n    }\n    return num;\n}\n/*\nThis function takes two positive numbers\
    \ x and y and returns the biggest\n    odd integer number that is in the range\
    \ [x, y] inclusive. If there's no \n    such number, then the function should\
    \ return -1.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcz3k3ymd.d(17): Error: found `)` when expecting `.` following long

    /tmp/tmpcz3k3ymd.d(17): Error: found `&&` when expecting identifier following
    `long`.

    /tmp/tmpcz3k3ymd.d(17): Error: found `typeof` when expecting `)`

    /tmp/tmpcz3k3ymd.d(17): Error: unexpected `(` in declarator

    /tmp/tmpcz3k3ymd.d(17): Error: found `==` when expecting `)`

    /tmp/tmpcz3k3ymd.d(17): Error: found `long` when expecting `)`

    /tmp/tmpcz3k3ymd.d(17): Error: found `)` when expecting `;`

    /tmp/tmpcz3k3ymd.d(17): Error: found `)` instead of statement

    /tmp/tmpcz3k3ymd.d(38): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcz3k3ymd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163950
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    assert(x >= 0L);\n    assert(y >= 0L);\n    if (x == y)\n    {\n\
    \        if (x % 2L == 0L)\n        {\n            return x;\n        }\n    \
    \    else \n        {\n            return -1L;\n        }\n    }\n    long tmp\
    \ = (x + y) / 2L;\n    while (tmp % 2L != 0L)\n    {\n        if (tmp > x)\n \
    \       {\n            x = tmp;\n        }\n        else \n        {\n       \
    \     y = tmp;\n        }\n        tmp = (x + y) / 2L;\n    }\n    return tmp;\n\
    }\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgznskybq.d(50): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f81]

    ??:? void tmpgznskybq.__unittest_L45_C1() [0x427b51]

    ??:? void tmpgznskybq.__modtest() [0x427c4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bca7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab3a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fccd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43017c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc59]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab11]

    ??:? runModuleUnitTests [0x42ba7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long z;\n    if (x % 2 == 0) {\n        z = x;\n    }\n    else\
    \ {\n        z = x + 1;\n    }\n    while (z <= y) {\n        return z;\n    \
    \    z = z + 2;\n    }\n    return -1;\n}\n/*\nThis function takes a positive\
    \ number n and returns a list that \n    contains n non-negative integers such\
    \ that the sum of those numbers \n    is n. The numbers in the list should be\
    \ in ascending order.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6yan6fmt.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6yan6fmt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163950
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n\t//return (abs(y-x)+1)%2==0?y-((abs(y-x)+1)/2-1):-1;\n\t//return (abs(y-x)+1)%2==0?x+((abs(y-x)+1)/2-1):-1;\n\
    \tif(y<x)\n\t{\n\t\treturn -1;\n\t}\n\telse if(y-x>=2)\n\t{\n\t\treturn y-((abs(y-x)+1)/2-1);\n\
    \t}\n\telse\n\t{\n\t\treturn y%2==0?y:-1;\n\t}\n}\n/*\nThis function takes a positive\
    \ number n and a non-negative integer\n    k and returns a tuple (i, j) of two\
    \ integers, such that:\n    - i and j are odd (not divisible by 2)\n    - i is\
    \ less than or equal to j\n    - |i - j| is k\n    - the sum of numbers in the\
    \ range [i, j] is equal to n\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1jihob7i.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1jihob7i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163950
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x > y)\n        return -1;\n    long even_low = 2 * floor(x\
    \ / 2.0) + 1;\n    long even_hi = 2 * floor(y / 2.0);\n    if (even_low > even_hi)\n\
    \        return -1;\n    return even_hi;\n}\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp332pp0c8.d(19): Error: cannot implicitly convert expression `2.00000
    * floor(cast(double)x / 2.00000) + 1.00000` of type `double` to `long`

    /tmp/tmp332pp0c8.d(20): Error: cannot implicitly convert expression `2.00000 *
    floor(cast(double)y / 2.00000)` of type `double` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp332pp0c8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    auto num;\n    if (x%2==0)\n    {\n        num =x;\n    }\n    else\
    \ \n    {\n        num = x+1;\n    }\n    if (num>y)\n    {\n        return -1;\n\
    \    }\n    else\n    {\n        return num;\n    }\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplvy4frd2.d(17): Error: no identifier for declarator `num`

    /tmp/tmplvy4frd2.d(17): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmplvy4frd2.d(34): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplvy4frd2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163950
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n\tif (x < y) {\n\t\tif (x % 2 == 0) {\n\t\t\treturn x;\n\t\t}\n\t\t\
    else {\n\t\t\treturn choose_num(x + 1, y);\n\t\t}\n\t}\n\telse if (x > y) {\n\t\
    \treturn -1;\n\t}\n\telse {\n\t\tif (x % 2 == 0) {\n\t\t\treturn x;\n\t\t}\n\t\
    \telse {\n\t\t\treturn -1;\n\t\t}\n\t}\n}\nunittest\n{\n    alias candidate =\
    \ choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqsvi8rjx.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e2d]

    ??:? void tmpqsvi8rjx.__unittest_L37_C1() [0x427a89]

    ??:? void tmpqsvi8rjx.__modtest() [0x427bb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430028]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]

    ??:? runModuleUnitTests [0x42b929]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42827c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n  if (y <= x) \n  {\n    return -1L;\n  }\n  else \n  {\n    long z\
    \ = x;\n    while (z <= y) \n    {\n      if (z % 2 == 0) \n      {\n        return\
    \ z;\n      }\n      else \n      {\n        z = z + 1;\n      }\n    }\n    return\
    \ -1L;\n  }\n}\n \n/*\nThis function accepts two positive integers x and y. If\
    \ the first\n    number is larger than the second, return -1, otherwise return\
    \ the square\n    root of the first number.\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptgjmfmud.d(39): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptgjmfmud.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163950
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x > y)\n        return -1;\n    if (x == y)\n        return\
    \ (cast(long)x % 2 == 0) ? x : -1;\n    long res = -1;\n    foreach (int i; x\
    \ .. y)\n    {\n        if (cast(long)i % 2 == 0)\n            res = i;\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmporjs6id6.d(22): Error: cannot implicitly convert expression `x`
    of type `long` to `int`

    /tmp/tmporjs6id6.d(22): Error: cannot implicitly convert expression `y` of type
    `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmporjs6id6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long ret;\n    if(x % 2 == 0)\n    {\n        return x;\n    }\n\
    \    ret = x + 1;\n    if(ret > y)\n    {\n        return -1;\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppmyuv7xn.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e15]

    ??:? void tmppmyuv7xn.__unittest_L29_C1() [0x427a71]

    ??:? void tmppmyuv7xn.__modtest() [0x427b98]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430010]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]

    ??:? runModuleUnitTests [0x42b911]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x%2 != 0)\n        x = x+1;\n    if (y%2 != 0)\n        y =\
    \ y-1;\n    if (x > y)\n        return -1;\n    else\n        return y;\n}\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    // Input:\n    //    x: a long number\n    //    y: a long number\n\
    \    // Output:\n    //    the largest even number in the range [x, y] inclusive.\n\
    \    // Example:\n    // >>> choose_num(12L, 15L)\n    // 14L\n    // >>> choose_num(13L,\
    \ 12L)\n    // -1L\n    \n    // YOUR CODE HERE\n    if(x>y)\n    {\n        return\
    \ -1L;\n    }\n    auto z = max(x,y);\n    if(z%2==0)\n    {\n        return z;\n\
    \    }\n    else\n    {\n        return z-1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnmkcygvl.d(33): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnmkcygvl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x <= y)\n    {\n        long evens = tuple!(2L, 4L, 6L, 8L,\
    \ 10L, 12L, 14L, 16L, 18L, 20L);\n        long odd = tuple!(1L, 3L, 5L, 7L, 9L,\
    \ 11L, 13L, 15L, 17L, 19L);\n        auto a = evens[$-1];\n        foreach (e;\
    \ evens)\n        {\n            if (e <= y)\n            {\n                a\
    \ = e;\n            }\n        }\n        if (a >= x)\n        {\n           \
    \ return a;\n        }\n        else\n        {\n            return -1L;\n   \
    \     }\n    }\n    else\n    {\n        return -1L;\n    }\n}\nunittest\n{\n\
    \    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(490):
    Error: static assert:  "Attempted to instantiate Tuple with an invalid argument:
    2L"

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):        instantiated
    from here: `parseSpecs!(2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 18L, 20L)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1998):        instantiated
    from here: `Tuple!(2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 18L, 20L)`

    /tmp/tmpa91m8vl2.d(19):        instantiated from here: `tuple!()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa91m8vl2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x < 0 || y < 0) \n    {\n        return -1;\n    }\n    else\
    \ \n    {\n        while (x <= y) \n        {\n            if (x % 2 == 0) \n\
    \            {\n                return x;\n            }\n            else \n\
    \            {\n                x = x + 1;\n            }\n        }\n       \
    \ return -1;\n    }\n}\n/*\nThis function takes a positive number n and a list\
    \ of long ints. The \n    function should return a tuple of two lists containing\
    \ all odd and even \n    numbers respectively. Note that the function should return\
    \ the two lists \n    in the same order they appear in the input list.\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9hmqqg4a.d(37): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9hmqqg4a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    enum positive_even_numbers = iota(0L, 2L, max(x, y) + 1L);\n   \
    \ return find!(a => a >= x && a <= y)(positive_even_numbers);\n}\n/*\nThis function\
    \ takes an array of positive numbers and a positive number s, \n    and returns\
    \ true if there are two numbers in the array whose sum is s, \n    and false otherwise.\n\
    unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L)\
    \ == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzptnjjui.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzptnjjui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{ \n    if(x > y) return -1;\n    long counter = x;\n    while(counter\
    \ <= y)\n    {\n        if(counter % 2 == 0)\n        {\n            return counter;\n\
    \        }\n        else \n        {\n            counter++;\n        }\n    }\n\
    \    return -1;\n}\n/*\n    This function takes three positive numbers x, y and\
    \ z. If the \n    values of those numbers are in increasing order (x < y < z),\
    \ \n    then the function should return True. Otherwise, it should \n    return\
    \ False.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd053eko6.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd053eko6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    return 0;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n\
    \    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpog7nvwmt.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpog7nvwmt.__unittest_L19_C1() [0x427a31]

    ??:? void tmpog7nvwmt.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long i;\n    for (i = y; i >= x; i--)\n    {\n        if (i % 2\
    \ == 0)\n        {\n            return i;\n        }\n    }\n    return -1;\n\
    }\n \n/*\nThis function takes three numbers a, b and c and returns true if \n\
    \    the value of a*b is in the range [c, c+1000] inclusive, and false otherwise.\n\
    unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L)\
    \ == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30261imc.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30261imc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n  long result = 0;\n  \n  if (x <= y)\n  {\n    result = x;\n    if\
    \ (x%2 != 0)\n    {\n      if (y%2 != 0)\n      {\n        result = -1;\n    \
    \  }\n      else\n      {\n        result = y;\n      }\n    }\n  }\n  else\n\
    \  {\n    result = -1;\n  }\n  \n  return result;\n}\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq61086ch.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e3d]

    ??:? void tmpq61086ch.__unittest_L41_C1() [0x427a95]

    ??:? void tmpq61086ch.__modtest() [0x427bbc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430038]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]

    ??:? runModuleUnitTests [0x42b939]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42828c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    x = (long)floor(x/2)*2;\n    y = (long)floor(y/2)*2;\n    if (x\
    \ >= y) return -1;\n    return x + 2;\n}\n/*\nThis function takes a positive integer\
    \ n. It should return the sum of all \n    even numbers in the Fibonacci sequence\
    \ up to and including the nth \n    Fibonacci number. This includes the 0th term.\n\
    unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L)\
    \ == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9eee93ud.d(17): Error: C style cast illegal, use `cast(long)floor(x
    / 2)`

    /tmp/tmp9eee93ud.d(18): Error: C style cast illegal, use `cast(long)floor(y /
    2)`

    /tmp/tmp9eee93ud.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9eee93ud.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x<=y)\n    {\n        if (x % 2 == 0) return x;\n        else\
    \ if (x == y) return -1;\n        else return choose_num(x+1, y);\n    }\n   \
    \ else\n    {\n        if (y % 2 == 0) return y;\n        else if (x == y) return\
    \ -1;\n        else return choose_num(y+1, x);\n    }\n    return -1;\n}\n/*\n\
    \    The function takes a positive integer number n and returns the nth\n    prime\
    \ number. It should return -1, if n is less than 1.\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8aldwshu.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8aldwshu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n     long result = -1;\n     long modulo = x % 2;\n     if (modulo ==\
    \ 0)\n        result = x;\n     else\n        result = x + 1;\n     while (result\
    \ <= y)\n     {\n         if (result % 2 == 0)\n            return result;\n \
    \        result += 2;\n     }\n     return -1;\n}\n/*\nImplement a function that\
    \ takes an integer x and a list of integers xs\n    and returns true if the first\
    \ integer is included in the list, false \n    otherwise.\nunittest\n{\n    alias\
    \ candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpipirkc3f.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipirkc3f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    // YOUR CODE HERE\n    if(x > y)\n        return -1;\n    int largest\
    \ = y;\n    for(; largest >= x; largest--)\n    {\n        if(largest % 2 == 0)\n\
    \            return largest;\n    }\n    return -1;\n}\nunittest\n{\n    alias\
    \ candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptz24f7ka.d(20): Error: cannot implicitly convert expression `y`
    of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptz24f7ka.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    static int[] evens = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24,\
    \ 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62,\
    \ 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100,\
    \ 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132,\
    \ 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164,\
    \ 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196,\
    \ 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228,\
    \ 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260,\
    \ 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292,\
    \ 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324,\
    \ 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356,\
    \ 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388,\
    \ 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420,\
    \ 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452,\
    \ 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482,\n\
    unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L)\
    \ == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0k6nxnhl.d(18): Error: expression expected, not `unittest`

    /tmp/tmp0k6nxnhl.d(19): Error: comma expected separating array initializers, not
    `{`

    /tmp/tmp0k6nxnhl.d(31): Error: comma expected separating array initializers, not
    `void`

    /tmp/tmp0k6nxnhl.d(31): Error: semicolon expected, not `main`

    /tmp/tmp0k6nxnhl.d(31): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0k6nxnhl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    return -1L;\n}\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphmv7jxx1.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmphmv7jxx1.__unittest_L19_C1() [0x427a39]

    ??:? void tmphmv7jxx1.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    enum size_t range = cast(size_t)(y - x + 1);\n    if(range <= 1)\n\
    \        return -1;\n    if(range == 2)\n        return x;\n    auto result =\
    \ new long[range];\n    foreach(i; 0 .. range)\n        result[i] = x + i;\n \
    \   static struct IsEven\n    {\n        enum bool opCall(long value)\n      \
    \  {\n            return cast(bool)(value % 2 == 0);\n        }\n    } isEven;\n\
    \    return reduce!max(result, isEven);\n}\n/**\n * This function takes a string\
    \ of integers separated by commas,\n * and returns the sum of all of them.\n *\n\
    \ * For example:\n * >>> sum_ints(\"1, 2, 3, 4, 5\")\n * 15\n * >>> sum_ints(\"\
    \")\n * 0\n * >>> sum_ints(\"1\")\n * 1\n * >>> sum_ints(\"1, 1, 1, 1, 1\")\n\
    \ * 5\n * >>> sum_ints(\"1, -1, 1, -1, 1\")\n * 0\n * >>> sum_ints(\"1, -1, 0,\
    \ -1, 1\")\n * 0\n * >>> sum_ints(\"1, -1, -1, -1, 1\")\n * -1\n * >>> sum_ints(\"\
    1, -1, -1, -1, -1\")\n * -5\n * >>> sum_ints(\"-1, -1, -1, -1, -1\")\n * -5\n\
    \ * >>> sum_ints(\"-5\")\n * -5\n * >>> sum_ints(\"-5, 5\")\n * 0\n * >>> sum_ints(\"\
    5, -5\")\n * 0\n * >>> sum_ints(\"-5, -5\")\n * -10\n * >>> sum_ints(\"-5, -5,\
    \ 10\")\n * 0\n * >>> sum_ints(\"1, 2, 3, 4, 5, 5, 4, 3, 2, 1\")\n * 30\n * >>>\
    \ sum_ints(\"1, 2, 3, 4, 5, 4, 3, 2, 1\")\n * 30\n * >>> sum_ints(\"-1, -2, -3,\
    \ -4, -\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmsbghyrv.d(34): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmsbghyrv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n\tif(y>x)\n\t{\n\t\tif((y%2)==0)\n\t\t\treturn y;\n\t\telse\n\t\t\t\
    return y-1;\n\t}\n\telse\n\t\treturn -1;\n}\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq8_gf7oc.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e05]

    ??:? void tmpq8_gf7oc.__unittest_L27_C1() [0x427b75]

    ??:? void tmpq8_gf7oc.__modtest() [0x427b88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430000]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fadd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]

    ??:? runModuleUnitTests [0x42b901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428254]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long bigEven = -1;\n    int i = x;\n    for(; i <= y; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            bigEven = i;\n        }\n\
    \    }\n    return bigEven;\n}\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm0a1451u.d(18): Error: cannot implicitly convert expression `x`
    of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm0a1451u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x % 2L == 0L && x <= y)\n    {\n        return x;\n    }\n \
    \   else if (x % 2L == 1L && x <= y)\n    {\n        return x + 1L;\n    }\n \
    \   else\n    {\n        return -1L;\n    }\n}\n/*\nThis function takes two positive\
    \ numbers x and y and returns a tuple \n    containing two long numbers, the first\
    \ one is the biggest odd number in \n    the range [x, y] inclusive, and the second\
    \ one is the biggest even number \n    in the range [x, y] inclusive. If there's\
    \ no such number, then the function \n    should return (-1L, -1L).\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdrie9m_d.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdrie9m_d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long ret = -1;\n    long m = min(x, y);\n    long M = max(x, y);\n\
    \    ret = M - (M % 2) + 2;\n    if (ret > M)\n    {\n        ret = -1;\n    }\n\
    \    return ret;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw1wut0ho.d(18): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmpw1wut0ho.d(19): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw1wut0ho.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x % 2 == 0 || y % 2 == 0) {\n        return max(x, y);\n   \
    \ } else {\n        return -1;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6apldftx.d(18): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6apldftx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    static if(x < y)\n    {\n        if(x % 2 == 0) return x;\n    \
    \    else return choose_num(x + 1, y);\n    }\n    else if(x > y)\n    {\n   \
    \     if(y % 2 == 0) return y;\n        else return choose_num(x, y - 1);\n  \
    \  }\n    else\n    {\n        if(x % 2 == 0) return x;\n        else return -1;\n\
    \    }\n}\n/*\nThis function takes a non-negative number n as a parameter and\n\
    \    returns the number of right-handed ways of parenthesizing an \n    expression\
    \ with n variables.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbh8rcacz.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbh8rcacz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long z;\n    for (long i = y; i >= x; i--)\n    {\n        if (i\
    \ % 2 == 0)\n        {\n            z = i;\n            break;\n        }\n  \
    \      else\n        {\n            z = -1;\n        }\n    }\n    return z;\n\
    }\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkxarbxv5.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e2d]

    ??:? void tmpkxarbxv5.__unittest_L32_C1() [0x427ab1]

    ??:? void tmpkxarbxv5.__modtest() [0x427bac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430028]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]

    ??:? runModuleUnitTests [0x42b929]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42827c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n\tif (x <= y)\n\t{\n\t\tif (y % 2 == 0)\n\t\t{\n\t\t\treturn y;\n\t\t\
    } else\n\t\t{\n\t\t\treturn choose_num(x, y - 1);\n\t\t}\n\t}\n\telse\n\t{\n\t\
    \treturn -1;\n\t}\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163951
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long count;\n    long bigEven;\n    bool found = false;\n    for(count\
    \ = x; count <= y; count++)\n    {\n        if(count % 2 == 0)\n        {\n  \
    \          bigEven = count;\n            found = true;\n        }\n    }\n   \
    \ if(found)\n    {\n        return bigEven;\n    }\n    else\n    {\n        return\
    \ -1;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    auto result = -1L;\n    for (long i = min(x, y); i <= max(x, y);\
    \ i++) \n    {\n        if (i % 2 == 0) \n        {\n            result = i;\n\
    \        }\n    }\n    return result;\n}\n/* \nThis function takes an int number\
    \ k and a string word and returns the word \nrepeated k times. If k is negative,\
    \ then the function should return an empty string.\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ppqy1u_.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ppqy1u_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n\tenum num = (x % 2 == 0) ? x : x + 1;\n\twhile (num <= y)\n\t{\n\t\t\
    if (num % 2 == 0)\n\t\t\treturn num;\n\t\telse\n\t\t\tnum += 1;\n\t}\n\treturn\
    \ -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp76i63f9a.d(17): Error: variable `x` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp76i63f9a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long i = max(x, y);\n    while (i > x) {\n        if (i % 2 == 0)\
    \ {\n            return i;\n        }\n        i--;\n    }\n    return -1;\n}\n\
    /*\nThe game is played as follows: The first player chooses a number N, divides\n\
    \    it by 2 if it's even, and multiplies it by 3 and adds 1 if it's odd. After\n\
    \    that, the second player follows the same procedure and so on. The game\n\
    \    ends when somebody reaches the number 1.\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwl2deame.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwl2deame.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    enum lowest_bound = 2L;\n    if (x < lowest_bound || y < lowest_bound)\n\
    \    {\n        writeln(\"Error: Both inputs must be positive\");\n        return\
    \ -1L;\n    }\n    if (x > y)\n    {\n        writeln(\"Error: The first number\
    \ must be smaller or equal to the second\");\n        return -1L;\n    }\n   \
    \ if (x == y)\n    {\n        if (x % 2 == 0)\n        {\n            return x;\n\
    \        }\n        else\n        {\n            return -1L;\n        }\n    }\n\
    \    if (x % 2 == 0)\n    {\n        return x;\n    }\n    else\n    {\n     \
    \   return choose_num(x + 1L, y);\n    }\n}\n/*\nThis function takes two numbers\
    \ x and y and calculates the sum of \n    them. The function also takes an array\
    \ of numbers, which will \n    be used as a currency exchange rate. The elements\
    \ in that array \n    correspond to the exchange rate between the currencies (in\
    \ the same \n    order) that are in the string \"currencies\". For example, the\n\
    \    exchange rate between euro and usd is in the element of index 0.\n    The\
    \ function should return the sum of x and y in the format of a \n    tuple of\
    \ currency, value.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp00x2gec0.d(48): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp00x2gec0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long res = 0;\n    long i = min(x, y);\n    res = x % 2 == 0 ? x\
    \ : x + 1;\n    if(res > y)\n        return -1;\n    return res;\n}\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfgi867bl.d(18): Error: undefined identifier `min`, did you mean
    function `main`?

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x < y && x % 2 == 0)\n    {\n        return x;\n    }\n    else\
    \ if (x < y && x % 2 != 0)\n    {\n        return choose_num(x + 1, y);\n    }\n\
    \    else if (x > y && y % 2 == 0)\n    {\n        return y;\n    }\n    else\
    \ if (x > y && y % 2 != 0)\n    {\n        return choose_num(x, y - 1);\n    }\n\
    \    else if (x % 2 == 0)\n    {\n        return x;\n    }\n    else if (x % 2\
    \ != 0)\n    {\n        return -1;\n    }\n    else\n    {\n        return -1;\n\
    \    }\n}\n/*\nThis function takes a tuple of numbers and returns a new tuple\
    \ of the same\n    length that contains the numbers from the original tuple but\
    \ in \n    reverse order.\nunittest\n{\n    alias candidate = choose_num;\n\n\
    \    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwp_vsxr5.d(46): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwp_vsxr5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(x % 2L == 0)\n    {\n        if(x == y)\n        {\n        \
    \    return x;\n        }\n        else\n        {\n            return choose_num(x\
    \ + 2L, y);\n        }\n    }\n    else\n    {\n        if(x + 1L == y)\n    \
    \    {\n            return -1L;\n        }\n        else\n        {\n        \
    \    return choose_num(x + 1L, y);\n        }\n    }\n}\n/*\nThis function takes\
    \ two positive numbers x and y and returns the\n    biggest odd integer number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp67cchjcw.d(40): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp67cchjcw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result =\
    \ x;\n    }\n    else if (x + 1 <= y)\n    {\n        result = x + 1;\n    }\n\
    \    else\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2r_8ip1_.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e2d]

    ??:? void tmp2r_8ip1_.__unittest_L32_C1() [0x427a85]

    ??:? void tmp2r_8ip1_.__modtest() [0x427bac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430028]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]

    ??:? runModuleUnitTests [0x42b929]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42827c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(y < x)\n        return -1;\n    while(y % 2 != 0)\n        y--;\n\
    \    return y;\n}\n/*\n> Note that we may have a chance to have the following\
    \ wrong code:\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl5_1kihv.d(23): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl5_1kihv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long i = min(x, y);\n    while (i > 0)\n    {\n        if (i % 2\
    \ == 0)\n        {\n            return i;\n        }\n        i -= 1;\n    }\n\
    \    return -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxmho3u2y.d(17): Error: undefined identifier `min`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxmho3u2y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long z;\n    z = max(x, y);\n    if (z % 2 != 0)\n        z = z\
    \ - 1;\n    if (z < x)\n        z = -1;\n    return z;\n}\nunittest\n{\n    alias\
    \ candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyyflx7bs.d(18): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyyflx7bs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x == y)\n    {\n        return x % 2 == 0 ? x : -1;\n    }\n\
    \    auto z = cast(long)x;\n    while (z <= y)\n    {\n        if (z % 2 == 0)\n\
    \        {\n            return z;\n        }\n        z++;\n    }\n    return\
    \ -1;\n}\n/*\nThis function takes two positive numbers x and y and returns the\
    \ biggest\neven integer number that is in the range [x, y] inclusive. If there's\
    \ no such\nnumber, then the function should return -1.\nunittest\n{\n    alias\
    \ candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1_y9_4r5.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1_y9_4r5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long z;\n    if(x % 2 == 0)\n        z = x;\n    else\n        z\
    \ = x + 1;\n    if(z > y)\n        return -1;\n    else\n        return z;\n}\n\
    /*\nThis function takes a list xs and a positive number x.\nunittest\n{\n    alias\
    \ candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc3eb7e00.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3eb7e00.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long res = -1;\n    long dx = x;\n    long dy = y;\n    if(dx%2\
    \ == 0)\n    {\n        res = dx;\n    }\n    else\n    {\n        dx += 1;\n\
    \    }\n    if(dy%2 == 0)\n    {\n        res = max(res, dy);\n    }\n    else\n\
    \    {\n        dy -= 1;\n    }\n    if(dx <= dy)\n    {\n        res = max(res,\
    \ dx);\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpklbk2vwy.d(30): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpklbk2vwy.d(38): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpklbk2vwy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    // import std.math;\n    // import std.typecons;\n    // import\
    \ std.algorithm;\n    // import std.range;\n    if (x > y || y < 0 || x < 0)\n\
    \    {\n        return -1;\n    }\n    long iter;\n    long num;\n    foreach\
    \ (iter; x..y+1)\n    {\n        num = x + y;\n        if (num % 2 == 0)\n   \
    \     {\n            return num;\n        }\n    }\n    return -1;\n}\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsde46v40.d(27): Error: variable `iter` is shadowing variable `tmpsde46v40.choose_num.iter`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsde46v40.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    auto res = -1L;\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqyr_xby8.d(18): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqyr_xby8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{ \n    auto a = LazyArray!(x..y);\n    foreach(i; reverse(a))\n    {\n\
    \        if (i % 2 == 0)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaohvyyjl.d(17): Error: found `..` when expecting `)` following
    template argument list

    /tmp/tmpaohvyyjl.d(17): Error: semicolon expected following auto declaration,
    not `y`

    /tmp/tmpaohvyyjl.d(17): Error: found `)` when expecting `;` following statement

    /tmp/tmpaohvyyjl.d(17): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaohvyyjl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long result = -1;\n    long n = x;\n    while (n <= y) {\n     \
    \   if (n % 2 == 0) {\n            result = n;\n        }\n        n++;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n   \
    \ assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    int X = (int) x;\n    int Y = (int) y;\n    if (X > Y)\n    {\n\
    \        writeln(\"Invalid range\");\n        return -1;\n    }\n    int temp\
    \ = max(X, Y);\n    while (temp % 2 != 0)\n    {\n        temp--;\n    }\n   \
    \ return (long) temp;\n}\n/*\nThis function takes two positive numbers x and y,\
    \ and an integer number k. \nThe function should return a tuple of two elements:\
    \ the first one\nis the biggest multiple of k that is in the range [x, y] inclusive,\n\
    and the second element is the number of multiples of k within the range [x, y].\
    \ \nIf the range doesn't contain any multiples of k, the function should return\
    \ -1 and 0.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjxemkuyp.d(17): Error: C style cast illegal, use `cast(int)x`

    /tmp/tmpjxemkuyp.d(18): Error: C style cast illegal, use `cast(int)y`

    /tmp/tmpjxemkuyp.d(29): Error: C style cast illegal, use `cast(long)temp`

    /tmp/tmpjxemkuyp.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjxemkuyp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n  long z = -1;\n  for (int i = cast(int)x; i <= cast(int)y; i++)\n \
    \ {\n    if (i % 2 == 0)\n    {\n      z = cast(long)i;\n    }\n  }\n  return\
    \ z;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long res = -1;\n    long max = x;\n    long min = y;\n    if (x\
    \ < y)\n    {\n        min = x;\n        max = y;\n    }\n    for (long i = max;\
    \ i >= min; i--)\n    {\n        if (i % 2 == 0)\n        {\n            res =\
    \ i;\n            break;\n        }\n    }\n    return res;\n}\n/*\nThis function\
    \ returns the sum of the first n positive odd numbers. For\n    example:\n   \
    \ >>> sum_odd_numbers(5L)\n    25L\n    >>> sum_odd_numbers(8L)\n    64L\n*/\n\
    long sum_odd_numbers(long n) \n{\n    return n * n;\n}\n/*\nYou want to pay $3\
    \ for a cup of coffee. You notice that the coffee shop\n    advertises the price\
    \ of coffee in a strange way: the price is always \n    written as the price of\
    \ the most expensive cup of coffee plus the \n    price of the second most expensive\
    \ cup of coffee. For example, if the \n    most expensive cup of coffee costs\
    \ $12 and the second most expensive \n    cup of coffee costs $3, then the coffee\
    \ shop's advertisement shows \n    that a cup of coffee costs $15.\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplm6qjspd.d(47): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplm6qjspd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n\tif(x > y || y < 0 || x < 0) \n    {\n        return -1;\n    }\n \
    \   else \n    {\n        long min = min(x, y);\n        long max = max(x, y);\n\
    \        if((min % 2 == 0) && (max % 2 == 0)) \n        {\n            return\
    \ max;\n        }\n        else if((min % 2 == 1) && (max % 2 == 1)) \n      \
    \  {\n            return -1;\n        }\n        else if((min % 2 == 0) && (max\
    \ % 2 == 1)) \n        {\n            return min;\n        }\n        else if((min\
    \ % 2 == 1) && (max % 2 == 0)) \n        {\n            return max - 1;\n    \
    \    }\n    }\n    return -1;\n}\n/*\nThis function takes an arbitrary number\
    \ of strings and returns \na tuple that contains the following:\n- the length\
    \ of the longest string in the tuple\n- the index of the longest string in the\
    \ tuple\n- the length of the shortest string in the tuple\n- the index of the\
    \ shortest string in the tuple\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpikg2teuk.d(44): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpikg2teuk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x>y) {\n        return -1L;\n    } else if ((x%2)!=0){\n   \
    \     x++;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptl93z6dr.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e0d]

    ??:? void tmptl93z6dr.__unittest_L24_C1() [0x427a65]

    ??:? void tmptl93z6dr.__modtest() [0x427b8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430008]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fae5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]

    ??:? runModuleUnitTests [0x42b909]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42825c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(x > y) return -1;\n    else if(x <= 0 || y <= 0) return -1;\n\
    \    else if(x == y) return x%2 == 0 ? x : -1;\n    else return choose_num(x+1,\
    \ y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpngr70ipp.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e25]

    ??:? void tmpngr70ipp.__unittest_L22_C1() [0x427a81]

    ??:? void tmpngr70ipp.__modtest() [0x427ba8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430020]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fafd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]

    ??:? runModuleUnitTests [0x42b921]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428274]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long result = -1;\n    long i = y;\n    while (i >= x)\n    {\n\
    \        if (i % 2 == 0)\n        {\n            result = i;\n            break;\n\
    \        }\n        i--;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n  //int i = x;\n  int j = y;\n  for(; j >= x; j--)\n  {\n    if(j %\
    \ 2 == 0)\n    {\n      return j;\n    }\n  }\n  return -1;\n}\nunittest\n{\n\
    \    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1t4ln0kv.d(18): Error: cannot implicitly convert expression `y`
    of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1t4ln0kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x%2 != 0)\n    {\n       x += 1;\n    }\n    if (y%2 != 0)\n\
    \    {\n       y -= 1;\n    }\n    if (x > y)\n    {\n       return -1;\n    }\n\
    \    else\n    {\n       return y;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    // YOUR CODE HERE\n    if (x == y)\n    {\n        return x % 2\
    \ == 0 ? x : -1;\n    }\n    else\n    {\n        return choose_num(x+1, y);\n\
    \    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvi7_4ukt.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e05]

    ??:? void tmpvi7_4ukt.__unittest_L27_C1() [0x427a61]

    ??:? void tmpvi7_4ukt.__modtest() [0x427b88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430000]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fadd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]

    ??:? runModuleUnitTests [0x42b901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428254]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    static assert(x > 0);\n    static assert(y > 0);\n    static assert(x\
    \ <= y);\n    long range = y - x;\n    if (range < 1) \n    {\n        return\
    \ -1;\n    }\n    else \n    {\n        return x + (range % 2 == 0 ? 0 : 1);\n\
    \    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1fkranhx.d(17): Error: variable `x` cannot be read at compile time

    /tmp/tmp1fkranhx.d(17):        while evaluating: `static assert(x > 0L)`

    /tmp/tmp1fkranhx.d(18): Error: variable `y` cannot be read at compile time

    /tmp/tmp1fkranhx.d(18):        while evaluating: `static assert(y > 0L)`

    /tmp/tmp1fkranhx.d(19): Error: variable `x` cannot be read at compile time

    /tmp/tmp1fkranhx.d(19):        while evaluating: `static assert(x <= y)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1fkranhx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    if (x % 2 !=\
    \ 0)\n    {\n        x++;\n    }\n    if (y % 2 != 0)\n    {\n        y--;\n \
    \   }\n    return y;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n  \
    \  assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp53qxdlm7.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e25]

    ??:? void tmp53qxdlm7.__unittest_L31_C1() [0x427b6d]

    ??:? void tmp53qxdlm7.__modtest() [0x427ba8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430020]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fafd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]

    ??:? runModuleUnitTests [0x42b921]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428274]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x <= y)\n    {\n        if (x % 2 == 0)\n        {\n       \
    \     return x;\n        }\n        else if (x % 2 == 1)\n        {\n        \
    \    return choose_num(x + 1, y);\n        }\n    }\n    else\n    {\n       \
    \ return -1;\n    }\n}\n/*\nThis function takes three numbers, x, y, and n, and\
    \ returns the \n    nth number of the Fibonacci sequence which is in the range\
    \ [x, y] \n    inclusive. The Fibonacci sequence is defined as follows:\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkxmqqiv6.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkxmqqiv6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    return 0L;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n\
    \    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4sq233cr.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmp4sq233cr.__unittest_L19_C1() [0x427a31]

    ??:? void tmp4sq233cr.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    foreach(i; iota(x, y+1))\n    {\n        if(i % 2 == 0)\n      \
    \  {\n            return i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n\
    \    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm3zpiyk9.d(17): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm3zpiyk9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n\t/*auto i = to!int(x);\n\tauto j = to!int(y);\n\tfor(int a = i; a <=\
    \ j; a++)\n\t{\n\t\tif(a % 2 == 0)\n\t\t{\n\t\t\treturn a;\n\t\t}\n\t}\n\treturn\
    \ -1;*/\n\tif (x % 2 == 0)\n\t{\n\t\treturn x;\n\t}\n\telse if (x < y)\n\t{\n\t\
    \treturn choose_num(x + 1, y);\n\t}\n\telse if (x > y)\n\t{\n\t\treturn choose_num(y,\
    \ x);\n\t}\n\telse\n\t{\n\t\treturn -1;\n\t}\n\t\n}\n/*\nThis function takes an\
    \ array of positive integer numbers, and returns a \n    copy of that array that\
    \ has all of the same elements, but with a single \n    difference: in the copy\
    \ all of the even integer numbers are replaced \n    with 0.\nunittest\n{\n  \
    \  alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8t694ykt.d(45): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8t694ykt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    // code here\n    if (x < y)\n    {\n        long max_even = cast(long)(x\
    \ / 2) * 2;\n        if (max_even > y) return -1;\n        return max_even;\n\
    \    }\n    else\n    {\n        long max_even = cast(long)(y / 2) * 2;\n    \
    \    if (max_even > x) return -1;\n        return max_even;\n    }\n}\n \nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplk8eq0ne.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e2d]

    ??:? void tmplk8eq0ne.__unittest_L32_C1() [0x427a85]

    ??:? void tmplk8eq0ne.__modtest() [0x427bac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430028]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]

    ??:? runModuleUnitTests [0x42b929]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42827c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x > y) return -1;\n    if (x % 2 != 0) x++;\n    if (y % 2 !=\
    \ 0) y--;\n    return x <= y ? x : -1;\n}\nunittest\n{\n    alias candidate =\
    \ choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgb9vu7mo.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e3d]

    ??:? void tmpgb9vu7mo.__unittest_L22_C1() [0x427a95]

    ??:? void tmpgb9vu7mo.__modtest() [0x427bbc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430038]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]

    ??:? runModuleUnitTests [0x42b939]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42828c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n  // this func is not needed, but I made it just for fun\n  auto not_even(long\
    \ z) \n  {\n    return z % 2 != 0;\n  }\n  if (x < 0 || y < 0)\n    return -1;\n\
    \  if (x > y)\n    return -1;\n  if (not_even(x) && not_even(y))\n    return -1;\n\
    \  if (not_even(x))\n    x += 1;\n  if (not_even(y))\n    y -= 1;\n  for (long\
    \ i = y; i >= x; i -= 2)\n    return i;\n  return -1;\n}\n/*\nWrite a function\
    \ that returns the sum of all numbers that are a power of\n    2 and greater than\
    \ or equal to 0, up to and including n.\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcx6vc5qh.d(36): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcx6vc5qh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else if (x %\
    \ 2 == 0)\n    {\n        return x;\n    }\n    else\n    {\n        return x\
    \ + 1;\n    }\n    \n}\nunittest\n{\n    alias candidate = choose_num;\n\n   \
    \ assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsshj8slv.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e05]

    ??:? void tmpsshj8slv.__unittest_L31_C1() [0x427a61]

    ??:? void tmpsshj8slv.__modtest() [0x427b88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430000]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fadd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]

    ??:? runModuleUnitTests [0x42b901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428254]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    \n    assert(x > 0);\n    assert(y > 0);\n    if (x > y)\n    {\n\
    \        return -1;\n    }\n    else\n    {\n        if (x % 2 == 0)\n       \
    \ {\n            return x;\n        }\n        else\n        {\n            return\
    \ x + 1;\n        }\n    }\n}\n/*\nThis function takes two tuples [x, y] and [a,\
    \ b] and checks whether they\n    intersect.\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6atqdsby.d(36): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6atqdsby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n  long z=0;\n  if(x>y)\n  {\n    z=-1;\n  }\n  else\n  {\n    for(;x<=y;x++)\n\
    \    {\n      if(x%2==0)\n      {\n        z=x;\n      }\n    }\n  }\n  return\
    \ z;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6k7irib0.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e2d]

    ??:? void tmp6k7irib0.__unittest_L34_C1() [0x427b75]

    ??:? void tmp6k7irib0.__modtest() [0x427bb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430028]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]

    ??:? runModuleUnitTests [0x42b929]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42827c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    auto z = x;\n    while( z <= y)\n    {\n        if ( z % 2 == 0)\
    \ return z;\n        z += 1;\n    }\n    return -1;\n}\n \n/*\nThis function takes\
    \ three positive numbers x, y and z and returns the\n    biggest integer number\
    \ that is in the range [x, y] inclusive.\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprd4sijg3.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprd4sijg3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(x>y) return -1;\n    else \n    {\n        return 2 * cast(long)\
    \ floor( (y + 1)/2.0 ) - 1;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz79dd4ej.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f6d]

    ??:? void tmpz79dd4ej.__unittest_L23_C1() [0x427bc5]

    ??:? void tmpz79dd4ej.__modtest() [0x427cec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42be67]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42acfa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fe8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43033c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fe19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42acd1]

    ??:? runModuleUnitTests [0x42bc3d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long[] arr = [];\n    arr = new long[y - x + 1];\n    long count\
    \ = 0;\n    foreach(long i; x..y+1)\n    {\n        arr[count] = i;\n        count++;\n\
    \    }\n    for(long i = arr.length - 1; i >= 0; i--)\n    {\n        if(arr[i]\
    \ % 2 == 0)\n        {\n            return arr[i];\n        }\n    }\n    return\
    \ -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed

    ----------------

    ??:? _d_newarrayU [0x42d7df]

    ??:? _d_newarrayT [0x429588]

    ??:? long tmp__p37fbi.choose_num(long, long) [0x427d25]

    ??:? void tmp__p37fbi.__unittest_L34_C1() [0x427eee]

    ??:? void tmp__p37fbi.__modtest() [0x427f64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n  if (x > y) return -1;\n  long smallest = min(x, y);\n  long largest\
    \ = max(x, y);\n  if (smallest % 2 != 0) smallest++;\n  if (largest % 2 != 0)\
    \ largest--;\n  if (smallest > largest) return -1;\n  return largest;\n}\n/*\n\
    This function takes two positive numbers x and y and returns the\n    biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n    there's\
    \ no such number, then the function should return -1.\nunittest\n{\n    alias\
    \ candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpez1lo0q8.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpez1lo0q8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(x > y) return -1;\n    if(x%2 == 0) return max(x, x+1);\n   \
    \ return max(x, x+2);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n \
    \   assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2pf6z3a.d(18): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpu2pf6z3a.d(19): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2pf6z3a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n\t/*\n\t\tx - y / 2 = 0 ?\n\t\t*/\n\t//return -1L;\n\t\n\t//code here\n\
    \t\n\tif(x % 2 == 0 && y % 2 == 0)\n\t{\n\t\tif(x + y > 0)\n\t\t{\n\t\t\t//static\
    \ if(x + y < 13)\n\t\t\treturn (x + y) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn\
    \ x;\n\t\t}\n\t}\n\telse if(x % 2 == 1 && y % 2 == 1)\n\t{\n\t\tif(x + y > 0)\n\
    \t\t{\n\t\t\treturn (x + y - 1) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn y;\n\
    \t\t}\n\t}\n\telse\n\t{\n\t\treturn -1L;\n\t}\n}\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph11a994_.d(56): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ead]

    ??:? void tmph11a994_.__unittest_L52_C1() [0x427b09]

    ??:? void tmph11a994_.__modtest() [0x427c30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]

    ??:? runModuleUnitTests [0x42b9a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    int i;\n    long z;\n    z=-1;\n    for(i=x;i<=y;i++)\n    {\n \
    \       if(i%2==0)\n        {\n            z=i;\n        }\n    }\n    return\
    \ z;\n}\nlong choose_num_aa(long x, long y)\n{\n    int x1,y1;\n    long z1;\n\
    \    x1=int(x);\n    y1=int(y);\n    for(int i=x1;i<=y1;i++)\n    {\n        if(i%2==0)\n\
    \        {\n            z1=i;\n        }\n    }\n    return z1;\n}\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqb69yea5.d(20): Error: cannot implicitly convert expression `x`
    of type `long` to `int`

    /tmp/tmpqb69yea5.d(33): Error: cannot implicitly convert expression `x` of type
    `long` to `int`

    /tmp/tmpqb69yea5.d(34): Error: cannot implicitly convert expression `y` of type
    `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqb69yea5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x%2!=0 && y%2!=0)\n        return -1;\n    if (x%2!=0)\n   \
    \     x++;\n    long big_one = x;\n    for (long i = x; i <= y; i+=2)\n    {\n\
    \        if (i > big_one)\n            big_one = i;\n    }\n    return big_one;\n\
    }\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphe53frnh.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e6d]

    ??:? void tmphe53frnh.__unittest_L29_C1() [0x427af5]

    ??:? void tmphe53frnh.__modtest() [0x427bf0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430068]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]

    ??:? runModuleUnitTests [0x42b969]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n  if(x <= y)\n  {\n    auto diff = y - x;\n    if(diff % 2 == 0)\n \
    \   {\n      return y;\n    }\n    else\n    {\n      return y - 1;\n    }\n \
    \ }\n  else\n  {\n    return -1;\n  }\n}\n/*\n    This function takes a positive\
    \ number n and returns a string of n stars. \n    For example:\n    >>> stars(2)\n\
    \    \"**\"\n    >>> stars(0)\n    \"\"\n*/\nstring stars(int n)\n{\n  string\
    \ result = \"\";\n  for(int i = 0; i < n; i++)\n  {\n    result ~= \"*\";\n  }\n\
    \  return result;\n}\n/*\n    This function takes a positive number n and returns\
    \ a string \n    consisting of a triangle of n rows. Each row has n characters.\
    \ \n    The first row has n stars, the second row has n-1 stars, and so on. \n\
    \    For example:\n    >>> triangle(2)\n    \"**\\n*\"\n    >>> triangle(3)\n\
    \    \"***\\n**\\n*\"\n    >>> triangle(1)\n    \"*\"\n    >>> triangle(5)\n \
    \   \"*****\\n****\\n***\\n**\\n*\"\n*/\nstring triangle(int n)\n{\n  string result\
    \ = \"\";\n  for(int i = 0; i < n; i++)\n  {\n    result ~= stars(n - i) ~ \"\\\
    n\";\n  }\n  return result;\n}\n/*\n    This function takes a positive number\
    \ n and returns a string \n    consisting of a triangle of n rows. Each row has\
    \ n characters. \n    The first row has n stars, the second row has n-1 stars,\
    \ and so on. \n    For example:\n    >>> triangle(2)\n    \"**\\n*\"\n    >>>\
    \ triangle(3)\n    \"***\\n**\\n*\"\n    >>> triangle(1)\n    \"*\"\n    >>> triangle(5)\n\
    \    \"*****\\n****\\n***\\n**\\n*\"\n*/\nstring triangle_reverse(int n)\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_gs43ypk.d(89): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_gs43ypk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x > y)\n        return -1;\n    if (y % 2 == 0)\n        return\
    \ y;\n    if (x % 2 == 0)\n        return x;\n    return -1;\n}\nunittest\n{\n\
    \    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpla5_l96k.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e25]

    ??:? void tmpla5_l96k.__unittest_L25_C1() [0x427a7d]

    ??:? void tmpla5_l96k.__modtest() [0x427ba4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430020]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fafd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]

    ??:? runModuleUnitTests [0x42b921]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428274]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{ \n    if(x > y || x%2 != 0) return -1;\n    else if(x < y) return y-1;\n\
    \    else return x;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n   \
    \ assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi4nrwdy5.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e0d]

    ??:? void tmpi4nrwdy5.__unittest_L21_C1() [0x427abb]

    ??:? void tmpi4nrwdy5.__modtest() [0x427b8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430008]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fae5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]

    ??:? runModuleUnitTests [0x42b909]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42825c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x>y) \n    {\n        return -1L;\n    }\n    else if (y%2!=0)\
    \ \n    {\n        return choose_num(x, y-1);\n    }\n    else\n    {\n      \
    \  return y;\n    }\n}\n \n/*\n    This function returns the number of iterations\
    \ needed to find the\n    largest even number in the range [1, x] inclusive that\
    \ is divisible by k.\n    If there's no such number, then it should return -1.\n\
    unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L)\
    \ == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqymadp8o.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqymadp8o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long z;\n    z = (x+y)/2;\n    //z = (int)z;\n    //printf(\"\\\
    n \\n %d \\n \\n\", z);\n    //printf(\"%d\", z);\n    if (z%2 == 0)\n    {\n\
    \        return z;\n    }\n    else if (x == y)\n    {\n        return -1;\n \
    \   }\n    else\n    {\n        if (z%2 == 0)\n        {\n            return z;\n\
    \        }\n        else if (z%2 != 0)\n        {\n            long x_new;\n \
    \           long y_new;\n            x_new = x+1;\n            y_new = y-1;\n\
    \            return choose_num(x_new, y_new);\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7o6z01tr.d(15): Error: function `tmp7o6z01tr.choose_num` no `return
    exp;` or `assert(0);` at end of function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7o6z01tr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{ \n    if(x%2==0)\n    {\n        return x;\n    }\n    else if((x+1)%2==0)\n\
    \    {\n        return x+1;\n    }\n    else if(x==y)\n    {\n        return -1;\n\
    \    }\n    else\n    {\n        return choose_num(x+1,y);\n    }\n} \n/*\nThis\
    \ function takes an int array and returns the smallest element of the\n    array.\
    \ If the array is empty, the function should return -1.\nunittest\n{\n    alias\
    \ candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5r29xwj.d(34): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5r29xwj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    version(none) {}\n    else { pragma(msg, \"This is the D template.\"\
    ); }\n    \n    long i = min(x, y);\n    for (; i <= max(x, y); i++) {\n     \
    \   if (i % 2 == 0) return i;\n    }\n    return -1;\n}\nunittest\n{\n    alias\
    \ candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'This is the D template.

    /tmp/tmp_cnvld4j.d(20): Error: undefined identifier `min`, did you mean function
    `main`?

    /tmp/tmp_cnvld4j.d(21): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_cnvld4j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n\tlong result = -1;\n\tfor (long i = x; i <= y; i++)\n\t{\n\t\tif ((i\
    \ % 2) == 0)\n\t\t{\n\t\t\tresult = i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    assert(x >= 0);\n    assert(y >= 0);\n    if (x % 2 == 0) {\n  \
    \      return max(x, min(y, x + 1));\n    } else {\n        return max(x + 1,\
    \ min(y, x + 2));\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n\
    \    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8d6fdecr.d(20): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp8d6fdecr.d(22): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8d6fdecr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long result = -1;\n    if (x <= y)\n    {\n        if (x % 2 !=\
    \ 0)\n        {\n            ++x;\n        }\n        if (y % 2 != 0)\n      \
    \  {\n            --y;\n        }\n        if (x > y)\n        {\n           \
    \ result = -1;\n        }\n        else\n        {\n            result = y;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n  static assert(x > 0L && y > 0L);\n  return y % 2L == 0L ? y : (y -\
    \ 1L) % 2L == 0L ? y - 1L : -1L;\n}\n/*\nThis function calculates n! recursively.\n\
    unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L)\
    \ == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp95654ipv.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp95654ipv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long s = -1;\n    long z = 0;\n    if(x % 2 == 0)\n        s = x;\n\
    \    else\n        s = x + 1;\n    while(s <= y)\n    {\n        if(s % 2 == 0)\n\
    \            z = s;\n        s++;\n    }\n    return z;\n}\nunittest\n{\n    alias\
    \ candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq1iz035t.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e45]

    ??:? void tmpq1iz035t.__unittest_L31_C1() [0x427acd]

    ??:? void tmpq1iz035t.__modtest() [0x427bc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430040]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]

    ??:? runModuleUnitTests [0x42b941]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428294]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long r;\n    x %= 2L;\n    y %= 2L;\n    if(x == 0L && y == 0L)\n\
    \    {\n        r = max(x, y);\n    }\n    else if(x == 1L && y == 1L)\n    {\n\
    \        r = -1L;\n    }\n    else\n    {\n        r = max(x, y);\n    }\n   \
    \ return r;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9p49wav_.d(22): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp9p49wav_.d(30): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9p49wav_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    foreach(num; x .. y + 1) {\n        if (num % 2 == 0)\n        \
    \    return num;\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate =\
    \ choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcxya8a75.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e1d]

    ??:? void tmpcxya8a75.__unittest_L23_C1() [0x427a79]

    ??:? void tmpcxya8a75.__modtest() [0x427ba0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430018]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]

    ??:? runModuleUnitTests [0x42b919]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42826c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{ \n    if(x == y)\n    {\n        if(x % 2 == 0)\n        {\n        \
    \    return x;\n        }\n        else\n        {\n            return -1;\n \
    \       }\n    }\n    else if(x < y)\n    {\n        if(x % 2 == 0)\n        {\n\
    \            return x;\n        }\n        else\n        {\n            return\
    \ choose_num(x + 1, y);\n        }\n    }\n    else\n    {\n        return -1;\n\
    \    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkvdrcdmi.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e2d]

    ??:? void tmpkvdrcdmi.__unittest_L44_C1() [0x427a89]

    ??:? void tmpkvdrcdmi.__modtest() [0x427bb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430028]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]

    ??:? runModuleUnitTests [0x42b929]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42827c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x % 2 == 0) \n    {\n        return max(x, y);\n    }\n    else\
    \ \n    {\n        if (y % 2 == 0) \n        {\n            return y;\n      \
    \  }\n        else \n        {\n            return -1;\n        }\n    }\n}\n\
    /*\nthis function takes a positive number 'x' and returns the smallest \n    integer\
    \ number that is strictly bigger than 'x' and has all its digits \n    different\
    \ from each other (i.e. is a pandigital number). If there's no \n    such number,\
    \ then the function should return -1.\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzig87pn0.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzig87pn0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    assert(x <= y);\n    return -1L;\n}\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf5iwdbn0.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ec9]

    ??:? void tmpf5iwdbn0.__unittest_L20_C1() [0x427a6d]

    ??:? void tmpf5iwdbn0.__modtest() [0x427b94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa82]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc15]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300c4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fba1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa59]

    ??:? runModuleUnitTests [0x42b9c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428318]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{ \n    long num = 0;\n    long diff = y - x;\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw375q8po.d(19): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw375q8po.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(x % 2 != 0) x++;\n    if(y % 2 != 0) y--;\n    if(x > y) return\
    \ -1;\n    return y;\n}\n/*\nunittest\n{\n    alias candidate = choose_num;\n\n\
    \    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn5cmjyoy.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn5cmjyoy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(x%2 != 0 && y%2 != 0)\n    {\n        return -1;\n    }\n   \
    \ if(x%2 != 0)\n    {\n        x++;\n    }\n    if(y%2 != 0)\n    {\n        y--;\n\
    \    }\n    if(x > y)\n    {\n        return -1;\n    }\n    return y;\n}\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{ \n    long biggest = -1;\n    long temp = 0;\n    if(x%2 == 0)\n    {\n\
    \        biggest = x;\n    }\n    else\n    {\n        biggest = x+1;\n    }\n\
    \    if(y%2 == 0)\n    {\n        temp = y;\n    }\n    else\n    {\n        temp\
    \ = y-1;\n    }\n    if(x > y)\n    {\n        return -1;\n    }\n    else if(temp\
    \ < biggest)\n    {\n        return -1;\n    }\n    else\n    {\n        return\
    \ temp;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n\treturn -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n\
    \    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp81zl5nmw.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmp81zl5nmw.__unittest_L19_C1() [0x427a39]

    ??:? void tmp81zl5nmw.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163951
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x > y)\n        return -1;\n    int diff = int(y) - int(x);\n\
    \    if (diff > 1)\n        return -1;\n    if (diff == 1)\n        return x;\n\
    \    if (diff == 0)\n        return x % 2 == 0 ? x : -1;\n}\nunittest\n{\n   \
    \ alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n \
    \   assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0hlwcnix.d(19): Error: cannot implicitly convert expression `y`
    of type `long` to `int`

    /tmp/tmp0hlwcnix.d(19): Error: cannot implicitly convert expression `x` of type
    `long` to `int`

    /tmp/tmp0hlwcnix.d(15): Error: function `tmp0hlwcnix.choose_num` no `return exp;`
    or `assert(0);` at end of function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0hlwcnix.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    // Your implementation\n    long temp;\n    if (x > y) {\n     \
    \   temp = x;\n        x = y;\n        y = temp;\n    }\n    if (y > x && (y -\
    \ x) % 2 != 0) {\n        y--;\n    }\n    if (y - x < 0) {\n        return -1;\n\
    \    }\n    return y;\n    \n}\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1mpbxi_4.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e35]

    ??:? void tmp1mpbxi_4.__unittest_L33_C1() [0x427ab9]

    ??:? void tmp1mpbxi_4.__modtest() [0x427bb4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430030]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]

    ??:? runModuleUnitTests [0x42b931]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428284]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{ \n    if (x % 2 == 0 && y % 2 == 0)\n        return max(x, y);\n    else\
    \ if (x % 2 == 0 && y % 2 != 0)\n        return y - 1;\n    else if (x % 2 !=\
    \ 0 && y % 2 == 0)\n        return x + 1;\n    else\n        return -1;\n}\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpodumd5et.d(18): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpodumd5et.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long ret = -1;\n    long i;\n    for (i = x; i <= y; i++)\n    {\n\
    \        if (i % 2 == 0)\n        {\n            ret = i;\n        }\n    }\n\
    \    return ret;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x % 2 == 0) \n    {\n        return x;\n    }\n    else if (x\
    \ % 2 == 1 && y % 2 == 0) \n    {\n        return y;\n    }\n    else \n    {\n\
    \        return -1;\n    }\n}\n/*\nThis function takes a positive integer number\
    \ n and returns the number of \n    prime numbers in the range [2, n] inclusive.\
    \ A prime number is an integer \n    that is divisible only by 1 and itself.\n\
    unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L)\
    \ == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9alcf9jk.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9alcf9jk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    return (x % 2 == 0) ? max(x, y) : (y % 2 == 0) ? y : -1;\n}\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9ufjjhap.d(17): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ufjjhap.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    return 0;\n}\nimport std.range;\n/*\nThis function takes a positive\
    \ number x and generates a list of all numbers \nin the range [1, x] inclusive\
    \ that are prime.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkdpvl6mr.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdpvl6mr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n  long i;\n  long n = -1;\n  while (x <= y)\n  {\n    if (x % 2 == 0)\n\
    \    {\n      n = x;\n    }\n    x++;\n  }\n  return n;\n}\nunittest\n{\n    alias\
    \ candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    immutable result = [0L, -1L].front;\n    foreach(i; x..y+1)\n  \
    \  {\n        if(i % 2 == 0) result = i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_r4z18eb.d(17): Error: no property `front` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_r4z18eb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    assert(x <= y);\n    long ans = -1;\n    for (long i = y; i >= x;\
    \ i--)\n    {\n        if (i % 2 == 0)\n        {\n            ans = i;\n    \
    \        break;\n        }\n    }\n    return ans;\n}\nunittest\n{\n    alias\
    \ candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxt4dqeef.d(17): Assertion failure

    ----------------

    ??:? _d_assertp [0x427e25]

    ??:? long tmpxt4dqeef.choose_num(long, long) [0x427a41]

    ??:? void tmpxt4dqeef.__unittest_L29_C1() [0x427ac0]

    ??:? void tmpxt4dqeef.__modtest() [0x427bd8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc55]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430104]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa99]

    ??:? runModuleUnitTests [0x42ba05]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    int max = -1;\n    for (; x <= y; x++) {\n        if (x % 2 == 0)\n\
    \            max = max(max, x);\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8nu98n75.d(20): Error: function expected before `()`, not `max`
    of type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8nu98n75.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    // write your code here\n    static assert(x > 0);\n    static assert(y\
    \ > 0);\n    if (x <= y)\n    {\n        // x <= y\n        if (x % 2 == 0)\n\
    \        {\n            // x is even\n            return x;\n        }\n     \
    \   else\n        {\n            // x is odd\n            if (x + 1 <= y)\n  \
    \          {\n                // x + 1 <= y\n                return x + 1;\n \
    \           }\n            else\n            {\n                // x + 1 > y\n\
    \                return -1;\n            }\n        }\n    }\n    else\n    {\n\
    \        // x > y\n        return -1;\n    }\n}\n/*\nThis function takes an integer\
    \ number n as an argument and returns\n    the biggest even integer number that\
    \ is less than or equal to n. If\n    there's no such number, then the function\
    \ should return -1.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6n_sung3.d(49): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6n_sung3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n\t// Your solution starts here\n\tif(x > y)\n\t{\n\t\treturn -1;\n\t\
    }\n\t\n\twhile(x <= y)\n\t{\n\t\tif(x % 2 == 0)\n\t\t{\n\t\t\treturn x;\n\t\t\
    }\n\t\tx++;\n\t}\n\t\n\treturn -1;\n\t// Your solution ends here\n}\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6whv9fqo.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e25]

    ??:? void tmp6whv9fqo.__unittest_L35_C1() [0x427a7d]

    ??:? void tmp6whv9fqo.__modtest() [0x427ba4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430020]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fafd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]

    ??:? runModuleUnitTests [0x42b921]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428274]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(x > y)\n    {\n        return -1L;\n    }\n    long mid = (x\
    \ + y) / 2;\n    if(mid % 2 == 0)\n    {\n        if(mid < y)\n        {\n   \
    \         return choose_num(mid + 1, y);\n        }\n        else\n        {\n\
    \            return mid;\n        }\n    }\n    else\n    {\n        return choose_num(x,\
    \ mid - 1);\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph4y72_nn.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e4d]

    ??:? void tmph4y72_nn.__unittest_L38_C1() [0x427aa5]

    ??:? void tmph4y72_nn.__modtest() [0x427bcc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430048]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]

    ??:? runModuleUnitTests [0x42b949]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42829c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(x > y)\n    {\n        return -1L;\n    }\n    return (x + y)\
    \ / 2L * 2L;\n}\n/*\nThis function takes two positive numbers x and y and returns\
    \ an array \n    of size 2, where the first element is the smallest odd number\
    \ in the \n    range [x, y] inclusive, and the second element is the biggest odd\
    \ \n    number in the range [x, y] inclusive. If there's no such number, \n  \
    \  then the function should return [-1, -1].\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk0x06p5h.d(23): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk0x06p5h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    x += 1;\n    long num=cast(long) x;\n    while(num <= cast(long)\
    \ y)\n    {\n       if(num % 2 == 0)\n       {\n           return num;\n     \
    \  }\n       num++;\n    }\n    return -1;\n}\n/*\n    This function takes a positive\
    \ integer x (where x > 0) as input and returns\n    a boolean value representing\
    \ whether or not x is a power of 2.\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3k1x854c.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3k1x854c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long max = -1;\n    for (long i = x; i <= y; i++)\n    {\n     \
    \   if (i % 2 == 0)\n        {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}\n/*\nDefine a function 'is_prime' which receives a positive integer\
    \ x and returns\n    true if x is a prime number and false otherwise.\n    \n\
    \    For example:\n    >>> is_prime(5L)\n    true\n    >>> is_prime(7L)\n    true\n\
    \    >>> is_prime(13L)\n    true\n    >>> is_prime(1L)\n    false\n    >>> is_prime(12L)\n\
    \    false\n    >>> is_prime(27L)\n    false\n*/\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{ \n    // assert(x >= 1);\n    // assert(y >= 1);\n    long maxEven =\
    \ -1;\n    for (long i = x; i <= y; i++)\n    {\n        if(isEven(i))\n     \
    \   {\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt31rblsx.d(22): Error: undefined identifier `isEven`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt31rblsx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{ \n    long a = 0;\n    long b = 0;\n    if (x > y)\n    {\n        a\
    \ = y;\n        b = x;\n    }\n    else\n    {\n        a = x;\n        b = y;\n\
    \    }\n    if ( a % 2 == 0)\n    {\n        return a;\n    }\n    else\n    {\n\
    \        if (a+1 < b)\n        {\n            return a+1;\n        }\n       \
    \ else\n        {\n            return -1;\n        }\n    }\n}\nunittest\n{\n\
    \    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk753eym2.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e35]

    ??:? void tmpk753eym2.__unittest_L45_C1() [0x427a91]

    ??:? void tmpk753eym2.__modtest() [0x427bb8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430030]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]

    ??:? runModuleUnitTests [0x42b931]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428284]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x < 0 || y < 0)\n    {\n        throw new Error(\"Arguments\
    \ should be positive integers\");\n    }\n    if (x > y)\n    {\n        return\
    \ -1;\n    }\n    else if (x < y)\n    {\n        if ((y % 2) == 0)\n        {\n\
    \            return y;\n        }\n        else\n        {\n            return\
    \ y - 1;\n        }\n    }\n    else\n    {\n        if ((x % 2) == 0)\n     \
    \   {\n            return x;\n        }\n        else\n        {\n           \
    \ return -1;\n        }\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    //your code goes here\n    \n    int ret = -1;\n    for(int i =\
    \ x; i <= y; i++)\n    {\n        if(i % 2 == 0)\n        {\n            ret =\
    \ i;\n        }\n    }\n    return ret;\n}\nstring choose_num(long x, long y)\
    \ \n{\n    //your code goes here\n    \n    int ret = -1;\n    string str = \"\
    \";\n    for(int i = x; i <= y; i++)\n    {\n        if(i % 2 == 0)\n        {\n\
    \            ret = i;\n            str = i.to!string;\n        }\n    }\n    return\
    \ str;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpijq35z0_.d(20): Error: cannot implicitly convert expression `x`
    of type `long` to `int`

    /tmp/tmpijq35z0_.d(35): Error: cannot implicitly convert expression `x` of type
    `long` to `int`

    /tmp/tmpijq35z0_.d(40): Error: no property `to` for type `int`

    /tmp/tmpijq35z0_.d(49): Error: `tmpijq35z0_.choose_num` called with argument types
    `(long, long)` matches both:

    /tmp/tmpijq35z0_.d(15):     `tmpijq35z0_.choose_num(long x, long y)`

    and:

    /tmp/tmpijq35z0_.d(29):     `tmpijq35z0_.choose_num(long x, long y)`

    /tmp/tmpijq35z0_.d(50): Error: `tmpijq35z0_.choose_num` called with argument types
    `(long, long)` matches both:

    /tmp/tmpijq35z0_.d(15):     `tmpijq35z0_.choose_num(long x, long y)`

    and:

    /tmp/tmpijq35z0_.d(29):     `tmpijq35z0_.choose_num(long x, long y)`

    /tmp/tmpijq35z0_.d(51): Error: `tmpijq35z0_.choose_num` called with argument types
    `(long, long)` matches both:

    /tmp/tmpijq35z0_.d(15):     `tmpijq35z0_.choose_num(long x, long y)`

    and:

    /tmp/tmpijq35z0_.d(29):     `tmpijq35z0_.choose_num(long x, long y)`

    /tmp/tmpijq35z0_.d(52): Error: `tmpijq35z0_.choose_num` called with argument types
    `(long, long)` matches both:

    /tmp/tmpijq35z0_.d(15):     `tmpijq35z0_.choose_num(long x, long y)`

    and:

    /tmp/tmpijq35z0_.d(29):     `tmpijq35z0_.choose_num(long x, long y)`

    /tmp/tmpijq35z0_.d(53): Error: `tmpijq35z0_.choose_num` called with argument types
    `(long, long)` matches both:

    /tmp/tmpijq35z0_.d(15):     `tmpijq35z0_.choose_num(long x, long y)`

    and:

    /tmp/tmpijq35z0_.d(29):     `tmpijq35z0_.choose_num(long x, long y)`

    /tmp/tmpijq35z0_.d(54): Error: `tmpijq35z0_.choose_num` called with argument types
    `(long, long)` matches both:

    /tmp/tmpijq35z0_.d(15):     `tmpijq35z0_.choose_num(long x, long y)`

    and:

    /tmp/tmpijq35z0_.d(29):     `tmpijq35z0_.choose_num(long x, long y)`

    /tmp/tmpijq35z0_.d(55): Error: `tmpijq35z0_.choose_num` called with argument types
    `(long, long)` matches both:

    /tmp/tmpijq35z0_.d(15):     `tmpijq35z0_.choose_num(long x, long y)`

    and:

    /tmp/tmpijq35z0_.d(29):     `tmpijq35z0_.choose_num(long x, long y)`

    /tmp/tmp'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n\tif(x%2==0){\n\t\treturn x;\n\t}\n\telse if((x+1)%2==0){\n\t\treturn\
    \ x+1;\n\t}\n\telse{\n\t\treturn -1;\n\t}\n}\n/*\nThis function takes a positive\
    \ integer number x and returns \n    the least integer number that is bigger than\
    \ x, and has exactly the same \n    divisors as x. If there's no such number,\
    \ then the function should return -1.\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp01rovcxc.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp01rovcxc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long ans = -1;\n    while (x <= y)\n    {\n        if (x % 2 ==\
    \ 0)\n        {\n            ans = x;\n        }\n        x = x + 1;\n    }\n\
    \    return ans;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n\tlong diff = (x - y) * (x - y);\n\tif (diff < 0) {\n\t\treturn -1;\n\
    \t}\n\t// the difference between x and y is even and we choose the smaller value\n\
    \tif (diff % 2 == 0) {\n\t\treturn y;\n\t}\n\t// the difference between x and\
    \ y is odd and we choose the bigger value\n\telse {\n\t\treturn x;\n\t}\n}\n/*\n\
    This function checks a string to see if it contains an \n    exclamation mark.\n\
    \    >>> check_exclamation(\"Hello\")\n    false\n    >>> check_exclamation(\"\
    Hello!\")\n    true\n*/\nunittest\n{\n    alias candidate = choose_num;\n\n  \
    \  assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp59g4n4uz.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e1d]

    ??:? void tmp59g4n4uz.__unittest_L38_C1() [0x427a79]

    ??:? void tmp59g4n4uz.__modtest() [0x427ba0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430018]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]

    ??:? runModuleUnitTests [0x42b919]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42826c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{ \n    if (x <= y && (x & 1) == 0) {\n        return x;\n    } else if\
    \ (x < y && (x & 1) == 1) {\n        return x + 1;\n    } else {\n        return\
    \ -1;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1c3q4nd9.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e1d]

    ??:? void tmp1c3q4nd9.__unittest_L25_C1() [0x427a79]

    ??:? void tmp1c3q4nd9.__modtest() [0x427ba0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430018]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]

    ??:? runModuleUnitTests [0x42b919]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42826c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long _min = min(x, y);\n    long _max = max(x, y);\n    long e;\n\
    \    foreach(e; _min.._max)\n    {\n        if(e % 2 == 0)\n        {\n      \
    \      return e;\n        }\n    }\n    return -1;\n}\n/*\nThe function takes\
    \ a positive number n and returns true if it's a power of\n    two and false otherwise.\n\
    \    \n    For example:\n    >>> pow_two(5L)\n    false\n    >>> pow_two(4L)\n\
    \    true\n*/\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt3fv5bkw.d(17): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmpt3fv5bkw.d(18): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpt3fv5bkw.d(20): Error: variable `e` is shadowing variable `tmpt3fv5bkw.choose_num.e`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt3fv5bkw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    // get all even numbers from x to y\n    auto evens = iota(x, y+1).filter!(a\
    \ => a % 2 == 0);\n    if (evens.empty) \n    {\n        return -1;\n    }\n \
    \   return evens.front;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n\
    \    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp33gqv3ui.d(18): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp33gqv3ui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    // Your code goes here\n    long z = max(x, y);\n    long w = min(x,\
    \ y);\n    long even = 0;\n    for (long i = z; i >= w; i--)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            even = i;\n            break;\n       \
    \ }\n    }\n    if (even == 0)\n    {\n        return -1;\n    }\n    else\n \
    \   {\n        return even;\n    }\n}\n/*\nThis function takes a positive integer\
    \ x and a positive integer y and\n    returns a range of x numbers that are divisible\
    \ by y.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6bd7dzvn.d(38): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6bd7dzvn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    // Return x if it is the largest and even number in the range.\n\
    \    if (x % 2 == 0 && x >= y) \n    {\n        return x;\n    }\n    // Return\
    \ y if it is the largest and even number in the range.\n    else if (y % 2 ==\
    \ 0 && y >= x) \n    {\n        return y;\n    }\n    // Return -1 if there is\
    \ no even number in the range.\n    else \n    {\n        return -1;\n    }\n\
    }\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmtplq5xa.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e1d]

    ??:? void tmpmtplq5xa.__unittest_L33_C1() [0x427a79]

    ??:? void tmpmtplq5xa.__modtest() [0x427ba0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430018]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]

    ??:? runModuleUnitTests [0x42b919]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42826c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long max = x;\n    if (x % 2 == 1) \n    {\n        x++;\n    }\n\
    \    for (; x <= y; x += 2) \n    {\n        if (x > max) \n        {\n      \
    \      max = x;\n        }\n    }\n    if (max == x) \n    {\n        return -1;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n\
    \    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp78x8wvj0.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e45]

    ??:? void tmp78x8wvj0.__unittest_L35_C1() [0x427acd]

    ??:? void tmp78x8wvj0.__modtest() [0x427bc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430040]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]

    ??:? runModuleUnitTests [0x42b941]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428294]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    // Implement me\n    int num = -1;\n    if (x % 2 == 0)\n    {\n\
    \        num = x;\n    }\n    else\n    {\n        num = x + 1;\n    }\n    long\
    \ z = max(x, y);\n    while (num <= z)\n    {\n        if (num <= y)\n       \
    \ {\n            return num;\n        }\n        num += 2;\n    }\n    return\
    \ -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdg8nec_a.d(21): Error: cannot implicitly convert expression `x`
    of type `long` to `int`

    /tmp/tmpdg8nec_a.d(25): Error: cannot implicitly convert expression `x + 1L` of
    type `long` to `int`

    /tmp/tmpdg8nec_a.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdg8nec_a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    return -1L;\n}\n \n/*\nThis function takes a natural number n as\
    \ an argument and returns the sum of\nsquares of numbers from 0 to n inclusive.\n\
    unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L)\
    \ == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7iga14du.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7iga14du.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x % 2 != 0) {\n        x += 1;\n    }\n    if (y % 2 != 0) {\n\
    \        y -= 1;\n    }\n    if (x > y) {\n        return -1;\n    }\n    return\
    \ y;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163953
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n\tif (x % 2L != 0)\n\t\tx += 1L;\n\tif (y % 2L != 0)\n\t\ty -= 1L;\n\
    \tif (x > y)\n\t\treturn -1L;\n\treturn y;\n}\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    /*\n    long sum = 0;\n    long i = 1;\n    while (i * 2 < 10)\n\
    \    {\n        sum += i * 2;\n        i++;\n    }\n    writeln(sum);\n    */\n\
    \    //long num = 0;\n    //num = (x+y)/2;\n    //return num;\n    if (x%2 !=\
    \ 0)\n    {\n        x += 1;\n    }\n    if (y%2 != 0)\n    {\n        y -= 1;\n\
    \    }\n    if (x >= y)\n    {\n        return -1;\n    }\n    return y;\n}\n\
    unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L)\
    \ == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgtf7ncft.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e2d]

    ??:? void tmpgtf7ncft.__unittest_L44_C1() [0x427b9d]

    ??:? void tmpgtf7ncft.__modtest() [0x427bb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430028]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]

    ??:? runModuleUnitTests [0x42b929]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42827c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long choose = -1;\n    long i = x + 1;\n    while (i <= y)\n   \
    \ {\n        if (i % 2 == 0)\n        {\n            choose = i;\n           \
    \ break;\n        }\n        else\n        {\n            i = i + 1;\n       \
    \ }\n    }\n    return choose;\n}\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppx1iwuwp.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e35]

    ??:? void tmppx1iwuwp.__unittest_L33_C1() [0x427ae3]

    ??:? void tmppx1iwuwp.__modtest() [0x427bb4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430030]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]

    ??:? runModuleUnitTests [0x42b931]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428284]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{ \n\tlong num1, num2;\n\tif(x>y)\n\t{\n\t\tnum1 = y;\n\t\tnum2 = x;\n\t\
    }\n\telse\n\t{\n\t\tnum1 = x;\n\t\tnum2 = y;\n\t}\n\tfor(;num1<=num2;num1++)\n\
    \t{\n\t\tif(num1%2==0)\n\t\t{\n\t\t\treturn num1;\n\t\t}\n\t}\n\treturn -1;\n\
    }\n/*\nGiven a list of numbers, return the second biggest number in the list.\n\
    \    If there's no such number, return -1.\nunittest\n{\n    alias candidate =\
    \ choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpprr5nhvc.d(37): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpprr5nhvc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long minNum = min(x, y);\n    long maxNum = max(x, y);\n    long\
    \ maxEven = -1;\n    for (long i = minNum; i <= maxNum; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            maxEven = i;\n        }\n    }\n    return\
    \ maxEven;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr9_pake.d(17): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmpmr9_pake.d(18): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr9_pake.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(x%2==0 && y%2==0) \n        return max(x,y);\n    else if(x%2==1\
    \ && y%2==1)\n        return -1;\n    else \n        return (x>y)? x-1 : y-1;\n\
    }\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptm08wowv.d(18): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptm08wowv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    for (long i = y; i >= x; i--)\n    {\n        if (i % 2 == 0)\n\
    \        {\n            return i;\n        }\n    }\n    return -1;\n}\n/*\nThis\
    \ function takes two positive numbers x and y and returns the\n    smallest odd\
    \ integer number that is in the range [x, y] inclusive. If \n    there's no such\
    \ number, then the function should return -1.\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5c0s071k.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c0s071k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(x>y)\n    {\n        return -1;\n    }\n    else\n    {\n   \
    \     if(x%2==0)\n        {\n            return x;\n        }\n        else\n\
    \        {\n            return choose_num(x+1,y);\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq3z0kjg6.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e05]

    ??:? void tmpq3z0kjg6.__unittest_L33_C1() [0x427a61]

    ??:? void tmpq3z0kjg6.__modtest() [0x427b88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430000]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fadd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]

    ??:? runModuleUnitTests [0x42b901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428254]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n\tstatic assert(x>0 && y>0);\n\tfor(; x<=y; x++) \n\t{\n\t\tif(x%2==0)\
    \ \n\t\t{\n\t\t\treturn x;\n\t\t}\n\t}\n\treturn -1;\n}\n/*\nThis function takes\
    \ two positive numbers x and y and returns the\n    closest to x and even number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_mp9hd_l.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_mp9hd_l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long a;\n    int i = 0;\n    long array[];\n    if (x > y)\n   \
    \ {\n        a = -1;\n    }\n    else\n    {\n        array = new long[y - x +\
    \ 1];\n        foreach (num; iota(x, y+1))\n        {\n            if (num % 2\
    \ == 0)\n            {\n                array[i] = num;\n                i = i\
    \ + 1;\n            }\n        }\n        if (i > 0)\n        {\n            a\
    \ = array[$-1];\n        }\n        else\n        {\n            a = -1;\n   \
    \     }\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprr_o0sl7.d(19): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] array`

    /tmp/tmprr_o0sl7.d(27): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprr_o0sl7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    // your code goes here...\n    long result = -1;\n    for(int i\
    \ = x; i <= y; i++)\n    {\n        if(i % 2 == 0)\n        {\n            result\
    \ = i;\n        }\n    }\n    return result;\n}\n \n/*\nThis function takes two\
    \ positive numbers x and y and returns the\n    smallest odd integer number that\
    \ is in the range [x, y] inclusive. If \n    there's no such number, then the\
    \ function should return -1.\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4jap4jfn.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4jap4jfn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x % 2L == 0)\n    {\n        if (x == y)\n        {\n      \
    \      return x;\n        }\n        else\n        {\n            return max(x,\
    \ choose_num(x + 2L, y));\n        }\n    }\n    else\n    {\n        return choose_num(x\
    \ + 1L, y);\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpczen11pz.d(25): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpczen11pz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{ \n    if (x > y)\n        return -1;\n    return y - ((y & 1) ^ 1);\n\
    }\n/*\nThis function takes two positive numbers x and y and returns a tuple \n\
    \    containing two numbers chosen from the range [x, y] inclusive. The two \n\
    \    numbers should be different and their sum should be an even number. If\n\
    \    there's no such pair, then the function should return (-1, -1).\n    The\
    \ two numbers in the returned tuple should be in ascending order.\nunittest\n\
    {\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc6p5dffv.d(21): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc6p5dffv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\nunittest\n{\n   \
    \ alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n \
    \   assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6fg0wx9u.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6fg0wx9u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{ \n    static if (x > y)\n    {\n        writeln(\"x should be less than\
    \ y!\");\n        return -1;\n    }\n    else\n    {\n        static if (x % 2\
    \ == 0)\n        {\n            // If x is even, the chosen number is x\n    \
    \        return x;\n        }\n        else\n        {\n            // If x is\
    \ odd, the chosen number is the even number between x and y\n            return\
    \ choose_num(x + 1, y);\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv3yjhhfx.d(17): Error: variable `x` cannot be read at compile time

    /tmp/tmpv3yjhhfx.d(24): Error: variable `x` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv3yjhhfx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long gcd = 0L;\n    long lcm = 0L;\n    long result = 0L;\n    if(x\
    \ == y) {\n        if(x%2 == 0) {\n            return x;\n        } else {\n \
    \           return -1L;\n        }\n    }\n    if(x > y) {\n        gcd = x;\n\
    \        lcm = y;\n    } else {\n        gcd = y;\n        lcm = x;\n    }\n \
    \   while (x != 0 && y != 0) {\n        if (x > y) {\n            x %= y;\n  \
    \      } else {\n            y %= x;\n        }\n    }\n    gcd = x + y;\n   \
    \ lcm = (lcm * gcd) / gcd;\n    if(lcm % 2 == 0) {\n        return lcm;\n    }\
    \ else {\n        return -1L;\n    }\n}\n/*\nThis function takes a number n, and\
    \ returns a type-safe tuple in which the \n    first number is equal to n, and\
    \ the second one is equal to the sum of \n    its digits.\n    \n    For example:\n\
    \    >>> get_num_and_sum(314L)\n    (314L, 8L)\n    >>> get_num_and_sum(135L)\n\
    \    (135L, 9L)\n    \n*/\nTuple!(long, long) get_num_and_sum(long n) \n{\n  \
    \  long number = n;\n    long sum = 0L;\n    while(n != 0) {\n        sum += n\
    \ % 10;\n        n /= 10;\n    }\n    return tuple(number, sum);\n}\n/*\nThis\
    \ function takes a list of numbers, and returns the smallest number \n    in the\
    \ list.\n    \n    For example:\n    >>> get_min([5L, 3L, 9L, 2L, 4L])\n    2L\n\
    \    >>> get_min([1L, 2L, 1L, 2L, 1L])\n    1L\n    \n*/\nlong get_min(long[]\
    \ arr) \n{\n    long min = arr[0];\n   \nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkz_v27_l.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkz_v27_l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(x<=y) {\n        if(x%2==0) {\n            return x;\n      \
    \  } else {\n            return choose_num(x+1, y);\n        }\n    } else {\n\
    \        return -1;\n    }\n}\n/*\nImplement factorial for ints.  What happens\
    \ if you call it with a large argument?\n    >>> factorial(3)\n    6\n    >>>\
    \ factorial(5)\n    120\n    >>> factorial(20)\n    2432902008176640000\n*/\n\
    long factorial(long n) \n{\n    if(n==0) {\n        return 1;\n    } else {\n\
    \        return n*factorial(n-1);\n    }\n}\n/*\n    Implement a function that\
    \ takes two positive integers x and y and \n    returns the biggest perfect square\
    \ that is less than or equal to the\n    square of x and has a remainder of y\
    \ when divided by x.\n    \n    For example:\n    >>> choose_ps(8L, 1L)\n    4L\n\
    \    >>> choose_ps(10L, 3L)\n    9L\n    >>> choose_ps(1L, 1L)\n    -1L\n    >>>\
    \ choose_ps(2L, 0L)\n    -1L\n*/\nlong choose_ps(long x, long y) \n{\n    if(x==0)\
    \ {\n        return -1;\n    } else {\n        if(x*x%y==0) {\n            return\
    \ x*x;\n        } else {\n            return choose_ps(x-1, y);\n        }\n \
    \   }\n}\n/*\nImplement a function that takes an array of integers and a number\
    \ n and\n    returns an array of integers which is composed of the last n elements\n\
    \    of the input array.\n    \n    >>> a = [5, 9, -1, 4, 0, 8, -2, 6, 7, -3,\
    \ 3, 2]\n    >>> last_n(a, 5)\n    [-3, 3, 2, 5, 9]\n*/\ndarray<long> last_n(darray<long>\
    \ a, long n) \n{\n    if(n\nunittest\n{\n    alias candidate = choose_num;\n\n\
    \    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6zhyu8j_.d(80): Error: no identifier for declarator `darray`

    /tmp/tmp6zhyu8j_.d(80): Error: declaration expected, not `<`

    /tmp/tmp6zhyu8j_.d(87): Error: declaration expected, not `assert`

    /tmp/tmp6zhyu8j_.d(88): Error: declaration expected, not `assert`

    /tmp/tmp6zhyu8j_.d(89): Error: declaration expected, not `assert`

    /tmp/tmp6zhyu8j_.d(90): Error: declaration expected, not `assert`

    /tmp/tmp6zhyu8j_.d(91): Error: declaration expected, not `assert`

    /tmp/tmp6zhyu8j_.d(92): Error: declaration expected, not `assert`

    /tmp/tmp6zhyu8j_.d(93): Error: declaration expected, not `assert`

    /tmp/tmp6zhyu8j_.d(94): Error: declaration expected, not `assert`

    /tmp/tmp6zhyu8j_.d(95): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zhyu8j_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(x <= y)\n    {\n        if(x % 2 == 0)\n        {\n         \
    \   return x;\n        }\n        else\n        {\n            return choose_num(x\
    \ + 1, y);\n        }\n    }\n    else\n    {\n        return -1;\n    }\n}\n\
    unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L)\
    \ == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyr9oh3k7.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e05]

    ??:? void tmpyr9oh3k7.__unittest_L33_C1() [0x427a61]

    ??:? void tmpyr9oh3k7.__modtest() [0x427b88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430000]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fadd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]

    ??:? runModuleUnitTests [0x42b901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428254]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(x < 0L || y < 0L)\n    {\n\t    return -1L;\n    }\n    else\n\
    \    {\n\t    long num = (x < y) ? x : y;\n\t    long nummax = (x > y) ? x : y;\n\
    \t    while(num <= nummax)\n\t    {\n\t\t    if(num % 2L == 0L)\n\t\t    {\n\t\
    \t\t    return num;\n\t\t    }\n\t\t    num++;\n\t    }\n\t    return -1L;\n \
    \   }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppf8gf4wd.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e45]

    ??:? void tmppf8gf4wd.__unittest_L36_C1() [0x427aa1]

    ??:? void tmppf8gf4wd.__modtest() [0x427bc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430040]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]

    ??:? runModuleUnitTests [0x42b941]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428294]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    // Your code goes here.\n    //\n    if(x < 0 || y < 0)\n    {\n\
    \        return -1;\n    }\n    else if(x%2==0)\n    {\n        return x;\n  \
    \  }\n    else if(y%2==0)\n    {\n        return y;\n    }\n    else\n    {\n\
    \        return -1;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6rxqc6yp.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e25]

    ??:? void tmp6rxqc6yp.__unittest_L36_C1() [0x427a81]

    ??:? void tmp6rxqc6yp.__modtest() [0x427ba8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430020]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fafd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]

    ??:? runModuleUnitTests [0x42b921]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428274]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(x % 2 == 0 && y % 2 == 0)\n    {\n        return x > y ? x :\
    \ y;\n    }\n    else if(x % 2 == 0 && y % 2 != 0)\n    {\n        return x;\n\
    \    }\n    else if(x % 2 != 0 && y % 2 == 0)\n    {\n        return y;\n    }\n\
    \    else\n    {\n        return -1;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3ij94h8a.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmp3ij94h8a.__unittest_L34_C1() [0x427ad5]

    ??:? void tmp3ij94h8a.__modtest() [0x427bfc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]

    ??:? runModuleUnitTests [0x42b979]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    static assert(0 <= x && 0 <= y);\n    for (long i = y; i >= x; i\
    \ -= 2)\n    {\n        if (i % 2 == 0)\n        {\n            return i;\n  \
    \      }\n    }\n    return -1;\n}\n/*\nThis function takes a positive integer\
    \ n and returns the biggest number\n    with the same number of digits as n.\n\
    unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L)\
    \ == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcd7jpflc.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcd7jpflc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(y == -1)\n    {\n        return y;\n    }\n    else\n    {\n\
    \        long []evenArray = new long[y-x+1];\n        long count = 0;\n      \
    \  long newNum = x;\n        while(newNum <= y)\n        {\n            if(newNum\
    \ % 2 == 0)\n            {\n                evenArray[count] = newNum;\n     \
    \           count++;\n            }\n            newNum++;\n        }\n      \
    \  long max = evenArray[0];\n        for(int i = 0; i < evenArray.length; i++)\n\
    \        {\n            if(evenArray[i] > max)\n            {\n              \
    \  max = evenArray[i];\n            }\n        }\n        return max;\n    }\n\
    \    \n}\n/*\nThis function takes two positive numbers x and y and returns the\n\
    \    smallest odd integer number that is in the range [x, y] inclusive. If \n\
    \    there's no such number, then the function should return -1.\nunittest\n{\n\
    \    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmn6llvt2.d(47): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmn6llvt2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return\
    \ x;\n    return x + 1;\n}\n/*\nThis function takes two positive numbers x and\
    \ y and returns the\n    largest odd integer number that is in the range [x, y]\
    \ inclusive. If\n    there's no such number, then the function should return -1.\n\
    unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L)\
    \ == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4bog_erc.d(23): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4bog_erc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163952
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(x%2 == 1 && y%2 == 1)\n        return -1;\n    else if(x%2 ==\
    \ 1)\n        return y;\n    else if(y%2 == 1)\n        return y-1;\n    else\n\
    \        return y;\n}\n/*\n    This function takes a positive number n and returns\
    \ the\n    length of the longest sequence of consecutive integers\n    that have\
    \ the same number of divisors.\n    \n    For example:\n    >>> find_sequences(20L)\n\
    \    4L\n    >>> find_sequences(1L)\n    1L\n    >>> find_sequences(2L)\n    2L\n\
    \    >>> find_sequences(8L)\n    4L\n    >>> find_sequences(15L)\n    1L\n*/\n\
    long find_sequences(long n) \n{\n    long max_length = 1;\n    long curr_length\
    \ = 1;\n    long num_divisors;\n    long prev_num_divisors;\n    long i;\n   \
    \ num_divisors = prev_num_divisors = divisors(n).length;\n    for(i = n-1; i >\
    \ 0; i--)\n    {\n        num_divisors = divisors(i).length;\n        if(num_divisors\
    \ == prev_num_divisors)\n            curr_length++;\n        else\n        {\n\
    \            max_length = max(max_length, curr_length);\n            curr_length\
    \ = 1;\n        }\n        prev_num_divisors = num_divisors;\n    }\n    return\
    \ max_length;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0s7vwns8.d(50): Error: undefined identifier `divisors`

    /tmp/tmp0s7vwns8.d(53): Error: undefined identifier `divisors`

    /tmp/tmp0s7vwns8.d(58): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0s7vwns8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long answer = -1;\n    foreach(even; x..y+1)\n    {\n        if(even.isEven)\n\
    \        {\n            answer = even;\n        }\n    }\n    return answer;\n\
    }\n/*\nThis function takes a positive number x and returns true if x is a prime\n\
    \    number and false otherwise.\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp74z35ns6.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp74z35ns6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    import std.math;\n    import std.typecons;\n    if (x == y)\n  \
    \  {\n        if (x%2==0)\n        {\n            return x;\n        }\n     \
    \   else\n        {\n            return -1;\n        }\n    }\n    else if (x\
    \ > y)\n    {\n        return -1;\n    }\n    else\n    {\n        bool result\
    \ = false;\n        for (long i = y; i >= x; i--)\n        {\n            if (i%2==0)\n\
    \            {\n                result = true;\n                return i;\n  \
    \          }\n        }\n        if (result == false)\n        {\n           \
    \ return -1;\n        }\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\
    \n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkvugvsic.d(15): Error: function `tmpkvugvsic.choose_num` no `return
    exp;` or `assert(0);` at end of function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkvugvsic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    return cast(long) ((x % 2 == 0) ? x : x + 1);\n}\nunittest\n{\n\
    \    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n\
    \    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) ==\
    \ 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9r0vwjyo.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmp9r0vwjyo.__unittest_L19_C1() [0x427a51]

    ??:? void tmp9r0vwjyo.__modtest() [0x427b78]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if(x % 2 == 0)\n    {\n        for(long i = x; i <= y; i += 2)\n\
    \        {\n            if(i % 2 == 0)\n            {\n                return\
    \ i;\n            }\n        }\n    }\n    else\n    {\n        for(long i = x\
    \ + 1; i <= y; i += 2)\n        {\n            if(i % 2 == 0)\n            {\n\
    \                return i;\n            }\n        }\n    }\n    return -1;\n\
    }\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx9imz3qz.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmpx9imz3qz.__unittest_L39_C1() [0x427abd]

    ??:? void tmpx9imz3qz.__modtest() [0x427be4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x < 0)\n        return -1;\n    if (y < 0)\n        return -1;\n\
    \    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n\
    \    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate\
    \ = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L,\
    \ 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L,\
    \ 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_0_3ddrp.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e25]

    ??:? void tmp_0_3ddrp.__unittest_L28_C1() [0x427a7d]

    ??:? void tmp_0_3ddrp.__modtest() [0x427ba4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430020]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fafd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]

    ??:? runModuleUnitTests [0x42b921]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428274]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long z = -1;\n    for (long i = min(x, y); i <= max(x, y); i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            z = i;\n        }\n  \
    \  }\n    return z;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n   \
    \ assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n\
    \    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L)\
    \ == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L,\
    \ 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L,\
    \ 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph96zrz9_.d(18): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmph96zrz9_.d(18): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph96zrz9_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    if (x <= y)\n    {\n        long z = max(x, y);\n        if (z %\
    \ 2 == 0)\n        {\n            return z;\n        }\n        else\n       \
    \ {\n            return z - 1;\n        }\n    }\n    else\n    {\n        return\
    \ -1;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwdvl5igh.d(19): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwdvl5igh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163953
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
    \ numbers x and y and returns the\n    biggest even integer number that is in\
    \ the range [x, y] inclusive. If \n    there's no such number, then the function\
    \ should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n\
    \    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long\
    \ y) \n{\n    long result;\n    if (x > y) \n    {\n        result = -1;\n   \
    \ }\n    else \n    {\n        result = x + (x % 2);\n        if (result > y)\
    \ \n        {\n            result = -1;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
    \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
    \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
    \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
    \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1oggabsh.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e1d]

    ??:? void tmp1oggabsh.__unittest_L32_C1() [0x427a79]

    ??:? void tmp1oggabsh.__modtest() [0x427ba0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430018]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]

    ??:? runModuleUnitTests [0x42b919]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42826c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163953
